
Pojetremplacant1A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065d0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080067a8  080067a8  000077a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e8  080067e8  00008014  2**0
                  CONTENTS
  4 .ARM          00000008  080067e8  080067e8  000077e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067f0  080067f0  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067f0  080067f0  000077f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067f4  080067f4  000077f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080067f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000014  0800680c  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  0800680c  000081d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017259  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a63  00000000  00000000  0001f29d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00021d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000101a  00000000  00000000  00023198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f98b  00000000  00000000  000241b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d78  00000000  00000000  00043b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7be7  00000000  00000000  0005a8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013249c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005958  00000000  00000000  001324e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00137e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006790 	.word	0x08006790

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08006790 	.word	0x08006790

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <volume>:
{
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
	return ch;
}

int volume(int potar){
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	int nombrevaleurs=(int)(4096/128);
 8000510:	2320      	movs	r3, #32
 8000512:	60bb      	str	r3, [r7, #8]
	for(int multiple=0; multiple<128; multiple++){
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	e014      	b.n	8000544 <volume+0x3c>
		if(potar>nombrevaleurs*multiple-1 && potar < nombrevaleurs * multiple + nombrevaleurs){
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	68fa      	ldr	r2, [r7, #12]
 800051e:	fb02 f303 	mul.w	r3, r2, r3
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	429a      	cmp	r2, r3
 8000526:	db0a      	blt.n	800053e <volume+0x36>
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	fb03 f202 	mul.w	r2, r3, r2
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	4413      	add	r3, r2
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	429a      	cmp	r2, r3
 8000538:	da01      	bge.n	800053e <volume+0x36>
			return multiple;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	e006      	b.n	800054c <volume+0x44>
	for(int multiple=0; multiple<128; multiple++){
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	2b7f      	cmp	r3, #127	@ 0x7f
 8000548:	dde7      	ble.n	800051a <volume+0x12>
		}
	}
	return 64;
 800054a:	2340      	movs	r3, #64	@ 0x40
}
 800054c:	4618      	mov	r0, r3
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <Read_Potentiometer>:

int Read_Potentiometer(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 800055c:	4809      	ldr	r0, [pc, #36]	@ (8000584 <Read_Potentiometer+0x2c>)
 800055e:	f001 fa57 	bl	8001a10 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8000562:	f04f 31ff 	mov.w	r1, #4294967295
 8000566:	4807      	ldr	r0, [pc, #28]	@ (8000584 <Read_Potentiometer+0x2c>)
 8000568:	f001 fb0e 	bl	8001b88 <HAL_ADC_PollForConversion>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d104      	bne.n	800057c <Read_Potentiometer+0x24>
    {
        return HAL_ADC_GetValue(&hadc1);
 8000572:	4804      	ldr	r0, [pc, #16]	@ (8000584 <Read_Potentiometer+0x2c>)
 8000574:	f001 fbe0 	bl	8001d38 <HAL_ADC_GetValue>
 8000578:	4603      	mov	r3, r0
 800057a:	e000      	b.n	800057e <Read_Potentiometer+0x26>
    }
    return 0;
 800057c:	2300      	movs	r3, #0
}
 800057e:	4618      	mov	r0, r3
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000030 	.word	0x20000030

08000588 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
    int A = HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin);
 8000592:	2101      	movs	r1, #1
 8000594:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000598:	f002 fc6e 	bl	8002e78 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	60fb      	str	r3, [r7, #12]
    int B = HAL_GPIO_ReadPin(B_GPIO_Port, B_Pin);
 80005a0:	2102      	movs	r1, #2
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a6:	f002 fc67 	bl	8002e78 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	60bb      	str	r3, [r7, #8]
    if (GPIO_Pin == button_Pin)
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80005b4:	d105      	bne.n	80005c2 <HAL_GPIO_EXTI_Callback+0x3a>
    {
    	button=1-button;
 80005b6:	4b2d      	ldr	r3, [pc, #180]	@ (800066c <HAL_GPIO_EXTI_Callback+0xe4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f1c3 0301 	rsb	r3, r3, #1
 80005be:	4a2b      	ldr	r2, [pc, #172]	@ (800066c <HAL_GPIO_EXTI_Callback+0xe4>)
 80005c0:	6013      	str	r3, [r2, #0]
    }

    if (GPIO_Pin == A_Pin)
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d11e      	bne.n	8000606 <HAL_GPIO_EXTI_Callback+0x7e>
    {
        if (A == 1)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d108      	bne.n	80005e0 <HAL_GPIO_EXTI_Callback+0x58>
        {
            if (B == 0)
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d105      	bne.n	80005e0 <HAL_GPIO_EXTI_Callback+0x58>
            {
                Encoder += 1000;
 80005d4:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <HAL_GPIO_EXTI_Callback+0xe8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80005dc:	4a24      	ldr	r2, [pc, #144]	@ (8000670 <HAL_GPIO_EXTI_Callback+0xe8>)
 80005de:	6013      	str	r3, [r2, #0]
            }
        }
        if (Encoder > maxValue)
 80005e0:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <HAL_GPIO_EXTI_Callback+0xe8>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b23      	ldr	r3, [pc, #140]	@ (8000674 <HAL_GPIO_EXTI_Callback+0xec>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	dd04      	ble.n	80005f6 <HAL_GPIO_EXTI_Callback+0x6e>
                Encoder = maxValue;
 80005ec:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <HAL_GPIO_EXTI_Callback+0xec>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1f      	ldr	r2, [pc, #124]	@ (8000670 <HAL_GPIO_EXTI_Callback+0xe8>)
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	e028      	b.n	8000648 <HAL_GPIO_EXTI_Callback+0xc0>
            else if (Encoder < 0)
 80005f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <HAL_GPIO_EXTI_Callback+0xe8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	da24      	bge.n	8000648 <HAL_GPIO_EXTI_Callback+0xc0>
                Encoder = 0;
 80005fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	e020      	b.n	8000648 <HAL_GPIO_EXTI_Callback+0xc0>
    }
    else if (GPIO_Pin == B_Pin)
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	2b02      	cmp	r3, #2
 800060a:	d11d      	bne.n	8000648 <HAL_GPIO_EXTI_Callback+0xc0>
    {
        if (B == 1)
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d108      	bne.n	8000624 <HAL_GPIO_EXTI_Callback+0x9c>
        {
            if (A == 0)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d105      	bne.n	8000624 <HAL_GPIO_EXTI_Callback+0x9c>
            {
                Encoder += -1000;
 8000618:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <HAL_GPIO_EXTI_Callback+0xe8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000620:	4a13      	ldr	r2, [pc, #76]	@ (8000670 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000622:	6013      	str	r3, [r2, #0]
            }
        }
        if (Encoder > maxValue)
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <HAL_GPIO_EXTI_Callback+0xec>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	429a      	cmp	r2, r3
 800062e:	dd04      	ble.n	800063a <HAL_GPIO_EXTI_Callback+0xb2>
                Encoder = maxValue;
 8000630:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <HAL_GPIO_EXTI_Callback+0xec>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a0e      	ldr	r2, [pc, #56]	@ (8000670 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	e006      	b.n	8000648 <HAL_GPIO_EXTI_Callback+0xc0>
            else if (Encoder < 0)
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <HAL_GPIO_EXTI_Callback+0xe8>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	da02      	bge.n	8000648 <HAL_GPIO_EXTI_Callback+0xc0>
                Encoder = 0;
 8000642:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
    }

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,65535-Encoder );
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <HAL_GPIO_EXTI_Callback+0xe8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8000650:	33ff      	adds	r3, #255	@ 0xff
 8000652:	4a09      	ldr	r2, [pc, #36]	@ (8000678 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000654:	6812      	ldr	r2, [r2, #0]
 8000656:	6353      	str	r3, [r2, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,Encoder );
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <HAL_GPIO_EXTI_Callback+0xe8>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b07      	ldr	r3, [pc, #28]	@ (800067c <HAL_GPIO_EXTI_Callback+0xf4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000000 	.word	0x20000000
 8000670:	200001c8 	.word	0x200001c8
 8000674:	20000004 	.word	0x20000004
 8000678:	2000009c 	.word	0x2000009c
 800067c:	200000e8 	.word	0x200000e8

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f000 fd80 	bl	800118a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f8c7 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 facd 	bl	8000c2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000692:	f000 fa7f 	bl	8000b94 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000696:	f000 f9fb 	bl	8000a90 <MX_TIM3_Init>
  MX_ADC1_Init();
 800069a:	f000 f90b 	bl	80008b4 <MX_ADC1_Init>
  MX_TIM2_Init();
 800069e:	f000 f981 	bl	80009a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006a2:	2100      	movs	r1, #0
 80006a4:	4859      	ldr	r0, [pc, #356]	@ (800080c <main+0x18c>)
 80006a6:	f003 fcb9 	bl	800401c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006aa:	2100      	movs	r1, #0
 80006ac:	4858      	ldr	r0, [pc, #352]	@ (8000810 <main+0x190>)
 80006ae:	f003 fcb5 	bl	800401c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006b2:	2104      	movs	r1, #4
 80006b4:	4855      	ldr	r0, [pc, #340]	@ (800080c <main+0x18c>)
 80006b6:	f003 fcb1 	bl	800401c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int potar_value = Read_Potentiometer();
 80006ba:	f7ff ff4d 	bl	8000558 <Read_Potentiometer>
 80006be:	6078      	str	r0, [r7, #4]
	  int delay = volume(potar_value);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff ff21 	bl	8000508 <volume>
 80006c6:	6038      	str	r0, [r7, #0]
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,button*maxValue );
 80006c8:	4b52      	ldr	r3, [pc, #328]	@ (8000814 <main+0x194>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a52      	ldr	r2, [pc, #328]	@ (8000818 <main+0x198>)
 80006ce:	6812      	ldr	r2, [r2, #0]
 80006d0:	fb03 f202 	mul.w	r2, r3, r2
 80006d4:	4b4d      	ldr	r3, [pc, #308]	@ (800080c <main+0x18c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	639a      	str	r2, [r3, #56]	@ 0x38
	  if(button==1){
 80006da:	4b4e      	ldr	r3, [pc, #312]	@ (8000814 <main+0x194>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d147      	bne.n	8000772 <main+0xf2>
		  HAL_GPIO_WritePin(LED0_GPIO_Port,LED0_Pin,0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ec:	f002 fbdc 	bl	8002ea8 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fdba 	bl	800126c <HAL_Delay>
		  HAL_GPIO_WritePin(LED0_GPIO_Port,LED0_Pin,1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000702:	f002 fbd1 	bl	8002ea8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,0);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800070c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000710:	f002 fbca 	bl	8002ea8 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fda8 	bl	800126c <HAL_Delay>
		  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,1);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000726:	f002 fbbf 	bl	8002ea8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,0);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000730:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000734:	f002 fbb8 	bl	8002ea8 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fd96 	bl	800126c <HAL_Delay>
		  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,1);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074a:	f002 fbad 	bl	8002ea8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,0);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000754:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000758:	f002 fba6 	bl	8002ea8 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fd84 	bl	800126c <HAL_Delay>
		  HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,1);
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800076a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076e:	f002 fb9b 	bl	8002ea8 <HAL_GPIO_WritePin>
	  }
	  if(button==0){
 8000772:	4b28      	ldr	r3, [pc, #160]	@ (8000814 <main+0x194>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d19f      	bne.n	80006ba <main+0x3a>
		  HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,0);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000784:	f002 fb90 	bl	8002ea8 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fd6e 	bl	800126c <HAL_Delay>
		  HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,1);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079a:	f002 fb85 	bl	8002ea8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,0);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a8:	f002 fb7e 	bl	8002ea8 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fd5c 	bl	800126c <HAL_Delay>
		  HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,1);
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007be:	f002 fb73 	bl	8002ea8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007cc:	f002 fb6c 	bl	8002ea8 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fd4a 	bl	800126c <HAL_Delay>
		  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,1);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e2:	f002 fb61 	bl	8002ea8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED0_GPIO_Port,LED0_Pin,0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f0:	f002 fb5a 	bl	8002ea8 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fd38 	bl	800126c <HAL_Delay>
		  HAL_GPIO_WritePin(LED0_GPIO_Port,LED0_Pin,1);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000802:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000806:	f002 fb4f 	bl	8002ea8 <HAL_GPIO_WritePin>
  {
 800080a:	e756      	b.n	80006ba <main+0x3a>
 800080c:	200000e8 	.word	0x200000e8
 8000810:	2000009c 	.word	0x2000009c
 8000814:	20000000 	.word	0x20000000
 8000818:	20000004 	.word	0x20000004

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	@ 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0318 	add.w	r3, r7, #24
 8000826:	2238      	movs	r2, #56	@ 0x38
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f005 ff84 	bl	8006738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800083e:	2000      	movs	r0, #0
 8000840:	f002 fb62 	bl	8002f08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000844:	2302      	movs	r3, #2
 8000846:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000848:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084e:	2340      	movs	r3, #64	@ 0x40
 8000850:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000852:	2302      	movs	r3, #2
 8000854:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000856:	2302      	movs	r3, #2
 8000858:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800085a:	2304      	movs	r3, #4
 800085c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800085e:	2355      	movs	r3, #85	@ 0x55
 8000860:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000862:	2302      	movs	r3, #2
 8000864:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000866:	2302      	movs	r3, #2
 8000868:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800086a:	2302      	movs	r3, #2
 800086c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fbfc 	bl	8003070 <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800087e:	f000 fa6d 	bl	8000d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	230f      	movs	r3, #15
 8000884:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000886:	2303      	movs	r3, #3
 8000888:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2104      	movs	r1, #4
 800089a:	4618      	mov	r0, r3
 800089c:	f002 fefa 	bl	8003694 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008a6:	f000 fa59 	bl	8000d5c <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3750      	adds	r7, #80	@ 0x50
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	@ 0x30
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2220      	movs	r2, #32
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f005 ff33 	bl	8006738 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008d2:	4b32      	ldr	r3, [pc, #200]	@ (800099c <MX_ADC1_Init+0xe8>)
 80008d4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008da:	4b30      	ldr	r3, [pc, #192]	@ (800099c <MX_ADC1_Init+0xe8>)
 80008dc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008e2:	4b2e      	ldr	r3, [pc, #184]	@ (800099c <MX_ADC1_Init+0xe8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e8:	4b2c      	ldr	r3, [pc, #176]	@ (800099c <MX_ADC1_Init+0xe8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80008ee:	4b2b      	ldr	r3, [pc, #172]	@ (800099c <MX_ADC1_Init+0xe8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008f4:	4b29      	ldr	r3, [pc, #164]	@ (800099c <MX_ADC1_Init+0xe8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <MX_ADC1_Init+0xe8>)
 80008fc:	2204      	movs	r2, #4
 80008fe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000900:	4b26      	ldr	r3, [pc, #152]	@ (800099c <MX_ADC1_Init+0xe8>)
 8000902:	2200      	movs	r2, #0
 8000904:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000906:	4b25      	ldr	r3, [pc, #148]	@ (800099c <MX_ADC1_Init+0xe8>)
 8000908:	2200      	movs	r2, #0
 800090a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800090c:	4b23      	ldr	r3, [pc, #140]	@ (800099c <MX_ADC1_Init+0xe8>)
 800090e:	2201      	movs	r2, #1
 8000910:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000912:	4b22      	ldr	r3, [pc, #136]	@ (800099c <MX_ADC1_Init+0xe8>)
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <MX_ADC1_Init+0xe8>)
 800091c:	2200      	movs	r2, #0
 800091e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000920:	4b1e      	ldr	r3, [pc, #120]	@ (800099c <MX_ADC1_Init+0xe8>)
 8000922:	2200      	movs	r2, #0
 8000924:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000926:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <MX_ADC1_Init+0xe8>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800092e:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <MX_ADC1_Init+0xe8>)
 8000930:	2200      	movs	r2, #0
 8000932:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000934:	4b19      	ldr	r3, [pc, #100]	@ (800099c <MX_ADC1_Init+0xe8>)
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800093c:	4817      	ldr	r0, [pc, #92]	@ (800099c <MX_ADC1_Init+0xe8>)
 800093e:	f000 fee3 	bl	8001708 <HAL_ADC_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000948:	f000 fa08 	bl	8000d5c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000954:	4619      	mov	r1, r3
 8000956:	4811      	ldr	r0, [pc, #68]	@ (800099c <MX_ADC1_Init+0xe8>)
 8000958:	f001 fe98 	bl	800268c <HAL_ADCEx_MultiModeConfigChannel>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000962:	f000 f9fb 	bl	8000d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_ADC1_Init+0xec>)
 8000968:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800096a:	2306      	movs	r3, #6
 800096c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000972:	237f      	movs	r3, #127	@ 0x7f
 8000974:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000976:	2304      	movs	r3, #4
 8000978:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	@ (800099c <MX_ADC1_Init+0xe8>)
 8000984:	f001 f9e6 	bl	8001d54 <HAL_ADC_ConfigChannel>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800098e:	f000 f9e5 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	@ 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000030 	.word	0x20000030
 80009a0:	3ef08000 	.word	0x3ef08000

080009a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	@ 0x38
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c4:	463b      	mov	r3, r7
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
 80009d2:	615a      	str	r2, [r3, #20]
 80009d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 80009d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009de:	4b2b      	ldr	r3, [pc, #172]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b29      	ldr	r3, [pc, #164]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009ea:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 80009ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f2:	4b26      	ldr	r3, [pc, #152]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f8:	4b24      	ldr	r3, [pc, #144]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009fe:	4823      	ldr	r0, [pc, #140]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 8000a00:	f003 fa54 	bl	8003eac <HAL_TIM_Base_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a0a:	f000 f9a7 	bl	8000d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481c      	ldr	r0, [pc, #112]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 8000a1c:	f003 fe62 	bl	80046e4 <HAL_TIM_ConfigClockSource>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a26:	f000 f999 	bl	8000d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a2a:	4818      	ldr	r0, [pc, #96]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 8000a2c:	f003 fa95 	bl	8003f5a <HAL_TIM_PWM_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a36:	f000 f991 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4810      	ldr	r0, [pc, #64]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 8000a4a:	f004 fbcb 	bl	80051e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a54:	f000 f982 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a58:	2360      	movs	r3, #96	@ 0x60
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4807      	ldr	r0, [pc, #28]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 8000a70:	f003 fd24 	bl	80044bc <HAL_TIM_PWM_ConfigChannel>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000a7a:	f000 f96f 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a7e:	4803      	ldr	r0, [pc, #12]	@ (8000a8c <MX_TIM2_Init+0xe8>)
 8000a80:	f000 fa2a 	bl	8000ed8 <HAL_TIM_MspPostInit>

}
 8000a84:	bf00      	nop
 8000a86:	3738      	adds	r7, #56	@ 0x38
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000009c 	.word	0x2000009c

08000a90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	@ 0x38
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
 8000abe:	615a      	str	r2, [r3, #20]
 8000ac0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ac2:	4b32      	ldr	r3, [pc, #200]	@ (8000b8c <MX_TIM3_Init+0xfc>)
 8000ac4:	4a32      	ldr	r2, [pc, #200]	@ (8000b90 <MX_TIM3_Init+0x100>)
 8000ac6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ac8:	4b30      	ldr	r3, [pc, #192]	@ (8000b8c <MX_TIM3_Init+0xfc>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	4b2f      	ldr	r3, [pc, #188]	@ (8000b8c <MX_TIM3_Init+0xfc>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b8c <MX_TIM3_Init+0xfc>)
 8000ad6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ada:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b2b      	ldr	r3, [pc, #172]	@ (8000b8c <MX_TIM3_Init+0xfc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b8c <MX_TIM3_Init+0xfc>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ae8:	4828      	ldr	r0, [pc, #160]	@ (8000b8c <MX_TIM3_Init+0xfc>)
 8000aea:	f003 f9df 	bl	8003eac <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000af4:	f000 f932 	bl	8000d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000afe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4821      	ldr	r0, [pc, #132]	@ (8000b8c <MX_TIM3_Init+0xfc>)
 8000b06:	f003 fded 	bl	80046e4 <HAL_TIM_ConfigClockSource>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000b10:	f000 f924 	bl	8000d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b14:	481d      	ldr	r0, [pc, #116]	@ (8000b8c <MX_TIM3_Init+0xfc>)
 8000b16:	f003 fa20 	bl	8003f5a <HAL_TIM_PWM_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b20:	f000 f91c 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	4816      	ldr	r0, [pc, #88]	@ (8000b8c <MX_TIM3_Init+0xfc>)
 8000b34:	f004 fb56 	bl	80051e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b3e:	f000 f90d 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b42:	2360      	movs	r3, #96	@ 0x60
 8000b44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b52:	463b      	mov	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	4619      	mov	r1, r3
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <MX_TIM3_Init+0xfc>)
 8000b5a:	f003 fcaf 	bl	80044bc <HAL_TIM_PWM_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000b64:	f000 f8fa 	bl	8000d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b68:	463b      	mov	r3, r7
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4807      	ldr	r0, [pc, #28]	@ (8000b8c <MX_TIM3_Init+0xfc>)
 8000b70:	f003 fca4 	bl	80044bc <HAL_TIM_PWM_ConfigChannel>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000b7a:	f000 f8ef 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b7e:	4803      	ldr	r0, [pc, #12]	@ (8000b8c <MX_TIM3_Init+0xfc>)
 8000b80:	f000 f9aa 	bl	8000ed8 <HAL_TIM_MspPostInit>

}
 8000b84:	bf00      	nop
 8000b86:	3738      	adds	r7, #56	@ 0x38
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200000e8 	.word	0x200000e8
 8000b90:	40000400 	.word	0x40000400

08000b94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b98:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <MX_USART2_UART_Init+0x90>)
 8000b9a:	4a23      	ldr	r2, [pc, #140]	@ (8000c28 <MX_USART2_UART_Init+0x94>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9e:	4b21      	ldr	r3, [pc, #132]	@ (8000c24 <MX_USART2_UART_Init+0x90>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c24 <MX_USART2_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <MX_USART2_UART_Init+0x90>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <MX_USART2_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <MX_USART2_UART_Init+0x90>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <MX_USART2_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	@ (8000c24 <MX_USART2_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bca:	4b16      	ldr	r3, [pc, #88]	@ (8000c24 <MX_USART2_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <MX_USART2_UART_Init+0x90>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <MX_USART2_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bdc:	4811      	ldr	r0, [pc, #68]	@ (8000c24 <MX_USART2_UART_Init+0x90>)
 8000bde:	f004 fbc9 	bl	8005374 <HAL_UART_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000be8:	f000 f8b8 	bl	8000d5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bec:	2100      	movs	r1, #0
 8000bee:	480d      	ldr	r0, [pc, #52]	@ (8000c24 <MX_USART2_UART_Init+0x90>)
 8000bf0:	f005 fcd7 	bl	80065a2 <HAL_UARTEx_SetTxFifoThreshold>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bfa:	f000 f8af 	bl	8000d5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4808      	ldr	r0, [pc, #32]	@ (8000c24 <MX_USART2_UART_Init+0x90>)
 8000c02:	f005 fd0c 	bl	800661e <HAL_UARTEx_SetRxFifoThreshold>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c0c:	f000 f8a6 	bl	8000d5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <MX_USART2_UART_Init+0x90>)
 8000c12:	f005 fc8d 	bl	8006530 <HAL_UARTEx_DisableFifoMode>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c1c:	f000 f89e 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000134 	.word	0x20000134
 8000c28:	40004400 	.word	0x40004400

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c42:	4b44      	ldr	r3, [pc, #272]	@ (8000d54 <MX_GPIO_Init+0x128>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	4a43      	ldr	r2, [pc, #268]	@ (8000d54 <MX_GPIO_Init+0x128>)
 8000c48:	f043 0320 	orr.w	r3, r3, #32
 8000c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4e:	4b41      	ldr	r3, [pc, #260]	@ (8000d54 <MX_GPIO_Init+0x128>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	f003 0320 	and.w	r3, r3, #32
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d54 <MX_GPIO_Init+0x128>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d54 <MX_GPIO_Init+0x128>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c66:	4b3b      	ldr	r3, [pc, #236]	@ (8000d54 <MX_GPIO_Init+0x128>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b38      	ldr	r3, [pc, #224]	@ (8000d54 <MX_GPIO_Init+0x128>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c76:	4a37      	ldr	r2, [pc, #220]	@ (8000d54 <MX_GPIO_Init+0x128>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c7e:	4b35      	ldr	r3, [pc, #212]	@ (8000d54 <MX_GPIO_Init+0x128>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c94:	f002 f908 	bl	8002ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c9e:	482e      	ldr	r0, [pc, #184]	@ (8000d58 <MX_GPIO_Init+0x12c>)
 8000ca0:	f002 f902 	bl	8002ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A_Pin B_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cbc:	f001 ff5a 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000cc0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cdc:	f001 ff4a 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000ce0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cec:	2302      	movs	r3, #2
 8000cee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cfa:	f001 ff3b 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	4619      	mov	r1, r3
 8000d16:	4810      	ldr	r0, [pc, #64]	@ (8000d58 <MX_GPIO_Init+0x12c>)
 8000d18:	f001 ff2c 	bl	8002b74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2006      	movs	r0, #6
 8000d22:	f001 fe32 	bl	800298a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d26:	2006      	movs	r0, #6
 8000d28:	f001 fe49 	bl	80029be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2007      	movs	r0, #7
 8000d32:	f001 fe2a 	bl	800298a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d36:	2007      	movs	r0, #7
 8000d38:	f001 fe41 	bl	80029be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2028      	movs	r0, #40	@ 0x28
 8000d42:	f001 fe22 	bl	800298a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d46:	2028      	movs	r0, #40	@ 0x28
 8000d48:	f001 fe39 	bl	80029be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d4c:	bf00      	nop
 8000d4e:	3720      	adds	r7, #32
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48000400 	.word	0x48000400

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
}
 8000d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <Error_Handler+0x8>

08000d68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <HAL_MspInit+0x44>)
 8000d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d72:	4a0e      	ldr	r2, [pc, #56]	@ (8000dac <HAL_MspInit+0x44>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <HAL_MspInit+0x44>)
 8000d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <HAL_MspInit+0x44>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8a:	4a08      	ldr	r2, [pc, #32]	@ (8000dac <HAL_MspInit+0x44>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_MspInit+0x44>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d9e:	f002 f957 	bl	8003050 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b09a      	sub	sp, #104	@ 0x68
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	2244      	movs	r2, #68	@ 0x44
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f005 fcb1 	bl	8006738 <memset>
  if(hadc->Instance==ADC1)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dde:	d133      	bne.n	8000e48 <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000de0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000de4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000de6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4618      	mov	r0, r3
 8000df2:	f002 fe6b 	bl	8003acc <HAL_RCCEx_PeriphCLKConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000dfc:	f7ff ffae 	bl	8000d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <HAL_ADC_MspInit+0xa0>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e04:	4a12      	ldr	r2, [pc, #72]	@ (8000e50 <HAL_ADC_MspInit+0xa0>)
 8000e06:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0c:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <HAL_ADC_MspInit+0xa0>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e18:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <HAL_ADC_MspInit+0xa0>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e50 <HAL_ADC_MspInit+0xa0>)
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <HAL_ADC_MspInit+0xa0>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e30:	2301      	movs	r3, #1
 8000e32:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e34:	2303      	movs	r3, #3
 8000e36:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e40:	4619      	mov	r1, r3
 8000e42:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <HAL_ADC_MspInit+0xa4>)
 8000e44:	f001 fe96 	bl	8002b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3768      	adds	r7, #104	@ 0x68
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48000400 	.word	0x48000400

08000e58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e68:	d114      	bne.n	8000e94 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x78>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6e:	4a18      	ldr	r2, [pc, #96]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x78>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e76:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x78>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	201c      	movs	r0, #28
 8000e88:	f001 fd7f 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e8c:	201c      	movs	r0, #28
 8000e8e:	f001 fd96 	bl	80029be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e92:	e018      	b.n	8000ec6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x7c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d113      	bne.n	8000ec6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x78>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x78>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x78>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	201d      	movs	r0, #29
 8000ebc:	f001 fd65 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ec0:	201d      	movs	r0, #29
 8000ec2:	f001 fd7c 	bl	80029be <HAL_NVIC_EnableIRQ>
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40000400 	.word	0x40000400

08000ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ef8:	d11d      	bne.n	8000f36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <HAL_TIM_MspPostInit+0xac>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	4a21      	ldr	r2, [pc, #132]	@ (8000f84 <HAL_TIM_MspPostInit+0xac>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f06:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <HAL_TIM_MspPostInit+0xac>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f12:	2320      	movs	r3, #32
 8000f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f22:	2301      	movs	r3, #1
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f30:	f001 fe20 	bl	8002b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f34:	e021      	b.n	8000f7a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a13      	ldr	r2, [pc, #76]	@ (8000f88 <HAL_TIM_MspPostInit+0xb0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d11c      	bne.n	8000f7a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <HAL_TIM_MspPostInit+0xac>)
 8000f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f44:	4a0f      	ldr	r2, [pc, #60]	@ (8000f84 <HAL_TIM_MspPostInit+0xac>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <HAL_TIM_MspPostInit+0xac>)
 8000f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f58:	23c0      	movs	r3, #192	@ 0xc0
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f64:	2301      	movs	r3, #1
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f76:	f001 fdfd 	bl	8002b74 <HAL_GPIO_Init>
}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	@ 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40000400 	.word	0x40000400

08000f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b09a      	sub	sp, #104	@ 0x68
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	2244      	movs	r2, #68	@ 0x44
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f005 fbc3 	bl	8006738 <memset>
  if(huart->Instance==USART2)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a23      	ldr	r2, [pc, #140]	@ (8001044 <HAL_UART_MspInit+0xb8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d13e      	bne.n	800103a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 fd7f 	bl	8003acc <HAL_RCCEx_PeriphCLKConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fd4:	f7ff fec2 	bl	8000d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <HAL_UART_MspInit+0xbc>)
 8000fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8001048 <HAL_UART_MspInit+0xbc>)
 8000fde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe4:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <HAL_UART_MspInit+0xbc>)
 8000fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <HAL_UART_MspInit+0xbc>)
 8000ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff4:	4a14      	ldr	r2, [pc, #80]	@ (8001048 <HAL_UART_MspInit+0xbc>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_UART_MspInit+0xbc>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001008:	230c      	movs	r3, #12
 800100a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001018:	2307      	movs	r3, #7
 800101a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001026:	f001 fda5 	bl	8002b74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2026      	movs	r0, #38	@ 0x26
 8001030:	f001 fcab 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001034:	2026      	movs	r0, #38	@ 0x26
 8001036:	f001 fcc2 	bl	80029be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3768      	adds	r7, #104	@ 0x68
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40004400 	.word	0x40004400
 8001048:	40021000 	.word	0x40021000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <NMI_Handler+0x4>

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MemManage_Handler+0x4>

08001064 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <UsageFault_Handler+0x4>

08001074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a2:	f000 f8c5 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}

080010aa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A_Pin);
 80010ae:	2001      	movs	r0, #1
 80010b0:	f001 ff12 	bl	8002ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_Pin);
 80010bc:	2002      	movs	r0, #2
 80010be:	f001 ff0b 	bl	8002ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010cc:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <TIM2_IRQHandler+0x10>)
 80010ce:	f003 f8a5 	bl	800421c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000009c 	.word	0x2000009c

080010dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010e0:	4802      	ldr	r0, [pc, #8]	@ (80010ec <TIM3_IRQHandler+0x10>)
 80010e2:	f003 f89b 	bl	800421c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200000e8 	.word	0x200000e8

080010f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010f4:	4802      	ldr	r0, [pc, #8]	@ (8001100 <USART2_IRQHandler+0x10>)
 80010f6:	f004 f98d 	bl	8005414 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000134 	.word	0x20000134

08001104 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8001108:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800110c:	f001 fee4 	bl	8002ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <SystemInit+0x20>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <SystemInit+0x20>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001138:	480d      	ldr	r0, [pc, #52]	@ (8001170 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800113a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800113c:	f7ff ffea 	bl	8001114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <LoopForever+0x6>)
  ldr r1, =_edata
 8001142:	490d      	ldr	r1, [pc, #52]	@ (8001178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <LoopForever+0xe>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001158:	4c0a      	ldr	r4, [pc, #40]	@ (8001184 <LoopForever+0x16>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001166:	f005 faef 	bl	8006748 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800116a:	f7ff fa89 	bl	8000680 <main>

0800116e <LoopForever>:

LoopForever:
    b LoopForever
 800116e:	e7fe      	b.n	800116e <LoopForever>
  ldr   r0, =_estack
 8001170:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800117c:	080067f8 	.word	0x080067f8
  ldr r2, =_sbss
 8001180:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001184:	200001d0 	.word	0x200001d0

08001188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_2_IRQHandler>

0800118a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f001 fbed 	bl	8002974 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f80e 	bl	80011bc <HAL_InitTick>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d002      	beq.n	80011ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	71fb      	strb	r3, [r7, #7]
 80011aa:	e001      	b.n	80011b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ac:	f7ff fddc 	bl	8000d68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011b0:	79fb      	ldrb	r3, [r7, #7]

}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011c8:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <HAL_InitTick+0x68>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d022      	beq.n	8001216 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011d0:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <HAL_InitTick+0x6c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <HAL_InitTick+0x68>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80011e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 fbf8 	bl	80029da <HAL_SYSTICK_Config>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10f      	bne.n	8001210 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b0f      	cmp	r3, #15
 80011f4:	d809      	bhi.n	800120a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f6:	2200      	movs	r2, #0
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	f04f 30ff 	mov.w	r0, #4294967295
 80011fe:	f001 fbc4 	bl	800298a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <HAL_InitTick+0x70>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	e007      	b.n	800121a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e004      	b.n	800121a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e001      	b.n	800121a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800121a:	7bfb      	ldrb	r3, [r7, #15]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000010 	.word	0x20000010
 8001228:	20000008 	.word	0x20000008
 800122c:	2000000c 	.word	0x2000000c

08001230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <HAL_IncTick+0x1c>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <HAL_IncTick+0x20>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4413      	add	r3, r2
 800123e:	4a03      	ldr	r2, [pc, #12]	@ (800124c <HAL_IncTick+0x1c>)
 8001240:	6013      	str	r3, [r2, #0]
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	200001cc 	.word	0x200001cc
 8001250:	20000010 	.word	0x20000010

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	@ (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	200001cc 	.word	0x200001cc

0800126c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff ffee 	bl	8001254 <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001284:	d004      	beq.n	8001290 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <HAL_Delay+0x40>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	4413      	add	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001290:	bf00      	nop
 8001292:	f7ff ffdf 	bl	8001254 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d8f7      	bhi.n	8001292 <HAL_Delay+0x26>
  {
  }
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000010 	.word	0x20000010

080012b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	609a      	str	r2, [r3, #8]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	609a      	str	r2, [r3, #8]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3360      	adds	r3, #96	@ 0x60
 800132a:	461a      	mov	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b08      	ldr	r3, [pc, #32]	@ (800135c <LL_ADC_SetOffset+0x44>)
 800133a:	4013      	ands	r3, r2
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	4313      	orrs	r3, r2
 8001348:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001350:	bf00      	nop
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	03fff000 	.word	0x03fff000

08001360 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3360      	adds	r3, #96	@ 0x60
 800136e:	461a      	mov	r2, r3
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3360      	adds	r3, #96	@ 0x60
 800139c:	461a      	mov	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	431a      	orrs	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013b6:	bf00      	nop
 80013b8:	371c      	adds	r7, #28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b087      	sub	sp, #28
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3360      	adds	r3, #96	@ 0x60
 80013d2:	461a      	mov	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80013ec:	bf00      	nop
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3360      	adds	r3, #96	@ 0x60
 8001408:	461a      	mov	r2, r3
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	431a      	orrs	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	615a      	str	r2, [r3, #20]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800147a:	b480      	push	{r7}
 800147c:	b087      	sub	sp, #28
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	3330      	adds	r3, #48	@ 0x30
 800148a:	461a      	mov	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	4413      	add	r3, r2
 8001498:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	211f      	movs	r1, #31
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	401a      	ands	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	0e9b      	lsrs	r3, r3, #26
 80014b2:	f003 011f 	and.w	r1, r3, #31
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	f003 031f 	and.w	r3, r3, #31
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	431a      	orrs	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014c6:	bf00      	nop
 80014c8:	371c      	adds	r7, #28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b087      	sub	sp, #28
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3314      	adds	r3, #20
 80014e2:	461a      	mov	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	0e5b      	lsrs	r3, r3, #25
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	4413      	add	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	0d1b      	lsrs	r3, r3, #20
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	2107      	movs	r1, #7
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	401a      	ands	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	0d1b      	lsrs	r3, r3, #20
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	431a      	orrs	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800151c:	bf00      	nop
 800151e:	371c      	adds	r7, #28
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001540:	43db      	mvns	r3, r3
 8001542:	401a      	ands	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0318 	and.w	r3, r3, #24
 800154a:	4908      	ldr	r1, [pc, #32]	@ (800156c <LL_ADC_SetChannelSingleDiff+0x44>)
 800154c:	40d9      	lsrs	r1, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	400b      	ands	r3, r1
 8001552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001556:	431a      	orrs	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	0007ffff 	.word	0x0007ffff

08001570 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 031f 	and.w	r3, r3, #31
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80015b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6093      	str	r3, [r2, #8]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015e0:	d101      	bne.n	80015e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001604:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001608:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001630:	d101      	bne.n	8001636 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001654:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001658:	f043 0201 	orr.w	r2, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <LL_ADC_IsEnabled+0x18>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <LL_ADC_IsEnabled+0x1a>
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016a2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016a6:	f043 0204 	orr.w	r2, r3, #4
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d101      	bne.n	80016d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d101      	bne.n	80016f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b089      	sub	sp, #36	@ 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e167      	b.n	80019f2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172c:	2b00      	cmp	r3, #0
 800172e:	d109      	bne.n	8001744 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff fb3d 	bl	8000db0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff3f 	bl	80015cc <LL_ADC_IsDeepPowerDownEnabled>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d004      	beq.n	800175e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff25 	bl	80015a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ff5a 	bl	800161c <LL_ADC_IsInternalRegulatorEnabled>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d115      	bne.n	800179a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff3e 	bl	80015f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001778:	4ba0      	ldr	r3, [pc, #640]	@ (80019fc <HAL_ADC_Init+0x2f4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	099b      	lsrs	r3, r3, #6
 800177e:	4aa0      	ldr	r2, [pc, #640]	@ (8001a00 <HAL_ADC_Init+0x2f8>)
 8001780:	fba2 2303 	umull	r2, r3, r2, r3
 8001784:	099b      	lsrs	r3, r3, #6
 8001786:	3301      	adds	r3, #1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800178c:	e002      	b.n	8001794 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3b01      	subs	r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f9      	bne.n	800178e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff3c 	bl	800161c <LL_ADC_IsInternalRegulatorEnabled>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10d      	bne.n	80017c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ae:	f043 0210 	orr.w	r2, r3, #16
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ba:	f043 0201 	orr.w	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff75 	bl	80016ba <LL_ADC_REG_IsConversionOngoing>
 80017d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 8100 	bne.w	80019e0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 80fc 	bne.w	80019e0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80017f0:	f043 0202 	orr.w	r2, r3, #2
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff35 	bl	800166c <LL_ADC_IsEnabled>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d111      	bne.n	800182c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001808:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800180c:	f7ff ff2e 	bl	800166c <LL_ADC_IsEnabled>
 8001810:	4604      	mov	r4, r0
 8001812:	487c      	ldr	r0, [pc, #496]	@ (8001a04 <HAL_ADC_Init+0x2fc>)
 8001814:	f7ff ff2a 	bl	800166c <LL_ADC_IsEnabled>
 8001818:	4603      	mov	r3, r0
 800181a:	4323      	orrs	r3, r4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d105      	bne.n	800182c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	4619      	mov	r1, r3
 8001826:	4878      	ldr	r0, [pc, #480]	@ (8001a08 <HAL_ADC_Init+0x300>)
 8001828:	f7ff fd42 	bl	80012b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7f5b      	ldrb	r3, [r3, #29]
 8001830:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001836:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800183c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001842:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800184a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001856:	2b01      	cmp	r3, #1
 8001858:	d106      	bne.n	8001868 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185e:	3b01      	subs	r3, #1
 8001860:	045b      	lsls	r3, r3, #17
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186c:	2b00      	cmp	r3, #0
 800186e:	d009      	beq.n	8001884 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001874:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	4b60      	ldr	r3, [pc, #384]	@ (8001a0c <HAL_ADC_Init+0x304>)
 800188c:	4013      	ands	r3, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	69b9      	ldr	r1, [r7, #24]
 8001894:	430b      	orrs	r3, r1
 8001896:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ff14 	bl	80016e0 <LL_ADC_INJ_IsConversionOngoing>
 80018b8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d16d      	bne.n	800199c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d16a      	bne.n	800199c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018ca:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80018d2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018e2:	f023 0302 	bic.w	r3, r3, #2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	69b9      	ldr	r1, [r7, #24]
 80018ec:	430b      	orrs	r3, r1
 80018ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d017      	beq.n	8001928 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	691a      	ldr	r2, [r3, #16]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001906:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001910:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001914:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6911      	ldr	r1, [r2, #16]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	430b      	orrs	r3, r1
 8001922:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001926:	e013      	b.n	8001950 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001936:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001948:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800194c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001956:	2b01      	cmp	r3, #1
 8001958:	d118      	bne.n	800198c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001964:	f023 0304 	bic.w	r3, r3, #4
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001970:	4311      	orrs	r1, r2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001976:	4311      	orrs	r1, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800197c:	430a      	orrs	r2, r1
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 0201 	orr.w	r2, r2, #1
 8001988:	611a      	str	r2, [r3, #16]
 800198a:	e007      	b.n	800199c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691a      	ldr	r2, [r3, #16]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d10c      	bne.n	80019be <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f023 010f 	bic.w	r1, r3, #15
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	1e5a      	subs	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80019bc:	e007      	b.n	80019ce <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 020f 	bic.w	r2, r2, #15
 80019cc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d2:	f023 0303 	bic.w	r3, r3, #3
 80019d6:	f043 0201 	orr.w	r2, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019de:	e007      	b.n	80019f0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e4:	f043 0210 	orr.w	r2, r3, #16
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	@ 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd90      	pop	{r4, r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000008 	.word	0x20000008
 8001a00:	053e2d63 	.word	0x053e2d63
 8001a04:	50000100 	.word	0x50000100
 8001a08:	50000300 	.word	0x50000300
 8001a0c:	fff04007 	.word	0xfff04007

08001a10 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a18:	4859      	ldr	r0, [pc, #356]	@ (8001b80 <HAL_ADC_Start+0x170>)
 8001a1a:	f7ff fda9 	bl	8001570 <LL_ADC_GetMultimode>
 8001a1e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fe48 	bl	80016ba <LL_ADC_REG_IsConversionOngoing>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f040 809f 	bne.w	8001b70 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_ADC_Start+0x30>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e09a      	b.n	8001b76 <HAL_ADC_Start+0x166>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fd73 	bl	8002534 <ADC_Enable>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f040 8086 	bne.w	8001b66 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a5e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a62:	f023 0301 	bic.w	r3, r3, #1
 8001a66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a44      	ldr	r2, [pc, #272]	@ (8001b84 <HAL_ADC_Start+0x174>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d002      	beq.n	8001a7e <HAL_ADC_Start+0x6e>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	e001      	b.n	8001a82 <HAL_ADC_Start+0x72>
 8001a7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d002      	beq.n	8001a90 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001aa8:	d106      	bne.n	8001ab8 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aae:	f023 0206 	bic.w	r2, r3, #6
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	661a      	str	r2, [r3, #96]	@ 0x60
 8001ab6:	e002      	b.n	8001abe <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	221c      	movs	r2, #28
 8001ac4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8001b84 <HAL_ADC_Start+0x174>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d002      	beq.n	8001ade <HAL_ADC_Start+0xce>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	e001      	b.n	8001ae2 <HAL_ADC_Start+0xd2>
 8001ade:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d008      	beq.n	8001afc <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d002      	beq.n	8001afc <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	2b09      	cmp	r3, #9
 8001afa:	d114      	bne.n	8001b26 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b12:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fdb7 	bl	8001692 <LL_ADC_REG_StartConversion>
 8001b24:	e026      	b.n	8001b74 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a13      	ldr	r2, [pc, #76]	@ (8001b84 <HAL_ADC_Start+0x174>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d002      	beq.n	8001b42 <HAL_ADC_Start+0x132>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	e001      	b.n	8001b46 <HAL_ADC_Start+0x136>
 8001b42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b46:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00f      	beq.n	8001b74 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b58:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b5c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b64:	e006      	b.n	8001b74 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001b6e:	e001      	b.n	8001b74 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b70:	2302      	movs	r3, #2
 8001b72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	50000300 	.word	0x50000300
 8001b84:	50000100 	.word	0x50000100

08001b88 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b92:	4867      	ldr	r0, [pc, #412]	@ (8001d30 <HAL_ADC_PollForConversion+0x1a8>)
 8001b94:	f7ff fcec 	bl	8001570 <LL_ADC_GetMultimode>
 8001b98:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d102      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e02a      	b.n	8001bfe <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2b05      	cmp	r3, #5
 8001bb2:	d002      	beq.n	8001bba <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b09      	cmp	r3, #9
 8001bb8:	d111      	bne.n	8001bde <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d007      	beq.n	8001bd8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bcc:	f043 0220 	orr.w	r2, r3, #32
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0a6      	b.n	8001d26 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001bd8:	2304      	movs	r3, #4
 8001bda:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001bdc:	e00f      	b.n	8001bfe <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001bde:	4854      	ldr	r0, [pc, #336]	@ (8001d30 <HAL_ADC_PollForConversion+0x1a8>)
 8001be0:	f7ff fcd4 	bl	800158c <LL_ADC_GetMultiDMATransfer>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d007      	beq.n	8001bfa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bee:	f043 0220 	orr.w	r2, r3, #32
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e095      	b.n	8001d26 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bfe:	f7ff fb29 	bl	8001254 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c04:	e021      	b.n	8001c4a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d01d      	beq.n	8001c4a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c0e:	f7ff fb21 	bl	8001254 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d302      	bcc.n	8001c24 <HAL_ADC_PollForConversion+0x9c>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d112      	bne.n	8001c4a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10b      	bne.n	8001c4a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c36:	f043 0204 	orr.w	r2, r3, #4
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e06d      	b.n	8001d26 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0d6      	beq.n	8001c06 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fbf3 	bl	8001454 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d01c      	beq.n	8001cae <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7f5b      	ldrb	r3, [r3, #29]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d118      	bne.n	8001cae <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d111      	bne.n	8001cae <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d105      	bne.n	8001cae <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca6:	f043 0201 	orr.w	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a20      	ldr	r2, [pc, #128]	@ (8001d34 <HAL_ADC_PollForConversion+0x1ac>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d002      	beq.n	8001cbe <HAL_ADC_PollForConversion+0x136>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	e001      	b.n	8001cc2 <HAL_ADC_PollForConversion+0x13a>
 8001cbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d008      	beq.n	8001cdc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2b05      	cmp	r3, #5
 8001cd4:	d002      	beq.n	8001cdc <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	d104      	bne.n	8001ce6 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	e00d      	b.n	8001d02 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a12      	ldr	r2, [pc, #72]	@ (8001d34 <HAL_ADC_PollForConversion+0x1ac>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d002      	beq.n	8001cf6 <HAL_ADC_PollForConversion+0x16e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	e001      	b.n	8001cfa <HAL_ADC_PollForConversion+0x172>
 8001cf6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001cfa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d104      	bne.n	8001d12 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	e008      	b.n	8001d24 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d103      	bne.n	8001d24 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	220c      	movs	r2, #12
 8001d22:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3720      	adds	r7, #32
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	50000300 	.word	0x50000300
 8001d34:	50000100 	.word	0x50000100

08001d38 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b0b6      	sub	sp, #216	@ 0xd8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x22>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e3c8      	b.n	8002508 <HAL_ADC_ConfigChannel+0x7b4>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fc99 	bl	80016ba <LL_ADC_REG_IsConversionOngoing>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f040 83ad 	bne.w	80024ea <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f7ff fb6c 	bl	800147a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fc87 	bl	80016ba <LL_ADC_REG_IsConversionOngoing>
 8001dac:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fc93 	bl	80016e0 <LL_ADC_INJ_IsConversionOngoing>
 8001dba:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dbe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 81d9 	bne.w	800217a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f040 81d4 	bne.w	800217a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001dda:	d10f      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2200      	movs	r2, #0
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7ff fb73 	bl	80014d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fb1a 	bl	800142e <LL_ADC_SetSamplingTimeCommonConfig>
 8001dfa:	e00e      	b.n	8001e1a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6819      	ldr	r1, [r3, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f7ff fb62 	bl	80014d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fb0a 	bl	800142e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d022      	beq.n	8001e82 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6919      	ldr	r1, [r3, #16]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e4c:	f7ff fa64 	bl	8001318 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6919      	ldr	r1, [r3, #16]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f7ff fab0 	bl	80013c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d102      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x124>
 8001e72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e76:	e000      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x126>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f7ff fabc 	bl	80013f8 <LL_ADC_SetOffsetSaturation>
 8001e80:	e17b      	b.n	800217a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fa69 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10a      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x15a>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fa5e 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	0e9b      	lsrs	r3, r3, #26
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	e01e      	b.n	8001eec <HAL_ADC_ConfigChannel+0x198>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fa53 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ecc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ed4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001edc:	2320      	movs	r3, #32
 8001ede:	e004      	b.n	8001eea <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001ee0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ee4:	fab3 f383 	clz	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x1b0>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0e9b      	lsrs	r3, r3, #26
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	e018      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1e2>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001f20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001f28:	2320      	movs	r3, #32
 8001f2a:	e004      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001f2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f30:	fab3 f383 	clz	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d106      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fa22 	bl	800138c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fa06 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10a      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x220>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2101      	movs	r1, #1
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff f9fb 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	0e9b      	lsrs	r3, r3, #26
 8001f6e:	f003 021f 	and.w	r2, r3, #31
 8001f72:	e01e      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x25e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2101      	movs	r1, #1
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff f9f0 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001fa2:	2320      	movs	r3, #32
 8001fa4:	e004      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001fa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d105      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x276>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	0e9b      	lsrs	r3, r3, #26
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	e018      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x2a8>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001fde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001fe2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001fe6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001fee:	2320      	movs	r3, #32
 8001ff0:	e004      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001ff2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d106      	bne.n	800200e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2200      	movs	r2, #0
 8002006:	2101      	movs	r1, #1
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff f9bf 	bl	800138c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2102      	movs	r1, #2
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff f9a3 	bl	8001360 <LL_ADC_GetOffsetChannel>
 800201a:	4603      	mov	r3, r0
 800201c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10a      	bne.n	800203a <HAL_ADC_ConfigChannel+0x2e6>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2102      	movs	r1, #2
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f998 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	0e9b      	lsrs	r3, r3, #26
 8002034:	f003 021f 	and.w	r2, r3, #31
 8002038:	e01e      	b.n	8002078 <HAL_ADC_ConfigChannel+0x324>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2102      	movs	r1, #2
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff f98d 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002058:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800205c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002060:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002068:	2320      	movs	r3, #32
 800206a:	e004      	b.n	8002076 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800206c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002080:	2b00      	cmp	r3, #0
 8002082:	d105      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x33c>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0e9b      	lsrs	r3, r3, #26
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	e016      	b.n	80020be <HAL_ADC_ConfigChannel+0x36a>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80020a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80020a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80020b0:	2320      	movs	r3, #32
 80020b2:	e004      	b.n	80020be <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80020b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020be:	429a      	cmp	r2, r3
 80020c0:	d106      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2200      	movs	r2, #0
 80020c8:	2102      	movs	r1, #2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff f95e 	bl	800138c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2103      	movs	r1, #3
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f942 	bl	8001360 <LL_ADC_GetOffsetChannel>
 80020dc:	4603      	mov	r3, r0
 80020de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10a      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x3a8>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2103      	movs	r1, #3
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff f937 	bl	8001360 <LL_ADC_GetOffsetChannel>
 80020f2:	4603      	mov	r3, r0
 80020f4:	0e9b      	lsrs	r3, r3, #26
 80020f6:	f003 021f 	and.w	r2, r3, #31
 80020fa:	e017      	b.n	800212c <HAL_ADC_ConfigChannel+0x3d8>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2103      	movs	r1, #3
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff f92c 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002114:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002116:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002118:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800211e:	2320      	movs	r3, #32
 8002120:	e003      	b.n	800212a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002122:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002134:	2b00      	cmp	r3, #0
 8002136:	d105      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x3f0>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0e9b      	lsrs	r3, r3, #26
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	e011      	b.n	8002168 <HAL_ADC_ConfigChannel+0x414>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002152:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002154:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002156:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800215c:	2320      	movs	r3, #32
 800215e:	e003      	b.n	8002168 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002168:	429a      	cmp	r2, r3
 800216a:	d106      	bne.n	800217a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2200      	movs	r2, #0
 8002172:	2103      	movs	r1, #3
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff f909 	bl	800138c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fa74 	bl	800166c <LL_ADC_IsEnabled>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	f040 8140 	bne.w	800240c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	6819      	ldr	r1, [r3, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	461a      	mov	r2, r3
 800219a:	f7ff f9c5 	bl	8001528 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	4a8f      	ldr	r2, [pc, #572]	@ (80023e0 <HAL_ADC_ConfigChannel+0x68c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	f040 8131 	bne.w	800240c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10b      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x47e>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	0e9b      	lsrs	r3, r3, #26
 80021c0:	3301      	adds	r3, #1
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	2b09      	cmp	r3, #9
 80021c8:	bf94      	ite	ls
 80021ca:	2301      	movls	r3, #1
 80021cc:	2300      	movhi	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	e019      	b.n	8002206 <HAL_ADC_ConfigChannel+0x4b2>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80021e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021e2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80021e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80021ea:	2320      	movs	r3, #32
 80021ec:	e003      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80021ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	3301      	adds	r3, #1
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	2b09      	cmp	r3, #9
 80021fe:	bf94      	ite	ls
 8002200:	2301      	movls	r3, #1
 8002202:	2300      	movhi	r3, #0
 8002204:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002206:	2b00      	cmp	r3, #0
 8002208:	d079      	beq.n	80022fe <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d107      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x4d2>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	3301      	adds	r3, #1
 800221e:	069b      	lsls	r3, r3, #26
 8002220:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002224:	e015      	b.n	8002252 <HAL_ADC_ConfigChannel+0x4fe>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002236:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800223e:	2320      	movs	r3, #32
 8002240:	e003      	b.n	800224a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	3301      	adds	r3, #1
 800224c:	069b      	lsls	r3, r3, #26
 800224e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x51e>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	0e9b      	lsrs	r3, r3, #26
 8002264:	3301      	adds	r3, #1
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2101      	movs	r1, #1
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	e017      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x54e>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002282:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800228a:	2320      	movs	r3, #32
 800228c:	e003      	b.n	8002296 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800228e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	3301      	adds	r3, #1
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	2101      	movs	r1, #1
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	ea42 0103 	orr.w	r1, r2, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10a      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x574>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0e9b      	lsrs	r3, r3, #26
 80022b8:	3301      	adds	r3, #1
 80022ba:	f003 021f 	and.w	r2, r3, #31
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	051b      	lsls	r3, r3, #20
 80022c6:	e018      	b.n	80022fa <HAL_ADC_ConfigChannel+0x5a6>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022d0:	fa93 f3a3 	rbit	r3, r3
 80022d4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80022d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80022da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80022e0:	2320      	movs	r3, #32
 80022e2:	e003      	b.n	80022ec <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80022e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	3301      	adds	r3, #1
 80022ee:	f003 021f 	and.w	r2, r3, #31
 80022f2:	4613      	mov	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4413      	add	r3, r2
 80022f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022fa:	430b      	orrs	r3, r1
 80022fc:	e081      	b.n	8002402 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002306:	2b00      	cmp	r3, #0
 8002308:	d107      	bne.n	800231a <HAL_ADC_ConfigChannel+0x5c6>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0e9b      	lsrs	r3, r3, #26
 8002310:	3301      	adds	r3, #1
 8002312:	069b      	lsls	r3, r3, #26
 8002314:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002318:	e015      	b.n	8002346 <HAL_ADC_ConfigChannel+0x5f2>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800232c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002332:	2320      	movs	r3, #32
 8002334:	e003      	b.n	800233e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002338:	fab3 f383 	clz	r3, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	3301      	adds	r3, #1
 8002340:	069b      	lsls	r3, r3, #26
 8002342:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x612>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0e9b      	lsrs	r3, r3, #26
 8002358:	3301      	adds	r3, #1
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	2101      	movs	r1, #1
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	e017      	b.n	8002396 <HAL_ADC_ConfigChannel+0x642>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	61fb      	str	r3, [r7, #28]
  return result;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800237e:	2320      	movs	r3, #32
 8002380:	e003      	b.n	800238a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	ea42 0103 	orr.w	r1, r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10d      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x66e>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	0e9b      	lsrs	r3, r3, #26
 80023ac:	3301      	adds	r3, #1
 80023ae:	f003 021f 	and.w	r2, r3, #31
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	3b1e      	subs	r3, #30
 80023ba:	051b      	lsls	r3, r3, #20
 80023bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023c0:	e01e      	b.n	8002400 <HAL_ADC_ConfigChannel+0x6ac>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	613b      	str	r3, [r7, #16]
  return result;
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d104      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80023da:	2320      	movs	r3, #32
 80023dc:	e006      	b.n	80023ec <HAL_ADC_ConfigChannel+0x698>
 80023de:	bf00      	nop
 80023e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	3301      	adds	r3, #1
 80023ee:	f003 021f 	and.w	r2, r3, #31
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	3b1e      	subs	r3, #30
 80023fa:	051b      	lsls	r3, r3, #20
 80023fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002400:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002406:	4619      	mov	r1, r3
 8002408:	f7ff f863 	bl	80014d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b3f      	ldr	r3, [pc, #252]	@ (8002510 <HAL_ADC_ConfigChannel+0x7bc>)
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d071      	beq.n	80024fc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002418:	483e      	ldr	r0, [pc, #248]	@ (8002514 <HAL_ADC_ConfigChannel+0x7c0>)
 800241a:	f7fe ff6f 	bl	80012fc <LL_ADC_GetCommonPathInternalCh>
 800241e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a3c      	ldr	r2, [pc, #240]	@ (8002518 <HAL_ADC_ConfigChannel+0x7c4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d004      	beq.n	8002436 <HAL_ADC_ConfigChannel+0x6e2>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a3a      	ldr	r2, [pc, #232]	@ (800251c <HAL_ADC_ConfigChannel+0x7c8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d127      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002436:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800243a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d121      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800244a:	d157      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800244c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002450:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002454:	4619      	mov	r1, r3
 8002456:	482f      	ldr	r0, [pc, #188]	@ (8002514 <HAL_ADC_ConfigChannel+0x7c0>)
 8002458:	f7fe ff3d 	bl	80012d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800245c:	4b30      	ldr	r3, [pc, #192]	@ (8002520 <HAL_ADC_ConfigChannel+0x7cc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	099b      	lsrs	r3, r3, #6
 8002462:	4a30      	ldr	r2, [pc, #192]	@ (8002524 <HAL_ADC_ConfigChannel+0x7d0>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	099b      	lsrs	r3, r3, #6
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002476:	e002      	b.n	800247e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3b01      	subs	r3, #1
 800247c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f9      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002484:	e03a      	b.n	80024fc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a27      	ldr	r2, [pc, #156]	@ (8002528 <HAL_ADC_ConfigChannel+0x7d4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d113      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002490:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002494:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10d      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a22      	ldr	r2, [pc, #136]	@ (800252c <HAL_ADC_ConfigChannel+0x7d8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d02a      	beq.n	80024fc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ae:	4619      	mov	r1, r3
 80024b0:	4818      	ldr	r0, [pc, #96]	@ (8002514 <HAL_ADC_ConfigChannel+0x7c0>)
 80024b2:	f7fe ff10 	bl	80012d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024b6:	e021      	b.n	80024fc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002530 <HAL_ADC_ConfigChannel+0x7dc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d11c      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d116      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a16      	ldr	r2, [pc, #88]	@ (800252c <HAL_ADC_ConfigChannel+0x7d8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d011      	beq.n	80024fc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024e0:	4619      	mov	r1, r3
 80024e2:	480c      	ldr	r0, [pc, #48]	@ (8002514 <HAL_ADC_ConfigChannel+0x7c0>)
 80024e4:	f7fe fef7 	bl	80012d6 <LL_ADC_SetCommonPathInternalCh>
 80024e8:	e008      	b.n	80024fc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ee:	f043 0220 	orr.w	r2, r3, #32
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002504:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002508:	4618      	mov	r0, r3
 800250a:	37d8      	adds	r7, #216	@ 0xd8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	80080000 	.word	0x80080000
 8002514:	50000300 	.word	0x50000300
 8002518:	c3210000 	.word	0xc3210000
 800251c:	90c00010 	.word	0x90c00010
 8002520:	20000008 	.word	0x20000008
 8002524:	053e2d63 	.word	0x053e2d63
 8002528:	c7520000 	.word	0xc7520000
 800252c:	50000100 	.word	0x50000100
 8002530:	cb840000 	.word	0xcb840000

08002534 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800253c:	2300      	movs	r3, #0
 800253e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff f891 	bl	800166c <LL_ADC_IsEnabled>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d169      	bne.n	8002624 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	4b36      	ldr	r3, [pc, #216]	@ (8002630 <ADC_Enable+0xfc>)
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00d      	beq.n	800257a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002562:	f043 0210 	orr.w	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e055      	b.n	8002626 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff f860 	bl	8001644 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002584:	482b      	ldr	r0, [pc, #172]	@ (8002634 <ADC_Enable+0x100>)
 8002586:	f7fe feb9 	bl	80012fc <LL_ADC_GetCommonPathInternalCh>
 800258a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800258c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002594:	4b28      	ldr	r3, [pc, #160]	@ (8002638 <ADC_Enable+0x104>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	099b      	lsrs	r3, r3, #6
 800259a:	4a28      	ldr	r2, [pc, #160]	@ (800263c <ADC_Enable+0x108>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80025ae:	e002      	b.n	80025b6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f9      	bne.n	80025b0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025bc:	f7fe fe4a 	bl	8001254 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025c2:	e028      	b.n	8002616 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff f84f 	bl	800166c <LL_ADC_IsEnabled>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d104      	bne.n	80025de <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff f833 	bl	8001644 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025de:	f7fe fe39 	bl	8001254 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d914      	bls.n	8002616 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d00d      	beq.n	8002616 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fe:	f043 0210 	orr.w	r2, r3, #16
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260a:	f043 0201 	orr.w	r2, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e007      	b.n	8002626 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b01      	cmp	r3, #1
 8002622:	d1cf      	bne.n	80025c4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	8000003f 	.word	0x8000003f
 8002634:	50000300 	.word	0x50000300
 8002638:	20000008 	.word	0x20000008
 800263c:	053e2d63 	.word	0x053e2d63

08002640 <LL_ADC_IsEnabled>:
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <LL_ADC_IsEnabled+0x18>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <LL_ADC_IsEnabled+0x1a>
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <LL_ADC_REG_IsConversionOngoing>:
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b04      	cmp	r3, #4
 8002678:	d101      	bne.n	800267e <LL_ADC_REG_IsConversionOngoing+0x18>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800268c:	b590      	push	{r4, r7, lr}
 800268e:	b0a1      	sub	sp, #132	@ 0x84
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e08b      	b.n	80027c2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80026b2:	2300      	movs	r3, #0
 80026b4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80026b6:	2300      	movs	r3, #0
 80026b8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026c2:	d102      	bne.n	80026ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026c4:	4b41      	ldr	r3, [pc, #260]	@ (80027cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	e001      	b.n	80026ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10b      	bne.n	80026ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e06a      	b.n	80027c2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff ffb9 	bl	8002666 <LL_ADC_REG_IsConversionOngoing>
 80026f4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff ffb3 	bl	8002666 <LL_ADC_REG_IsConversionOngoing>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d14c      	bne.n	80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002706:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002708:	2b00      	cmp	r3, #0
 800270a:	d149      	bne.n	80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800270c:	4b30      	ldr	r3, [pc, #192]	@ (80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800270e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d028      	beq.n	800276a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002718:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800272a:	035b      	lsls	r3, r3, #13
 800272c:	430b      	orrs	r3, r1
 800272e:	431a      	orrs	r2, r3
 8002730:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002732:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002734:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002738:	f7ff ff82 	bl	8002640 <LL_ADC_IsEnabled>
 800273c:	4604      	mov	r4, r0
 800273e:	4823      	ldr	r0, [pc, #140]	@ (80027cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002740:	f7ff ff7e 	bl	8002640 <LL_ADC_IsEnabled>
 8002744:	4603      	mov	r3, r0
 8002746:	4323      	orrs	r3, r4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d133      	bne.n	80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800274c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002754:	f023 030f 	bic.w	r3, r3, #15
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	6811      	ldr	r1, [r2, #0]
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	6892      	ldr	r2, [r2, #8]
 8002760:	430a      	orrs	r2, r1
 8002762:	431a      	orrs	r2, r3
 8002764:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002766:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002768:	e024      	b.n	80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800276a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002772:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002774:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002776:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800277a:	f7ff ff61 	bl	8002640 <LL_ADC_IsEnabled>
 800277e:	4604      	mov	r4, r0
 8002780:	4812      	ldr	r0, [pc, #72]	@ (80027cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002782:	f7ff ff5d 	bl	8002640 <LL_ADC_IsEnabled>
 8002786:	4603      	mov	r3, r0
 8002788:	4323      	orrs	r3, r4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d112      	bne.n	80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800278e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002796:	f023 030f 	bic.w	r3, r3, #15
 800279a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800279c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800279e:	e009      	b.n	80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a4:	f043 0220 	orr.w	r2, r3, #32
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80027b2:	e000      	b.n	80027b6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80027be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3784      	adds	r7, #132	@ 0x84
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd90      	pop	{r4, r7, pc}
 80027ca:	bf00      	nop
 80027cc:	50000100 	.word	0x50000100
 80027d0:	50000300 	.word	0x50000300

080027d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <__NVIC_SetPriorityGrouping+0x44>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027f0:	4013      	ands	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002806:	4a04      	ldr	r2, [pc, #16]	@ (8002818 <__NVIC_SetPriorityGrouping+0x44>)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	60d3      	str	r3, [r2, #12]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002820:	4b04      	ldr	r3, [pc, #16]	@ (8002834 <__NVIC_GetPriorityGrouping+0x18>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	f003 0307 	and.w	r3, r3, #7
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	2b00      	cmp	r3, #0
 8002848:	db0b      	blt.n	8002862 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	f003 021f 	and.w	r2, r3, #31
 8002850:	4907      	ldr	r1, [pc, #28]	@ (8002870 <__NVIC_EnableIRQ+0x38>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2001      	movs	r0, #1
 800285a:	fa00 f202 	lsl.w	r2, r0, r2
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000e100 	.word	0xe000e100

08002874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	2b00      	cmp	r3, #0
 8002886:	db0a      	blt.n	800289e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	490c      	ldr	r1, [pc, #48]	@ (80028c0 <__NVIC_SetPriority+0x4c>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	0112      	lsls	r2, r2, #4
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	440b      	add	r3, r1
 8002898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800289c:	e00a      	b.n	80028b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4908      	ldr	r1, [pc, #32]	@ (80028c4 <__NVIC_SetPriority+0x50>)
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3b04      	subs	r3, #4
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	440b      	add	r3, r1
 80028b2:	761a      	strb	r2, [r3, #24]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000e100 	.word	0xe000e100
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	@ 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f1c3 0307 	rsb	r3, r3, #7
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	bf28      	it	cs
 80028e6:	2304      	movcs	r3, #4
 80028e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d902      	bls.n	80028f8 <NVIC_EncodePriority+0x30>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3b03      	subs	r3, #3
 80028f6:	e000      	b.n	80028fa <NVIC_EncodePriority+0x32>
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	401a      	ands	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002910:	f04f 31ff 	mov.w	r1, #4294967295
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43d9      	mvns	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	4313      	orrs	r3, r2
         );
}
 8002922:	4618      	mov	r0, r3
 8002924:	3724      	adds	r7, #36	@ 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002940:	d301      	bcc.n	8002946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002942:	2301      	movs	r3, #1
 8002944:	e00f      	b.n	8002966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002946:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <SysTick_Config+0x40>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294e:	210f      	movs	r1, #15
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	f7ff ff8e 	bl	8002874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <SysTick_Config+0x40>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295e:	4b04      	ldr	r3, [pc, #16]	@ (8002970 <SysTick_Config+0x40>)
 8002960:	2207      	movs	r2, #7
 8002962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	e000e010 	.word	0xe000e010

08002974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ff29 	bl	80027d4 <__NVIC_SetPriorityGrouping>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002998:	f7ff ff40 	bl	800281c <__NVIC_GetPriorityGrouping>
 800299c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	6978      	ldr	r0, [r7, #20]
 80029a4:	f7ff ff90 	bl	80028c8 <NVIC_EncodePriority>
 80029a8:	4602      	mov	r2, r0
 80029aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff5f 	bl	8002874 <__NVIC_SetPriority>
}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff33 	bl	8002838 <__NVIC_EnableIRQ>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ffa4 	bl	8002930 <SysTick_Config>
 80029e8:	4603      	mov	r3, r0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b085      	sub	sp, #20
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d005      	beq.n	8002a16 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	e037      	b.n	8002a86 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 020e 	bic.w	r2, r2, #14
 8002a24:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a34:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4a:	f003 021f 	and.w	r2, r3, #31
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f202 	lsl.w	r2, r1, r2
 8002a58:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a62:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00c      	beq.n	8002a86 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a7a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002a84:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d00d      	beq.n	8002ad8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
 8002ad6:	e047      	b.n	8002b68 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 020e 	bic.w	r2, r2, #14
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0c:	f003 021f 	and.w	r2, r3, #31
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	2101      	movs	r1, #1
 8002b16:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b24:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00c      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b46:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	4798      	blx	r3
    }
  }
  return status;
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b82:	e15a      	b.n	8002e3a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2101      	movs	r1, #1
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	4013      	ands	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 814c 	beq.w	8002e34 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d005      	beq.n	8002bb4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d130      	bne.n	8002c16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bea:	2201      	movs	r2, #1
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	f003 0201 	and.w	r2, r3, #1
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d017      	beq.n	8002c52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d123      	bne.n	8002ca6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	08da      	lsrs	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3208      	adds	r2, #8
 8002c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	220f      	movs	r2, #15
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	08da      	lsrs	r2, r3, #3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3208      	adds	r2, #8
 8002ca0:	6939      	ldr	r1, [r7, #16]
 8002ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 0203 	and.w	r2, r3, #3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80a6 	beq.w	8002e34 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce8:	4b5b      	ldr	r3, [pc, #364]	@ (8002e58 <HAL_GPIO_Init+0x2e4>)
 8002cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cec:	4a5a      	ldr	r2, [pc, #360]	@ (8002e58 <HAL_GPIO_Init+0x2e4>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cf4:	4b58      	ldr	r3, [pc, #352]	@ (8002e58 <HAL_GPIO_Init+0x2e4>)
 8002cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d00:	4a56      	ldr	r2, [pc, #344]	@ (8002e5c <HAL_GPIO_Init+0x2e8>)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	089b      	lsrs	r3, r3, #2
 8002d06:	3302      	adds	r3, #2
 8002d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	220f      	movs	r2, #15
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d2a:	d01f      	beq.n	8002d6c <HAL_GPIO_Init+0x1f8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a4c      	ldr	r2, [pc, #304]	@ (8002e60 <HAL_GPIO_Init+0x2ec>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d019      	beq.n	8002d68 <HAL_GPIO_Init+0x1f4>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a4b      	ldr	r2, [pc, #300]	@ (8002e64 <HAL_GPIO_Init+0x2f0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <HAL_GPIO_Init+0x1f0>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a4a      	ldr	r2, [pc, #296]	@ (8002e68 <HAL_GPIO_Init+0x2f4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00d      	beq.n	8002d60 <HAL_GPIO_Init+0x1ec>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a49      	ldr	r2, [pc, #292]	@ (8002e6c <HAL_GPIO_Init+0x2f8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <HAL_GPIO_Init+0x1e8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a48      	ldr	r2, [pc, #288]	@ (8002e70 <HAL_GPIO_Init+0x2fc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_GPIO_Init+0x1e4>
 8002d54:	2305      	movs	r3, #5
 8002d56:	e00a      	b.n	8002d6e <HAL_GPIO_Init+0x1fa>
 8002d58:	2306      	movs	r3, #6
 8002d5a:	e008      	b.n	8002d6e <HAL_GPIO_Init+0x1fa>
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	e006      	b.n	8002d6e <HAL_GPIO_Init+0x1fa>
 8002d60:	2303      	movs	r3, #3
 8002d62:	e004      	b.n	8002d6e <HAL_GPIO_Init+0x1fa>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e002      	b.n	8002d6e <HAL_GPIO_Init+0x1fa>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <HAL_GPIO_Init+0x1fa>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	f002 0203 	and.w	r2, r2, #3
 8002d74:	0092      	lsls	r2, r2, #2
 8002d76:	4093      	lsls	r3, r2
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d7e:	4937      	ldr	r1, [pc, #220]	@ (8002e5c <HAL_GPIO_Init+0x2e8>)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	089b      	lsrs	r3, r3, #2
 8002d84:	3302      	adds	r3, #2
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d8c:	4b39      	ldr	r3, [pc, #228]	@ (8002e74 <HAL_GPIO_Init+0x300>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002db0:	4a30      	ldr	r2, [pc, #192]	@ (8002e74 <HAL_GPIO_Init+0x300>)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002db6:	4b2f      	ldr	r3, [pc, #188]	@ (8002e74 <HAL_GPIO_Init+0x300>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dda:	4a26      	ldr	r2, [pc, #152]	@ (8002e74 <HAL_GPIO_Init+0x300>)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002de0:	4b24      	ldr	r3, [pc, #144]	@ (8002e74 <HAL_GPIO_Init+0x300>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e04:	4a1b      	ldr	r2, [pc, #108]	@ (8002e74 <HAL_GPIO_Init+0x300>)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e74 <HAL_GPIO_Init+0x300>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	43db      	mvns	r3, r3
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4013      	ands	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e2e:	4a11      	ldr	r2, [pc, #68]	@ (8002e74 <HAL_GPIO_Init+0x300>)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3301      	adds	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f47f ae9d 	bne.w	8002b84 <HAL_GPIO_Init+0x10>
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	bf00      	nop
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	48000400 	.word	0x48000400
 8002e64:	48000800 	.word	0x48000800
 8002e68:	48000c00 	.word	0x48000c00
 8002e6c:	48001000 	.word	0x48001000
 8002e70:	48001400 	.word	0x48001400
 8002e74:	40010400 	.word	0x40010400

08002e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	887b      	ldrh	r3, [r7, #2]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
 8002e94:	e001      	b.n	8002e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	807b      	strh	r3, [r7, #2]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eb8:	787b      	ldrb	r3, [r7, #1]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ebe:	887a      	ldrh	r2, [r7, #2]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ec4:	e002      	b.n	8002ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ee2:	4b08      	ldr	r3, [pc, #32]	@ (8002f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d006      	beq.n	8002efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eee:	4a05      	ldr	r2, [pc, #20]	@ (8002f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd fb46 	bl	8000588 <HAL_GPIO_EXTI_Callback>
  }
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40010400 	.word	0x40010400

08002f08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d141      	bne.n	8002f9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f16:	4b4b      	ldr	r3, [pc, #300]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f22:	d131      	bne.n	8002f88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f24:	4b47      	ldr	r3, [pc, #284]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f2a:	4a46      	ldr	r2, [pc, #280]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f34:	4b43      	ldr	r3, [pc, #268]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f3c:	4a41      	ldr	r2, [pc, #260]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f44:	4b40      	ldr	r3, [pc, #256]	@ (8003048 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2232      	movs	r2, #50	@ 0x32
 8002f4a:	fb02 f303 	mul.w	r3, r2, r3
 8002f4e:	4a3f      	ldr	r2, [pc, #252]	@ (800304c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	0c9b      	lsrs	r3, r3, #18
 8002f56:	3301      	adds	r3, #1
 8002f58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f5a:	e002      	b.n	8002f62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f62:	4b38      	ldr	r3, [pc, #224]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f6e:	d102      	bne.n	8002f76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f2      	bne.n	8002f5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f76:	4b33      	ldr	r3, [pc, #204]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f82:	d158      	bne.n	8003036 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e057      	b.n	8003038 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f88:	4b2e      	ldr	r3, [pc, #184]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f98:	e04d      	b.n	8003036 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa0:	d141      	bne.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fa2:	4b28      	ldr	r3, [pc, #160]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fae:	d131      	bne.n	8003014 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fb0:	4b24      	ldr	r3, [pc, #144]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fb6:	4a23      	ldr	r2, [pc, #140]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fc0:	4b20      	ldr	r3, [pc, #128]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003048 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2232      	movs	r2, #50	@ 0x32
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	4a1c      	ldr	r2, [pc, #112]	@ (800304c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	0c9b      	lsrs	r3, r3, #18
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe6:	e002      	b.n	8002fee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fee:	4b15      	ldr	r3, [pc, #84]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ffa:	d102      	bne.n	8003002 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f2      	bne.n	8002fe8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003002:	4b10      	ldr	r3, [pc, #64]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800300e:	d112      	bne.n	8003036 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e011      	b.n	8003038 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003014:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800301a:	4a0a      	ldr	r2, [pc, #40]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003020:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003024:	e007      	b.n	8003036 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003026:	4b07      	ldr	r3, [pc, #28]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800302e:	4a05      	ldr	r2, [pc, #20]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003030:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003034:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	40007000 	.word	0x40007000
 8003048:	20000008 	.word	0x20000008
 800304c:	431bde83 	.word	0x431bde83

08003050 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003054:	4b05      	ldr	r3, [pc, #20]	@ (800306c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a04      	ldr	r2, [pc, #16]	@ (800306c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800305a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800305e:	6093      	str	r3, [r2, #8]
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40007000 	.word	0x40007000

08003070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e2fe      	b.n	8003680 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d075      	beq.n	800317a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800308e:	4b97      	ldr	r3, [pc, #604]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003098:	4b94      	ldr	r3, [pc, #592]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b0c      	cmp	r3, #12
 80030a6:	d102      	bne.n	80030ae <HAL_RCC_OscConfig+0x3e>
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d002      	beq.n	80030b4 <HAL_RCC_OscConfig+0x44>
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d10b      	bne.n	80030cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	4b8d      	ldr	r3, [pc, #564]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d05b      	beq.n	8003178 <HAL_RCC_OscConfig+0x108>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d157      	bne.n	8003178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e2d9      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d4:	d106      	bne.n	80030e4 <HAL_RCC_OscConfig+0x74>
 80030d6:	4b85      	ldr	r3, [pc, #532]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a84      	ldr	r2, [pc, #528]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 80030dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	e01d      	b.n	8003120 <HAL_RCC_OscConfig+0xb0>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0x98>
 80030ee:	4b7f      	ldr	r3, [pc, #508]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a7e      	ldr	r2, [pc, #504]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 80030f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b7c      	ldr	r3, [pc, #496]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a7b      	ldr	r2, [pc, #492]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e00b      	b.n	8003120 <HAL_RCC_OscConfig+0xb0>
 8003108:	4b78      	ldr	r3, [pc, #480]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a77      	ldr	r2, [pc, #476]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 800310e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4b75      	ldr	r3, [pc, #468]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a74      	ldr	r2, [pc, #464]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 800311a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800311e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d013      	beq.n	8003150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7fe f894 	bl	8001254 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003130:	f7fe f890 	bl	8001254 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	@ 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e29e      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003142:	4b6a      	ldr	r3, [pc, #424]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0xc0>
 800314e:	e014      	b.n	800317a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fe f880 	bl	8001254 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003158:	f7fe f87c 	bl	8001254 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	@ 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e28a      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800316a:	4b60      	ldr	r3, [pc, #384]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0xe8>
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d075      	beq.n	8003272 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003186:	4b59      	ldr	r3, [pc, #356]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003190:	4b56      	ldr	r3, [pc, #344]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d102      	bne.n	80031a6 <HAL_RCC_OscConfig+0x136>
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d002      	beq.n	80031ac <HAL_RCC_OscConfig+0x13c>
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d11f      	bne.n	80031ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031ac:	4b4f      	ldr	r3, [pc, #316]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_OscConfig+0x154>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e25d      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4b49      	ldr	r3, [pc, #292]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	4946      	ldr	r1, [pc, #280]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031d8:	4b45      	ldr	r3, [pc, #276]	@ (80032f0 <HAL_RCC_OscConfig+0x280>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd ffed 	bl	80011bc <HAL_InitTick>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d043      	beq.n	8003270 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e249      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d023      	beq.n	800323c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f4:	4b3d      	ldr	r3, [pc, #244]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a3c      	ldr	r2, [pc, #240]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe f828 	bl	8001254 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003208:	f7fe f824 	bl	8001254 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e232      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800321a:	4b34      	ldr	r3, [pc, #208]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003226:	4b31      	ldr	r3, [pc, #196]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	061b      	lsls	r3, r3, #24
 8003234:	492d      	ldr	r1, [pc, #180]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 8003236:	4313      	orrs	r3, r2
 8003238:	604b      	str	r3, [r1, #4]
 800323a:	e01a      	b.n	8003272 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323c:	4b2b      	ldr	r3, [pc, #172]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a2a      	ldr	r2, [pc, #168]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 8003242:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7fe f804 	bl	8001254 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003250:	f7fe f800 	bl	8001254 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e20e      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003262:	4b22      	ldr	r3, [pc, #136]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x1e0>
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003270:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d041      	beq.n	8003302 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01c      	beq.n	80032c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003286:	4b19      	ldr	r3, [pc, #100]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 8003288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800328c:	4a17      	ldr	r2, [pc, #92]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003296:	f7fd ffdd 	bl	8001254 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800329e:	f7fd ffd9 	bl	8001254 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e1e7      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032b0:	4b0e      	ldr	r3, [pc, #56]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 80032b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0ef      	beq.n	800329e <HAL_RCC_OscConfig+0x22e>
 80032be:	e020      	b.n	8003302 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c0:	4b0a      	ldr	r3, [pc, #40]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 80032c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032c6:	4a09      	ldr	r2, [pc, #36]	@ (80032ec <HAL_RCC_OscConfig+0x27c>)
 80032c8:	f023 0301 	bic.w	r3, r3, #1
 80032cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d0:	f7fd ffc0 	bl	8001254 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032d6:	e00d      	b.n	80032f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d8:	f7fd ffbc 	bl	8001254 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d906      	bls.n	80032f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e1ca      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000
 80032f0:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 80032f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1ea      	bne.n	80032d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80a6 	beq.w	800345c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003310:	2300      	movs	r3, #0
 8003312:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003314:	4b84      	ldr	r3, [pc, #528]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 8003316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_RCC_OscConfig+0x2b4>
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0x2b6>
 8003324:	2300      	movs	r3, #0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00d      	beq.n	8003346 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800332a:	4b7f      	ldr	r3, [pc, #508]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 800332c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332e:	4a7e      	ldr	r2, [pc, #504]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 8003330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003334:	6593      	str	r3, [r2, #88]	@ 0x58
 8003336:	4b7c      	ldr	r3, [pc, #496]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 8003338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003342:	2301      	movs	r3, #1
 8003344:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003346:	4b79      	ldr	r3, [pc, #484]	@ (800352c <HAL_RCC_OscConfig+0x4bc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334e:	2b00      	cmp	r3, #0
 8003350:	d118      	bne.n	8003384 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003352:	4b76      	ldr	r3, [pc, #472]	@ (800352c <HAL_RCC_OscConfig+0x4bc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a75      	ldr	r2, [pc, #468]	@ (800352c <HAL_RCC_OscConfig+0x4bc>)
 8003358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800335c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335e:	f7fd ff79 	bl	8001254 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003366:	f7fd ff75 	bl	8001254 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e183      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003378:	4b6c      	ldr	r3, [pc, #432]	@ (800352c <HAL_RCC_OscConfig+0x4bc>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d108      	bne.n	800339e <HAL_RCC_OscConfig+0x32e>
 800338c:	4b66      	ldr	r3, [pc, #408]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003392:	4a65      	ldr	r2, [pc, #404]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800339c:	e024      	b.n	80033e8 <HAL_RCC_OscConfig+0x378>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d110      	bne.n	80033c8 <HAL_RCC_OscConfig+0x358>
 80033a6:	4b60      	ldr	r3, [pc, #384]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ac:	4a5e      	ldr	r2, [pc, #376]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 80033ae:	f043 0304 	orr.w	r3, r3, #4
 80033b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033bc:	4a5a      	ldr	r2, [pc, #360]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033c6:	e00f      	b.n	80033e8 <HAL_RCC_OscConfig+0x378>
 80033c8:	4b57      	ldr	r3, [pc, #348]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ce:	4a56      	ldr	r2, [pc, #344]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033d8:	4b53      	ldr	r3, [pc, #332]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033de:	4a52      	ldr	r2, [pc, #328]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 80033e0:	f023 0304 	bic.w	r3, r3, #4
 80033e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d016      	beq.n	800341e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f0:	f7fd ff30 	bl	8001254 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f6:	e00a      	b.n	800340e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f8:	f7fd ff2c 	bl	8001254 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e138      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340e:	4b46      	ldr	r3, [pc, #280]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 8003410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0ed      	beq.n	80033f8 <HAL_RCC_OscConfig+0x388>
 800341c:	e015      	b.n	800344a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341e:	f7fd ff19 	bl	8001254 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003424:	e00a      	b.n	800343c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f7fd ff15 	bl	8001254 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003434:	4293      	cmp	r3, r2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e121      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800343c:	4b3a      	ldr	r3, [pc, #232]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1ed      	bne.n	8003426 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800344a:	7ffb      	ldrb	r3, [r7, #31]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d105      	bne.n	800345c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003450:	4b35      	ldr	r3, [pc, #212]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 8003452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003454:	4a34      	ldr	r2, [pc, #208]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 8003456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800345a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b00      	cmp	r3, #0
 8003466:	d03c      	beq.n	80034e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01c      	beq.n	80034aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003470:	4b2d      	ldr	r3, [pc, #180]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 8003472:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003476:	4a2c      	ldr	r2, [pc, #176]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003480:	f7fd fee8 	bl	8001254 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003488:	f7fd fee4 	bl	8001254 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e0f2      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800349a:	4b23      	ldr	r3, [pc, #140]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 800349c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0ef      	beq.n	8003488 <HAL_RCC_OscConfig+0x418>
 80034a8:	e01b      	b.n	80034e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 80034ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ba:	f7fd fecb 	bl	8001254 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034c2:	f7fd fec7 	bl	8001254 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e0d5      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034d4:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 80034d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1ef      	bne.n	80034c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80c9 	beq.w	800367e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 030c 	and.w	r3, r3, #12
 80034f4:	2b0c      	cmp	r3, #12
 80034f6:	f000 8083 	beq.w	8003600 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d15e      	bne.n	80035c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003502:	4b09      	ldr	r3, [pc, #36]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a08      	ldr	r2, [pc, #32]	@ (8003528 <HAL_RCC_OscConfig+0x4b8>)
 8003508:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800350c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fd fea1 	bl	8001254 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003514:	e00c      	b.n	8003530 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003516:	f7fd fe9d 	bl	8001254 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d905      	bls.n	8003530 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e0ab      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
 8003528:	40021000 	.word	0x40021000
 800352c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003530:	4b55      	ldr	r3, [pc, #340]	@ (8003688 <HAL_RCC_OscConfig+0x618>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1ec      	bne.n	8003516 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800353c:	4b52      	ldr	r3, [pc, #328]	@ (8003688 <HAL_RCC_OscConfig+0x618>)
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	4b52      	ldr	r3, [pc, #328]	@ (800368c <HAL_RCC_OscConfig+0x61c>)
 8003542:	4013      	ands	r3, r2
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6a11      	ldr	r1, [r2, #32]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800354c:	3a01      	subs	r2, #1
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	4311      	orrs	r1, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003556:	0212      	lsls	r2, r2, #8
 8003558:	4311      	orrs	r1, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800355e:	0852      	lsrs	r2, r2, #1
 8003560:	3a01      	subs	r2, #1
 8003562:	0552      	lsls	r2, r2, #21
 8003564:	4311      	orrs	r1, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800356a:	0852      	lsrs	r2, r2, #1
 800356c:	3a01      	subs	r2, #1
 800356e:	0652      	lsls	r2, r2, #25
 8003570:	4311      	orrs	r1, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003576:	06d2      	lsls	r2, r2, #27
 8003578:	430a      	orrs	r2, r1
 800357a:	4943      	ldr	r1, [pc, #268]	@ (8003688 <HAL_RCC_OscConfig+0x618>)
 800357c:	4313      	orrs	r3, r2
 800357e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003580:	4b41      	ldr	r3, [pc, #260]	@ (8003688 <HAL_RCC_OscConfig+0x618>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a40      	ldr	r2, [pc, #256]	@ (8003688 <HAL_RCC_OscConfig+0x618>)
 8003586:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800358a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800358c:	4b3e      	ldr	r3, [pc, #248]	@ (8003688 <HAL_RCC_OscConfig+0x618>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4a3d      	ldr	r2, [pc, #244]	@ (8003688 <HAL_RCC_OscConfig+0x618>)
 8003592:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003596:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fd fe5c 	bl	8001254 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fd fe58 	bl	8001254 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e066      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b2:	4b35      	ldr	r3, [pc, #212]	@ (8003688 <HAL_RCC_OscConfig+0x618>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x530>
 80035be:	e05e      	b.n	800367e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c0:	4b31      	ldr	r3, [pc, #196]	@ (8003688 <HAL_RCC_OscConfig+0x618>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a30      	ldr	r2, [pc, #192]	@ (8003688 <HAL_RCC_OscConfig+0x618>)
 80035c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fd fe42 	bl	8001254 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d4:	f7fd fe3e 	bl	8001254 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e04c      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e6:	4b28      	ldr	r3, [pc, #160]	@ (8003688 <HAL_RCC_OscConfig+0x618>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80035f2:	4b25      	ldr	r3, [pc, #148]	@ (8003688 <HAL_RCC_OscConfig+0x618>)
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	4924      	ldr	r1, [pc, #144]	@ (8003688 <HAL_RCC_OscConfig+0x618>)
 80035f8:	4b25      	ldr	r3, [pc, #148]	@ (8003690 <HAL_RCC_OscConfig+0x620>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	60cb      	str	r3, [r1, #12]
 80035fe:	e03e      	b.n	800367e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e039      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800360c:	4b1e      	ldr	r3, [pc, #120]	@ (8003688 <HAL_RCC_OscConfig+0x618>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f003 0203 	and.w	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	429a      	cmp	r2, r3
 800361e:	d12c      	bne.n	800367a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	3b01      	subs	r3, #1
 800362c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d123      	bne.n	800367a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d11b      	bne.n	800367a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800364e:	429a      	cmp	r2, r3
 8003650:	d113      	bne.n	800367a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365c:	085b      	lsrs	r3, r3, #1
 800365e:	3b01      	subs	r3, #1
 8003660:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d109      	bne.n	800367a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003670:	085b      	lsrs	r3, r3, #1
 8003672:	3b01      	subs	r3, #1
 8003674:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d001      	beq.n	800367e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3720      	adds	r7, #32
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	019f800c 	.word	0x019f800c
 8003690:	feeefffc 	.word	0xfeeefffc

08003694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e11e      	b.n	80038ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036ac:	4b91      	ldr	r3, [pc, #580]	@ (80038f4 <HAL_RCC_ClockConfig+0x260>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d910      	bls.n	80036dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b8e      	ldr	r3, [pc, #568]	@ (80038f4 <HAL_RCC_ClockConfig+0x260>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 020f 	bic.w	r2, r3, #15
 80036c2:	498c      	ldr	r1, [pc, #560]	@ (80038f4 <HAL_RCC_ClockConfig+0x260>)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b8a      	ldr	r3, [pc, #552]	@ (80038f4 <HAL_RCC_ClockConfig+0x260>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e106      	b.n	80038ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d073      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d129      	bne.n	8003744 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f0:	4b81      	ldr	r3, [pc, #516]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0f4      	b.n	80038ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003700:	f000 f99e 	bl	8003a40 <RCC_GetSysClockFreqFromPLLSource>
 8003704:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4a7c      	ldr	r2, [pc, #496]	@ (80038fc <HAL_RCC_ClockConfig+0x268>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d93f      	bls.n	800378e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800370e:	4b7a      	ldr	r3, [pc, #488]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003722:	2b00      	cmp	r3, #0
 8003724:	d033      	beq.n	800378e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800372a:	2b00      	cmp	r3, #0
 800372c:	d12f      	bne.n	800378e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800372e:	4b72      	ldr	r3, [pc, #456]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003736:	4a70      	ldr	r2, [pc, #448]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 8003738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800373c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800373e:	2380      	movs	r3, #128	@ 0x80
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	e024      	b.n	800378e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d107      	bne.n	800375c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800374c:	4b6a      	ldr	r3, [pc, #424]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d109      	bne.n	800376c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0c6      	b.n	80038ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800375c:	4b66      	ldr	r3, [pc, #408]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0be      	b.n	80038ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800376c:	f000 f8ce 	bl	800390c <HAL_RCC_GetSysClockFreq>
 8003770:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4a61      	ldr	r2, [pc, #388]	@ (80038fc <HAL_RCC_ClockConfig+0x268>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d909      	bls.n	800378e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800377a:	4b5f      	ldr	r3, [pc, #380]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003782:	4a5d      	ldr	r2, [pc, #372]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 8003784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003788:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800378a:	2380      	movs	r3, #128	@ 0x80
 800378c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800378e:	4b5a      	ldr	r3, [pc, #360]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f023 0203 	bic.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4957      	ldr	r1, [pc, #348]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 800379c:	4313      	orrs	r3, r2
 800379e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a0:	f7fd fd58 	bl	8001254 <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	e00a      	b.n	80037be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a8:	f7fd fd54 	bl	8001254 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e095      	b.n	80038ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	4b4e      	ldr	r3, [pc, #312]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 020c 	and.w	r2, r3, #12
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d1eb      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d023      	beq.n	8003824 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e8:	4b43      	ldr	r3, [pc, #268]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a42      	ldr	r2, [pc, #264]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 80037ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d007      	beq.n	8003810 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003800:	4b3d      	ldr	r3, [pc, #244]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003808:	4a3b      	ldr	r2, [pc, #236]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 800380a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800380e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003810:	4b39      	ldr	r3, [pc, #228]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4936      	ldr	r1, [pc, #216]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
 8003822:	e008      	b.n	8003836 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b80      	cmp	r3, #128	@ 0x80
 8003828:	d105      	bne.n	8003836 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800382a:	4b33      	ldr	r3, [pc, #204]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	4a32      	ldr	r2, [pc, #200]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 8003830:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003834:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003836:	4b2f      	ldr	r3, [pc, #188]	@ (80038f4 <HAL_RCC_ClockConfig+0x260>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d21d      	bcs.n	8003880 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003844:	4b2b      	ldr	r3, [pc, #172]	@ (80038f4 <HAL_RCC_ClockConfig+0x260>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f023 020f 	bic.w	r2, r3, #15
 800384c:	4929      	ldr	r1, [pc, #164]	@ (80038f4 <HAL_RCC_ClockConfig+0x260>)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	4313      	orrs	r3, r2
 8003852:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003854:	f7fd fcfe 	bl	8001254 <HAL_GetTick>
 8003858:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	e00a      	b.n	8003872 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385c:	f7fd fcfa 	bl	8001254 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e03b      	b.n	80038ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003872:	4b20      	ldr	r3, [pc, #128]	@ (80038f4 <HAL_RCC_ClockConfig+0x260>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d1ed      	bne.n	800385c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800388c:	4b1a      	ldr	r3, [pc, #104]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4917      	ldr	r1, [pc, #92]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038aa:	4b13      	ldr	r3, [pc, #76]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	490f      	ldr	r1, [pc, #60]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038be:	f000 f825 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80038c2:	4602      	mov	r2, r0
 80038c4:	4b0c      	ldr	r3, [pc, #48]	@ (80038f8 <HAL_RCC_ClockConfig+0x264>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	490c      	ldr	r1, [pc, #48]	@ (8003900 <HAL_RCC_ClockConfig+0x26c>)
 80038d0:	5ccb      	ldrb	r3, [r1, r3]
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	fa22 f303 	lsr.w	r3, r2, r3
 80038da:	4a0a      	ldr	r2, [pc, #40]	@ (8003904 <HAL_RCC_ClockConfig+0x270>)
 80038dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038de:	4b0a      	ldr	r3, [pc, #40]	@ (8003908 <HAL_RCC_ClockConfig+0x274>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd fc6a 	bl	80011bc <HAL_InitTick>
 80038e8:	4603      	mov	r3, r0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40022000 	.word	0x40022000
 80038f8:	40021000 	.word	0x40021000
 80038fc:	04c4b400 	.word	0x04c4b400
 8003900:	080067a8 	.word	0x080067a8
 8003904:	20000008 	.word	0x20000008
 8003908:	2000000c 	.word	0x2000000c

0800390c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003912:	4b2c      	ldr	r3, [pc, #176]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b04      	cmp	r3, #4
 800391c:	d102      	bne.n	8003924 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800391e:	4b2a      	ldr	r3, [pc, #168]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	e047      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003924:	4b27      	ldr	r3, [pc, #156]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 030c 	and.w	r3, r3, #12
 800392c:	2b08      	cmp	r3, #8
 800392e:	d102      	bne.n	8003936 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003930:	4b26      	ldr	r3, [pc, #152]	@ (80039cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	e03e      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003936:	4b23      	ldr	r3, [pc, #140]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b0c      	cmp	r3, #12
 8003940:	d136      	bne.n	80039b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003942:	4b20      	ldr	r3, [pc, #128]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800394c:	4b1d      	ldr	r3, [pc, #116]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	3301      	adds	r3, #1
 8003958:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b03      	cmp	r3, #3
 800395e:	d10c      	bne.n	800397a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003960:	4a1a      	ldr	r2, [pc, #104]	@ (80039cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	4a16      	ldr	r2, [pc, #88]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800396a:	68d2      	ldr	r2, [r2, #12]
 800396c:	0a12      	lsrs	r2, r2, #8
 800396e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	617b      	str	r3, [r7, #20]
      break;
 8003978:	e00c      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800397a:	4a13      	ldr	r2, [pc, #76]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003982:	4a10      	ldr	r2, [pc, #64]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003984:	68d2      	ldr	r2, [r2, #12]
 8003986:	0a12      	lsrs	r2, r2, #8
 8003988:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800398c:	fb02 f303 	mul.w	r3, r2, r3
 8003990:	617b      	str	r3, [r7, #20]
      break;
 8003992:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003994:	4b0b      	ldr	r3, [pc, #44]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	0e5b      	lsrs	r3, r3, #25
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	3301      	adds	r3, #1
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	e001      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039b4:	693b      	ldr	r3, [r7, #16]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000
 80039c8:	00f42400 	.word	0x00f42400
 80039cc:	007a1200 	.word	0x007a1200

080039d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d4:	4b03      	ldr	r3, [pc, #12]	@ (80039e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039d6:	681b      	ldr	r3, [r3, #0]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000008 	.word	0x20000008

080039e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039ec:	f7ff fff0 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 80039f0:	4602      	mov	r2, r0
 80039f2:	4b06      	ldr	r3, [pc, #24]	@ (8003a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	4904      	ldr	r1, [pc, #16]	@ (8003a10 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039fe:	5ccb      	ldrb	r3, [r1, r3]
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	080067b8 	.word	0x080067b8

08003a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a18:	f7ff ffda 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	0adb      	lsrs	r3, r3, #11
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4904      	ldr	r1, [pc, #16]	@ (8003a3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a2a:	5ccb      	ldrb	r3, [r1, r3]
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	080067b8 	.word	0x080067b8

08003a40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a50:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d10c      	bne.n	8003a7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a64:	4a17      	ldr	r2, [pc, #92]	@ (8003ac4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6c:	4a14      	ldr	r2, [pc, #80]	@ (8003ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a6e:	68d2      	ldr	r2, [r2, #12]
 8003a70:	0a12      	lsrs	r2, r2, #8
 8003a72:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	617b      	str	r3, [r7, #20]
    break;
 8003a7c:	e00c      	b.n	8003a98 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a7e:	4a12      	ldr	r2, [pc, #72]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a86:	4a0e      	ldr	r2, [pc, #56]	@ (8003ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a88:	68d2      	ldr	r2, [r2, #12]
 8003a8a:	0a12      	lsrs	r2, r2, #8
 8003a8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a90:	fb02 f303 	mul.w	r3, r2, r3
 8003a94:	617b      	str	r3, [r7, #20]
    break;
 8003a96:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a98:	4b09      	ldr	r3, [pc, #36]	@ (8003ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	0e5b      	lsrs	r3, r3, #25
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ab2:	687b      	ldr	r3, [r7, #4]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	007a1200 	.word	0x007a1200
 8003ac8:	00f42400 	.word	0x00f42400

08003acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ad8:	2300      	movs	r3, #0
 8003ada:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8098 	beq.w	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aea:	2300      	movs	r3, #0
 8003aec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aee:	4b43      	ldr	r3, [pc, #268]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10d      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afa:	4b40      	ldr	r3, [pc, #256]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afe:	4a3f      	ldr	r2, [pc, #252]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b04:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b06:	4b3d      	ldr	r3, [pc, #244]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0e:	60bb      	str	r3, [r7, #8]
 8003b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b12:	2301      	movs	r3, #1
 8003b14:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b16:	4b3a      	ldr	r3, [pc, #232]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a39      	ldr	r2, [pc, #228]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b22:	f7fd fb97 	bl	8001254 <HAL_GetTick>
 8003b26:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b28:	e009      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2a:	f7fd fb93 	bl	8001254 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d902      	bls.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	74fb      	strb	r3, [r7, #19]
        break;
 8003b3c:	e005      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b3e:	4b30      	ldr	r3, [pc, #192]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0ef      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b4a:	7cfb      	ldrb	r3, [r7, #19]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d159      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b50:	4b2a      	ldr	r3, [pc, #168]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b5a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01e      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d019      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b6c:	4b23      	ldr	r3, [pc, #140]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b78:	4b20      	ldr	r3, [pc, #128]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b88:	4b1c      	ldr	r3, [pc, #112]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b98:	4a18      	ldr	r2, [pc, #96]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fd fb53 	bl	8001254 <HAL_GetTick>
 8003bae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb0:	e00b      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f7fd fb4f 	bl	8001254 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d902      	bls.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	74fb      	strb	r3, [r7, #19]
            break;
 8003bc8:	e006      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bca:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ec      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003bd8:	7cfb      	ldrb	r3, [r7, #19]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10b      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bde:	4b07      	ldr	r3, [pc, #28]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bec:	4903      	ldr	r1, [pc, #12]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003bf4:	e008      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bf6:	7cfb      	ldrb	r3, [r7, #19]
 8003bf8:	74bb      	strb	r3, [r7, #18]
 8003bfa:	e005      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c04:	7cfb      	ldrb	r3, [r7, #19]
 8003c06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c08:	7c7b      	ldrb	r3, [r7, #17]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d105      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0e:	4ba6      	ldr	r3, [pc, #664]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c12:	4aa5      	ldr	r2, [pc, #660]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c18:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c26:	4ba0      	ldr	r3, [pc, #640]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2c:	f023 0203 	bic.w	r2, r3, #3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	499c      	ldr	r1, [pc, #624]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c48:	4b97      	ldr	r3, [pc, #604]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4e:	f023 020c 	bic.w	r2, r3, #12
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	4994      	ldr	r1, [pc, #592]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c6a:	4b8f      	ldr	r3, [pc, #572]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	498b      	ldr	r1, [pc, #556]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c8c:	4b86      	ldr	r3, [pc, #536]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	4983      	ldr	r1, [pc, #524]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cae:	4b7e      	ldr	r3, [pc, #504]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	497a      	ldr	r1, [pc, #488]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cd0:	4b75      	ldr	r3, [pc, #468]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	4972      	ldr	r1, [pc, #456]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	4969      	ldr	r1, [pc, #420]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d14:	4b64      	ldr	r3, [pc, #400]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	4961      	ldr	r1, [pc, #388]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d36:	4b5c      	ldr	r3, [pc, #368]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d44:	4958      	ldr	r1, [pc, #352]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d015      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d58:	4b53      	ldr	r3, [pc, #332]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d66:	4950      	ldr	r1, [pc, #320]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d76:	d105      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d78:	4b4b      	ldr	r3, [pc, #300]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4a4a      	ldr	r2, [pc, #296]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d015      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d90:	4b45      	ldr	r3, [pc, #276]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	4942      	ldr	r1, [pc, #264]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003daa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dae:	d105      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d015      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dc8:	4b37      	ldr	r3, [pc, #220]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	4934      	ldr	r1, [pc, #208]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003de6:	d105      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de8:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	4a2e      	ldr	r2, [pc, #184]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003df2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d015      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e00:	4b29      	ldr	r3, [pc, #164]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e0e:	4926      	ldr	r1, [pc, #152]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e20:	4b21      	ldr	r3, [pc, #132]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4a20      	ldr	r2, [pc, #128]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e2a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d015      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e46:	4918      	ldr	r1, [pc, #96]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e56:	d105      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e58:	4b13      	ldr	r3, [pc, #76]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4a12      	ldr	r2, [pc, #72]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d015      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e70:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e76:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7e:	490a      	ldr	r1, [pc, #40]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e8e:	d105      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e90:	4b05      	ldr	r3, [pc, #20]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4a04      	ldr	r2, [pc, #16]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003e9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000

08003eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e049      	b.n	8003f52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fc ffc0 	bl	8000e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4610      	mov	r0, r2
 8003eec:	f000 fd26 	bl	800493c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e049      	b.n	8004000 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d106      	bne.n	8003f86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f841 	bl	8004008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3304      	adds	r3, #4
 8003f96:	4619      	mov	r1, r3
 8003f98:	4610      	mov	r0, r2
 8003f9a:	f000 fccf 	bl	800493c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d109      	bne.n	8004040 <HAL_TIM_PWM_Start+0x24>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	bf14      	ite	ne
 8004038:	2301      	movne	r3, #1
 800403a:	2300      	moveq	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e03c      	b.n	80040ba <HAL_TIM_PWM_Start+0x9e>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b04      	cmp	r3, #4
 8004044:	d109      	bne.n	800405a <HAL_TIM_PWM_Start+0x3e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b01      	cmp	r3, #1
 8004050:	bf14      	ite	ne
 8004052:	2301      	movne	r3, #1
 8004054:	2300      	moveq	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	e02f      	b.n	80040ba <HAL_TIM_PWM_Start+0x9e>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b08      	cmp	r3, #8
 800405e:	d109      	bne.n	8004074 <HAL_TIM_PWM_Start+0x58>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b01      	cmp	r3, #1
 800406a:	bf14      	ite	ne
 800406c:	2301      	movne	r3, #1
 800406e:	2300      	moveq	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	e022      	b.n	80040ba <HAL_TIM_PWM_Start+0x9e>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b0c      	cmp	r3, #12
 8004078:	d109      	bne.n	800408e <HAL_TIM_PWM_Start+0x72>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	bf14      	ite	ne
 8004086:	2301      	movne	r3, #1
 8004088:	2300      	moveq	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	e015      	b.n	80040ba <HAL_TIM_PWM_Start+0x9e>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b10      	cmp	r3, #16
 8004092:	d109      	bne.n	80040a8 <HAL_TIM_PWM_Start+0x8c>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	bf14      	ite	ne
 80040a0:	2301      	movne	r3, #1
 80040a2:	2300      	moveq	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	e008      	b.n	80040ba <HAL_TIM_PWM_Start+0x9e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	bf14      	ite	ne
 80040b4:	2301      	movne	r3, #1
 80040b6:	2300      	moveq	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e097      	b.n	80041f2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <HAL_TIM_PWM_Start+0xb6>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040d0:	e023      	b.n	800411a <HAL_TIM_PWM_Start+0xfe>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d104      	bne.n	80040e2 <HAL_TIM_PWM_Start+0xc6>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040e0:	e01b      	b.n	800411a <HAL_TIM_PWM_Start+0xfe>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d104      	bne.n	80040f2 <HAL_TIM_PWM_Start+0xd6>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040f0:	e013      	b.n	800411a <HAL_TIM_PWM_Start+0xfe>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b0c      	cmp	r3, #12
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_PWM_Start+0xe6>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004100:	e00b      	b.n	800411a <HAL_TIM_PWM_Start+0xfe>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b10      	cmp	r3, #16
 8004106:	d104      	bne.n	8004112 <HAL_TIM_PWM_Start+0xf6>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004110:	e003      	b.n	800411a <HAL_TIM_PWM_Start+0xfe>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2201      	movs	r2, #1
 8004120:	6839      	ldr	r1, [r7, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f001 f838 	bl	8005198 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a33      	ldr	r2, [pc, #204]	@ (80041fc <HAL_TIM_PWM_Start+0x1e0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <HAL_TIM_PWM_Start+0x13e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a32      	ldr	r2, [pc, #200]	@ (8004200 <HAL_TIM_PWM_Start+0x1e4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00e      	beq.n	800415a <HAL_TIM_PWM_Start+0x13e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a30      	ldr	r2, [pc, #192]	@ (8004204 <HAL_TIM_PWM_Start+0x1e8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d009      	beq.n	800415a <HAL_TIM_PWM_Start+0x13e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a2f      	ldr	r2, [pc, #188]	@ (8004208 <HAL_TIM_PWM_Start+0x1ec>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d004      	beq.n	800415a <HAL_TIM_PWM_Start+0x13e>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a2d      	ldr	r2, [pc, #180]	@ (800420c <HAL_TIM_PWM_Start+0x1f0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d101      	bne.n	800415e <HAL_TIM_PWM_Start+0x142>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <HAL_TIM_PWM_Start+0x144>
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004172:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a20      	ldr	r2, [pc, #128]	@ (80041fc <HAL_TIM_PWM_Start+0x1e0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d018      	beq.n	80041b0 <HAL_TIM_PWM_Start+0x194>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004186:	d013      	beq.n	80041b0 <HAL_TIM_PWM_Start+0x194>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a20      	ldr	r2, [pc, #128]	@ (8004210 <HAL_TIM_PWM_Start+0x1f4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00e      	beq.n	80041b0 <HAL_TIM_PWM_Start+0x194>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1f      	ldr	r2, [pc, #124]	@ (8004214 <HAL_TIM_PWM_Start+0x1f8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d009      	beq.n	80041b0 <HAL_TIM_PWM_Start+0x194>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a17      	ldr	r2, [pc, #92]	@ (8004200 <HAL_TIM_PWM_Start+0x1e4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d004      	beq.n	80041b0 <HAL_TIM_PWM_Start+0x194>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a16      	ldr	r2, [pc, #88]	@ (8004204 <HAL_TIM_PWM_Start+0x1e8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d115      	bne.n	80041dc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	4b18      	ldr	r3, [pc, #96]	@ (8004218 <HAL_TIM_PWM_Start+0x1fc>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b06      	cmp	r3, #6
 80041c0:	d015      	beq.n	80041ee <HAL_TIM_PWM_Start+0x1d2>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041c8:	d011      	beq.n	80041ee <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041da:	e008      	b.n	80041ee <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e000      	b.n	80041f0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40012c00 	.word	0x40012c00
 8004200:	40013400 	.word	0x40013400
 8004204:	40014000 	.word	0x40014000
 8004208:	40014400 	.word	0x40014400
 800420c:	40014800 	.word	0x40014800
 8004210:	40000400 	.word	0x40000400
 8004214:	40000800 	.word	0x40000800
 8004218:	00010007 	.word	0x00010007

0800421c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d020      	beq.n	8004280 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01b      	beq.n	8004280 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0202 	mvn.w	r2, #2
 8004250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fb4a 	bl	8004900 <HAL_TIM_IC_CaptureCallback>
 800426c:	e005      	b.n	800427a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fb3c 	bl	80048ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fb4d 	bl	8004914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d020      	beq.n	80042cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01b      	beq.n	80042cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0204 	mvn.w	r2, #4
 800429c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fb24 	bl	8004900 <HAL_TIM_IC_CaptureCallback>
 80042b8:	e005      	b.n	80042c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fb16 	bl	80048ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fb27 	bl	8004914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d020      	beq.n	8004318 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01b      	beq.n	8004318 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0208 	mvn.w	r2, #8
 80042e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2204      	movs	r2, #4
 80042ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fafe 	bl	8004900 <HAL_TIM_IC_CaptureCallback>
 8004304:	e005      	b.n	8004312 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 faf0 	bl	80048ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fb01 	bl	8004914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f003 0310 	and.w	r3, r3, #16
 800431e:	2b00      	cmp	r3, #0
 8004320:	d020      	beq.n	8004364 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01b      	beq.n	8004364 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0210 	mvn.w	r2, #16
 8004334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2208      	movs	r2, #8
 800433a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fad8 	bl	8004900 <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 faca 	bl	80048ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fadb 	bl	8004914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00c      	beq.n	8004388 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0201 	mvn.w	r2, #1
 8004380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 faa8 	bl	80048d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800438e:	2b00      	cmp	r3, #0
 8004390:	d104      	bne.n	800439c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00c      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80043ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 ffa3 	bl	80052fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00c      	beq.n	80043da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80043d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 ff9b 	bl	8005310 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00c      	beq.n	80043fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d007      	beq.n	80043fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fa95 	bl	8004928 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00c      	beq.n	8004422 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	d007      	beq.n	8004422 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f06f 0220 	mvn.w	r2, #32
 800441a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 ff63 	bl	80052e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00c      	beq.n	8004446 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800443e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 ff6f 	bl	8005324 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00c      	beq.n	800446a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d007      	beq.n	800446a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 ff67 	bl	8005338 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00c      	beq.n	800448e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 ff5f 	bl	800534c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00c      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80044aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 ff57 	bl	8005360 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e0ff      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b14      	cmp	r3, #20
 80044e6:	f200 80f0 	bhi.w	80046ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80044ea:	a201      	add	r2, pc, #4	@ (adr r2, 80044f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f0:	08004545 	.word	0x08004545
 80044f4:	080046cb 	.word	0x080046cb
 80044f8:	080046cb 	.word	0x080046cb
 80044fc:	080046cb 	.word	0x080046cb
 8004500:	08004585 	.word	0x08004585
 8004504:	080046cb 	.word	0x080046cb
 8004508:	080046cb 	.word	0x080046cb
 800450c:	080046cb 	.word	0x080046cb
 8004510:	080045c7 	.word	0x080045c7
 8004514:	080046cb 	.word	0x080046cb
 8004518:	080046cb 	.word	0x080046cb
 800451c:	080046cb 	.word	0x080046cb
 8004520:	08004607 	.word	0x08004607
 8004524:	080046cb 	.word	0x080046cb
 8004528:	080046cb 	.word	0x080046cb
 800452c:	080046cb 	.word	0x080046cb
 8004530:	08004649 	.word	0x08004649
 8004534:	080046cb 	.word	0x080046cb
 8004538:	080046cb 	.word	0x080046cb
 800453c:	080046cb 	.word	0x080046cb
 8004540:	08004689 	.word	0x08004689
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fa92 	bl	8004a74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0208 	orr.w	r2, r2, #8
 800455e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0204 	bic.w	r2, r2, #4
 800456e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6999      	ldr	r1, [r3, #24]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	619a      	str	r2, [r3, #24]
      break;
 8004582:	e0a5      	b.n	80046d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fb02 	bl	8004b94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800459e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6999      	ldr	r1, [r3, #24]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	021a      	lsls	r2, r3, #8
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	619a      	str	r2, [r3, #24]
      break;
 80045c4:	e084      	b.n	80046d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fb6b 	bl	8004ca8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0208 	orr.w	r2, r2, #8
 80045e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69da      	ldr	r2, [r3, #28]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0204 	bic.w	r2, r2, #4
 80045f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69d9      	ldr	r1, [r3, #28]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	61da      	str	r2, [r3, #28]
      break;
 8004604:	e064      	b.n	80046d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fbd3 	bl	8004db8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69d9      	ldr	r1, [r3, #28]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	021a      	lsls	r2, r3, #8
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	61da      	str	r2, [r3, #28]
      break;
 8004646:	e043      	b.n	80046d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fc3c 	bl	8004ecc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0208 	orr.w	r2, r2, #8
 8004662:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0204 	bic.w	r2, r2, #4
 8004672:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004686:	e023      	b.n	80046d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fc80 	bl	8004f94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	021a      	lsls	r2, r3, #8
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80046c8:	e002      	b.n	80046d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	75fb      	strb	r3, [r7, #23]
      break;
 80046ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop

080046e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_TIM_ConfigClockSource+0x1c>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e0de      	b.n	80048be <HAL_TIM_ConfigClockSource+0x1da>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800471e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800472a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a63      	ldr	r2, [pc, #396]	@ (80048c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	f000 80a9 	beq.w	8004892 <HAL_TIM_ConfigClockSource+0x1ae>
 8004740:	4a61      	ldr	r2, [pc, #388]	@ (80048c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	f200 80ae 	bhi.w	80048a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004748:	4a60      	ldr	r2, [pc, #384]	@ (80048cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	f000 80a1 	beq.w	8004892 <HAL_TIM_ConfigClockSource+0x1ae>
 8004750:	4a5e      	ldr	r2, [pc, #376]	@ (80048cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	f200 80a6 	bhi.w	80048a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004758:	4a5d      	ldr	r2, [pc, #372]	@ (80048d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800475a:	4293      	cmp	r3, r2
 800475c:	f000 8099 	beq.w	8004892 <HAL_TIM_ConfigClockSource+0x1ae>
 8004760:	4a5b      	ldr	r2, [pc, #364]	@ (80048d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004762:	4293      	cmp	r3, r2
 8004764:	f200 809e 	bhi.w	80048a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004768:	4a5a      	ldr	r2, [pc, #360]	@ (80048d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	f000 8091 	beq.w	8004892 <HAL_TIM_ConfigClockSource+0x1ae>
 8004770:	4a58      	ldr	r2, [pc, #352]	@ (80048d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	f200 8096 	bhi.w	80048a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004778:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800477c:	f000 8089 	beq.w	8004892 <HAL_TIM_ConfigClockSource+0x1ae>
 8004780:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004784:	f200 808e 	bhi.w	80048a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004788:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800478c:	d03e      	beq.n	800480c <HAL_TIM_ConfigClockSource+0x128>
 800478e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004792:	f200 8087 	bhi.w	80048a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479a:	f000 8086 	beq.w	80048aa <HAL_TIM_ConfigClockSource+0x1c6>
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a2:	d87f      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80047a4:	2b70      	cmp	r3, #112	@ 0x70
 80047a6:	d01a      	beq.n	80047de <HAL_TIM_ConfigClockSource+0xfa>
 80047a8:	2b70      	cmp	r3, #112	@ 0x70
 80047aa:	d87b      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80047ac:	2b60      	cmp	r3, #96	@ 0x60
 80047ae:	d050      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x16e>
 80047b0:	2b60      	cmp	r3, #96	@ 0x60
 80047b2:	d877      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80047b4:	2b50      	cmp	r3, #80	@ 0x50
 80047b6:	d03c      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x14e>
 80047b8:	2b50      	cmp	r3, #80	@ 0x50
 80047ba:	d873      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80047bc:	2b40      	cmp	r3, #64	@ 0x40
 80047be:	d058      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0x18e>
 80047c0:	2b40      	cmp	r3, #64	@ 0x40
 80047c2:	d86f      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80047c4:	2b30      	cmp	r3, #48	@ 0x30
 80047c6:	d064      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x1ae>
 80047c8:	2b30      	cmp	r3, #48	@ 0x30
 80047ca:	d86b      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d060      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x1ae>
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d867      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d05c      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x1ae>
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d05a      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x1ae>
 80047dc:	e062      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047ee:	f000 fcb3 	bl	8005158 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	609a      	str	r2, [r3, #8]
      break;
 800480a:	e04f      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800481c:	f000 fc9c 	bl	8005158 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800482e:	609a      	str	r2, [r3, #8]
      break;
 8004830:	e03c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483e:	461a      	mov	r2, r3
 8004840:	f000 fc0e 	bl	8005060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2150      	movs	r1, #80	@ 0x50
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fc67 	bl	800511e <TIM_ITRx_SetConfig>
      break;
 8004850:	e02c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800485e:	461a      	mov	r2, r3
 8004860:	f000 fc2d 	bl	80050be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2160      	movs	r1, #96	@ 0x60
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fc57 	bl	800511e <TIM_ITRx_SetConfig>
      break;
 8004870:	e01c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487e:	461a      	mov	r2, r3
 8004880:	f000 fbee 	bl	8005060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2140      	movs	r1, #64	@ 0x40
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fc47 	bl	800511e <TIM_ITRx_SetConfig>
      break;
 8004890:	e00c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4619      	mov	r1, r3
 800489c:	4610      	mov	r0, r2
 800489e:	f000 fc3e 	bl	800511e <TIM_ITRx_SetConfig>
      break;
 80048a2:	e003      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
      break;
 80048a8:	e000      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80048aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	00100070 	.word	0x00100070
 80048cc:	00100040 	.word	0x00100040
 80048d0:	00100030 	.word	0x00100030
 80048d4:	00100020 	.word	0x00100020

080048d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a42      	ldr	r2, [pc, #264]	@ (8004a58 <TIM_Base_SetConfig+0x11c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00f      	beq.n	8004974 <TIM_Base_SetConfig+0x38>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800495a:	d00b      	beq.n	8004974 <TIM_Base_SetConfig+0x38>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a3f      	ldr	r2, [pc, #252]	@ (8004a5c <TIM_Base_SetConfig+0x120>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d007      	beq.n	8004974 <TIM_Base_SetConfig+0x38>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a3e      	ldr	r2, [pc, #248]	@ (8004a60 <TIM_Base_SetConfig+0x124>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <TIM_Base_SetConfig+0x38>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a3d      	ldr	r2, [pc, #244]	@ (8004a64 <TIM_Base_SetConfig+0x128>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d108      	bne.n	8004986 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a33      	ldr	r2, [pc, #204]	@ (8004a58 <TIM_Base_SetConfig+0x11c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d01b      	beq.n	80049c6 <TIM_Base_SetConfig+0x8a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004994:	d017      	beq.n	80049c6 <TIM_Base_SetConfig+0x8a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a30      	ldr	r2, [pc, #192]	@ (8004a5c <TIM_Base_SetConfig+0x120>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d013      	beq.n	80049c6 <TIM_Base_SetConfig+0x8a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2f      	ldr	r2, [pc, #188]	@ (8004a60 <TIM_Base_SetConfig+0x124>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00f      	beq.n	80049c6 <TIM_Base_SetConfig+0x8a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004a64 <TIM_Base_SetConfig+0x128>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00b      	beq.n	80049c6 <TIM_Base_SetConfig+0x8a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004a68 <TIM_Base_SetConfig+0x12c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d007      	beq.n	80049c6 <TIM_Base_SetConfig+0x8a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a2c      	ldr	r2, [pc, #176]	@ (8004a6c <TIM_Base_SetConfig+0x130>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_Base_SetConfig+0x8a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004a70 <TIM_Base_SetConfig+0x134>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d108      	bne.n	80049d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a16      	ldr	r2, [pc, #88]	@ (8004a58 <TIM_Base_SetConfig+0x11c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00f      	beq.n	8004a24 <TIM_Base_SetConfig+0xe8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a17      	ldr	r2, [pc, #92]	@ (8004a64 <TIM_Base_SetConfig+0x128>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00b      	beq.n	8004a24 <TIM_Base_SetConfig+0xe8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a16      	ldr	r2, [pc, #88]	@ (8004a68 <TIM_Base_SetConfig+0x12c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d007      	beq.n	8004a24 <TIM_Base_SetConfig+0xe8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a15      	ldr	r2, [pc, #84]	@ (8004a6c <TIM_Base_SetConfig+0x130>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_Base_SetConfig+0xe8>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a14      	ldr	r2, [pc, #80]	@ (8004a70 <TIM_Base_SetConfig+0x134>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d103      	bne.n	8004a2c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d105      	bne.n	8004a4a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f023 0201 	bic.w	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	611a      	str	r2, [r3, #16]
  }
}
 8004a4a:	bf00      	nop
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40012c00 	.word	0x40012c00
 8004a5c:	40000400 	.word	0x40000400
 8004a60:	40000800 	.word	0x40000800
 8004a64:	40013400 	.word	0x40013400
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40014400 	.word	0x40014400
 8004a70:	40014800 	.word	0x40014800

08004a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	f023 0201 	bic.w	r2, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0303 	bic.w	r3, r3, #3
 8004aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f023 0302 	bic.w	r3, r3, #2
 8004ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a2c      	ldr	r2, [pc, #176]	@ (8004b80 <TIM_OC1_SetConfig+0x10c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00f      	beq.n	8004af4 <TIM_OC1_SetConfig+0x80>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a2b      	ldr	r2, [pc, #172]	@ (8004b84 <TIM_OC1_SetConfig+0x110>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00b      	beq.n	8004af4 <TIM_OC1_SetConfig+0x80>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a2a      	ldr	r2, [pc, #168]	@ (8004b88 <TIM_OC1_SetConfig+0x114>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d007      	beq.n	8004af4 <TIM_OC1_SetConfig+0x80>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a29      	ldr	r2, [pc, #164]	@ (8004b8c <TIM_OC1_SetConfig+0x118>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_OC1_SetConfig+0x80>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a28      	ldr	r2, [pc, #160]	@ (8004b90 <TIM_OC1_SetConfig+0x11c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d10c      	bne.n	8004b0e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f023 0308 	bic.w	r3, r3, #8
 8004afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f023 0304 	bic.w	r3, r3, #4
 8004b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a1b      	ldr	r2, [pc, #108]	@ (8004b80 <TIM_OC1_SetConfig+0x10c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00f      	beq.n	8004b36 <TIM_OC1_SetConfig+0xc2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a1a      	ldr	r2, [pc, #104]	@ (8004b84 <TIM_OC1_SetConfig+0x110>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <TIM_OC1_SetConfig+0xc2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a19      	ldr	r2, [pc, #100]	@ (8004b88 <TIM_OC1_SetConfig+0x114>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <TIM_OC1_SetConfig+0xc2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a18      	ldr	r2, [pc, #96]	@ (8004b8c <TIM_OC1_SetConfig+0x118>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_OC1_SetConfig+0xc2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a17      	ldr	r2, [pc, #92]	@ (8004b90 <TIM_OC1_SetConfig+0x11c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d111      	bne.n	8004b5a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	621a      	str	r2, [r3, #32]
}
 8004b74:	bf00      	nop
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	40012c00 	.word	0x40012c00
 8004b84:	40013400 	.word	0x40013400
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40014400 	.word	0x40014400
 8004b90:	40014800 	.word	0x40014800

08004b94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	f023 0210 	bic.w	r2, r3, #16
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f023 0320 	bic.w	r3, r3, #32
 8004be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a28      	ldr	r2, [pc, #160]	@ (8004c94 <TIM_OC2_SetConfig+0x100>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d003      	beq.n	8004c00 <TIM_OC2_SetConfig+0x6c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a27      	ldr	r2, [pc, #156]	@ (8004c98 <TIM_OC2_SetConfig+0x104>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d10d      	bne.n	8004c1c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004c94 <TIM_OC2_SetConfig+0x100>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00f      	beq.n	8004c44 <TIM_OC2_SetConfig+0xb0>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a1c      	ldr	r2, [pc, #112]	@ (8004c98 <TIM_OC2_SetConfig+0x104>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00b      	beq.n	8004c44 <TIM_OC2_SetConfig+0xb0>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004c9c <TIM_OC2_SetConfig+0x108>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d007      	beq.n	8004c44 <TIM_OC2_SetConfig+0xb0>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a1a      	ldr	r2, [pc, #104]	@ (8004ca0 <TIM_OC2_SetConfig+0x10c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <TIM_OC2_SetConfig+0xb0>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a19      	ldr	r2, [pc, #100]	@ (8004ca4 <TIM_OC2_SetConfig+0x110>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d113      	bne.n	8004c6c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	621a      	str	r2, [r3, #32]
}
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40012c00 	.word	0x40012c00
 8004c98:	40013400 	.word	0x40013400
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40014400 	.word	0x40014400
 8004ca4:	40014800 	.word	0x40014800

08004ca8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0303 	bic.w	r3, r3, #3
 8004ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	021b      	lsls	r3, r3, #8
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a27      	ldr	r2, [pc, #156]	@ (8004da4 <TIM_OC3_SetConfig+0xfc>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_OC3_SetConfig+0x6a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a26      	ldr	r2, [pc, #152]	@ (8004da8 <TIM_OC3_SetConfig+0x100>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d10d      	bne.n	8004d2e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a1c      	ldr	r2, [pc, #112]	@ (8004da4 <TIM_OC3_SetConfig+0xfc>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00f      	beq.n	8004d56 <TIM_OC3_SetConfig+0xae>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a1b      	ldr	r2, [pc, #108]	@ (8004da8 <TIM_OC3_SetConfig+0x100>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00b      	beq.n	8004d56 <TIM_OC3_SetConfig+0xae>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a1a      	ldr	r2, [pc, #104]	@ (8004dac <TIM_OC3_SetConfig+0x104>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d007      	beq.n	8004d56 <TIM_OC3_SetConfig+0xae>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a19      	ldr	r2, [pc, #100]	@ (8004db0 <TIM_OC3_SetConfig+0x108>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_OC3_SetConfig+0xae>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a18      	ldr	r2, [pc, #96]	@ (8004db4 <TIM_OC3_SetConfig+0x10c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d113      	bne.n	8004d7e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	621a      	str	r2, [r3, #32]
}
 8004d98:	bf00      	nop
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	40013400 	.word	0x40013400
 8004dac:	40014000 	.word	0x40014000
 8004db0:	40014400 	.word	0x40014400
 8004db4:	40014800 	.word	0x40014800

08004db8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004de6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	031b      	lsls	r3, r3, #12
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a28      	ldr	r2, [pc, #160]	@ (8004eb8 <TIM_OC4_SetConfig+0x100>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_OC4_SetConfig+0x6c>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a27      	ldr	r2, [pc, #156]	@ (8004ebc <TIM_OC4_SetConfig+0x104>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d10d      	bne.n	8004e40 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	031b      	lsls	r3, r3, #12
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb8 <TIM_OC4_SetConfig+0x100>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00f      	beq.n	8004e68 <TIM_OC4_SetConfig+0xb0>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ebc <TIM_OC4_SetConfig+0x104>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00b      	beq.n	8004e68 <TIM_OC4_SetConfig+0xb0>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec0 <TIM_OC4_SetConfig+0x108>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d007      	beq.n	8004e68 <TIM_OC4_SetConfig+0xb0>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ec4 <TIM_OC4_SetConfig+0x10c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_OC4_SetConfig+0xb0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a19      	ldr	r2, [pc, #100]	@ (8004ec8 <TIM_OC4_SetConfig+0x110>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d113      	bne.n	8004e90 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e6e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004e76:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	019b      	lsls	r3, r3, #6
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	019b      	lsls	r3, r3, #6
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	621a      	str	r2, [r3, #32]
}
 8004eaa:	bf00      	nop
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40012c00 	.word	0x40012c00
 8004ebc:	40013400 	.word	0x40013400
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40014400 	.word	0x40014400
 8004ec8:	40014800 	.word	0x40014800

08004ecc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004f10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a17      	ldr	r2, [pc, #92]	@ (8004f80 <TIM_OC5_SetConfig+0xb4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00f      	beq.n	8004f46 <TIM_OC5_SetConfig+0x7a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a16      	ldr	r2, [pc, #88]	@ (8004f84 <TIM_OC5_SetConfig+0xb8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00b      	beq.n	8004f46 <TIM_OC5_SetConfig+0x7a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a15      	ldr	r2, [pc, #84]	@ (8004f88 <TIM_OC5_SetConfig+0xbc>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d007      	beq.n	8004f46 <TIM_OC5_SetConfig+0x7a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a14      	ldr	r2, [pc, #80]	@ (8004f8c <TIM_OC5_SetConfig+0xc0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d003      	beq.n	8004f46 <TIM_OC5_SetConfig+0x7a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a13      	ldr	r2, [pc, #76]	@ (8004f90 <TIM_OC5_SetConfig+0xc4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d109      	bne.n	8004f5a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	621a      	str	r2, [r3, #32]
}
 8004f74:	bf00      	nop
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	40012c00 	.word	0x40012c00
 8004f84:	40013400 	.word	0x40013400
 8004f88:	40014000 	.word	0x40014000
 8004f8c:	40014400 	.word	0x40014400
 8004f90:	40014800 	.word	0x40014800

08004f94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	051b      	lsls	r3, r3, #20
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a18      	ldr	r2, [pc, #96]	@ (800504c <TIM_OC6_SetConfig+0xb8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00f      	beq.n	8005010 <TIM_OC6_SetConfig+0x7c>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a17      	ldr	r2, [pc, #92]	@ (8005050 <TIM_OC6_SetConfig+0xbc>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00b      	beq.n	8005010 <TIM_OC6_SetConfig+0x7c>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a16      	ldr	r2, [pc, #88]	@ (8005054 <TIM_OC6_SetConfig+0xc0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d007      	beq.n	8005010 <TIM_OC6_SetConfig+0x7c>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a15      	ldr	r2, [pc, #84]	@ (8005058 <TIM_OC6_SetConfig+0xc4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_OC6_SetConfig+0x7c>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a14      	ldr	r2, [pc, #80]	@ (800505c <TIM_OC6_SetConfig+0xc8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d109      	bne.n	8005024 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005016:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	029b      	lsls	r3, r3, #10
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40012c00 	.word	0x40012c00
 8005050:	40013400 	.word	0x40013400
 8005054:	40014000 	.word	0x40014000
 8005058:	40014400 	.word	0x40014400
 800505c:	40014800 	.word	0x40014800

08005060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f023 0201 	bic.w	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800508a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4313      	orrs	r3, r2
 8005094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f023 030a 	bic.w	r3, r3, #10
 800509c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050be:	b480      	push	{r7}
 80050c0:	b087      	sub	sp, #28
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	f023 0210 	bic.w	r2, r3, #16
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	031b      	lsls	r3, r3, #12
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	bf00      	nop
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800511e:	b480      	push	{r7}
 8005120:	b085      	sub	sp, #20
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005138:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	f043 0307 	orr.w	r3, r3, #7
 8005144:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	609a      	str	r2, [r3, #8]
}
 800514c:	bf00      	nop
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005172:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	021a      	lsls	r2, r3, #8
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	431a      	orrs	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4313      	orrs	r3, r2
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	609a      	str	r2, [r3, #8]
}
 800518c:	bf00      	nop
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f003 031f 	and.w	r3, r3, #31
 80051aa:	2201      	movs	r2, #1
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a1a      	ldr	r2, [r3, #32]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	43db      	mvns	r3, r3
 80051ba:	401a      	ands	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a1a      	ldr	r2, [r3, #32]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	fa01 f303 	lsl.w	r3, r1, r3
 80051d0:	431a      	orrs	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	621a      	str	r2, [r3, #32]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
	...

080051e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e065      	b.n	80052c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a2c      	ldr	r2, [pc, #176]	@ (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d004      	beq.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a2b      	ldr	r2, [pc, #172]	@ (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d108      	bne.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005236:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800524c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1b      	ldr	r2, [pc, #108]	@ (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d018      	beq.n	800529c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005272:	d013      	beq.n	800529c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a18      	ldr	r2, [pc, #96]	@ (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00e      	beq.n	800529c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a17      	ldr	r2, [pc, #92]	@ (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d009      	beq.n	800529c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a12      	ldr	r2, [pc, #72]	@ (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d004      	beq.n	800529c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a13      	ldr	r2, [pc, #76]	@ (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d10c      	bne.n	80052b6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40013400 	.word	0x40013400
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800
 80052e4:	40014000 	.word	0x40014000

080052e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e042      	b.n	800540c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538c:	2b00      	cmp	r3, #0
 800538e:	d106      	bne.n	800539e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7fb fdf7 	bl	8000f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2224      	movs	r2, #36	@ 0x24
 80053a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0201 	bic.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fe38 	bl	8006034 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fb69 	bl	8005a9c <UART_SetConfig>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e01b      	b.n	800540c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 feb7 	bl	8006178 <UART_CheckIdleState>
 800540a:	4603      	mov	r3, r0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b0ba      	sub	sp, #232	@ 0xe8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800543a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800543e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005442:	4013      	ands	r3, r2
 8005444:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005448:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800544c:	2b00      	cmp	r3, #0
 800544e:	d11b      	bne.n	8005488 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d015      	beq.n	8005488 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800545c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	d105      	bne.n	8005474 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800546c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d009      	beq.n	8005488 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 82e3 	beq.w	8005a44 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	4798      	blx	r3
      }
      return;
 8005486:	e2dd      	b.n	8005a44 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005488:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8123 	beq.w	80056d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005492:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005496:	4b8d      	ldr	r3, [pc, #564]	@ (80056cc <HAL_UART_IRQHandler+0x2b8>)
 8005498:	4013      	ands	r3, r2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800549e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80054a2:	4b8b      	ldr	r3, [pc, #556]	@ (80056d0 <HAL_UART_IRQHandler+0x2bc>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 8116 	beq.w	80056d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d011      	beq.n	80054dc <HAL_UART_IRQHandler+0xc8>
 80054b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00b      	beq.n	80054dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2201      	movs	r2, #1
 80054ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d2:	f043 0201 	orr.w	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d011      	beq.n	800550c <HAL_UART_IRQHandler+0xf8>
 80054e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00b      	beq.n	800550c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2202      	movs	r2, #2
 80054fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005502:	f043 0204 	orr.w	r2, r3, #4
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800550c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d011      	beq.n	800553c <HAL_UART_IRQHandler+0x128>
 8005518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00b      	beq.n	800553c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2204      	movs	r2, #4
 800552a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005532:	f043 0202 	orr.w	r2, r3, #2
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800553c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b00      	cmp	r3, #0
 8005546:	d017      	beq.n	8005578 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b00      	cmp	r3, #0
 8005552:	d105      	bne.n	8005560 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005554:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005558:	4b5c      	ldr	r3, [pc, #368]	@ (80056cc <HAL_UART_IRQHandler+0x2b8>)
 800555a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00b      	beq.n	8005578 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2208      	movs	r2, #8
 8005566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800556e:	f043 0208 	orr.w	r2, r3, #8
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800557c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005580:	2b00      	cmp	r3, #0
 8005582:	d012      	beq.n	80055aa <HAL_UART_IRQHandler+0x196>
 8005584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005588:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00c      	beq.n	80055aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005598:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a0:	f043 0220 	orr.w	r2, r3, #32
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 8249 	beq.w	8005a48 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80055b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d013      	beq.n	80055ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80055c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d105      	bne.n	80055da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80055ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d007      	beq.n	80055ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fe:	2b40      	cmp	r3, #64	@ 0x40
 8005600:	d005      	beq.n	800560e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005606:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800560a:	2b00      	cmp	r3, #0
 800560c:	d054      	beq.n	80056b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fec9 	bl	80063a6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561e:	2b40      	cmp	r3, #64	@ 0x40
 8005620:	d146      	bne.n	80056b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3308      	adds	r3, #8
 8005628:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005638:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800563c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005640:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3308      	adds	r3, #8
 800564a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800564e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005652:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800565a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1d9      	bne.n	8005622 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005674:	2b00      	cmp	r3, #0
 8005676:	d017      	beq.n	80056a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800567e:	4a15      	ldr	r2, [pc, #84]	@ (80056d4 <HAL_UART_IRQHandler+0x2c0>)
 8005680:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005688:	4618      	mov	r0, r3
 800568a:	f7fd fa0b 	bl	8002aa4 <HAL_DMA_Abort_IT>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d019      	beq.n	80056c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800569a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80056a2:	4610      	mov	r0, r2
 80056a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a6:	e00f      	b.n	80056c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f9e1 	bl	8005a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ae:	e00b      	b.n	80056c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f9dd 	bl	8005a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b6:	e007      	b.n	80056c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f9d9 	bl	8005a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80056c6:	e1bf      	b.n	8005a48 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c8:	bf00      	nop
    return;
 80056ca:	e1bd      	b.n	8005a48 <HAL_UART_IRQHandler+0x634>
 80056cc:	10000001 	.word	0x10000001
 80056d0:	04000120 	.word	0x04000120
 80056d4:	08006473 	.word	0x08006473

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056dc:	2b01      	cmp	r3, #1
 80056de:	f040 8153 	bne.w	8005988 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 814c 	beq.w	8005988 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80056f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 8145 	beq.w	8005988 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2210      	movs	r2, #16
 8005704:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005710:	2b40      	cmp	r3, #64	@ 0x40
 8005712:	f040 80bb 	bne.w	800588c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005724:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 818f 	beq.w	8005a4c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005734:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005738:	429a      	cmp	r2, r3
 800573a:	f080 8187 	bcs.w	8005a4c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005744:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	f040 8087 	bne.w	800586a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005770:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005786:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800578a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005792:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800579e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1da      	bne.n	800575c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3308      	adds	r3, #8
 80057ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057b8:	f023 0301 	bic.w	r3, r3, #1
 80057bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3308      	adds	r3, #8
 80057c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80057dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e1      	bne.n	80057a6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3308      	adds	r3, #8
 80057e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80057f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3308      	adds	r3, #8
 8005802:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005806:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005808:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800580c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e3      	bne.n	80057e2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005838:	f023 0310 	bic.w	r3, r3, #16
 800583c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800584a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800584c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005850:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e4      	bne.n	8005828 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005864:	4618      	mov	r0, r3
 8005866:	f7fd f8c4 	bl	80029f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2202      	movs	r2, #2
 800586e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800587c:	b29b      	uxth	r3, r3
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	b29b      	uxth	r3, r3
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f8fd 	bl	8005a84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800588a:	e0df      	b.n	8005a4c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005898:	b29b      	uxth	r3, r3
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80d1 	beq.w	8005a50 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80058ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 80cc 	beq.w	8005a50 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80058da:	647b      	str	r3, [r7, #68]	@ 0x44
 80058dc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e4      	bne.n	80058b8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3308      	adds	r3, #8
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	623b      	str	r3, [r7, #32]
   return(result);
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005904:	f023 0301 	bic.w	r3, r3, #1
 8005908:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3308      	adds	r3, #8
 8005912:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005916:	633a      	str	r2, [r7, #48]	@ 0x30
 8005918:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800591c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e1      	bne.n	80058ee <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	e853 3f00 	ldrex	r3, [r3]
 800594a:	60fb      	str	r3, [r7, #12]
   return(result);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0310 	bic.w	r3, r3, #16
 8005952:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005960:	61fb      	str	r3, [r7, #28]
 8005962:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	69b9      	ldr	r1, [r7, #24]
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	617b      	str	r3, [r7, #20]
   return(result);
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e4      	bne.n	800593e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800597a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f87f 	bl	8005a84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005986:	e063      	b.n	8005a50 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800598c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00e      	beq.n	80059b2 <HAL_UART_IRQHandler+0x59e>
 8005994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005998:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d008      	beq.n	80059b2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80059a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fda2 	bl	80064f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059b0:	e051      	b.n	8005a56 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80059b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d014      	beq.n	80059e8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80059be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d105      	bne.n	80059d6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80059ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d008      	beq.n	80059e8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d03a      	beq.n	8005a54 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	4798      	blx	r3
    }
    return;
 80059e6:	e035      	b.n	8005a54 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <HAL_UART_IRQHandler+0x5f4>
 80059f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fd4c 	bl	800649e <UART_EndTransmit_IT>
    return;
 8005a06:	e026      	b.n	8005a56 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d009      	beq.n	8005a28 <HAL_UART_IRQHandler+0x614>
 8005a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a18:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fd7b 	bl	800651c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a26:	e016      	b.n	8005a56 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d010      	beq.n	8005a56 <HAL_UART_IRQHandler+0x642>
 8005a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	da0c      	bge.n	8005a56 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fd63 	bl	8006508 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a42:	e008      	b.n	8005a56 <HAL_UART_IRQHandler+0x642>
      return;
 8005a44:	bf00      	nop
 8005a46:	e006      	b.n	8005a56 <HAL_UART_IRQHandler+0x642>
    return;
 8005a48:	bf00      	nop
 8005a4a:	e004      	b.n	8005a56 <HAL_UART_IRQHandler+0x642>
      return;
 8005a4c:	bf00      	nop
 8005a4e:	e002      	b.n	8005a56 <HAL_UART_IRQHandler+0x642>
      return;
 8005a50:	bf00      	nop
 8005a52:	e000      	b.n	8005a56 <HAL_UART_IRQHandler+0x642>
    return;
 8005a54:	bf00      	nop
  }
}
 8005a56:	37e8      	adds	r7, #232	@ 0xe8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aa0:	b08c      	sub	sp, #48	@ 0x30
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	4bab      	ldr	r3, [pc, #684]	@ (8005d78 <UART_SetConfig+0x2dc>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4aa0      	ldr	r2, [pc, #640]	@ (8005d7c <UART_SetConfig+0x2e0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d004      	beq.n	8005b08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b04:	4313      	orrs	r3, r2
 8005b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005b12:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	6812      	ldr	r2, [r2, #0]
 8005b1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b26:	f023 010f 	bic.w	r1, r3, #15
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a91      	ldr	r2, [pc, #580]	@ (8005d80 <UART_SetConfig+0x2e4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d125      	bne.n	8005b8c <UART_SetConfig+0xf0>
 8005b40:	4b90      	ldr	r3, [pc, #576]	@ (8005d84 <UART_SetConfig+0x2e8>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d81a      	bhi.n	8005b84 <UART_SetConfig+0xe8>
 8005b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b54 <UART_SetConfig+0xb8>)
 8005b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b54:	08005b65 	.word	0x08005b65
 8005b58:	08005b75 	.word	0x08005b75
 8005b5c:	08005b6d 	.word	0x08005b6d
 8005b60:	08005b7d 	.word	0x08005b7d
 8005b64:	2301      	movs	r3, #1
 8005b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b6a:	e0d6      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b72:	e0d2      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005b74:	2304      	movs	r3, #4
 8005b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b7a:	e0ce      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b82:	e0ca      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005b84:	2310      	movs	r3, #16
 8005b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b8a:	e0c6      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a7d      	ldr	r2, [pc, #500]	@ (8005d88 <UART_SetConfig+0x2ec>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d138      	bne.n	8005c08 <UART_SetConfig+0x16c>
 8005b96:	4b7b      	ldr	r3, [pc, #492]	@ (8005d84 <UART_SetConfig+0x2e8>)
 8005b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9c:	f003 030c 	and.w	r3, r3, #12
 8005ba0:	2b0c      	cmp	r3, #12
 8005ba2:	d82d      	bhi.n	8005c00 <UART_SetConfig+0x164>
 8005ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bac <UART_SetConfig+0x110>)
 8005ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005baa:	bf00      	nop
 8005bac:	08005be1 	.word	0x08005be1
 8005bb0:	08005c01 	.word	0x08005c01
 8005bb4:	08005c01 	.word	0x08005c01
 8005bb8:	08005c01 	.word	0x08005c01
 8005bbc:	08005bf1 	.word	0x08005bf1
 8005bc0:	08005c01 	.word	0x08005c01
 8005bc4:	08005c01 	.word	0x08005c01
 8005bc8:	08005c01 	.word	0x08005c01
 8005bcc:	08005be9 	.word	0x08005be9
 8005bd0:	08005c01 	.word	0x08005c01
 8005bd4:	08005c01 	.word	0x08005c01
 8005bd8:	08005c01 	.word	0x08005c01
 8005bdc:	08005bf9 	.word	0x08005bf9
 8005be0:	2300      	movs	r3, #0
 8005be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005be6:	e098      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005be8:	2302      	movs	r3, #2
 8005bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bee:	e094      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bf6:	e090      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005bf8:	2308      	movs	r3, #8
 8005bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bfe:	e08c      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005c00:	2310      	movs	r3, #16
 8005c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c06:	e088      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a5f      	ldr	r2, [pc, #380]	@ (8005d8c <UART_SetConfig+0x2f0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d125      	bne.n	8005c5e <UART_SetConfig+0x1c2>
 8005c12:	4b5c      	ldr	r3, [pc, #368]	@ (8005d84 <UART_SetConfig+0x2e8>)
 8005c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005c1c:	2b30      	cmp	r3, #48	@ 0x30
 8005c1e:	d016      	beq.n	8005c4e <UART_SetConfig+0x1b2>
 8005c20:	2b30      	cmp	r3, #48	@ 0x30
 8005c22:	d818      	bhi.n	8005c56 <UART_SetConfig+0x1ba>
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d00a      	beq.n	8005c3e <UART_SetConfig+0x1a2>
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d814      	bhi.n	8005c56 <UART_SetConfig+0x1ba>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <UART_SetConfig+0x19a>
 8005c30:	2b10      	cmp	r3, #16
 8005c32:	d008      	beq.n	8005c46 <UART_SetConfig+0x1aa>
 8005c34:	e00f      	b.n	8005c56 <UART_SetConfig+0x1ba>
 8005c36:	2300      	movs	r3, #0
 8005c38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c3c:	e06d      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c44:	e069      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005c46:	2304      	movs	r3, #4
 8005c48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c4c:	e065      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005c4e:	2308      	movs	r3, #8
 8005c50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c54:	e061      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005c56:	2310      	movs	r3, #16
 8005c58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c5c:	e05d      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a4b      	ldr	r2, [pc, #300]	@ (8005d90 <UART_SetConfig+0x2f4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d125      	bne.n	8005cb4 <UART_SetConfig+0x218>
 8005c68:	4b46      	ldr	r3, [pc, #280]	@ (8005d84 <UART_SetConfig+0x2e8>)
 8005c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005c72:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c74:	d016      	beq.n	8005ca4 <UART_SetConfig+0x208>
 8005c76:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c78:	d818      	bhi.n	8005cac <UART_SetConfig+0x210>
 8005c7a:	2b80      	cmp	r3, #128	@ 0x80
 8005c7c:	d00a      	beq.n	8005c94 <UART_SetConfig+0x1f8>
 8005c7e:	2b80      	cmp	r3, #128	@ 0x80
 8005c80:	d814      	bhi.n	8005cac <UART_SetConfig+0x210>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <UART_SetConfig+0x1f0>
 8005c86:	2b40      	cmp	r3, #64	@ 0x40
 8005c88:	d008      	beq.n	8005c9c <UART_SetConfig+0x200>
 8005c8a:	e00f      	b.n	8005cac <UART_SetConfig+0x210>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c92:	e042      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005c94:	2302      	movs	r3, #2
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c9a:	e03e      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ca2:	e03a      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005ca4:	2308      	movs	r3, #8
 8005ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005caa:	e036      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005cac:	2310      	movs	r3, #16
 8005cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cb2:	e032      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a30      	ldr	r2, [pc, #192]	@ (8005d7c <UART_SetConfig+0x2e0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d12a      	bne.n	8005d14 <UART_SetConfig+0x278>
 8005cbe:	4b31      	ldr	r3, [pc, #196]	@ (8005d84 <UART_SetConfig+0x2e8>)
 8005cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005cc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ccc:	d01a      	beq.n	8005d04 <UART_SetConfig+0x268>
 8005cce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cd2:	d81b      	bhi.n	8005d0c <UART_SetConfig+0x270>
 8005cd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cd8:	d00c      	beq.n	8005cf4 <UART_SetConfig+0x258>
 8005cda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cde:	d815      	bhi.n	8005d0c <UART_SetConfig+0x270>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <UART_SetConfig+0x250>
 8005ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ce8:	d008      	beq.n	8005cfc <UART_SetConfig+0x260>
 8005cea:	e00f      	b.n	8005d0c <UART_SetConfig+0x270>
 8005cec:	2300      	movs	r3, #0
 8005cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cf2:	e012      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cfa:	e00e      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005cfc:	2304      	movs	r3, #4
 8005cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d02:	e00a      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005d04:	2308      	movs	r3, #8
 8005d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d0a:	e006      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d12:	e002      	b.n	8005d1a <UART_SetConfig+0x27e>
 8005d14:	2310      	movs	r3, #16
 8005d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a17      	ldr	r2, [pc, #92]	@ (8005d7c <UART_SetConfig+0x2e0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	f040 80a8 	bne.w	8005e76 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d834      	bhi.n	8005d98 <UART_SetConfig+0x2fc>
 8005d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d34 <UART_SetConfig+0x298>)
 8005d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d34:	08005d59 	.word	0x08005d59
 8005d38:	08005d99 	.word	0x08005d99
 8005d3c:	08005d61 	.word	0x08005d61
 8005d40:	08005d99 	.word	0x08005d99
 8005d44:	08005d67 	.word	0x08005d67
 8005d48:	08005d99 	.word	0x08005d99
 8005d4c:	08005d99 	.word	0x08005d99
 8005d50:	08005d99 	.word	0x08005d99
 8005d54:	08005d6f 	.word	0x08005d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d58:	f7fd fe46 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8005d5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d5e:	e021      	b.n	8005da4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d60:	4b0c      	ldr	r3, [pc, #48]	@ (8005d94 <UART_SetConfig+0x2f8>)
 8005d62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d64:	e01e      	b.n	8005da4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d66:	f7fd fdd1 	bl	800390c <HAL_RCC_GetSysClockFreq>
 8005d6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d6c:	e01a      	b.n	8005da4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d74:	e016      	b.n	8005da4 <UART_SetConfig+0x308>
 8005d76:	bf00      	nop
 8005d78:	cfff69f3 	.word	0xcfff69f3
 8005d7c:	40008000 	.word	0x40008000
 8005d80:	40013800 	.word	0x40013800
 8005d84:	40021000 	.word	0x40021000
 8005d88:	40004400 	.word	0x40004400
 8005d8c:	40004800 	.word	0x40004800
 8005d90:	40004c00 	.word	0x40004c00
 8005d94:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005da2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 812a 	beq.w	8006000 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db0:	4a9e      	ldr	r2, [pc, #632]	@ (800602c <UART_SetConfig+0x590>)
 8005db2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005db6:	461a      	mov	r2, r3
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	4413      	add	r3, r2
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d305      	bcc.n	8005ddc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d903      	bls.n	8005de4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005de2:	e10d      	b.n	8006000 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de6:	2200      	movs	r2, #0
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	60fa      	str	r2, [r7, #12]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df0:	4a8e      	ldr	r2, [pc, #568]	@ (800602c <UART_SetConfig+0x590>)
 8005df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2200      	movs	r2, #0
 8005dfa:	603b      	str	r3, [r7, #0]
 8005dfc:	607a      	str	r2, [r7, #4]
 8005dfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e06:	f7fa fa07 	bl	8000218 <__aeabi_uldivmod>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4610      	mov	r0, r2
 8005e10:	4619      	mov	r1, r3
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	f04f 0300 	mov.w	r3, #0
 8005e1a:	020b      	lsls	r3, r1, #8
 8005e1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e20:	0202      	lsls	r2, r0, #8
 8005e22:	6979      	ldr	r1, [r7, #20]
 8005e24:	6849      	ldr	r1, [r1, #4]
 8005e26:	0849      	lsrs	r1, r1, #1
 8005e28:	2000      	movs	r0, #0
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	eb12 0804 	adds.w	r8, r2, r4
 8005e32:	eb43 0905 	adc.w	r9, r3, r5
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	469a      	mov	sl, r3
 8005e3e:	4693      	mov	fp, r2
 8005e40:	4652      	mov	r2, sl
 8005e42:	465b      	mov	r3, fp
 8005e44:	4640      	mov	r0, r8
 8005e46:	4649      	mov	r1, r9
 8005e48:	f7fa f9e6 	bl	8000218 <__aeabi_uldivmod>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4613      	mov	r3, r2
 8005e52:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e5a:	d308      	bcc.n	8005e6e <UART_SetConfig+0x3d2>
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e62:	d204      	bcs.n	8005e6e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6a3a      	ldr	r2, [r7, #32]
 8005e6a:	60da      	str	r2, [r3, #12]
 8005e6c:	e0c8      	b.n	8006000 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e74:	e0c4      	b.n	8006000 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e7e:	d167      	bne.n	8005f50 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005e80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d828      	bhi.n	8005eda <UART_SetConfig+0x43e>
 8005e88:	a201      	add	r2, pc, #4	@ (adr r2, 8005e90 <UART_SetConfig+0x3f4>)
 8005e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8e:	bf00      	nop
 8005e90:	08005eb5 	.word	0x08005eb5
 8005e94:	08005ebd 	.word	0x08005ebd
 8005e98:	08005ec5 	.word	0x08005ec5
 8005e9c:	08005edb 	.word	0x08005edb
 8005ea0:	08005ecb 	.word	0x08005ecb
 8005ea4:	08005edb 	.word	0x08005edb
 8005ea8:	08005edb 	.word	0x08005edb
 8005eac:	08005edb 	.word	0x08005edb
 8005eb0:	08005ed3 	.word	0x08005ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eb4:	f7fd fd98 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8005eb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005eba:	e014      	b.n	8005ee6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ebc:	f7fd fdaa 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 8005ec0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ec2:	e010      	b.n	8005ee6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ec4:	4b5a      	ldr	r3, [pc, #360]	@ (8006030 <UART_SetConfig+0x594>)
 8005ec6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ec8:	e00d      	b.n	8005ee6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eca:	f7fd fd1f 	bl	800390c <HAL_RCC_GetSysClockFreq>
 8005ece:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ed0:	e009      	b.n	8005ee6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ed8:	e005      	b.n	8005ee6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ee4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 8089 	beq.w	8006000 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef2:	4a4e      	ldr	r2, [pc, #312]	@ (800602c <UART_SetConfig+0x590>)
 8005ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f00:	005a      	lsls	r2, r3, #1
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	085b      	lsrs	r3, r3, #1
 8005f08:	441a      	add	r2, r3
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	2b0f      	cmp	r3, #15
 8005f18:	d916      	bls.n	8005f48 <UART_SetConfig+0x4ac>
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f20:	d212      	bcs.n	8005f48 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f023 030f 	bic.w	r3, r3, #15
 8005f2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	085b      	lsrs	r3, r3, #1
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	8bfb      	ldrh	r3, [r7, #30]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	8bfa      	ldrh	r2, [r7, #30]
 8005f44:	60da      	str	r2, [r3, #12]
 8005f46:	e05b      	b.n	8006000 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f4e:	e057      	b.n	8006000 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d828      	bhi.n	8005faa <UART_SetConfig+0x50e>
 8005f58:	a201      	add	r2, pc, #4	@ (adr r2, 8005f60 <UART_SetConfig+0x4c4>)
 8005f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5e:	bf00      	nop
 8005f60:	08005f85 	.word	0x08005f85
 8005f64:	08005f8d 	.word	0x08005f8d
 8005f68:	08005f95 	.word	0x08005f95
 8005f6c:	08005fab 	.word	0x08005fab
 8005f70:	08005f9b 	.word	0x08005f9b
 8005f74:	08005fab 	.word	0x08005fab
 8005f78:	08005fab 	.word	0x08005fab
 8005f7c:	08005fab 	.word	0x08005fab
 8005f80:	08005fa3 	.word	0x08005fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f84:	f7fd fd30 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8005f88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f8a:	e014      	b.n	8005fb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f8c:	f7fd fd42 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 8005f90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f92:	e010      	b.n	8005fb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f94:	4b26      	ldr	r3, [pc, #152]	@ (8006030 <UART_SetConfig+0x594>)
 8005f96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f98:	e00d      	b.n	8005fb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f9a:	f7fd fcb7 	bl	800390c <HAL_RCC_GetSysClockFreq>
 8005f9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fa0:	e009      	b.n	8005fb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fa8:	e005      	b.n	8005fb6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005fb4:	bf00      	nop
    }

    if (pclk != 0U)
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d021      	beq.n	8006000 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800602c <UART_SetConfig+0x590>)
 8005fc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fca:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	085b      	lsrs	r3, r3, #1
 8005fd4:	441a      	add	r2, r3
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	2b0f      	cmp	r3, #15
 8005fe4:	d909      	bls.n	8005ffa <UART_SetConfig+0x55e>
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fec:	d205      	bcs.n	8005ffa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	60da      	str	r2, [r3, #12]
 8005ff8:	e002      	b.n	8006000 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2201      	movs	r2, #1
 8006004:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2201      	movs	r2, #1
 800600c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2200      	movs	r2, #0
 8006014:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2200      	movs	r2, #0
 800601a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800601c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006020:	4618      	mov	r0, r3
 8006022:	3730      	adds	r7, #48	@ 0x30
 8006024:	46bd      	mov	sp, r7
 8006026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800602a:	bf00      	nop
 800602c:	080067c0 	.word	0x080067c0
 8006030:	00f42400 	.word	0x00f42400

08006034 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00a      	beq.n	800605e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a6:	f003 0304 	and.w	r3, r3, #4
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c8:	f003 0310 	and.w	r3, r3, #16
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00a      	beq.n	80060e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006110:	2b00      	cmp	r3, #0
 8006112:	d01a      	beq.n	800614a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006132:	d10a      	bne.n	800614a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	605a      	str	r2, [r3, #4]
  }
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b098      	sub	sp, #96	@ 0x60
 800617c:	af02      	add	r7, sp, #8
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006188:	f7fb f864 	bl	8001254 <HAL_GetTick>
 800618c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b08      	cmp	r3, #8
 800619a:	d12f      	bne.n	80061fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800619c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a4:	2200      	movs	r2, #0
 80061a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f88e 	bl	80062cc <UART_WaitOnFlagUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d022      	beq.n	80061fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	461a      	mov	r2, r3
 80061d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80061d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e6      	bne.n	80061b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e063      	b.n	80062c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b04      	cmp	r3, #4
 8006208:	d149      	bne.n	800629e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800620a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006212:	2200      	movs	r2, #0
 8006214:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f857 	bl	80062cc <UART_WaitOnFlagUntilTimeout>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d03c      	beq.n	800629e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	e853 3f00 	ldrex	r3, [r3]
 8006230:	623b      	str	r3, [r7, #32]
   return(result);
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006238:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006242:	633b      	str	r3, [r7, #48]	@ 0x30
 8006244:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e6      	bne.n	8006224 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3308      	adds	r3, #8
 800625c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	e853 3f00 	ldrex	r3, [r3]
 8006264:	60fb      	str	r3, [r7, #12]
   return(result);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f023 0301 	bic.w	r3, r3, #1
 800626c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3308      	adds	r3, #8
 8006274:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006276:	61fa      	str	r2, [r7, #28]
 8006278:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627a:	69b9      	ldr	r1, [r7, #24]
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	e841 2300 	strex	r3, r2, [r1]
 8006282:	617b      	str	r3, [r7, #20]
   return(result);
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1e5      	bne.n	8006256 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2220      	movs	r2, #32
 800628e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e012      	b.n	80062c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3758      	adds	r7, #88	@ 0x58
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	4613      	mov	r3, r2
 80062da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062dc:	e04f      	b.n	800637e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e4:	d04b      	beq.n	800637e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e6:	f7fa ffb5 	bl	8001254 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d302      	bcc.n	80062fc <UART_WaitOnFlagUntilTimeout+0x30>
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e04e      	b.n	800639e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	d037      	beq.n	800637e <UART_WaitOnFlagUntilTimeout+0xb2>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b80      	cmp	r3, #128	@ 0x80
 8006312:	d034      	beq.n	800637e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b40      	cmp	r3, #64	@ 0x40
 8006318:	d031      	beq.n	800637e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	f003 0308 	and.w	r3, r3, #8
 8006324:	2b08      	cmp	r3, #8
 8006326:	d110      	bne.n	800634a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2208      	movs	r2, #8
 800632e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 f838 	bl	80063a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2208      	movs	r2, #8
 800633a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e029      	b.n	800639e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006354:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006358:	d111      	bne.n	800637e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006362:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 f81e 	bl	80063a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2220      	movs	r2, #32
 800636e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e00f      	b.n	800639e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69da      	ldr	r2, [r3, #28]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4013      	ands	r3, r2
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	429a      	cmp	r2, r3
 800638c:	bf0c      	ite	eq
 800638e:	2301      	moveq	r3, #1
 8006390:	2300      	movne	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	461a      	mov	r2, r3
 8006396:	79fb      	ldrb	r3, [r7, #7]
 8006398:	429a      	cmp	r2, r3
 800639a:	d0a0      	beq.n	80062de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b095      	sub	sp, #84	@ 0x54
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b6:	e853 3f00 	ldrex	r3, [r3]
 80063ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80063ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e6      	bne.n	80063ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3308      	adds	r3, #8
 80063e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063f6:	f023 0301 	bic.w	r3, r3, #1
 80063fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3308      	adds	r3, #8
 8006402:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006404:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006406:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800640a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e3      	bne.n	80063e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800641c:	2b01      	cmp	r3, #1
 800641e:	d118      	bne.n	8006452 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	60bb      	str	r3, [r7, #8]
   return(result);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f023 0310 	bic.w	r3, r3, #16
 8006434:	647b      	str	r3, [r7, #68]	@ 0x44
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800643e:	61bb      	str	r3, [r7, #24]
 8006440:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006442:	6979      	ldr	r1, [r7, #20]
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	e841 2300 	strex	r3, r2, [r1]
 800644a:	613b      	str	r3, [r7, #16]
   return(result);
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1e6      	bne.n	8006420 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006466:	bf00      	nop
 8006468:	3754      	adds	r7, #84	@ 0x54
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f7ff faed 	bl	8005a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006496:	bf00      	nop
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b088      	sub	sp, #32
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064ba:	61fb      	str	r3, [r7, #28]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	6979      	ldr	r1, [r7, #20]
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	613b      	str	r3, [r7, #16]
   return(result);
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e6      	bne.n	80064a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff fab8 	bl	8005a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064ec:	bf00      	nop
 80064ee:	3720      	adds	r7, #32
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800653e:	2b01      	cmp	r3, #1
 8006540:	d101      	bne.n	8006546 <HAL_UARTEx_DisableFifoMode+0x16>
 8006542:	2302      	movs	r3, #2
 8006544:	e027      	b.n	8006596 <HAL_UARTEx_DisableFifoMode+0x66>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2224      	movs	r2, #36	@ 0x24
 8006552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0201 	bic.w	r2, r2, #1
 800656c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006574:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e02d      	b.n	8006616 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2224      	movs	r2, #36	@ 0x24
 80065c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0201 	bic.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f850 	bl	800669c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800662e:	2b01      	cmp	r3, #1
 8006630:	d101      	bne.n	8006636 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006632:	2302      	movs	r3, #2
 8006634:	e02d      	b.n	8006692 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2224      	movs	r2, #36	@ 0x24
 8006642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0201 	bic.w	r2, r2, #1
 800665c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f812 	bl	800669c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2220      	movs	r2, #32
 8006684:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d108      	bne.n	80066be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066bc:	e031      	b.n	8006722 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066be:	2308      	movs	r3, #8
 80066c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066c2:	2308      	movs	r3, #8
 80066c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	0e5b      	lsrs	r3, r3, #25
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	0f5b      	lsrs	r3, r3, #29
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
 80066e8:	7b3a      	ldrb	r2, [r7, #12]
 80066ea:	4911      	ldr	r1, [pc, #68]	@ (8006730 <UARTEx_SetNbDataToProcess+0x94>)
 80066ec:	5c8a      	ldrb	r2, [r1, r2]
 80066ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066f2:	7b3a      	ldrb	r2, [r7, #12]
 80066f4:	490f      	ldr	r1, [pc, #60]	@ (8006734 <UARTEx_SetNbDataToProcess+0x98>)
 80066f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	7b7a      	ldrb	r2, [r7, #13]
 8006708:	4909      	ldr	r1, [pc, #36]	@ (8006730 <UARTEx_SetNbDataToProcess+0x94>)
 800670a:	5c8a      	ldrb	r2, [r1, r2]
 800670c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006710:	7b7a      	ldrb	r2, [r7, #13]
 8006712:	4908      	ldr	r1, [pc, #32]	@ (8006734 <UARTEx_SetNbDataToProcess+0x98>)
 8006714:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006716:	fb93 f3f2 	sdiv	r3, r3, r2
 800671a:	b29a      	uxth	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006722:	bf00      	nop
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	080067d8 	.word	0x080067d8
 8006734:	080067e0 	.word	0x080067e0

08006738 <memset>:
 8006738:	4402      	add	r2, r0
 800673a:	4603      	mov	r3, r0
 800673c:	4293      	cmp	r3, r2
 800673e:	d100      	bne.n	8006742 <memset+0xa>
 8006740:	4770      	bx	lr
 8006742:	f803 1b01 	strb.w	r1, [r3], #1
 8006746:	e7f9      	b.n	800673c <memset+0x4>

08006748 <__libc_init_array>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	4d0d      	ldr	r5, [pc, #52]	@ (8006780 <__libc_init_array+0x38>)
 800674c:	4c0d      	ldr	r4, [pc, #52]	@ (8006784 <__libc_init_array+0x3c>)
 800674e:	1b64      	subs	r4, r4, r5
 8006750:	10a4      	asrs	r4, r4, #2
 8006752:	2600      	movs	r6, #0
 8006754:	42a6      	cmp	r6, r4
 8006756:	d109      	bne.n	800676c <__libc_init_array+0x24>
 8006758:	4d0b      	ldr	r5, [pc, #44]	@ (8006788 <__libc_init_array+0x40>)
 800675a:	4c0c      	ldr	r4, [pc, #48]	@ (800678c <__libc_init_array+0x44>)
 800675c:	f000 f818 	bl	8006790 <_init>
 8006760:	1b64      	subs	r4, r4, r5
 8006762:	10a4      	asrs	r4, r4, #2
 8006764:	2600      	movs	r6, #0
 8006766:	42a6      	cmp	r6, r4
 8006768:	d105      	bne.n	8006776 <__libc_init_array+0x2e>
 800676a:	bd70      	pop	{r4, r5, r6, pc}
 800676c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006770:	4798      	blx	r3
 8006772:	3601      	adds	r6, #1
 8006774:	e7ee      	b.n	8006754 <__libc_init_array+0xc>
 8006776:	f855 3b04 	ldr.w	r3, [r5], #4
 800677a:	4798      	blx	r3
 800677c:	3601      	adds	r6, #1
 800677e:	e7f2      	b.n	8006766 <__libc_init_array+0x1e>
 8006780:	080067f0 	.word	0x080067f0
 8006784:	080067f0 	.word	0x080067f0
 8006788:	080067f0 	.word	0x080067f0
 800678c:	080067f4 	.word	0x080067f4

08006790 <_init>:
 8006790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006792:	bf00      	nop
 8006794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006796:	bc08      	pop	{r3}
 8006798:	469e      	mov	lr, r3
 800679a:	4770      	bx	lr

0800679c <_fini>:
 800679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679e:	bf00      	nop
 80067a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a2:	bc08      	pop	{r3}
 80067a4:	469e      	mov	lr, r3
 80067a6:	4770      	bx	lr
