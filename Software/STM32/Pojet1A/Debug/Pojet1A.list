
Pojet1A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a7f8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0801a9d0  0801a9d0  0001b9d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ad30  0801ad30  0001c250  2**0
                  CONTENTS
  4 .ARM          00000008  0801ad30  0801ad30  0001bd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ad38  0801ad38  0001c250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ad38  0801ad38  0001bd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ad3c  0801ad3c  0001bd3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000250  20000000  0801ad40  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000202c  20000250  0801af90  0001c250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000227c  0801af90  0001c27c  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  0001c250  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003630d  00000000  00000000  0001c284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000804b  00000000  00000000  00052591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b78  00000000  00000000  0005a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000211c  00000000  00000000  0005d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f390  00000000  00000000  0005f274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003bb33  00000000  00000000  0008e604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e5fe  00000000  00000000  000ca137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000355a  00000000  00000000  001d8735  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000033c  00000000  00000000  001dbc8f  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000024  00000000  00000000  001dbfcc  2**2
                  CONTENTS, READONLY
 22 .iar.debug_frame 000003bf  00000000  00000000  001dbff0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d940  00000000  00000000  001dc3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000061  00000000  00000000  001e9cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000250 	.word	0x20000250
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0801a9b8 	.word	0x0801a9b8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000254 	.word	0x20000254
 8000214:	0801a9b8 	.word	0x0801a9b8

08000218 <USBPD_CAD_Init>:
 8000218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800021c:	2600      	movs	r6, #0
 800021e:	2803      	cmp	r0, #3
 8000220:	4681      	mov	r9, r0
 8000222:	460c      	mov	r4, r1
 8000224:	4690      	mov	r8, r2
 8000226:	461f      	mov	r7, r3
 8000228:	bf28      	it	cs
 800022a:	2601      	movcs	r6, #1
 800022c:	d219      	bcs.n	8000262 <USBPD_CAD_Init+0x4a>
 800022e:	b90c      	cbnz	r4, 8000234 <USBPD_CAD_Init+0x1c>
 8000230:	2602      	movs	r6, #2
 8000232:	e016      	b.n	8000262 <USBPD_CAD_Init+0x4a>
 8000234:	200c      	movs	r0, #12
 8000236:	f018 fb53 	bl	80188e0 <malloc>
 800023a:	0005      	movs	r5, r0
 800023c:	bf08      	it	eq
 800023e:	2603      	moveq	r6, #3
 8000240:	d00f      	beq.n	8000262 <USBPD_CAD_Init+0x4a>
 8000242:	210c      	movs	r1, #12
 8000244:	f018 fc48 	bl	8018ad8 <__aeabi_memclr>
 8000248:	602f      	str	r7, [r5, #0]
 800024a:	722e      	strb	r6, [r5, #8]
 800024c:	606c      	str	r4, [r5, #4]
 800024e:	464a      	mov	r2, r9
 8000250:	4947      	ldr	r1, [pc, #284]	@ (8000370 <.text_6>)
 8000252:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 8000256:	463a      	mov	r2, r7
 8000258:	6863      	ldr	r3, [r4, #4]
 800025a:	4641      	mov	r1, r8
 800025c:	4648      	mov	r0, r9
 800025e:	f013 fad7 	bl	8013810 <CAD_Init>
 8000262:	4630      	mov	r0, r6
 8000264:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000268 <USBPD_CAD_PortEnable>:
 8000268:	2803      	cmp	r0, #3
 800026a:	d203      	bcs.n	8000274 <USBPD_CAD_PortEnable+0xc>
 800026c:	4a40      	ldr	r2, [pc, #256]	@ (8000370 <.text_6>)
 800026e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000272:	7201      	strb	r1, [r0, #8]
 8000274:	4770      	bx	lr

08000276 <USBPD_CAD_Process>:
 8000276:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000278:	2100      	movs	r1, #0
 800027a:	f88d 1000 	strb.w	r1, [sp]
 800027e:	9101      	str	r1, [sp, #4]
 8000280:	f04f 35ff 	mov.w	r5, #4294967295
 8000284:	2600      	movs	r6, #0
 8000286:	4c3a      	ldr	r4, [pc, #232]	@ (8000370 <.text_6>)
 8000288:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800028c:	2800      	cmp	r0, #0
 800028e:	d069      	beq.n	8000364 <USBPD_CAD_Process+0xee>
 8000290:	7a00      	ldrb	r0, [r0, #8]
 8000292:	2801      	cmp	r0, #1
 8000294:	d166      	bne.n	8000364 <USBPD_CAD_Process+0xee>
 8000296:	aa01      	add	r2, sp, #4
 8000298:	4669      	mov	r1, sp
 800029a:	b2f0      	uxtb	r0, r6
 800029c:	f013 fc44 	bl	8013b28 <CAD_StateMachine>
 80002a0:	42a8      	cmp	r0, r5
 80002a2:	bf98      	it	ls
 80002a4:	4605      	movls	r5, r0
 80002a6:	f89d 0000 	ldrb.w	r0, [sp]
 80002aa:	2801      	cmp	r0, #1
 80002ac:	d004      	beq.n	80002b8 <USBPD_CAD_Process+0x42>
 80002ae:	2802      	cmp	r0, #2
 80002b0:	bf18      	it	ne
 80002b2:	2804      	cmpne	r0, #4
 80002b4:	d012      	beq.n	80002dc <USBPD_CAD_Process+0x66>
 80002b6:	e03e      	b.n	8000336 <USBPD_CAD_Process+0xc0>
 80002b8:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002bc:	6801      	ldr	r1, [r0, #0]
 80002be:	680a      	ldr	r2, [r1, #0]
 80002c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80002c4:	600a      	str	r2, [r1, #0]
 80002c6:	6801      	ldr	r1, [r0, #0]
 80002c8:	680b      	ldr	r3, [r1, #0]
 80002ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80002ce:	600b      	str	r3, [r1, #0]
 80002d0:	6800      	ldr	r0, [r0, #0]
 80002d2:	6801      	ldr	r1, [r0, #0]
 80002d4:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 80002d8:	6001      	str	r1, [r0, #0]
 80002da:	e02f      	b.n	800033c <USBPD_CAD_Process+0xc6>
 80002dc:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002e0:	6802      	ldr	r2, [r0, #0]
 80002e2:	9901      	ldr	r1, [sp, #4]
 80002e4:	6813      	ldr	r3, [r2, #0]
 80002e6:	2901      	cmp	r1, #1
 80002e8:	bf0c      	ite	eq
 80002ea:	2102      	moveq	r1, #2
 80002ec:	2101      	movne	r1, #1
 80002ee:	f361 334e 	bfi	r3, r1, #13, #2
 80002f2:	6013      	str	r3, [r2, #0]
 80002f4:	6800      	ldr	r0, [r0, #0]
 80002f6:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 80002fa:	9a01      	ldr	r2, [sp, #4]
 80002fc:	6803      	ldr	r3, [r0, #0]
 80002fe:	f362 1387 	bfi	r3, r2, #6, #2
 8000302:	680a      	ldr	r2, [r1, #0]
 8000304:	6013      	str	r3, [r2, #0]
 8000306:	6808      	ldr	r0, [r1, #0]
 8000308:	6803      	ldr	r3, [r0, #0]
 800030a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800030e:	6003      	str	r3, [r0, #0]
 8000310:	6808      	ldr	r0, [r1, #0]
 8000312:	6801      	ldr	r1, [r0, #0]
 8000314:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000318:	2800      	cmp	r0, #0
 800031a:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800031e:	6800      	ldr	r0, [r0, #0]
 8000320:	6801      	ldr	r1, [r0, #0]
 8000322:	bf0c      	ite	eq
 8000324:	f021 0108 	biceq.w	r1, r1, #8
 8000328:	f041 0108 	orrne.w	r1, r1, #8
 800032c:	6001      	str	r1, [r0, #0]
 800032e:	b2f0      	uxtb	r0, r6
 8000330:	2168      	movs	r1, #104	@ 0x68
 8000332:	f000 f90c 	bl	800054e <USBPD_PE_Notification>
 8000336:	f89d 0000 	ldrb.w	r0, [sp]
 800033a:	b198      	cbz	r0, 8000364 <USBPD_CAD_Process+0xee>
 800033c:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 8000340:	685f      	ldr	r7, [r3, #4]
 8000342:	9a01      	ldr	r2, [sp, #4]
 8000344:	f89d 1000 	ldrb.w	r1, [sp]
 8000348:	f8d7 c000 	ldr.w	ip, [r7]
 800034c:	b2f0      	uxtb	r0, r6
 800034e:	47e0      	blx	ip
 8000350:	f89d 0000 	ldrb.w	r0, [sp]
 8000354:	2801      	cmp	r0, #1
 8000356:	bf18      	it	ne
 8000358:	2803      	cmpne	r0, #3
 800035a:	d103      	bne.n	8000364 <USBPD_CAD_Process+0xee>
 800035c:	2169      	movs	r1, #105	@ 0x69
 800035e:	b2f0      	uxtb	r0, r6
 8000360:	f000 f8f5 	bl	800054e <USBPD_PE_Notification>
 8000364:	1c76      	adds	r6, r6, #1
 8000366:	2e02      	cmp	r6, #2
 8000368:	d98e      	bls.n	8000288 <USBPD_CAD_Process+0x12>
 800036a:	4628      	mov	r0, r5
 800036c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08000370 <.text_6>:
 8000370:	2000026c 	.word	0x2000026c

08000374 <USBPD_CAD_AssertRd>:
 8000374:	b510      	push	{r4, lr}
 8000376:	4604      	mov	r4, r0
 8000378:	f014 ff62 	bl	8015240 <USBPDM1_DeAssertRp>
 800037c:	4620      	mov	r0, r4
 800037e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000382:	f014 bf69 	b.w	8015258 <USBPDM1_AssertRd>

08000386 <USBPD_CAD_AssertRp>:
 8000386:	b510      	push	{r4, lr}
 8000388:	4604      	mov	r4, r0
 800038a:	f014 ffeb 	bl	8015364 <USBPDM1_DeAssertRd>
 800038e:	4620      	mov	r0, r4
 8000390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000394:	f014 bebe 	b.w	8015114 <USBPDM1_AssertRp>

08000398 <USBPD_CAD_EnterErrorRecovery>:
 8000398:	f013 bb1c 	b.w	80139d4 <CAD_Enter_ErrorRecovery>

0800039c <USBPD_CAD_SRC_SetRpResistor>:
 800039c:	b510      	push	{r4, lr}
 800039e:	f013 fb75 	bl	8013a8c <CAD_Set_ResistorRp>
 80003a2:	2404      	movs	r4, #4
 80003a4:	b900      	cbnz	r0, 80003a8 <USBPD_CAD_SRC_SetRpResistor+0xc>
 80003a6:	2400      	movs	r4, #0
 80003a8:	4620      	mov	r0, r4
 80003aa:	bd10      	pop	{r4, pc}

080003ac <USBPD_CAD_SetRpResistor>:
 80003ac:	e7f6      	b.n	800039c <USBPD_CAD_SRC_SetRpResistor>

080003ae <USBPD_CAD_GetMemoryConsumption>:
 80003ae:	2024      	movs	r0, #36	@ 0x24
 80003b0:	4770      	bx	lr
	...

080003b4 <USBPD_PE_Init>:
 80003b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003b8:	460e      	mov	r6, r1
 80003ba:	4680      	mov	r8, r0
 80003bc:	6870      	ldr	r0, [r6, #4]
 80003be:	4617      	mov	r7, r2
 80003c0:	461d      	mov	r5, r3
 80003c2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80003c6:	b108      	cbz	r0, 80003cc <USBPD_PE_Init+0x18>
 80003c8:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80003ca:	b108      	cbz	r0, 80003d0 <USBPD_PE_Init+0x1c>
 80003cc:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 80003ce:	b908      	cbnz	r0, 80003d4 <USBPD_PE_Init+0x20>
 80003d0:	271b      	movs	r7, #27
 80003d2:	e042      	b.n	800045a <USBPD_PE_Init+0xa6>
 80003d4:	f1b8 0f03 	cmp.w	r8, #3
 80003d8:	bf28      	it	cs
 80003da:	2717      	movcs	r7, #23
 80003dc:	d23d      	bcs.n	800045a <USBPD_PE_Init+0xa6>
 80003de:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80003e2:	f018 fa7d 	bl	80188e0 <malloc>
 80003e6:	0004      	movs	r4, r0
 80003e8:	bf08      	it	eq
 80003ea:	2716      	moveq	r7, #22
 80003ec:	d035      	beq.n	800045a <USBPD_PE_Init+0xa6>
 80003ee:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80003f2:	f018 fb71 	bl	8018ad8 <__aeabi_memclr>
 80003f6:	f8df 09ac 	ldr.w	r0, [pc, #2476]	@ 8000da4 <.text_47>
 80003fa:	4641      	mov	r1, r8
 80003fc:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8000400:	6026      	str	r6, [r4, #0]
 8000402:	6067      	str	r7, [r4, #4]
 8000404:	f884 8010 	strb.w	r8, [r4, #16]
 8000408:	60a5      	str	r5, [r4, #8]
 800040a:	f204 438e 	addw	r3, r4, #1166	@ 0x48e
 800040e:	f204 2281 	addw	r2, r4, #641	@ 0x281
 8000412:	4631      	mov	r1, r6
 8000414:	4640      	mov	r0, r8
 8000416:	f004 fac4 	bl	80049a2 <USBPD_PRL_Init>
 800041a:	0007      	movs	r7, r0
 800041c:	d11d      	bne.n	800045a <USBPD_PE_Init+0xa6>
 800041e:	6820      	ldr	r0, [r4, #0]
 8000420:	6841      	ldr	r1, [r0, #4]
 8000422:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000426:	2800      	cmp	r0, #0
 8000428:	6860      	ldr	r0, [r4, #4]
 800042a:	6801      	ldr	r1, [r0, #0]
 800042c:	d004      	beq.n	8000438 <USBPD_PE_Init+0x84>
 800042e:	f041 0108 	orr.w	r1, r1, #8
 8000432:	6001      	str	r1, [r0, #0]
 8000434:	2201      	movs	r2, #1
 8000436:	e003      	b.n	8000440 <USBPD_PE_Init+0x8c>
 8000438:	f021 0108 	bic.w	r1, r1, #8
 800043c:	6001      	str	r1, [r0, #0]
 800043e:	2200      	movs	r2, #0
 8000440:	7933      	ldrb	r3, [r6, #4]
 8000442:	f003 0303 	and.w	r3, r3, #3
 8000446:	4611      	mov	r1, r2
 8000448:	4640      	mov	r0, r8
 800044a:	f004 fad8 	bl	80049fe <USBPD_PRL_SetHeader>
 800044e:	7931      	ldrb	r1, [r6, #4]
 8000450:	f001 0103 	and.w	r1, r1, #3
 8000454:	4640      	mov	r0, r8
 8000456:	f004 fb03 	bl	8004a60 <USBPD_PRL_CBL_SetHeaderSpecification>
 800045a:	4638      	mov	r0, r7
 800045c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000460 <USBPD_PE_TimerCounter>:
 8000460:	f8df 1940 	ldr.w	r1, [pc, #2368]	@ 8000da4 <.text_47>
 8000464:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000468:	8bc1      	ldrh	r1, [r0, #30]
 800046a:	044a      	lsls	r2, r1, #17
 800046c:	d002      	beq.n	8000474 <USBPD_PE_TimerCounter+0x14>
 800046e:	8bc1      	ldrh	r1, [r0, #30]
 8000470:	1e4a      	subs	r2, r1, #1
 8000472:	83c2      	strh	r2, [r0, #30]
 8000474:	8c01      	ldrh	r1, [r0, #32]
 8000476:	044a      	lsls	r2, r1, #17
 8000478:	d002      	beq.n	8000480 <USBPD_PE_TimerCounter+0x20>
 800047a:	8c01      	ldrh	r1, [r0, #32]
 800047c:	1e4a      	subs	r2, r1, #1
 800047e:	8402      	strh	r2, [r0, #32]
 8000480:	8cc1      	ldrh	r1, [r0, #38]	@ 0x26
 8000482:	044a      	lsls	r2, r1, #17
 8000484:	d002      	beq.n	800048c <USBPD_PE_TimerCounter+0x2c>
 8000486:	8cc1      	ldrh	r1, [r0, #38]	@ 0x26
 8000488:	1e4a      	subs	r2, r1, #1
 800048a:	84c2      	strh	r2, [r0, #38]	@ 0x26
 800048c:	8c41      	ldrh	r1, [r0, #34]	@ 0x22
 800048e:	044a      	lsls	r2, r1, #17
 8000490:	d002      	beq.n	8000498 <USBPD_PE_TimerCounter+0x38>
 8000492:	8c41      	ldrh	r1, [r0, #34]	@ 0x22
 8000494:	1e4a      	subs	r2, r1, #1
 8000496:	8442      	strh	r2, [r0, #34]	@ 0x22
 8000498:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
 800049a:	044a      	lsls	r2, r1, #17
 800049c:	d002      	beq.n	80004a4 <USBPD_PE_TimerCounter+0x44>
 800049e:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
 80004a0:	1e4a      	subs	r2, r1, #1
 80004a2:	8482      	strh	r2, [r0, #36]	@ 0x24
 80004a4:	4770      	bx	lr

080004a6 <USBPD_PE_TimerCounteUpdate>:
 80004a6:	b538      	push	{r3, r4, r5, lr}
 80004a8:	460c      	mov	r4, r1
 80004aa:	f8df 18f8 	ldr.w	r1, [pc, #2296]	@ 8000da4 <.text_47>
 80004ae:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 80004b2:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 80004b6:	da22      	bge.n	80004fe <USBPD_PE_TimerCounteUpdate+0x58>
 80004b8:	8be8      	ldrh	r0, [r5, #30]
 80004ba:	0441      	lsls	r1, r0, #17
 80004bc:	d003      	beq.n	80004c6 <USBPD_PE_TimerCounteUpdate+0x20>
 80004be:	8be8      	ldrh	r0, [r5, #30]
 80004c0:	f000 f81e 	bl	8000500 <.text_8>
 80004c4:	83e8      	strh	r0, [r5, #30]
 80004c6:	8c28      	ldrh	r0, [r5, #32]
 80004c8:	0441      	lsls	r1, r0, #17
 80004ca:	d003      	beq.n	80004d4 <USBPD_PE_TimerCounteUpdate+0x2e>
 80004cc:	8c28      	ldrh	r0, [r5, #32]
 80004ce:	f000 f817 	bl	8000500 <.text_8>
 80004d2:	8428      	strh	r0, [r5, #32]
 80004d4:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
 80004d6:	0441      	lsls	r1, r0, #17
 80004d8:	d003      	beq.n	80004e2 <USBPD_PE_TimerCounteUpdate+0x3c>
 80004da:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
 80004dc:	f000 f810 	bl	8000500 <.text_8>
 80004e0:	84e8      	strh	r0, [r5, #38]	@ 0x26
 80004e2:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 80004e4:	0441      	lsls	r1, r0, #17
 80004e6:	d003      	beq.n	80004f0 <USBPD_PE_TimerCounteUpdate+0x4a>
 80004e8:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 80004ea:	f000 f809 	bl	8000500 <.text_8>
 80004ee:	8468      	strh	r0, [r5, #34]	@ 0x22
 80004f0:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
 80004f2:	0441      	lsls	r1, r0, #17
 80004f4:	d003      	beq.n	80004fe <USBPD_PE_TimerCounteUpdate+0x58>
 80004f6:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
 80004f8:	f000 f802 	bl	8000500 <.text_8>
 80004fc:	84a8      	strh	r0, [r5, #36]	@ 0x24
 80004fe:	bd31      	pop	{r0, r4, r5, pc}

08000500 <.text_8>:
 8000500:	4621      	mov	r1, r4
 8000502:	f000 bef9 	b.w	80012f8 <PE_UpdateTimer>

08000506 <USBPD_PE_IsCableConnected>:
 8000506:	f8df 289c 	ldr.w	r2, [pc, #2204]	@ 8000da4 <.text_47>
 800050a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800050e:	6842      	ldr	r2, [r0, #4]
 8000510:	6813      	ldr	r3, [r2, #0]
 8000512:	f361 330c 	bfi	r3, r1, #12, #1
 8000516:	6013      	str	r3, [r2, #0]
 8000518:	2248      	movs	r2, #72	@ 0x48
 800051a:	7442      	strb	r2, [r0, #17]
 800051c:	4770      	bx	lr

0800051e <USBPD_PE_StateMachine_Reset>:
 800051e:	f8df 2884 	ldr.w	r2, [pc, #2180]	@ 8000da4 <.text_47>
 8000522:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000526:	2148      	movs	r1, #72	@ 0x48
 8000528:	7441      	strb	r1, [r0, #17]
 800052a:	4770      	bx	lr

0800052c <USBPD_PE_StateMachine_Stop>:
 800052c:	f004 bd51 	b.w	8004fd2 <USBPD_PRL_Stop>

08000530 <USBPD_PE_StateMachine_DRP>:
 8000530:	f8df 1870 	ldr.w	r1, [pc, #2160]	@ 8000da4 <.text_47>
 8000534:	4602      	mov	r2, r0
 8000536:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800053a:	6859      	ldr	r1, [r3, #4]
 800053c:	680a      	ldr	r2, [r1, #0]
 800053e:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8000542:	2900      	cmp	r1, #0
 8000544:	bf18      	it	ne
 8000546:	f002 b9e3 	bne.w	8002910 <USBPD_PE_StateMachine_SRC>
 800054a:	f001 bbc3 	b.w	8001cd4 <USBPD_PE_StateMachine_SNK>

0800054e <USBPD_PE_Notification>:
 800054e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000550:	2803      	cmp	r0, #3
 8000552:	4604      	mov	r4, r0
 8000554:	460d      	mov	r5, r1
 8000556:	d214      	bcs.n	8000582 <__iar_annotation$$tailcall+0x2>
 8000558:	2600      	movs	r6, #0
 800055a:	9600      	str	r6, [sp, #0]
 800055c:	2300      	movs	r3, #0
 800055e:	f8df 7848 	ldr.w	r7, [pc, #2120]	@ 8000da8 <.text_48>
 8000562:	683e      	ldr	r6, [r7, #0]
 8000564:	462a      	mov	r2, r5
 8000566:	4621      	mov	r1, r4
 8000568:	2009      	movs	r0, #9
 800056a:	47b0      	blx	r6
 800056c:	f8df 2834 	ldr.w	r2, [pc, #2100]	@ 8000da4 <.text_47>
 8000570:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8000574:	689a      	ldr	r2, [r3, #8]
 8000576:	68d3      	ldr	r3, [r2, #12]
 8000578:	4629      	mov	r1, r5
 800057a:	4620      	mov	r0, r4
 800057c:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}

08000580 <__iar_annotation$$tailcall>:
 8000580:	4718      	bx	r3
 8000582:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08000584 <USBPD_PE_InitVDM_Callback>:
 8000584:	f8df 281c 	ldr.w	r2, [pc, #2076]	@ 8000da4 <.text_47>
 8000588:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800058c:	60c1      	str	r1, [r0, #12]
 800058e:	4770      	bx	lr

08000590 <USBPD_PE_Request_HardReset>:
 8000590:	b580      	push	{r7, lr}
 8000592:	f8df 1810 	ldr.w	r1, [pc, #2064]	@ 8000da4 <.text_47>
 8000596:	4602      	mov	r2, r0
 8000598:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800059c:	230f      	movs	r3, #15
 800059e:	f881 3032 	strb.w	r3, [r1, #50]	@ 0x32
 80005a2:	6889      	ldr	r1, [r1, #8]
 80005a4:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80005a6:	4790      	blx	r2
 80005a8:	2000      	movs	r0, #0
 80005aa:	bd02      	pop	{r1, pc}

080005ac <USBPD_PE_Request_CableReset>:
 80005ac:	b538      	push	{r3, r4, r5, lr}
 80005ae:	f000 fbe8 	bl	8000d82 <.text_45>
 80005b2:	6853      	ldr	r3, [r2, #4]
 80005b4:	681c      	ldr	r4, [r3, #0]
 80005b6:	f248 7108 	movw	r1, #34568	@ 0x8708
 80005ba:	400c      	ands	r4, r1
 80005bc:	f248 3508 	movw	r5, #33544	@ 0x8308
 80005c0:	42ac      	cmp	r4, r5
 80005c2:	d105      	bne.n	80005d0 <USBPD_PE_Request_CableReset+0x24>
 80005c4:	6891      	ldr	r1, [r2, #8]
 80005c6:	2399      	movs	r3, #153	@ 0x99
 80005c8:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
 80005cc:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80005ce:	4790      	blx	r2
 80005d0:	2010      	movs	r0, #16
 80005d2:	bd32      	pop	{r1, r4, r5, pc}

080005d4 <USBPD_PE_Request_CtrlMessage>:
 80005d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005d8:	4680      	mov	r8, r0
 80005da:	460c      	mov	r4, r1
 80005dc:	f8df 07c4 	ldr.w	r0, [pc, #1988]	@ 8000da4 <.text_47>
 80005e0:	b093      	sub	sp, #76	@ 0x4c
 80005e2:	4641      	mov	r1, r8
 80005e4:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80005e8:	f8df 17c0 	ldr.w	r1, [pc, #1984]	@ 8000dac <.text_49>
 80005ec:	4617      	mov	r7, r2
 80005ee:	4668      	mov	r0, sp
 80005f0:	224c      	movs	r2, #76	@ 0x4c
 80005f2:	f018 fa6f 	bl	8018ad4 <__aeabi_memcpy>
 80005f6:	f105 0132 	add.w	r1, r5, #50	@ 0x32
 80005fa:	2600      	movs	r6, #0
 80005fc:	7808      	ldrb	r0, [r1, #0]
 80005fe:	b920      	cbnz	r0, 800060a <USBPD_PE_Request_CtrlMessage+0x36>
 8000600:	6868      	ldr	r0, [r5, #4]
 8000602:	6802      	ldr	r2, [r0, #0]
 8000604:	f3c2 3000 	ubfx	r0, r2, #12, #1
 8000608:	b908      	cbnz	r0, 800060e <USBPD_PE_Request_CtrlMessage+0x3a>
 800060a:	2603      	movs	r6, #3
 800060c:	e07f      	b.n	800070e <USBPD_PE_Request_CtrlMessage+0x13a>
 800060e:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8000612:	6828      	ldr	r0, [r5, #0]
 8000614:	f8dc e000 	ldr.w	lr, [ip]
 8000618:	6842      	ldr	r2, [r0, #4]
 800061a:	6868      	ldr	r0, [r5, #4]
 800061c:	6803      	ldr	r3, [r0, #0]
 800061e:	f3c3 0080 	ubfx	r0, r3, #2, #1
 8000622:	f3ce 2c02 	ubfx	ip, lr, #8, #3
 8000626:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800062a:	f89e 9000 	ldrb.w	r9, [lr]
 800062e:	f009 0903 	and.w	r9, r9, #3
 8000632:	08d2      	lsrs	r2, r2, #3
 8000634:	2800      	cmp	r0, #0
 8000636:	bf07      	ittee	eq
 8000638:	2002      	moveq	r0, #2
 800063a:	2300      	moveq	r3, #0
 800063c:	2000      	movne	r0, #0
 800063e:	2304      	movne	r3, #4
 8000640:	f1bc 0f03 	cmp.w	ip, #3
 8000644:	bf0c      	ite	eq
 8000646:	f04f 0c08 	moveq.w	ip, #8
 800064a:	46b4      	movne	ip, r6
 800064c:	f1b9 0f02 	cmp.w	r9, #2
 8000650:	f002 0201 	and.w	r2, r2, #1
 8000654:	bf0c      	ite	eq
 8000656:	f04f 0e40 	moveq.w	lr, #64	@ 0x40
 800065a:	46b6      	movne	lr, r6
 800065c:	4302      	orrs	r2, r0
 800065e:	431a      	orrs	r2, r3
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	ea4e 0202 	orr.w	r2, lr, r2
 8000668:	f012 0f03 	tst.w	r2, #3
 800066c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000670:	bf18      	it	ne
 8000672:	f042 0210 	orrne.w	r2, r2, #16
 8000676:	f012 0f05 	tst.w	r2, #5
 800067a:	f81d 0003 	ldrb.w	r0, [sp, r3]
 800067e:	bf18      	it	ne
 8000680:	f042 0220 	orrne.w	r2, r2, #32
 8000684:	4002      	ands	r2, r0
 8000686:	4282      	cmp	r2, r0
 8000688:	d118      	bne.n	80006bc <USBPD_PE_Request_CtrlMessage+0xe8>
 800068a:	2c05      	cmp	r4, #5
 800068c:	704e      	strb	r6, [r1, #1]
 800068e:	f205 225e 	addw	r2, r5, #606	@ 0x25e
 8000692:	d02e      	beq.n	80006f2 <USBPD_PE_Request_CtrlMessage+0x11e>
 8000694:	2c0b      	cmp	r4, #11
 8000696:	d00e      	beq.n	80006b6 <USBPD_PE_Request_CtrlMessage+0xe2>
 8000698:	2c0d      	cmp	r4, #13
 800069a:	d028      	beq.n	80006ee <USBPD_PE_Request_CtrlMessage+0x11a>
 800069c:	2c11      	cmp	r4, #17
 800069e:	d00f      	beq.n	80006c0 <USBPD_PE_Request_CtrlMessage+0xec>
 80006a0:	2c12      	cmp	r4, #18
 80006a2:	d012      	beq.n	80006ca <USBPD_PE_Request_CtrlMessage+0xf6>
 80006a4:	2c14      	cmp	r4, #20
 80006a6:	d012      	beq.n	80006ce <USBPD_PE_Request_CtrlMessage+0xfa>
 80006a8:	2c15      	cmp	r4, #21
 80006aa:	d017      	beq.n	80006dc <USBPD_PE_Request_CtrlMessage+0x108>
 80006ac:	2c16      	cmp	r4, #22
 80006ae:	d009      	beq.n	80006c4 <USBPD_PE_Request_CtrlMessage+0xf0>
 80006b0:	2c18      	cmp	r4, #24
 80006b2:	d01c      	beq.n	80006ee <USBPD_PE_Request_CtrlMessage+0x11a>
 80006b4:	e01f      	b.n	80006f6 <USBPD_PE_Request_CtrlMessage+0x122>
 80006b6:	68af      	ldr	r7, [r5, #8]
 80006b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80006ba:	b9e0      	cbnz	r0, 80006f6 <USBPD_PE_Request_CtrlMessage+0x122>
 80006bc:	2602      	movs	r6, #2
 80006be:	e026      	b.n	800070e <USBPD_PE_Request_CtrlMessage+0x13a>
 80006c0:	2011      	movs	r0, #17
 80006c2:	e017      	b.n	80006f4 <USBPD_PE_Request_CtrlMessage+0x120>
 80006c4:	2716      	movs	r7, #22
 80006c6:	7017      	strb	r7, [r2, #0]
 80006c8:	e015      	b.n	80006f6 <USBPD_PE_Request_CtrlMessage+0x122>
 80006ca:	2012      	movs	r0, #18
 80006cc:	e012      	b.n	80006f4 <USBPD_PE_Request_CtrlMessage+0x120>
 80006ce:	6828      	ldr	r0, [r5, #0]
 80006d0:	8907      	ldrh	r7, [r0, #8]
 80006d2:	f3c7 0080 	ubfx	r0, r7, #2, #1
 80006d6:	b970      	cbnz	r0, 80006f6 <USBPD_PE_Request_CtrlMessage+0x122>
 80006d8:	2610      	movs	r6, #16
 80006da:	e018      	b.n	800070e <USBPD_PE_Request_CtrlMessage+0x13a>
 80006dc:	6828      	ldr	r0, [r5, #0]
 80006de:	8907      	ldrh	r7, [r0, #8]
 80006e0:	f3c7 10c0 	ubfx	r0, r7, #7, #1
 80006e4:	b908      	cbnz	r0, 80006ea <USBPD_PE_Request_CtrlMessage+0x116>
 80006e6:	2010      	movs	r0, #16
 80006e8:	e012      	b.n	8000710 <USBPD_PE_Request_CtrlMessage+0x13c>
 80006ea:	2015      	movs	r0, #21
 80006ec:	e002      	b.n	80006f4 <USBPD_PE_Request_CtrlMessage+0x120>
 80006ee:	704f      	strb	r7, [r1, #1]
 80006f0:	e001      	b.n	80006f6 <USBPD_PE_Request_CtrlMessage+0x122>
 80006f2:	2005      	movs	r0, #5
 80006f4:	7010      	strb	r0, [r2, #0]
 80006f6:	eb0d 0703 	add.w	r7, sp, r3
 80006fa:	7878      	ldrb	r0, [r7, #1]
 80006fc:	7050      	strb	r0, [r2, #1]
 80006fe:	eb0d 0203 	add.w	r2, sp, r3
 8000702:	7890      	ldrb	r0, [r2, #2]
 8000704:	7008      	strb	r0, [r1, #0]
 8000706:	4640      	mov	r0, r8
 8000708:	68a9      	ldr	r1, [r5, #8]
 800070a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800070c:	4790      	blx	r2
 800070e:	4630      	mov	r0, r6
 8000710:	b013      	add	sp, #76	@ 0x4c
 8000712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000716 <USBPD_PE_Request_DataMessage>:
 8000716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000718:	f000 f85f 	bl	80007da <.text_20>
 800071c:	b923      	cbnz	r3, 8000728 <USBPD_PE_Request_DataMessage+0x12>
 800071e:	686b      	ldr	r3, [r5, #4]
 8000720:	681f      	ldr	r7, [r3, #0]
 8000722:	f3c7 3300 	ubfx	r3, r7, #12, #1
 8000726:	b90b      	cbnz	r3, 800072c <USBPD_PE_Request_DataMessage+0x16>
 8000728:	2403      	movs	r4, #3
 800072a:	e01a      	b.n	8000762 <USBPD_PE_Request_DataMessage+0x4c>
 800072c:	2300      	movs	r3, #0
 800072e:	7073      	strb	r3, [r6, #1]
 8000730:	2901      	cmp	r1, #1
 8000732:	f240 3302 	movw	r3, #770	@ 0x302
 8000736:	f240 7703 	movw	r7, #1795	@ 0x703
 800073a:	d004      	beq.n	8000746 <USBPD_PE_Request_DataMessage+0x30>
 800073c:	2906      	cmp	r1, #6
 800073e:	d012      	beq.n	8000766 <USBPD_PE_Request_DataMessage+0x50>
 8000740:	2907      	cmp	r1, #7
 8000742:	d01a      	beq.n	800077a <USBPD_PE_Request_DataMessage+0x64>
 8000744:	e025      	b.n	8000792 <USBPD_PE_Request_DataMessage+0x7c>
 8000746:	6869      	ldr	r1, [r5, #4]
 8000748:	680a      	ldr	r2, [r1, #0]
 800074a:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800074e:	b141      	cbz	r1, 8000762 <USBPD_PE_Request_DataMessage+0x4c>
 8000750:	2101      	movs	r1, #1
 8000752:	f885 125f 	strb.w	r1, [r5, #607]	@ 0x25f
 8000756:	2207      	movs	r2, #7
 8000758:	7032      	strb	r2, [r6, #0]
 800075a:	68a9      	ldr	r1, [r5, #8]
 800075c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800075e:	4790      	blx	r2
 8000760:	2400      	movs	r4, #0
 8000762:	4620      	mov	r0, r4
 8000764:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8000766:	6869      	ldr	r1, [r5, #4]
 8000768:	6809      	ldr	r1, [r1, #0]
 800076a:	400f      	ands	r7, r1
 800076c:	429f      	cmp	r7, r3
 800076e:	d1f8      	bne.n	8000762 <USBPD_PE_Request_DataMessage+0x4c>
 8000770:	6812      	ldr	r2, [r2, #0]
 8000772:	62aa      	str	r2, [r5, #40]	@ 0x28
 8000774:	212b      	movs	r1, #43	@ 0x2b
 8000776:	7031      	strb	r1, [r6, #0]
 8000778:	e7ef      	b.n	800075a <USBPD_PE_Request_DataMessage+0x44>
 800077a:	6869      	ldr	r1, [r5, #4]
 800077c:	6809      	ldr	r1, [r1, #0]
 800077e:	400f      	ands	r7, r1
 8000780:	429f      	cmp	r7, r3
 8000782:	d1ee      	bne.n	8000762 <USBPD_PE_Request_DataMessage+0x4c>
 8000784:	6812      	ldr	r2, [r2, #0]
 8000786:	62aa      	str	r2, [r5, #40]	@ 0x28
 8000788:	215d      	movs	r1, #93	@ 0x5d
 800078a:	f885 125f 	strb.w	r1, [r5, #607]	@ 0x25f
 800078e:	2262      	movs	r2, #98	@ 0x62
 8000790:	e7e2      	b.n	8000758 <USBPD_PE_Request_DataMessage+0x42>
 8000792:	2410      	movs	r4, #16
 8000794:	e7e5      	b.n	8000762 <USBPD_PE_Request_DataMessage+0x4c>

08000796 <USBPD_PE_Send_Request>:
 8000796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000798:	f000 f81f 	bl	80007da <.text_20>
 800079c:	b923      	cbnz	r3, 80007a8 <USBPD_PE_Send_Request+0x12>
 800079e:	686b      	ldr	r3, [r5, #4]
 80007a0:	681f      	ldr	r7, [r3, #0]
 80007a2:	f3c7 3300 	ubfx	r3, r7, #12, #1
 80007a6:	b90b      	cbnz	r3, 80007ac <USBPD_PE_Send_Request+0x16>
 80007a8:	2403      	movs	r4, #3
 80007aa:	e014      	b.n	80007d6 <USBPD_PE_Send_Request+0x40>
 80007ac:	686f      	ldr	r7, [r5, #4]
 80007ae:	683f      	ldr	r7, [r7, #0]
 80007b0:	f240 7304 	movw	r3, #1796	@ 0x704
 80007b4:	403b      	ands	r3, r7
 80007b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80007ba:	d10c      	bne.n	80007d6 <USBPD_PE_Send_Request+0x40>
 80007bc:	2445      	movs	r4, #69	@ 0x45
 80007be:	7034      	strb	r4, [r6, #0]
 80007c0:	61a9      	str	r1, [r5, #24]
 80007c2:	2400      	movs	r4, #0
 80007c4:	6969      	ldr	r1, [r5, #20]
 80007c6:	f362 01c4 	bfi	r1, r2, #3, #2
 80007ca:	6169      	str	r1, [r5, #20]
 80007cc:	2200      	movs	r2, #0
 80007ce:	7072      	strb	r2, [r6, #1]
 80007d0:	68a9      	ldr	r1, [r5, #8]
 80007d2:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80007d4:	4790      	blx	r2
 80007d6:	4620      	mov	r0, r4
 80007d8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080007da <.text_20>:
 80007da:	f8df 3be4 	ldr.w	r3, [pc, #3044]	@ 80013c0 <.text_70>
 80007de:	4604      	mov	r4, r0
 80007e0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80007e4:	f105 0632 	add.w	r6, r5, #50	@ 0x32
 80007e8:	2402      	movs	r4, #2
 80007ea:	7833      	ldrb	r3, [r6, #0]
 80007ec:	4770      	bx	lr

080007ee <USBPD_PE_SendExtendedMessage>:
 80007ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007f2:	4681      	mov	r9, r0
 80007f4:	468a      	mov	sl, r1
 80007f6:	f8df 0bc8 	ldr.w	r0, [pc, #3016]	@ 80013c0 <.text_70>
 80007fa:	4649      	mov	r1, r9
 80007fc:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8000800:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8000804:	469b      	mov	fp, r3
 8000806:	2500      	movs	r5, #0
 8000808:	b920      	cbnz	r0, 8000814 <USBPD_PE_SendExtendedMessage+0x26>
 800080a:	6860      	ldr	r0, [r4, #4]
 800080c:	6801      	ldr	r1, [r0, #0]
 800080e:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8000812:	b908      	cbnz	r0, 8000818 <USBPD_PE_SendExtendedMessage+0x2a>
 8000814:	2503      	movs	r5, #3
 8000816:	e066      	b.n	80008e6 <USBPD_PE_SendExtendedMessage+0xf8>
 8000818:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800081c:	2803      	cmp	r0, #3
 800081e:	d10d      	bne.n	800083c <USBPD_PE_SendExtendedMessage+0x4e>
 8000820:	6860      	ldr	r0, [r4, #4]
 8000822:	7801      	ldrb	r1, [r0, #0]
 8000824:	f001 0103 	and.w	r1, r1, #3
 8000828:	2901      	cmp	r1, #1
 800082a:	bf98      	it	ls
 800082c:	2501      	movls	r5, #1
 800082e:	d95a      	bls.n	80008e6 <USBPD_PE_SendExtendedMessage+0xf8>
 8000830:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8000834:	f240 1105 	movw	r1, #261	@ 0x105
 8000838:	4588      	cmp	r8, r1
 800083a:	d301      	bcc.n	8000840 <USBPD_PE_SendExtendedMessage+0x52>
 800083c:	2502      	movs	r5, #2
 800083e:	e052      	b.n	80008e6 <USBPD_PE_SendExtendedMessage+0xf8>
 8000840:	f88d 2000 	strb.w	r2, [sp]
 8000844:	f204 265d 	addw	r6, r4, #605	@ 0x25d
 8000848:	6960      	ldr	r0, [r4, #20]
 800084a:	f020 0020 	bic.w	r0, r0, #32
 800084e:	6160      	str	r0, [r4, #20]
 8000850:	f89d 0000 	ldrb.w	r0, [sp]
 8000854:	2803      	cmp	r0, #3
 8000856:	d008      	beq.n	800086a <USBPD_PE_SendExtendedMessage+0x7c>
 8000858:	2804      	cmp	r0, #4
 800085a:	d018      	beq.n	800088e <USBPD_PE_SendExtendedMessage+0xa0>
 800085c:	2806      	cmp	r0, #6
 800085e:	d01d      	beq.n	800089c <USBPD_PE_SendExtendedMessage+0xae>
 8000860:	2808      	cmp	r0, #8
 8000862:	d01d      	beq.n	80008a0 <USBPD_PE_SendExtendedMessage+0xb2>
 8000864:	280a      	cmp	r0, #10
 8000866:	d01e      	beq.n	80008a6 <USBPD_PE_SendExtendedMessage+0xb8>
 8000868:	e020      	b.n	80008ac <USBPD_PE_SendExtendedMessage+0xbe>
 800086a:	210c      	movs	r1, #12
 800086c:	70b1      	strb	r1, [r6, #2]
 800086e:	6960      	ldr	r0, [r4, #20]
 8000870:	f040 0020 	orr.w	r0, r0, #32
 8000874:	6160      	str	r0, [r4, #20]
 8000876:	ea5f 0008 	movs.w	r0, r8
 800087a:	d025      	beq.n	80008c8 <USBPD_PE_SendExtendedMessage+0xda>
 800087c:	4648      	mov	r0, r9
 800087e:	f000 fa86 	bl	8000d8e <PE_Get_UnchunkedSupport>
 8000882:	2700      	movs	r7, #0
 8000884:	2801      	cmp	r0, #1
 8000886:	bf08      	it	eq
 8000888:	2704      	moveq	r7, #4
 800088a:	2000      	movs	r0, #0
 800088c:	e017      	b.n	80008be <USBPD_PE_SendExtendedMessage+0xd0>
 800088e:	200d      	movs	r0, #13
 8000890:	70b0      	strb	r0, [r6, #2]
 8000892:	6961      	ldr	r1, [r4, #20]
 8000894:	f041 0120 	orr.w	r1, r1, #32
 8000898:	6161      	str	r1, [r4, #20]
 800089a:	e7ec      	b.n	8000876 <USBPD_PE_SendExtendedMessage+0x88>
 800089c:	200e      	movs	r0, #14
 800089e:	e7f7      	b.n	8000890 <USBPD_PE_SendExtendedMessage+0xa2>
 80008a0:	205b      	movs	r0, #91	@ 0x5b
 80008a2:	70b0      	strb	r0, [r6, #2]
 80008a4:	e7e7      	b.n	8000876 <USBPD_PE_SendExtendedMessage+0x88>
 80008a6:	215c      	movs	r1, #92	@ 0x5c
 80008a8:	70b1      	strb	r1, [r6, #2]
 80008aa:	e7e4      	b.n	8000876 <USBPD_PE_SendExtendedMessage+0x88>
 80008ac:	2510      	movs	r5, #16
 80008ae:	e01a      	b.n	80008e6 <USBPD_PE_SendExtendedMessage+0xf8>
 80008b0:	183a      	adds	r2, r7, r0
 80008b2:	f81b 1000 	ldrb.w	r1, [fp, r0]
 80008b6:	4422      	add	r2, r4
 80008b8:	1c40      	adds	r0, r0, #1
 80008ba:	f882 1385 	strb.w	r1, [r2, #901]	@ 0x385
 80008be:	4540      	cmp	r0, r8
 80008c0:	d3f6      	bcc.n	80008b0 <USBPD_PE_SendExtendedMessage+0xc2>
 80008c2:	f8a4 8490 	strh.w	r8, [r4, #1168]	@ 0x490
 80008c6:	e001      	b.n	80008cc <USBPD_PE_SendExtendedMessage+0xde>
 80008c8:	f8a4 5490 	strh.w	r5, [r4, #1168]	@ 0x490
 80008cc:	f104 0032 	add.w	r0, r4, #50	@ 0x32
 80008d0:	2231      	movs	r2, #49	@ 0x31
 80008d2:	f880 a001 	strb.w	sl, [r0, #1]
 80008d6:	f89d 1000 	ldrb.w	r1, [sp]
 80008da:	7031      	strb	r1, [r6, #0]
 80008dc:	7002      	strb	r2, [r0, #0]
 80008de:	4648      	mov	r0, r9
 80008e0:	68a3      	ldr	r3, [r4, #8]
 80008e2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80008e4:	4788      	blx	r1
 80008e6:	4628      	mov	r0, r5
 80008e8:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080008ec <PE_Send_RESET>:
 80008ec:	b538      	push	{r3, r4, r5, lr}
 80008ee:	4604      	mov	r4, r0
 80008f0:	460d      	mov	r5, r1
 80008f2:	2d05      	cmp	r5, #5
 80008f4:	7c20      	ldrb	r0, [r4, #16]
 80008f6:	bf0c      	ite	eq
 80008f8:	211f      	moveq	r1, #31
 80008fa:	215e      	movne	r1, #94	@ 0x5e
 80008fc:	f7ff fe27 	bl	800054e <USBPD_PE_Notification>
 8000900:	7c20      	ldrb	r0, [r4, #16]
 8000902:	4629      	mov	r1, r5
 8000904:	f004 fb0b 	bl	8004f1e <USBPD_PRL_ResetRequestProcess>
 8000908:	f3ef 8010 	mrs	r0, PRIMASK
 800090c:	b672      	cpsid	i
 800090e:	2100      	movs	r1, #0
 8000910:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
 8000914:	f380 8810 	msr	PRIMASK, r0
 8000918:	bd31      	pop	{r0, r4, r5, pc}

0800091a <PE_Get_SpecRevision>:
 800091a:	f8df 1aa4 	ldr.w	r1, [pc, #2724]	@ 80013c0 <.text_70>
 800091e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000922:	6841      	ldr	r1, [r0, #4]
 8000924:	7808      	ldrb	r0, [r1, #0]
 8000926:	f000 0003 	and.w	r0, r0, #3
 800092a:	4770      	bx	lr

0800092c <PE_ChangePowerRole>:
 800092c:	6842      	ldr	r2, [r0, #4]
 800092e:	6813      	ldr	r3, [r2, #0]
 8000930:	f361 0382 	bfi	r3, r1, #2, #1
 8000934:	6013      	str	r3, [r2, #0]
 8000936:	7c00      	ldrb	r0, [r0, #16]
 8000938:	f004 b877 	b.w	8004a2a <USBPD_PRL_SetHeaderPowerRole>

0800093c <PE_Get_RxEvent>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	2114      	movs	r1, #20
 8000940:	f3ef 8410 	mrs	r4, PRIMASK
 8000944:	b672      	cpsid	i
 8000946:	f100 0530 	add.w	r5, r0, #48	@ 0x30
 800094a:	7b2a      	ldrb	r2, [r5, #12]
 800094c:	b332      	cbz	r2, 800099c <PE_Get_RxEvent+0x60>
 800094e:	f500 7613 	add.w	r6, r0, #588	@ 0x24c
 8000952:	5cb3      	ldrb	r3, [r6, r2]
 8000954:	065f      	lsls	r7, r3, #25
 8000956:	bf58      	it	pl
 8000958:	2103      	movpl	r1, #3
 800095a:	d51f      	bpl.n	800099c <PE_Get_RxEvent+0x60>
 800095c:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000960:	435a      	muls	r2, r3
 8000962:	4410      	add	r0, r2
 8000964:	38cb      	subs	r0, #203	@ 0xcb
 8000966:	60a8      	str	r0, [r5, #8]
 8000968:	7802      	ldrb	r2, [r0, #0]
 800096a:	7840      	ldrb	r0, [r0, #1]
 800096c:	eb02 2300 	add.w	r3, r2, r0, lsl #8
 8000970:	7b28      	ldrb	r0, [r5, #12]
 8000972:	80ab      	strh	r3, [r5, #4]
 8000974:	5c32      	ldrb	r2, [r6, r0]
 8000976:	f002 021f 	and.w	r2, r2, #31
 800097a:	2a01      	cmp	r2, #1
 800097c:	d004      	beq.n	8000988 <PE_Get_RxEvent+0x4c>
 800097e:	2a02      	cmp	r2, #2
 8000980:	d005      	beq.n	800098e <PE_Get_RxEvent+0x52>
 8000982:	2a04      	cmp	r2, #4
 8000984:	d007      	beq.n	8000996 <PE_Get_RxEvent+0x5a>
 8000986:	e009      	b.n	800099c <PE_Get_RxEvent+0x60>
 8000988:	2111      	movs	r1, #17
 800098a:	2000      	movs	r0, #0
 800098c:	e005      	b.n	800099a <PE_Get_RxEvent+0x5e>
 800098e:	2201      	movs	r2, #1
 8000990:	2112      	movs	r1, #18
 8000992:	702a      	strb	r2, [r5, #0]
 8000994:	e002      	b.n	800099c <PE_Get_RxEvent+0x60>
 8000996:	2113      	movs	r1, #19
 8000998:	2002      	movs	r0, #2
 800099a:	7028      	strb	r0, [r5, #0]
 800099c:	f384 8810 	msr	PRIMASK, r4
 80009a0:	4608      	mov	r0, r1
 80009a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009a4 <PE_Clear_RxEvent>:
 80009a4:	b510      	push	{r4, lr}
 80009a6:	4601      	mov	r1, r0
 80009a8:	f3ef 8210 	mrs	r2, PRIMASK
 80009ac:	b672      	cpsid	i
 80009ae:	f891 003c 	ldrb.w	r0, [r1, #60]	@ 0x3c
 80009b2:	b1c8      	cbz	r0, 80009e8 <__iar_annotation$$tailcall+0x8>
 80009b4:	1e40      	subs	r0, r0, #1
 80009b6:	b2c0      	uxtb	r0, r0
 80009b8:	f201 234d 	addw	r3, r1, #589	@ 0x24d
 80009bc:	2400      	movs	r4, #0
 80009be:	541c      	strb	r4, [r3, r0]
 80009c0:	1e40      	subs	r0, r0, #1
 80009c2:	4180      	sbcs	r0, r0
 80009c4:	0fc0      	lsrs	r0, r0, #31
 80009c6:	5c1b      	ldrb	r3, [r3, r0]
 80009c8:	065c      	lsls	r4, r3, #25
 80009ca:	d50a      	bpl.n	80009e2 <__iar_annotation$$tailcall+0x2>
 80009cc:	1c40      	adds	r0, r0, #1
 80009ce:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 80009d2:	f382 8810 	msr	PRIMASK, r2
 80009d6:	7c08      	ldrb	r0, [r1, #16]
 80009d8:	6889      	ldr	r1, [r1, #8]
 80009da:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80009dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

080009e0 <__iar_annotation$$tailcall>:
 80009e0:	4710      	bx	r2
 80009e2:	2000      	movs	r0, #0
 80009e4:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 80009e8:	f382 8810 	msr	PRIMASK, r2
 80009ec:	bd10      	pop	{r4, pc}

080009ee <PE_PRL_Control_RxEvent>:
 80009ee:	f8df 19d0 	ldr.w	r1, [pc, #2512]	@ 80013c0 <.text_70>
 80009f2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80009f6:	2000      	movs	r0, #0
 80009f8:	f3ef 8210 	mrs	r2, PRIMASK
 80009fc:	b672      	cpsid	i
 80009fe:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8000a02:	b101      	cbz	r1, 8000a06 <PE_PRL_Control_RxEvent+0x18>
 8000a04:	2001      	movs	r0, #1
 8000a06:	f382 8810 	msr	PRIMASK, r2
 8000a0a:	4770      	bx	lr

08000a0c <PE_Convert_SOPRxEvent>:
 8000a0c:	b118      	cbz	r0, 8000a16 <PE_Convert_SOPRxEvent+0xa>
 8000a0e:	2802      	cmp	r0, #2
 8000a10:	d005      	beq.n	8000a1e <PE_Convert_SOPRxEvent+0x12>
 8000a12:	d302      	bcc.n	8000a1a <PE_Convert_SOPRxEvent+0xe>
 8000a14:	e005      	b.n	8000a22 <PE_Convert_SOPRxEvent+0x16>
 8000a16:	2011      	movs	r0, #17
 8000a18:	4770      	bx	lr
 8000a1a:	2012      	movs	r0, #18
 8000a1c:	4770      	bx	lr
 8000a1e:	2013      	movs	r0, #19
 8000a20:	4770      	bx	lr
 8000a22:	2014      	movs	r0, #20
 8000a24:	4770      	bx	lr

08000a26 <PE_Check_AMSConflict>:
 8000a26:	b538      	push	{r3, r4, r5, lr}
 8000a28:	4605      	mov	r5, r0
 8000a2a:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 8000a2e:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8000a30:	2400      	movs	r4, #0
 8000a32:	4001      	ands	r1, r0
 8000a34:	290d      	cmp	r1, #13
 8000a36:	d102      	bne.n	8000a3e <PE_Check_AMSConflict+0x18>
 8000a38:	2110      	movs	r1, #16
 8000a3a:	7469      	strb	r1, [r5, #17]
 8000a3c:	e02c      	b.n	8000a98 <PE_Check_AMSConflict+0x72>
 8000a3e:	7f28      	ldrb	r0, [r5, #28]
 8000a40:	b188      	cbz	r0, 8000a66 <PE_Check_AMSConflict+0x40>
 8000a42:	1e40      	subs	r0, r0, #1
 8000a44:	2801      	cmp	r0, #1
 8000a46:	d914      	bls.n	8000a72 <PE_Check_AMSConflict+0x4c>
 8000a48:	1e80      	subs	r0, r0, #2
 8000a4a:	d014      	beq.n	8000a76 <PE_Check_AMSConflict+0x50>
 8000a4c:	1e40      	subs	r0, r0, #1
 8000a4e:	d023      	beq.n	8000a98 <PE_Check_AMSConflict+0x72>
 8000a50:	1e40      	subs	r0, r0, #1
 8000a52:	2809      	cmp	r0, #9
 8000a54:	bf84      	itt	hi
 8000a56:	380b      	subhi	r0, #11
 8000a58:	2801      	cmphi	r0, #1
 8000a5a:	d90a      	bls.n	8000a72 <PE_Check_AMSConflict+0x4c>
 8000a5c:	1e80      	subs	r0, r0, #2
 8000a5e:	d005      	beq.n	8000a6c <PE_Check_AMSConflict+0x46>
 8000a60:	384d      	subs	r0, #77	@ 0x4d
 8000a62:	d006      	beq.n	8000a72 <PE_Check_AMSConflict+0x4c>
 8000a64:	e00a      	b.n	8000a7c <PE_Check_AMSConflict+0x56>
 8000a66:	2203      	movs	r2, #3
 8000a68:	746a      	strb	r2, [r5, #17]
 8000a6a:	e016      	b.n	8000a9a <PE_Check_AMSConflict+0x74>
 8000a6c:	200f      	movs	r0, #15
 8000a6e:	7468      	strb	r0, [r5, #17]
 8000a70:	e013      	b.n	8000a9a <PE_Check_AMSConflict+0x74>
 8000a72:	2011      	movs	r0, #17
 8000a74:	e000      	b.n	8000a78 <PE_Check_AMSConflict+0x52>
 8000a76:	200f      	movs	r0, #15
 8000a78:	7468      	strb	r0, [r5, #17]
 8000a7a:	e00d      	b.n	8000a98 <PE_Check_AMSConflict+0x72>
 8000a7c:	7c28      	ldrb	r0, [r5, #16]
 8000a7e:	215c      	movs	r1, #92	@ 0x5c
 8000a80:	f7ff fd65 	bl	800054e <USBPD_PE_Notification>
 8000a84:	2103      	movs	r1, #3
 8000a86:	686a      	ldr	r2, [r5, #4]
 8000a88:	7469      	strb	r1, [r5, #17]
 8000a8a:	f240 7004 	movw	r0, #1796	@ 0x704
 8000a8e:	6811      	ldr	r1, [r2, #0]
 8000a90:	4001      	ands	r1, r0
 8000a92:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8000a96:	d000      	beq.n	8000a9a <PE_Check_AMSConflict+0x74>
 8000a98:	2415      	movs	r4, #21
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	bd32      	pop	{r1, r4, r5, pc}

08000a9e <PE_PRL_ResetReceived>:
 8000a9e:	b538      	push	{r3, r4, r5, lr}
 8000aa0:	4604      	mov	r4, r0
 8000aa2:	f8df 091c 	ldr.w	r0, [pc, #2332]	@ 80013c0 <.text_70>
 8000aa6:	4622      	mov	r2, r4
 8000aa8:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8000aac:	2905      	cmp	r1, #5
 8000aae:	d114      	bne.n	8000ada <PE_PRL_ResetReceived+0x3c>
 8000ab0:	6868      	ldr	r0, [r5, #4]
 8000ab2:	6801      	ldr	r1, [r0, #0]
 8000ab4:	f021 0110 	bic.w	r1, r1, #16
 8000ab8:	6001      	str	r1, [r0, #0]
 8000aba:	2001      	movs	r0, #1
 8000abc:	6969      	ldr	r1, [r5, #20]
 8000abe:	f360 214a 	bfi	r1, r0, #9, #2
 8000ac2:	f105 0032 	add.w	r0, r5, #50	@ 0x32
 8000ac6:	6169      	str	r1, [r5, #20]
 8000ac8:	2214      	movs	r2, #20
 8000aca:	2300      	movs	r3, #0
 8000acc:	7002      	strb	r2, [r0, #0]
 8000ace:	7283      	strb	r3, [r0, #10]
 8000ad0:	211e      	movs	r1, #30
 8000ad2:	7c28      	ldrb	r0, [r5, #16]
 8000ad4:	f7ff fd3b 	bl	800054e <USBPD_PE_Notification>
 8000ad8:	e003      	b.n	8000ae2 <PE_PRL_ResetReceived+0x44>
 8000ada:	6968      	ldr	r0, [r5, #20]
 8000adc:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8000ae0:	6168      	str	r0, [r5, #20]
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	68a9      	ldr	r1, [r5, #8]
 8000ae6:	e148      	b.n	8000d7a <.text_44>

08000ae8 <PE_PRL_BistCompleted>:
 8000ae8:	4770      	bx	lr

08000aea <PE_Reset_HardReset>:
 8000aea:	b510      	push	{r4, lr}
 8000aec:	4604      	mov	r4, r0
 8000aee:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8000af2:	b118      	cbz	r0, 8000afc <PE_Reset_HardReset+0x12>
 8000af4:	7c20      	ldrb	r0, [r4, #16]
 8000af6:	215b      	movs	r1, #91	@ 0x5b
 8000af8:	f7ff fd29 	bl	800054e <USBPD_PE_Notification>
 8000afc:	4620      	mov	r0, r4
 8000afe:	f000 f82a 	bl	8000b56 <PE_Reset_ZI>
 8000b02:	f000 f88e 	bl	8000c22 <.text_37>
 8000b06:	6820      	ldr	r0, [r4, #0]
 8000b08:	7903      	ldrb	r3, [r0, #4]
 8000b0a:	f003 0303 	and.w	r3, r3, #3
 8000b0e:	d009      	beq.n	8000b24 <PE_Reset_HardReset+0x3a>
 8000b10:	7c20      	ldrb	r0, [r4, #16]
 8000b12:	2201      	movs	r2, #1
 8000b14:	2101      	movs	r1, #1
 8000b16:	f003 ff72 	bl	80049fe <USBPD_PRL_SetHeader>
 8000b1a:	6860      	ldr	r0, [r4, #4]
 8000b1c:	6801      	ldr	r1, [r0, #0]
 8000b1e:	f041 0108 	orr.w	r1, r1, #8
 8000b22:	e008      	b.n	8000b36 <PE_Reset_HardReset+0x4c>
 8000b24:	7c20      	ldrb	r0, [r4, #16]
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	f003 ff68 	bl	80049fe <USBPD_PRL_SetHeader>
 8000b2e:	6860      	ldr	r0, [r4, #4]
 8000b30:	6801      	ldr	r1, [r0, #0]
 8000b32:	f021 0108 	bic.w	r1, r1, #8
 8000b36:	6001      	str	r1, [r0, #0]
 8000b38:	f000 f840 	bl	8000bbc <.text_34>
 8000b3c:	0892      	lsrs	r2, r2, #2
 8000b3e:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
 8000b42:	6008      	str	r0, [r1, #0]
 8000b44:	2101      	movs	r1, #1
 8000b46:	7c20      	ldrb	r0, [r4, #16]
 8000b48:	f003 ffb0 	bl	8004aac <USBPD_PRL_SOPCapability>
 8000b4c:	7c20      	ldrb	r0, [r4, #16]
 8000b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b52:	f004 ba20 	b.w	8004f96 <USBPD_PRL_Reset>

08000b56 <PE_Reset_ZI>:
 8000b56:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000b58:	4604      	mov	r4, r0
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	9001      	str	r0, [sp, #4]
 8000b5e:	2100      	movs	r1, #0
 8000b60:	6860      	ldr	r0, [r4, #4]
 8000b62:	6802      	ldr	r2, [r0, #0]
 8000b64:	f022 0210 	bic.w	r2, r2, #16
 8000b68:	6002      	str	r2, [r0, #0]
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	f000 fbd6 	bl	800131c <PE_SetPowerNegotiation>
 8000b70:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8000b74:	f104 0014 	add.w	r0, r4, #20
 8000b78:	f017 ffae 	bl	8018ad8 <__aeabi_memclr>
 8000b7c:	68a5      	ldr	r5, [r4, #8]
 8000b7e:	7c20      	ldrb	r0, [r4, #16]
 8000b80:	69ae      	ldr	r6, [r5, #24]
 8000b82:	2304      	movs	r3, #4
 8000b84:	aa01      	add	r2, sp, #4
 8000b86:	2102      	movs	r1, #2
 8000b88:	47b0      	blx	r6
 8000b8a:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8000b8e:	9000      	str	r0, [sp, #0]
 8000b90:	2304      	movs	r3, #4
 8000b92:	68a5      	ldr	r5, [r4, #8]
 8000b94:	7c20      	ldrb	r0, [r4, #16]
 8000b96:	69ae      	ldr	r6, [r5, #24]
 8000b98:	466a      	mov	r2, sp
 8000b9a:	2106      	movs	r1, #6
 8000b9c:	47b0      	blx	r6
 8000b9e:	6820      	ldr	r0, [r4, #0]
 8000ba0:	7901      	ldrb	r1, [r0, #4]
 8000ba2:	7c20      	ldrb	r0, [r4, #16]
 8000ba4:	f001 0103 	and.w	r1, r1, #3
 8000ba8:	f003 ff5a 	bl	8004a60 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000bac:	f000 f806 	bl	8000bbc <.text_34>
 8000bb0:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8000bb4:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000bb8:	600a      	str	r2, [r1, #0]
 8000bba:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08000bbc <.text_34>:
 8000bbc:	6820      	ldr	r0, [r4, #0]
 8000bbe:	6861      	ldr	r1, [r4, #4]
 8000bc0:	7900      	ldrb	r0, [r0, #4]
 8000bc2:	680a      	ldr	r2, [r1, #0]
 8000bc4:	f000 0003 	and.w	r0, r0, #3
 8000bc8:	4770      	bx	lr

08000bca <PE_Reset_Counter>:
 8000bca:	2103      	movs	r1, #3
 8000bcc:	f500 7018 	add.w	r0, r0, #608	@ 0x260
 8000bd0:	f017 bf82 	b.w	8018ad8 <__aeabi_memclr>

08000bd4 <PE_Reset_StateMachine>:
 8000bd4:	b510      	push	{r4, lr}
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8000bdc:	b118      	cbz	r0, 8000be6 <PE_Reset_StateMachine+0x12>
 8000bde:	7c20      	ldrb	r0, [r4, #16]
 8000be0:	215b      	movs	r1, #91	@ 0x5b
 8000be2:	f7ff fcb4 	bl	800054e <USBPD_PE_Notification>
 8000be6:	4620      	mov	r0, r4
 8000be8:	f7ff ffb5 	bl	8000b56 <PE_Reset_ZI>
 8000bec:	2101      	movs	r1, #1
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f000 fb94 	bl	800131c <PE_SetPowerNegotiation>
 8000bf4:	7c20      	ldrb	r0, [r4, #16]
 8000bf6:	f004 f9ce 	bl	8004f96 <USBPD_PRL_Reset>
 8000bfa:	f000 f812 	bl	8000c22 <.text_37>
 8000bfe:	f001 0303 	and.w	r3, r1, #3
 8000c02:	f3c1 02c0 	ubfx	r2, r1, #3, #1
 8000c06:	d005      	beq.n	8000c14 <PE_Reset_StateMachine+0x40>
 8000c08:	7c20      	ldrb	r0, [r4, #16]
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	f003 fef7 	bl	80049fe <USBPD_PRL_SetHeader>
 8000c10:	2002      	movs	r0, #2
 8000c12:	e004      	b.n	8000c1e <PE_Reset_StateMachine+0x4a>
 8000c14:	7c20      	ldrb	r0, [r4, #16]
 8000c16:	2100      	movs	r1, #0
 8000c18:	f003 fef1 	bl	80049fe <USBPD_PRL_SetHeader>
 8000c1c:	203e      	movs	r0, #62	@ 0x3e
 8000c1e:	7460      	strb	r0, [r4, #17]
 8000c20:	bd10      	pop	{r4, pc}

08000c22 <.text_37>:
 8000c22:	6860      	ldr	r0, [r4, #4]
 8000c24:	6801      	ldr	r1, [r0, #0]
 8000c26:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	4770      	bx	lr

08000c2e <PE_ExtRevisionInteroperability>:
 8000c2e:	b538      	push	{r3, r4, r5, lr}
 8000c30:	f8df 378c 	ldr.w	r3, [pc, #1932]	@ 80013c0 <.text_70>
 8000c34:	4602      	mov	r2, r0
 8000c36:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000c3a:	6865      	ldr	r5, [r4, #4]
 8000c3c:	682c      	ldr	r4, [r5, #0]
 8000c3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c42:	f004 0503 	and.w	r5, r4, #3
 8000c46:	42a9      	cmp	r1, r5
 8000c48:	bfa8      	it	ge
 8000c4a:	4629      	movge	r1, r5
 8000c4c:	f361 0401 	bfi	r4, r1, #0, #2
 8000c50:	6851      	ldr	r1, [r2, #4]
 8000c52:	600c      	str	r4, [r1, #0]
 8000c54:	6851      	ldr	r1, [r2, #4]
 8000c56:	680b      	ldr	r3, [r1, #0]
 8000c58:	f003 0403 	and.w	r4, r3, #3
 8000c5c:	2c01      	cmp	r4, #1
 8000c5e:	bf0c      	ite	eq
 8000c60:	2400      	moveq	r4, #0
 8000c62:	2420      	movne	r4, #32
 8000c64:	f023 0320 	bic.w	r3, r3, #32
 8000c68:	4323      	orrs	r3, r4
 8000c6a:	600b      	str	r3, [r1, #0]
 8000c6c:	6852      	ldr	r2, [r2, #4]
 8000c6e:	7811      	ldrb	r1, [r2, #0]
 8000c70:	e8bd 4034 	ldmia.w	sp!, {r2, r4, r5, lr}
 8000c74:	f001 0103 	and.w	r1, r1, #3
 8000c78:	f003 beeb 	b.w	8004a52 <USBPD_PRL_SetHeaderSpecification>

08000c7c <PE_PRL_FastRoleSwapReception>:
 8000c7c:	f8df 1740 	ldr.w	r1, [pc, #1856]	@ 80013c0 <.text_70>
 8000c80:	4602      	mov	r2, r0
 8000c82:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000c86:	7f0a      	ldrb	r2, [r1, #28]
 8000c88:	2a09      	cmp	r2, #9
 8000c8a:	d005      	beq.n	8000c98 <PE_PRL_FastRoleSwapReception+0x1c>
 8000c8c:	684a      	ldr	r2, [r1, #4]
 8000c8e:	6813      	ldr	r3, [r2, #0]
 8000c90:	f043 0310 	orr.w	r3, r3, #16
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e354      	b.n	8001342 <.text_66>
 8000c98:	4770      	bx	lr

08000c9a <PE_PRL_PostReceiveEvent>:
 8000c9a:	b570      	push	{r4, r5, r6, lr}
 8000c9c:	f8df 2720 	ldr.w	r2, [pc, #1824]	@ 80013c0 <.text_70>
 8000ca0:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	2400      	movs	r4, #0
 8000ca8:	191a      	adds	r2, r3, r4
 8000caa:	f892 224d 	ldrb.w	r2, [r2, #589]	@ 0x24d
 8000cae:	b122      	cbz	r2, 8000cba <PE_PRL_PostReceiveEvent+0x20>
 8000cb0:	1c64      	adds	r4, r4, #1
 8000cb2:	b2e4      	uxtb	r4, r4
 8000cb4:	2c01      	cmp	r4, #1
 8000cb6:	d9f7      	bls.n	8000ca8 <PE_PRL_PostReceiveEvent+0xe>
 8000cb8:	bd70      	pop	{r4, r5, r6, pc}
 8000cba:	191a      	adds	r2, r3, r4
 8000cbc:	2020      	movs	r0, #32
 8000cbe:	191d      	adds	r5, r3, r4
 8000cc0:	f882 024d 	strb.w	r0, [r2, #589]	@ 0x24d
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f895 624d 	ldrb.w	r6, [r5, #589]	@ 0x24d
 8000cca:	fa00 f101 	lsl.w	r1, r0, r1
 8000cce:	1918      	adds	r0, r3, r4
 8000cd0:	4331      	orrs	r1, r6
 8000cd2:	f880 124d 	strb.w	r1, [r0, #589]	@ 0x24d
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	bd70      	pop	{r4, r5, r6, pc}

08000cda <PE_PRL_PostReceiveEventError>:
 8000cda:	f8df 16e4 	ldr.w	r1, [pc, #1764]	@ 80013c0 <.text_70>
 8000cde:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b2ca      	uxtb	r2, r1
 8000ce6:	4402      	add	r2, r0
 8000ce8:	f892 324d 	ldrb.w	r3, [r2, #589]	@ 0x24d
 8000cec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8000cf0:	2b20      	cmp	r3, #32
 8000cf2:	d004      	beq.n	8000cfe <PE_PRL_PostReceiveEventError+0x24>
 8000cf4:	1c49      	adds	r1, r1, #1
 8000cf6:	b2ca      	uxtb	r2, r1
 8000cf8:	2a02      	cmp	r2, #2
 8000cfa:	d3f3      	bcc.n	8000ce4 <PE_PRL_PostReceiveEventError+0xa>
 8000cfc:	4770      	bx	lr
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f882 024d 	strb.w	r0, [r2, #589]	@ 0x24d
 8000d04:	4770      	bx	lr

08000d06 <PE_PRL_PostReceiveEventCopy>:
 8000d06:	b510      	push	{r4, lr}
 8000d08:	f8df 26b4 	ldr.w	r2, [pc, #1716]	@ 80013c0 <.text_70>
 8000d0c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000d10:	2200      	movs	r2, #0
 8000d12:	b2d3      	uxtb	r3, r2
 8000d14:	18c4      	adds	r4, r0, r3
 8000d16:	f894 424d 	ldrb.w	r4, [r4, #589]	@ 0x24d
 8000d1a:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8000d1e:	2c20      	cmp	r4, #32
 8000d20:	d004      	beq.n	8000d2c <PE_PRL_PostReceiveEventCopy+0x26>
 8000d22:	1c52      	adds	r2, r2, #1
 8000d24:	b2d3      	uxtb	r3, r2
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d3f3      	bcc.n	8000d12 <PE_PRL_PostReceiveEventCopy+0xc>
 8000d2a:	bd10      	pop	{r4, pc}
 8000d2c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8000d30:	4353      	muls	r3, r2
 8000d32:	18c4      	adds	r4, r0, r3
 8000d34:	f104 003d 	add.w	r0, r4, #61	@ 0x3d
 8000d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d3c:	f017 beca 	b.w	8018ad4 <__aeabi_memcpy>

08000d40 <PE_PRL_PostReceiveEventComplete>:
 8000d40:	b538      	push	{r3, r4, r5, lr}
 8000d42:	f000 f81e 	bl	8000d82 <.text_45>
 8000d46:	2100      	movs	r1, #0
 8000d48:	1854      	adds	r4, r2, r1
 8000d4a:	1c4b      	adds	r3, r1, #1
 8000d4c:	f894 524d 	ldrb.w	r5, [r4, #589]	@ 0x24d
 8000d50:	f005 0560 	and.w	r5, r5, #96	@ 0x60
 8000d54:	2d20      	cmp	r5, #32
 8000d56:	d003      	beq.n	8000d60 <PE_PRL_PostReceiveEventComplete+0x20>
 8000d58:	b2d9      	uxtb	r1, r3
 8000d5a:	2902      	cmp	r1, #2
 8000d5c:	d3f4      	bcc.n	8000d48 <PE_PRL_PostReceiveEventComplete+0x8>
 8000d5e:	bd31      	pop	{r0, r4, r5, pc}
 8000d60:	f894 424d 	ldrb.w	r4, [r4, #589]	@ 0x24d
 8000d64:	1855      	adds	r5, r2, r1
 8000d66:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 8000d6a:	f885 424d 	strb.w	r4, [r5, #589]	@ 0x24d
 8000d6e:	f892 103c 	ldrb.w	r1, [r2, #60]	@ 0x3c
 8000d72:	b909      	cbnz	r1, 8000d78 <PE_PRL_PostReceiveEventComplete+0x38>
 8000d74:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
 8000d78:	6891      	ldr	r1, [r2, #8]

08000d7a <.text_44>:
 8000d7a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8000d7c:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}

08000d80 <__iar_annotation$$tailcall>:
 8000d80:	4710      	bx	r2

08000d82 <.text_45>:
 8000d82:	f8df 163c 	ldr.w	r1, [pc, #1596]	@ 80013c0 <.text_70>
 8000d86:	4602      	mov	r2, r0
 8000d88:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d8c:	4770      	bx	lr

08000d8e <PE_Get_UnchunkedSupport>:
 8000d8e:	f8df 1630 	ldr.w	r1, [pc, #1584]	@ 80013c0 <.text_70>
 8000d92:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000d96:	6841      	ldr	r1, [r0, #4]
 8000d98:	6808      	ldr	r0, [r1, #0]
 8000d9a:	0e40      	lsrs	r0, r0, #25
 8000d9c:	f000 0001 	and.w	r0, r0, #1
 8000da0:	4770      	bx	lr
	...

08000da4 <.text_47>:
 8000da4:	20000278 	.word	0x20000278

08000da8 <.text_48>:
 8000da8:	20000000 	.word	0x20000000

08000dac <.text_49>:
 8000dac:	0801aa20 	.word	0x0801aa20

08000db0 <PE_SubStateMachine_Generic>:
 8000db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db4:	b08c      	sub	sp, #48	@ 0x30
 8000db6:	4604      	mov	r4, r0
 8000db8:	2000      	movs	r0, #0
 8000dba:	9003      	str	r0, [sp, #12]
 8000dbc:	460e      	mov	r6, r1
 8000dbe:	7c63      	ldrb	r3, [r4, #17]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	f04f 0a02 	mov.w	sl, #2
 8000dc6:	f104 0730 	add.w	r7, r4, #48	@ 0x30
 8000dca:	f204 2963 	addw	r9, r4, #611	@ 0x263
 8000dce:	f204 2565 	addw	r5, r4, #613	@ 0x265
 8000dd2:	f204 2267 	addw	r2, r4, #615	@ 0x267
 8000dd6:	f248 081b 	movw	r8, #32795	@ 0x801b
 8000dda:	f000 8163 	beq.w	80010a4 <PE_SubStateMachine_Generic+0x2f4>
 8000dde:	2b18      	cmp	r3, #24
 8000de0:	d03f      	beq.n	8000e62 <PE_SubStateMachine_Generic+0xb2>
 8000de2:	2b19      	cmp	r3, #25
 8000de4:	d04e      	beq.n	8000e84 <PE_SubStateMachine_Generic+0xd4>
 8000de6:	2b1d      	cmp	r3, #29
 8000de8:	f000 808e 	beq.w	8000f08 <PE_SubStateMachine_Generic+0x158>
 8000dec:	2b27      	cmp	r3, #39	@ 0x27
 8000dee:	f000 80aa 	beq.w	8000f46 <PE_SubStateMachine_Generic+0x196>
 8000df2:	2b28      	cmp	r3, #40	@ 0x28
 8000df4:	f000 80b5 	beq.w	8000f62 <PE_SubStateMachine_Generic+0x1b2>
 8000df8:	2b29      	cmp	r3, #41	@ 0x29
 8000dfa:	f000 80bc 	beq.w	8000f76 <PE_SubStateMachine_Generic+0x1c6>
 8000dfe:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e00:	f000 8205 	beq.w	800120e <PE_SubStateMachine_Generic+0x45e>
 8000e04:	2b30      	cmp	r3, #48	@ 0x30
 8000e06:	f000 8179 	beq.w	80010fc <PE_SubStateMachine_Generic+0x34c>
 8000e0a:	2b3a      	cmp	r3, #58	@ 0x3a
 8000e0c:	f000 81ee 	beq.w	80011ec <PE_SubStateMachine_Generic+0x43c>
 8000e10:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e12:	f000 81d1 	beq.w	80011b8 <PE_SubStateMachine_Generic+0x408>
 8000e16:	2b3c      	cmp	r3, #60	@ 0x3c
 8000e18:	f000 81be 	beq.w	8001198 <PE_SubStateMachine_Generic+0x3e8>
 8000e1c:	2b4b      	cmp	r3, #75	@ 0x4b
 8000e1e:	f000 80f8 	beq.w	8001012 <PE_SubStateMachine_Generic+0x262>
 8000e22:	2b63      	cmp	r3, #99	@ 0x63
 8000e24:	f000 8144 	beq.w	80010b0 <PE_SubStateMachine_Generic+0x300>
 8000e28:	2b64      	cmp	r3, #100	@ 0x64
 8000e2a:	f000 8154 	beq.w	80010d6 <PE_SubStateMachine_Generic+0x326>
 8000e2e:	2b67      	cmp	r3, #103	@ 0x67
 8000e30:	f000 8102 	beq.w	8001038 <PE_SubStateMachine_Generic+0x288>
 8000e34:	2b68      	cmp	r3, #104	@ 0x68
 8000e36:	f000 8111 	beq.w	800105c <PE_SubStateMachine_Generic+0x2ac>
 8000e3a:	2b74      	cmp	r3, #116	@ 0x74
 8000e3c:	f000 8174 	beq.w	8001128 <PE_SubStateMachine_Generic+0x378>
 8000e40:	2b93      	cmp	r3, #147	@ 0x93
 8000e42:	f000 809e 	beq.w	8000f82 <PE_SubStateMachine_Generic+0x1d2>
 8000e46:	2b94      	cmp	r3, #148	@ 0x94
 8000e48:	f000 809f 	beq.w	8000f8a <PE_SubStateMachine_Generic+0x1da>
 8000e4c:	2b95      	cmp	r3, #149	@ 0x95
 8000e4e:	f000 80b0 	beq.w	8000fb2 <PE_SubStateMachine_Generic+0x202>
 8000e52:	2b99      	cmp	r3, #153	@ 0x99
 8000e54:	f040 81e0 	bne.w	8001218 <PE_SubStateMachine_Generic+0x468>
 8000e58:	2106      	movs	r1, #6
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f7ff fd46 	bl	80008ec <PE_Send_RESET>
 8000e60:	e195      	b.n	800118e <PE_SubStateMachine_Generic+0x3de>
 8000e62:	f7ff fede 	bl	8000c22 <.text_37>
 8000e66:	bf1d      	ittte	ne
 8000e68:	6960      	ldrne	r0, [r4, #20]
 8000e6a:	0880      	lsrne	r0, r0, #2
 8000e6c:	f000 0001 	andne.w	r0, r0, #1
 8000e70:	2002      	moveq	r0, #2
 8000e72:	9000      	str	r0, [sp, #0]
 8000e74:	2319      	movs	r3, #25
 8000e76:	2208      	movs	r2, #8
 8000e78:	f000 fa3a 	bl	80012f0 <.text_61>
 8000e7c:	2800      	cmp	r0, #0
 8000e7e:	d16f      	bne.n	8000f60 <PE_SubStateMachine_Generic+0x1b0>
 8000e80:	2007      	movs	r0, #7
 8000e82:	e0e8      	b.n	8001056 <PE_SubStateMachine_Generic+0x2a6>
 8000e84:	7830      	ldrb	r0, [r6, #0]
 8000e86:	2811      	cmp	r0, #17
 8000e88:	d13d      	bne.n	8000f06 <PE_SubStateMachine_Generic+0x156>
 8000e8a:	88b9      	ldrh	r1, [r7, #4]
 8000e8c:	0bc8      	lsrs	r0, r1, #15
 8000e8e:	d121      	bne.n	8000ed4 <PE_SubStateMachine_Generic+0x124>
 8000e90:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8000e94:	b1f0      	cbz	r0, 8000ed4 <PE_SubStateMachine_Generic+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	f000 011f 	and.w	r1, r0, #31
 8000e9c:	2904      	cmp	r1, #4
 8000e9e:	d119      	bne.n	8000ed4 <PE_SubStateMachine_Generic+0x124>
 8000ea0:	68a5      	ldr	r5, [r4, #8]
 8000ea2:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8000ea6:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8000eaa:	68b8      	ldr	r0, [r7, #8]
 8000eac:	1c82      	adds	r2, r0, #2
 8000eae:	7c20      	ldrb	r0, [r4, #16]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	2105      	movs	r1, #5
 8000eb4:	47e0      	blx	ip
 8000eb6:	7830      	ldrb	r0, [r6, #0]
 8000eb8:	2814      	cmp	r0, #20
 8000eba:	d003      	beq.n	8000ec4 <PE_SubStateMachine_Generic+0x114>
 8000ebc:	2114      	movs	r1, #20
 8000ebe:	7031      	strb	r1, [r6, #0]
 8000ec0:	f000 f9d1 	bl	8001266 <.text_57+0x4>
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	7460      	strb	r0, [r4, #17]
 8000ec8:	2107      	movs	r1, #7
 8000eca:	7c20      	ldrb	r0, [r4, #16]
 8000ecc:	f7ff fb3f 	bl	800054e <USBPD_PE_Notification>
 8000ed0:	f04f 0a00 	mov.w	sl, #0
 8000ed4:	88b8      	ldrh	r0, [r7, #4]
 8000ed6:	f410 4f70 	tst.w	r0, #61440	@ 0xf000
 8000eda:	d114      	bne.n	8000f06 <PE_SubStateMachine_Generic+0x156>
 8000edc:	f000 001f 	and.w	r0, r0, #31
 8000ee0:	2804      	cmp	r0, #4
 8000ee2:	bf18      	it	ne
 8000ee4:	2810      	cmpne	r0, #16
 8000ee6:	d10e      	bne.n	8000f06 <PE_SubStateMachine_Generic+0x156>
 8000ee8:	7830      	ldrb	r0, [r6, #0]
 8000eea:	2814      	cmp	r0, #20
 8000eec:	d003      	beq.n	8000ef6 <PE_SubStateMachine_Generic+0x146>
 8000eee:	2114      	movs	r1, #20
 8000ef0:	7031      	strb	r1, [r6, #0]
 8000ef2:	f000 f9b8 	bl	8001266 <.text_57+0x4>
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	7460      	strb	r0, [r4, #17]
 8000efa:	2108      	movs	r1, #8
 8000efc:	7c20      	ldrb	r0, [r4, #16]
 8000efe:	f7ff fb26 	bl	800054e <USBPD_PE_Notification>
 8000f02:	f04f 0a00 	mov.w	sl, #0
 8000f06:	e080      	b.n	800100a <PE_SubStateMachine_Generic+0x25a>
 8000f08:	9004      	str	r0, [sp, #16]
 8000f0a:	ab04      	add	r3, sp, #16
 8000f0c:	68a6      	ldr	r6, [r4, #8]
 8000f0e:	7c20      	ldrb	r0, [r4, #16]
 8000f10:	6977      	ldr	r7, [r6, #20]
 8000f12:	aa05      	add	r2, sp, #20
 8000f14:	2101      	movs	r1, #1
 8000f16:	47b8      	blx	r7
 8000f18:	9804      	ldr	r0, [sp, #16]
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	f000 fa40 	bl	80013a0 <PE_CheckDataSizeFromGetDataInfo>
 8000f20:	b108      	cbz	r0, 8000f26 <PE_SubStateMachine_Generic+0x176>
 8000f22:	2003      	movs	r0, #3
 8000f24:	e179      	b.n	800121a <PE_SubStateMachine_Generic+0x46a>
 8000f26:	9a04      	ldr	r2, [sp, #16]
 8000f28:	2003      	movs	r0, #3
 8000f2a:	0892      	lsrs	r2, r2, #2
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	9001      	str	r0, [sp, #4]
 8000f30:	9200      	str	r2, [sp, #0]
 8000f32:	9102      	str	r1, [sp, #8]
 8000f34:	ab05      	add	r3, sp, #20
 8000f36:	2204      	movs	r2, #4
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f000 fabe 	bl	80014ba <PE_Send_DataMessage>
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d10e      	bne.n	8000f60 <PE_SubStateMachine_Generic+0x1b0>
 8000f42:	210a      	movs	r1, #10
 8000f44:	e0ec      	b.n	8001120 <PE_SubStateMachine_Generic+0x370>
 8000f46:	2012      	movs	r0, #18
 8000f48:	7720      	strb	r0, [r4, #28]
 8000f4a:	2105      	movs	r1, #5
 8000f4c:	7c20      	ldrb	r0, [r4, #16]
 8000f4e:	f004 f815 	bl	8004f7c <USBDPD_PRL_BistCarrierEyeMode>
 8000f52:	2028      	movs	r0, #40	@ 0x28
 8000f54:	7460      	strb	r0, [r4, #17]
 8000f56:	f248 012d 	movw	r1, #32813	@ 0x802d
 8000f5a:	83e1      	strh	r1, [r4, #30]
 8000f5c:	f04f 0a2d 	mov.w	sl, #45	@ 0x2d
 8000f60:	e15c      	b.n	800121c <PE_SubStateMachine_Generic+0x46c>
 8000f62:	f000 f95f 	bl	8001224 <.text_51>
 8000f66:	d1fb      	bne.n	8000f60 <PE_SubStateMachine_Generic+0x1b0>
 8000f68:	7c20      	ldrb	r0, [r4, #16]
 8000f6a:	2105      	movs	r1, #5
 8000f6c:	f004 f80c 	bl	8004f88 <USBDPD_PRL_BistCarrierEyeModeExit>
 8000f70:	2000      	movs	r0, #0
 8000f72:	83e0      	strh	r0, [r4, #30]
 8000f74:	e10b      	b.n	800118e <PE_SubStateMachine_Generic+0x3de>
 8000f76:	7831      	ldrb	r1, [r6, #0]
 8000f78:	2914      	cmp	r1, #20
 8000f7a:	d001      	beq.n	8000f80 <PE_SubStateMachine_Generic+0x1d0>
 8000f7c:	f000 f971 	bl	8001262 <.text_57>
 8000f80:	e14c      	b.n	800121c <PE_SubStateMachine_Generic+0x46c>
 8000f82:	4620      	mov	r0, r4
 8000f84:	f000 f990 	bl	80012a8 <PE_SubStateMachine_ReceiveDRS>
 8000f88:	e148      	b.n	800121c <PE_SubStateMachine_Generic+0x46c>
 8000f8a:	f7ff fe4a 	bl	8000c22 <.text_37>
 8000f8e:	bf1d      	ittte	ne
 8000f90:	6960      	ldrne	r0, [r4, #20]
 8000f92:	0880      	lsrne	r0, r0, #2
 8000f94:	f000 0001 	andne.w	r0, r0, #1
 8000f98:	2002      	moveq	r0, #2
 8000f9a:	9000      	str	r0, [sp, #0]
 8000f9c:	2395      	movs	r3, #149	@ 0x95
 8000f9e:	2209      	movs	r2, #9
 8000fa0:	f000 f9a6 	bl	80012f0 <.text_61>
 8000fa4:	2800      	cmp	r0, #0
 8000fa6:	d1ef      	bne.n	8000f88 <PE_SubStateMachine_Generic+0x1d8>
 8000fa8:	2010      	movs	r0, #16
 8000faa:	f000 f93f 	bl	800122c <.text_52>
 8000fae:	2122      	movs	r1, #34	@ 0x22
 8000fb0:	e0b6      	b.n	8001120 <PE_SubStateMachine_Generic+0x370>
 8000fb2:	7830      	ldrb	r0, [r6, #0]
 8000fb4:	2814      	cmp	r0, #20
 8000fb6:	d028      	beq.n	800100a <PE_SubStateMachine_Generic+0x25a>
 8000fb8:	88b8      	ldrh	r0, [r7, #4]
 8000fba:	f410 4f70 	tst.w	r0, #61440	@ 0xf000
 8000fbe:	d124      	bne.n	800100a <PE_SubStateMachine_Generic+0x25a>
 8000fc0:	f000 011f 	and.w	r1, r0, #31
 8000fc4:	2903      	cmp	r1, #3
 8000fc6:	d006      	beq.n	8000fd6 <PE_SubStateMachine_Generic+0x226>
 8000fc8:	2904      	cmp	r1, #4
 8000fca:	bf18      	it	ne
 8000fcc:	290c      	cmpne	r1, #12
 8000fce:	d006      	beq.n	8000fde <PE_SubStateMachine_Generic+0x22e>
 8000fd0:	2910      	cmp	r1, #16
 8000fd2:	d011      	beq.n	8000ff8 <PE_SubStateMachine_Generic+0x248>
 8000fd4:	e019      	b.n	800100a <PE_SubStateMachine_Generic+0x25a>
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f000 f9f6 	bl	80013c8 <PE_SwitchDataRole>
 8000fdc:	e008      	b.n	8000ff0 <PE_SubStateMachine_Generic+0x240>
 8000fde:	f000 001f 	and.w	r0, r0, #31
 8000fe2:	280c      	cmp	r0, #12
 8000fe4:	7c20      	ldrb	r0, [r4, #16]
 8000fe6:	bf0c      	ite	eq
 8000fe8:	2126      	moveq	r1, #38	@ 0x26
 8000fea:	2127      	movne	r1, #39	@ 0x27
 8000fec:	f7ff faaf 	bl	800054e <USBPD_PE_Notification>
 8000ff0:	f000 f922 	bl	8001238 <.text_53>
 8000ff4:	d107      	bne.n	8001006 <PE_SubStateMachine_Generic+0x256>
 8000ff6:	e008      	b.n	800100a <PE_SubStateMachine_Generic+0x25a>
 8000ff8:	7c20      	ldrb	r0, [r4, #16]
 8000ffa:	2128      	movs	r1, #40	@ 0x28
 8000ffc:	f7ff faa7 	bl	800054e <USBPD_PE_Notification>
 8001000:	f000 f91a 	bl	8001238 <.text_53>
 8001004:	d001      	beq.n	800100a <PE_SubStateMachine_Generic+0x25a>
 8001006:	f000 f92c 	bl	8001262 <.text_57>
 800100a:	f000 f90b 	bl	8001224 <.text_51>
 800100e:	d124      	bne.n	800105a <PE_SubStateMachine_Generic+0x2aa>
 8001010:	e0bd      	b.n	800118e <PE_SubStateMachine_Generic+0x3de>
 8001012:	f000 f918 	bl	8001246 <.text_54>
 8001016:	aa04      	add	r2, sp, #16
 8001018:	2114      	movs	r1, #20
 800101a:	47b8      	blx	r7
 800101c:	9803      	ldr	r0, [sp, #12]
 800101e:	2800      	cmp	r0, #0
 8001020:	f000 80fa 	beq.w	8001218 <PE_SubStateMachine_Generic+0x468>
 8001024:	9a03      	ldr	r2, [sp, #12]
 8001026:	0892      	lsrs	r2, r2, #2
 8001028:	9200      	str	r2, [sp, #0]
 800102a:	2100      	movs	r1, #0
 800102c:	2003      	movs	r0, #3
 800102e:	9102      	str	r1, [sp, #8]
 8001030:	9001      	str	r0, [sp, #4]
 8001032:	ab04      	add	r3, sp, #16
 8001034:	220c      	movs	r2, #12
 8001036:	e0d5      	b.n	80011e4 <PE_SubStateMachine_Generic+0x434>
 8001038:	6860      	ldr	r0, [r4, #4]
 800103a:	6801      	ldr	r1, [r0, #0]
 800103c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001040:	b900      	cbnz	r0, 8001044 <PE_SubStateMachine_Generic+0x294>
 8001042:	2002      	movs	r0, #2
 8001044:	9000      	str	r0, [sp, #0]
 8001046:	2368      	movs	r3, #104	@ 0x68
 8001048:	7879      	ldrb	r1, [r7, #1]
 800104a:	2218      	movs	r2, #24
 800104c:	f000 f951 	bl	80012f2 <.text_61+0x2>
 8001050:	2800      	cmp	r0, #0
 8001052:	d102      	bne.n	800105a <PE_SubStateMachine_Generic+0x2aa>
 8001054:	200f      	movs	r0, #15
 8001056:	f000 f8e9 	bl	800122c <.text_52>
 800105a:	e0df      	b.n	800121c <PE_SubStateMachine_Generic+0x46c>
 800105c:	7830      	ldrb	r0, [r6, #0]
 800105e:	2814      	cmp	r0, #20
 8001060:	d01b      	beq.n	800109a <PE_SubStateMachine_Generic+0x2ea>
 8001062:	7839      	ldrb	r1, [r7, #0]
 8001064:	7878      	ldrb	r0, [r7, #1]
 8001066:	4281      	cmp	r1, r0
 8001068:	d117      	bne.n	800109a <PE_SubStateMachine_Generic+0x2ea>
 800106a:	88b9      	ldrh	r1, [r7, #4]
 800106c:	0bc8      	lsrs	r0, r1, #15
 800106e:	d114      	bne.n	800109a <PE_SubStateMachine_Generic+0x2ea>
 8001070:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8001074:	b188      	cbz	r0, 800109a <PE_SubStateMachine_Generic+0x2ea>
 8001076:	7938      	ldrb	r0, [r7, #4]
 8001078:	f000 001f 	and.w	r0, r0, #31
 800107c:	280c      	cmp	r0, #12
 800107e:	d10c      	bne.n	800109a <PE_SubStateMachine_Generic+0x2ea>
 8001080:	68b8      	ldr	r0, [r7, #8]
 8001082:	68a5      	ldr	r5, [r4, #8]
 8001084:	69af      	ldr	r7, [r5, #24]
 8001086:	1c82      	adds	r2, r0, #2
 8001088:	7c20      	ldrb	r0, [r4, #16]
 800108a:	2304      	movs	r3, #4
 800108c:	2114      	movs	r1, #20
 800108e:	47b8      	blx	r7
 8001090:	f000 f8d2 	bl	8001238 <.text_53>
 8001094:	d001      	beq.n	800109a <PE_SubStateMachine_Generic+0x2ea>
 8001096:	f000 f8e4 	bl	8001262 <.text_57>
 800109a:	f000 f8c3 	bl	8001224 <.text_51>
 800109e:	d106      	bne.n	80010ae <PE_SubStateMachine_Generic+0x2fe>
 80010a0:	2111      	movs	r1, #17
 80010a2:	e075      	b.n	8001190 <PE_SubStateMachine_Generic+0x3e0>
 80010a4:	9000      	str	r0, [sp, #0]
 80010a6:	2303      	movs	r3, #3
 80010a8:	2210      	movs	r2, #16
 80010aa:	f000 f921 	bl	80012f0 <.text_61>
 80010ae:	e0b5      	b.n	800121c <PE_SubStateMachine_Generic+0x46c>
 80010b0:	f000 f8c9 	bl	8001246 <.text_54>
 80010b4:	2108      	movs	r1, #8
 80010b6:	47b8      	blx	r7
 80010b8:	9803      	ldr	r0, [sp, #12]
 80010ba:	2119      	movs	r1, #25
 80010bc:	f000 f970 	bl	80013a0 <PE_CheckDataSizeFromGetDataInfo>
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d172      	bne.n	80011aa <PE_SubStateMachine_Generic+0x3fa>
 80010c4:	f000 f8c4 	bl	8001250 <.text_55>
 80010c8:	f000 f8df 	bl	800128a <.text_59>
 80010cc:	2201      	movs	r2, #1
 80010ce:	f000 f8c4 	bl	800125a <.text_56>
 80010d2:	2148      	movs	r1, #72	@ 0x48
 80010d4:	e024      	b.n	8001120 <PE_SubStateMachine_Generic+0x370>
 80010d6:	f000 f8b6 	bl	8001246 <.text_54>
 80010da:	2113      	movs	r1, #19
 80010dc:	47b8      	blx	r7
 80010de:	9803      	ldr	r0, [sp, #12]
 80010e0:	2118      	movs	r1, #24
 80010e2:	f000 f95d 	bl	80013a0 <PE_CheckDataSizeFromGetDataInfo>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	d15f      	bne.n	80011aa <PE_SubStateMachine_Generic+0x3fa>
 80010ea:	f000 f8b1 	bl	8001250 <.text_55>
 80010ee:	f000 f8cc 	bl	800128a <.text_59>
 80010f2:	220f      	movs	r2, #15
 80010f4:	f000 f8b1 	bl	800125a <.text_56>
 80010f8:	2161      	movs	r1, #97	@ 0x61
 80010fa:	e011      	b.n	8001120 <PE_SubStateMachine_Generic+0x370>
 80010fc:	f000 f8a3 	bl	8001246 <.text_54>
 8001100:	2109      	movs	r1, #9
 8001102:	47b8      	blx	r7
 8001104:	9803      	ldr	r0, [sp, #12]
 8001106:	2107      	movs	r1, #7
 8001108:	f000 f94a 	bl	80013a0 <PE_CheckDataSizeFromGetDataInfo>
 800110c:	2800      	cmp	r0, #0
 800110e:	d14c      	bne.n	80011aa <PE_SubStateMachine_Generic+0x3fa>
 8001110:	f000 f89e 	bl	8001250 <.text_55>
 8001114:	f000 f8b9 	bl	800128a <.text_59>
 8001118:	2202      	movs	r2, #2
 800111a:	f000 f89e 	bl	800125a <.text_56>
 800111e:	214f      	movs	r1, #79	@ 0x4f
 8001120:	7c20      	ldrb	r0, [r4, #16]
 8001122:	f7ff fa14 	bl	800054e <USBPD_PE_Notification>
 8001126:	e079      	b.n	800121c <PE_SubStateMachine_Generic+0x46c>
 8001128:	7831      	ldrb	r1, [r6, #0]
 800112a:	2914      	cmp	r1, #20
 800112c:	d02c      	beq.n	8001188 <PE_SubStateMachine_Generic+0x3d8>
 800112e:	88b9      	ldrh	r1, [r7, #4]
 8001130:	0bc8      	lsrs	r0, r1, #15
 8001132:	d115      	bne.n	8001160 <PE_SubStateMachine_Generic+0x3b0>
 8001134:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8001138:	b190      	cbz	r0, 8001160 <PE_SubStateMachine_Generic+0x3b0>
 800113a:	7938      	ldrb	r0, [r7, #4]
 800113c:	f000 001f 	and.w	r0, r0, #31
 8001140:	2805      	cmp	r0, #5
 8001142:	d10d      	bne.n	8001160 <PE_SubStateMachine_Generic+0x3b0>
 8001144:	68b8      	ldr	r0, [r7, #8]
 8001146:	68a5      	ldr	r5, [r4, #8]
 8001148:	f8d5 c018 	ldr.w	ip, [r5, #24]
 800114c:	1d02      	adds	r2, r0, #4
 800114e:	7c20      	ldrb	r0, [r4, #16]
 8001150:	2304      	movs	r3, #4
 8001152:	210f      	movs	r1, #15
 8001154:	47e0      	blx	ip
 8001156:	f000 f86f 	bl	8001238 <.text_53>
 800115a:	d001      	beq.n	8001160 <PE_SubStateMachine_Generic+0x3b0>
 800115c:	f000 f881 	bl	8001262 <.text_57>
 8001160:	7938      	ldrb	r0, [r7, #4]
 8001162:	f000 001f 	and.w	r0, r0, #31
 8001166:	2810      	cmp	r0, #16
 8001168:	d10e      	bne.n	8001188 <PE_SubStateMachine_Generic+0x3d8>
 800116a:	7c20      	ldrb	r0, [r4, #16]
 800116c:	2159      	movs	r1, #89	@ 0x59
 800116e:	f7ff f9ee 	bl	800054e <USBPD_PE_Notification>
 8001172:	2000      	movs	r0, #0
 8001174:	83e0      	strh	r0, [r4, #30]
 8001176:	7831      	ldrb	r1, [r6, #0]
 8001178:	2914      	cmp	r1, #20
 800117a:	d001      	beq.n	8001180 <PE_SubStateMachine_Generic+0x3d0>
 800117c:	f000 f871 	bl	8001262 <.text_57>
 8001180:	2103      	movs	r1, #3
 8001182:	7461      	strb	r1, [r4, #17]
 8001184:	f04f 0a00 	mov.w	sl, #0
 8001188:	f000 f84c 	bl	8001224 <.text_51>
 800118c:	d146      	bne.n	800121c <PE_SubStateMachine_Generic+0x46c>
 800118e:	2103      	movs	r1, #3
 8001190:	7461      	strb	r1, [r4, #17]
 8001192:	f04f 0a00 	mov.w	sl, #0
 8001196:	e041      	b.n	800121c <PE_SubStateMachine_Generic+0x46c>
 8001198:	f000 f855 	bl	8001246 <.text_54>
 800119c:	210d      	movs	r1, #13
 800119e:	47b8      	blx	r7
 80011a0:	9803      	ldr	r0, [sp, #12]
 80011a2:	2104      	movs	r1, #4
 80011a4:	f000 f8fc 	bl	80013a0 <PE_CheckDataSizeFromGetDataInfo>
 80011a8:	2800      	cmp	r0, #0
 80011aa:	d135      	bne.n	8001218 <PE_SubStateMachine_Generic+0x468>
 80011ac:	f000 f850 	bl	8001250 <.text_55>
 80011b0:	f000 f85c 	bl	800126c <.text_58>
 80011b4:	2207      	movs	r2, #7
 80011b6:	e027      	b.n	8001208 <PE_SubStateMachine_Generic+0x458>
 80011b8:	9004      	str	r0, [sp, #16]
 80011ba:	ab03      	add	r3, sp, #12
 80011bc:	68a6      	ldr	r6, [r4, #8]
 80011be:	7c20      	ldrb	r0, [r4, #16]
 80011c0:	6977      	ldr	r7, [r6, #20]
 80011c2:	aa04      	add	r2, sp, #16
 80011c4:	210f      	movs	r1, #15
 80011c6:	47b8      	blx	r7
 80011c8:	9803      	ldr	r0, [sp, #12]
 80011ca:	2104      	movs	r1, #4
 80011cc:	f000 f8e8 	bl	80013a0 <PE_CheckDataSizeFromGetDataInfo>
 80011d0:	2800      	cmp	r0, #0
 80011d2:	d121      	bne.n	8001218 <PE_SubStateMachine_Generic+0x468>
 80011d4:	2103      	movs	r1, #3
 80011d6:	2201      	movs	r2, #1
 80011d8:	9101      	str	r1, [sp, #4]
 80011da:	9200      	str	r2, [sp, #0]
 80011dc:	9002      	str	r0, [sp, #8]
 80011de:	ab04      	add	r3, sp, #16
 80011e0:	2205      	movs	r2, #5
 80011e2:	2100      	movs	r1, #0
 80011e4:	4620      	mov	r0, r4
 80011e6:	f000 f968 	bl	80014ba <PE_Send_DataMessage>
 80011ea:	e017      	b.n	800121c <PE_SubStateMachine_Generic+0x46c>
 80011ec:	f000 f82b 	bl	8001246 <.text_54>
 80011f0:	2111      	movs	r1, #17
 80011f2:	47b8      	blx	r7
 80011f4:	9803      	ldr	r0, [sp, #12]
 80011f6:	2109      	movs	r1, #9
 80011f8:	f000 f8d2 	bl	80013a0 <PE_CheckDataSizeFromGetDataInfo>
 80011fc:	b960      	cbnz	r0, 8001218 <PE_SubStateMachine_Generic+0x468>
 80011fe:	f000 f827 	bl	8001250 <.text_55>
 8001202:	f000 f833 	bl	800126c <.text_58>
 8001206:	2205      	movs	r2, #5
 8001208:	f000 f827 	bl	800125a <.text_56>
 800120c:	e006      	b.n	800121c <PE_SubStateMachine_Generic+0x46c>
 800120e:	7c20      	ldrb	r0, [r4, #16]
 8001210:	2150      	movs	r1, #80	@ 0x50
 8001212:	f7ff f99c 	bl	800054e <USBPD_PE_Notification>
 8001216:	e7ba      	b.n	800118e <PE_SubStateMachine_Generic+0x3de>
 8001218:	2001      	movs	r0, #1
 800121a:	7460      	strb	r0, [r4, #17]
 800121c:	4650      	mov	r0, sl
 800121e:	b00c      	add	sp, #48	@ 0x30
 8001220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001224 <.text_51>:
 8001224:	8be0      	ldrh	r0, [r4, #30]
 8001226:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800122a:	4770      	bx	lr

0800122c <.text_52>:
 800122c:	7720      	strb	r0, [r4, #28]
 800122e:	f8a4 801e 	strh.w	r8, [r4, #30]
 8001232:	f04f 0a1b 	mov.w	sl, #27
 8001236:	4770      	bx	lr

08001238 <.text_53>:
 8001238:	2003      	movs	r0, #3
 800123a:	7460      	strb	r0, [r4, #17]
 800123c:	f04f 0a00 	mov.w	sl, #0
 8001240:	7831      	ldrb	r1, [r6, #0]
 8001242:	2914      	cmp	r1, #20
 8001244:	4770      	bx	lr

08001246 <.text_54>:
 8001246:	68a6      	ldr	r6, [r4, #8]
 8001248:	7c20      	ldrb	r0, [r4, #16]
 800124a:	6977      	ldr	r7, [r6, #20]
 800124c:	ab03      	add	r3, sp, #12
 800124e:	4770      	bx	lr

08001250 <.text_55>:
 8001250:	7028      	strb	r0, [r5, #0]
 8001252:	2100      	movs	r1, #0
 8001254:	7069      	strb	r1, [r5, #1]
 8001256:	7c20      	ldrb	r0, [r4, #16]
 8001258:	e599      	b.n	8000d8e <PE_Get_UnchunkedSupport>

0800125a <.text_56>:
 800125a:	2100      	movs	r1, #0
 800125c:	4620      	mov	r0, r4
 800125e:	f000 ba4b 	b.w	80016f8 <PE_Send_ExtendedMessage>

08001262 <.text_57>:
 8001262:	2014      	movs	r0, #20
 8001264:	7030      	strb	r0, [r6, #0]
 8001266:	4620      	mov	r0, r4
 8001268:	f7ff bb9c 	b.w	80009a4 <PE_Clear_RxEvent>

0800126c <.text_58>:
 800126c:	b918      	cbnz	r0, 8001276 <.text_58+0xa>
 800126e:	7868      	ldrb	r0, [r5, #1]
 8001270:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8001274:	7068      	strb	r0, [r5, #1]
 8001276:	2000      	movs	r0, #0
 8001278:	9a03      	ldr	r2, [sp, #12]
 800127a:	9002      	str	r0, [sp, #8]
 800127c:	1d12      	adds	r2, r2, #4
 800127e:	b292      	uxth	r2, r2
 8001280:	9200      	str	r2, [sp, #0]
 8001282:	2103      	movs	r1, #3
 8001284:	9101      	str	r1, [sp, #4]
 8001286:	464b      	mov	r3, r9
 8001288:	4770      	bx	lr

0800128a <.text_59>:
 800128a:	b918      	cbnz	r0, 8001294 <.text_59+0xa>
 800128c:	7868      	ldrb	r0, [r5, #1]
 800128e:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8001292:	7068      	strb	r0, [r5, #1]
 8001294:	2000      	movs	r0, #0
 8001296:	9a03      	ldr	r2, [sp, #12]
 8001298:	9002      	str	r0, [sp, #8]
 800129a:	1d12      	adds	r2, r2, #4
 800129c:	2103      	movs	r1, #3
 800129e:	b292      	uxth	r2, r2
 80012a0:	9101      	str	r1, [sp, #4]
 80012a2:	9200      	str	r2, [sp, #0]
 80012a4:	464b      	mov	r3, r9
 80012a6:	4770      	bx	lr

080012a8 <PE_SubStateMachine_ReceiveDRS>:
 80012a8:	b51c      	push	{r2, r3, r4, lr}
 80012aa:	4604      	mov	r4, r0
 80012ac:	68a1      	ldr	r1, [r4, #8]
 80012ae:	7c20      	ldrb	r0, [r4, #16]
 80012b0:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
 80012b2:	4790      	blx	r2
 80012b4:	280a      	cmp	r0, #10
 80012b6:	d002      	beq.n	80012be <PE_SubStateMachine_ReceiveDRS+0x16>
 80012b8:	280c      	cmp	r0, #12
 80012ba:	d00b      	beq.n	80012d4 <PE_SubStateMachine_ReceiveDRS+0x2c>
 80012bc:	e00c      	b.n	80012d8 <PE_SubStateMachine_ReceiveDRS+0x30>
 80012be:	2000      	movs	r0, #0
 80012c0:	9000      	str	r0, [sp, #0]
 80012c2:	2303      	movs	r3, #3
 80012c4:	2203      	movs	r2, #3
 80012c6:	f000 f813 	bl	80012f0 <.text_61>
 80012ca:	b980      	cbnz	r0, 80012ee <PE_SubStateMachine_ReceiveDRS+0x46>
 80012cc:	4620      	mov	r0, r4
 80012ce:	e8bd 4016 	ldmia.w	sp!, {r1, r2, r4, lr}
 80012d2:	e079      	b.n	80013c8 <PE_SwitchDataRole>
 80012d4:	202a      	movs	r0, #42	@ 0x2a
 80012d6:	e006      	b.n	80012e6 <PE_SubStateMachine_ReceiveDRS+0x3e>
 80012d8:	6860      	ldr	r0, [r4, #4]
 80012da:	7801      	ldrb	r1, [r0, #0]
 80012dc:	f001 0103 	and.w	r1, r1, #3
 80012e0:	2902      	cmp	r1, #2
 80012e2:	d102      	bne.n	80012ea <PE_SubStateMachine_ReceiveDRS+0x42>
 80012e4:	2001      	movs	r0, #1
 80012e6:	7460      	strb	r0, [r4, #17]
 80012e8:	bd13      	pop	{r0, r1, r4, pc}
 80012ea:	212a      	movs	r1, #42	@ 0x2a
 80012ec:	7461      	strb	r1, [r4, #17]
 80012ee:	bd13      	pop	{r0, r1, r4, pc}

080012f0 <.text_61>:
 80012f0:	2100      	movs	r1, #0
 80012f2:	4620      	mov	r0, r4
 80012f4:	f000 b8b4 	b.w	8001460 <PE_Send_CtrlMessage>

080012f8 <PE_UpdateTimer>:
 80012f8:	b510      	push	{r4, lr}
 80012fa:	4602      	mov	r2, r0
 80012fc:	f3c2 040e 	ubfx	r4, r2, #0, #15
 8001300:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001304:	42a1      	cmp	r1, r4
 8001306:	bfb8      	it	lt
 8001308:	1a50      	sublt	r0, r2, r1
 800130a:	b280      	uxth	r0, r0
 800130c:	bd10      	pop	{r4, pc}

0800130e <PE_CallHardResetCallback>:
 800130e:	6883      	ldr	r3, [r0, #8]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf1c      	itt	ne
 8001316:	7c00      	ldrbne	r0, [r0, #16]

08001318 <__iar_annotation$$tailcall>:
 8001318:	4718      	bxne	r3
 800131a:	4770      	bx	lr

0800131c <PE_SetPowerNegotiation>:
 800131c:	6842      	ldr	r2, [r0, #4]
 800131e:	6813      	ldr	r3, [r2, #0]
 8001320:	f3c3 2202 	ubfx	r2, r3, #8, #3
 8001324:	4291      	cmp	r1, r2
 8001326:	d007      	beq.n	8001338 <PE_SetPowerNegotiation+0x1c>
 8001328:	6842      	ldr	r2, [r0, #4]
 800132a:	f361 230a 	bfi	r3, r1, #8, #3
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	215a      	movs	r1, #90	@ 0x5a
 8001332:	7c00      	ldrb	r0, [r0, #16]
 8001334:	f7ff b90b 	b.w	800054e <USBPD_PE_Notification>
 8001338:	4770      	bx	lr

0800133a <USBPD_PE_ExecFastRoleSwapSignalling>:
 800133a:	4921      	ldr	r1, [pc, #132]	@ (80013c0 <.text_70>)
 800133c:	4602      	mov	r2, r0
 800133e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]

08001342 <.text_66>:
 8001342:	694a      	ldr	r2, [r1, #20]
 8001344:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001348:	614a      	str	r2, [r1, #20]
 800134a:	6889      	ldr	r1, [r1, #8]
 800134c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28

0800134e <__iar_annotation$$tailcall>:
 800134e:	4710      	bx	r2

08001350 <PE_CalculateMinTiming>:
 8001350:	4601      	mov	r1, r0
 8001352:	f04f 30ff 	mov.w	r0, #4294967295
 8001356:	8c8a      	ldrh	r2, [r1, #36]	@ 0x24
 8001358:	0453      	lsls	r3, r2, #17
 800135a:	bf1c      	itt	ne
 800135c:	8c88      	ldrhne	r0, [r1, #36]	@ 0x24
 800135e:	f3c0 000e 	ubfxne	r0, r0, #0, #15
 8001362:	8c4a      	ldrh	r2, [r1, #34]	@ 0x22
 8001364:	0453      	lsls	r3, r2, #17
 8001366:	d007      	beq.n	8001378 <PE_CalculateMinTiming+0x28>
 8001368:	8c4a      	ldrh	r2, [r1, #34]	@ 0x22
 800136a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800136e:	4290      	cmp	r0, r2
 8001370:	bf24      	itt	cs
 8001372:	8c48      	ldrhcs	r0, [r1, #34]	@ 0x22
 8001374:	f3c0 000e 	ubfxcs	r0, r0, #0, #15
 8001378:	4770      	bx	lr

0800137a <PE_SetPowerNegociation>:
 800137a:	b538      	push	{r3, r4, r5, lr}
 800137c:	4604      	mov	r4, r0
 800137e:	460d      	mov	r5, r1
 8001380:	6860      	ldr	r0, [r4, #4]
 8001382:	6802      	ldr	r2, [r0, #0]
 8001384:	f3c2 2002 	ubfx	r0, r2, #8, #3
 8001388:	4285      	cmp	r5, r0
 800138a:	d003      	beq.n	8001394 <PE_SetPowerNegociation+0x1a>
 800138c:	7c20      	ldrb	r0, [r4, #16]
 800138e:	215a      	movs	r1, #90	@ 0x5a
 8001390:	f7ff f8dd 	bl	800054e <USBPD_PE_Notification>
 8001394:	6860      	ldr	r0, [r4, #4]
 8001396:	6801      	ldr	r1, [r0, #0]
 8001398:	f365 210a 	bfi	r1, r5, #8, #3
 800139c:	6001      	str	r1, [r0, #0]
 800139e:	bd31      	pop	{r0, r4, r5, pc}

080013a0 <PE_CheckDataSizeFromGetDataInfo>:
 80013a0:	b538      	push	{r3, r4, r5, lr}
 80013a2:	2200      	movs	r2, #0
 80013a4:	4288      	cmp	r0, r1
 80013a6:	d208      	bcs.n	80013ba <PE_CheckDataSizeFromGetDataInfo+0x1a>
 80013a8:	2018      	movs	r0, #24
 80013aa:	4c06      	ldr	r4, [pc, #24]	@ (80013c4 <.text_71>)
 80013ac:	a316      	add	r3, pc, #88	@ (adr r3, 8001408 <.text_73>)
 80013ae:	6825      	ldr	r5, [r4, #0]
 80013b0:	9000      	str	r0, [sp, #0]
 80013b2:	2100      	movs	r1, #0
 80013b4:	2006      	movs	r0, #6
 80013b6:	47a8      	blx	r5
 80013b8:	2202      	movs	r2, #2
 80013ba:	4610      	mov	r0, r2
 80013bc:	bd32      	pop	{r1, r4, r5, pc}
	...

080013c0 <.text_70>:
 80013c0:	20000278 	.word	0x20000278

080013c4 <.text_71>:
 80013c4:	20000000 	.word	0x20000000

080013c8 <PE_SwitchDataRole>:
 80013c8:	b510      	push	{r4, lr}
 80013ca:	4604      	mov	r4, r0
 80013cc:	6860      	ldr	r0, [r4, #4]
 80013ce:	6801      	ldr	r1, [r0, #0]
 80013d0:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80013d4:	2800      	cmp	r0, #0
 80013d6:	6860      	ldr	r0, [r4, #4]
 80013d8:	d109      	bne.n	80013ee <PE_SwitchDataRole+0x26>
 80013da:	f041 0108 	orr.w	r1, r1, #8
 80013de:	6001      	str	r1, [r0, #0]
 80013e0:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80013e4:	7c20      	ldrb	r0, [r4, #16]
 80013e6:	f003 fb27 	bl	8004a38 <USBPD_PRL_SetHeaderDataRole>
 80013ea:	2125      	movs	r1, #37	@ 0x25
 80013ec:	e007      	b.n	80013fe <PE_SwitchDataRole+0x36>
 80013ee:	f021 0108 	bic.w	r1, r1, #8
 80013f2:	6001      	str	r1, [r0, #0]
 80013f4:	2100      	movs	r1, #0
 80013f6:	7c20      	ldrb	r0, [r4, #16]
 80013f8:	f003 fb1e 	bl	8004a38 <USBPD_PRL_SetHeaderDataRole>
 80013fc:	2124      	movs	r1, #36	@ 0x24
 80013fe:	7c20      	ldrb	r0, [r4, #16]
 8001400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001404:	f7ff b8a3 	b.w	800054e <USBPD_PE_Notification>

08001408 <.text_73>:
 8001408:	61746144 	.word	0x61746144
 800140c:	7a695320 	.word	0x7a695320
 8001410:	73692065 	.word	0x73692065
 8001414:	746f6e20 	.word	0x746f6e20
 8001418:	726f6320 	.word	0x726f6320
 800141c:	74636572 	.word	0x74636572
 8001420:	00          	.byte	0x00
 8001421:	00          	.byte	0x00
	...

08001424 <USBPD_PE_SetTrace>:
 8001424:	0001      	movs	r1, r0
 8001426:	4906      	ldr	r1, [pc, #24]	@ (8001440 <.text_5>)
 8001428:	bf08      	it	eq
 800142a:	f20f 0031 	addweq	r0, pc, #49	@ 0x31
 800142e:	6008      	str	r0, [r1, #0]
 8001430:	4770      	bx	lr

08001432 <USBPD_PE_CheckLIB>:
 8001432:	4601      	mov	r1, r0
 8001434:	2000      	movs	r0, #0
 8001436:	4a03      	ldr	r2, [pc, #12]	@ (8001444 <.text_6>)
 8001438:	4291      	cmp	r1, r2
 800143a:	bf08      	it	eq
 800143c:	2001      	moveq	r0, #1
 800143e:	4770      	bx	lr

08001440 <.text_5>:
 8001440:	20000000 	.word	0x20000000

08001444 <.text_6>:
 8001444:	30410001 	.word	0x30410001

08001448 <USBPD_PE_GetMemoryConsumption>:
 8001448:	b510      	push	{r4, lr}
 800144a:	f003 fad5 	bl	80049f8 <USBPD_PRL_GetMemoryConsumption>
 800144e:	4604      	mov	r4, r0
 8001450:	f7fe ffad 	bl	80003ae <USBPD_CAD_GetMemoryConsumption>
 8001454:	1904      	adds	r4, r0, r4
 8001456:	f504 6061 	add.w	r0, r4, #3600	@ 0xe10
 800145a:	bd10      	pop	{r4, pc}

0800145c <PE_Trace_Empty>:
 800145c:	4770      	bx	lr
	...

08001460 <PE_Send_CtrlMessage>:
 8001460:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8001464:	9c08      	ldr	r4, [sp, #32]
 8001466:	4606      	mov	r6, r0
 8001468:	4688      	mov	r8, r1
 800146a:	4617      	mov	r7, r2
 800146c:	461d      	mov	r5, r3
 800146e:	f000 f81f 	bl	80014b0 <.text_3>
 8001472:	b190      	cbz	r0, 800149a <PE_Send_CtrlMessage+0x3a>
 8001474:	9401      	str	r4, [sp, #4]
 8001476:	2002      	movs	r0, #2
 8001478:	9000      	str	r0, [sp, #0]
 800147a:	f206 2363 	addw	r3, r6, #611	@ 0x263
 800147e:	7c30      	ldrb	r0, [r6, #16]
 8001480:	463a      	mov	r2, r7
 8001482:	4641      	mov	r1, r8
 8001484:	f003 fb14 	bl	8004ab0 <USBPD_PRL_SendMessage>
 8001488:	2803      	cmp	r0, #3
 800148a:	d0f0      	beq.n	800146e <PE_Send_CtrlMessage+0xe>
 800148c:	2810      	cmp	r0, #16
 800148e:	d00d      	beq.n	80014ac <PE_Send_CtrlMessage+0x4c>
 8001490:	2f0d      	cmp	r7, #13
 8001492:	bf0c      	ite	eq
 8001494:	2201      	moveq	r2, #1
 8001496:	2200      	movne	r2, #0
 8001498:	e002      	b.n	80014a0 <PE_Send_CtrlMessage+0x40>
 800149a:	7470      	strb	r0, [r6, #17]
 800149c:	2010      	movs	r0, #16
 800149e:	e005      	b.n	80014ac <PE_Send_CtrlMessage+0x4c>
 80014a0:	4603      	mov	r3, r0
 80014a2:	9500      	str	r5, [sp, #0]
 80014a4:	4641      	mov	r1, r8
 80014a6:	4630      	mov	r0, r6
 80014a8:	f000 fbde 	bl	8001c68 <PE_CheckSendMessageStatus>
 80014ac:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

080014b0 <.text_3>:
 80014b0:	6870      	ldr	r0, [r6, #4]
 80014b2:	6801      	ldr	r1, [r0, #0]
 80014b4:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80014b8:	4770      	bx	lr

080014ba <PE_Send_DataMessage>:
 80014ba:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80014bc:	4604      	mov	r4, r0
 80014be:	9f08      	ldr	r7, [sp, #32]
 80014c0:	460d      	mov	r5, r1
 80014c2:	4616      	mov	r6, r2
 80014c4:	2000      	movs	r0, #0
 80014c6:	e010      	b.n	80014ea <PE_Send_DataMessage+0x30>
 80014c8:	2100      	movs	r1, #0
 80014ca:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 80014ce:	f8d3 c000 	ldr.w	ip, [r3]
 80014d2:	440a      	add	r2, r1
 80014d4:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 80014d8:	1c49      	adds	r1, r1, #1
 80014da:	fa2c fc0e 	lsr.w	ip, ip, lr
 80014de:	2904      	cmp	r1, #4
 80014e0:	f882 c265 	strb.w	ip, [r2, #613]	@ 0x265
 80014e4:	d3f1      	bcc.n	80014ca <PE_Send_DataMessage+0x10>
 80014e6:	1d1b      	adds	r3, r3, #4
 80014e8:	1c40      	adds	r0, r0, #1
 80014ea:	42b8      	cmp	r0, r7
 80014ec:	d3ec      	bcc.n	80014c8 <PE_Send_DataMessage+0xe>
 80014ee:	6860      	ldr	r0, [r4, #4]
 80014f0:	f7ff ffdf 	bl	80014b2 <.text_3+0x2>
 80014f4:	b1d8      	cbz	r0, 800152e <PE_Send_DataMessage+0x74>
 80014f6:	f89d 0028 	ldrb.w	r0, [sp, #40]	@ 0x28
 80014fa:	9001      	str	r0, [sp, #4]
 80014fc:	f204 2363 	addw	r3, r4, #611	@ 0x263
 8001500:	00b8      	lsls	r0, r7, #2
 8001502:	1c80      	adds	r0, r0, #2
 8001504:	b280      	uxth	r0, r0
 8001506:	9000      	str	r0, [sp, #0]
 8001508:	4632      	mov	r2, r6
 800150a:	7c20      	ldrb	r0, [r4, #16]
 800150c:	4629      	mov	r1, r5
 800150e:	f003 facf 	bl	8004ab0 <USBPD_PRL_SendMessage>
 8001512:	2803      	cmp	r0, #3
 8001514:	d0eb      	beq.n	80014ee <PE_Send_DataMessage+0x34>
 8001516:	2810      	cmp	r0, #16
 8001518:	d008      	beq.n	800152c <PE_Send_DataMessage+0x72>
 800151a:	f89d 1024 	ldrb.w	r1, [sp, #36]	@ 0x24
 800151e:	9100      	str	r1, [sp, #0]
 8001520:	4603      	mov	r3, r0
 8001522:	2200      	movs	r2, #0
 8001524:	4629      	mov	r1, r5
 8001526:	4620      	mov	r0, r4
 8001528:	f000 fb9e 	bl	8001c68 <PE_CheckSendMessageStatus>
 800152c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800152e:	2010      	movs	r0, #16
 8001530:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08001534 <PE_Check_ExtendedMessage>:
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001536:	4604      	mov	r4, r0
 8001538:	f204 265a 	addw	r6, r4, #602	@ 0x25a
 800153c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800153e:	7881      	ldrb	r1, [r0, #2]
 8001540:	78c0      	ldrb	r0, [r0, #3]
 8001542:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8001546:	8031      	strh	r1, [r6, #0]
 8001548:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 800154c:	f000 001f 	and.w	r0, r0, #31
 8001550:	70b0      	strb	r0, [r6, #2]
 8001552:	f3c1 20c3 	ubfx	r0, r1, #11, #4
 8001556:	2800      	cmp	r0, #0
 8001558:	bf1e      	ittt	ne
 800155a:	f3c1 2080 	ubfxne	r0, r1, #10, #1
 800155e:	2800      	cmpne	r0, #0
 8001560:	2034      	movne	r0, #52	@ 0x34
 8001562:	d126      	bne.n	80015b2 <PE_Check_ExtendedMessage+0x7e>
 8001564:	0408      	lsls	r0, r1, #16
 8001566:	0fc0      	lsrs	r0, r0, #31
 8001568:	f204 2281 	addw	r2, r4, #641	@ 0x281
 800156c:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8001570:	d10b      	bne.n	800158a <PE_Check_ExtendedMessage+0x56>
 8001572:	f8a4 348e 	strh.w	r3, [r4, #1166]	@ 0x48e
 8001576:	f8b4 148e 	ldrh.w	r1, [r4, #1166]	@ 0x48e
 800157a:	4288      	cmp	r0, r1
 800157c:	d21a      	bcs.n	80015b4 <PE_Check_ExtendedMessage+0x80>
 800157e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001580:	1d19      	adds	r1, r3, #4
 8001582:	5c0d      	ldrb	r5, [r1, r0]
 8001584:	5415      	strb	r5, [r2, r0]
 8001586:	1c40      	adds	r0, r0, #1
 8001588:	e7f5      	b.n	8001576 <PE_Check_ExtendedMessage+0x42>
 800158a:	f411 4ff8 	tst.w	r1, #31744	@ 0x7c00
 800158e:	d106      	bne.n	800159e <PE_Check_ExtendedMessage+0x6a>
 8001590:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001592:	f3c0 3002 	ubfx	r0, r0, #12, #3
 8001596:	2807      	cmp	r0, #7
 8001598:	d30c      	bcc.n	80015b4 <PE_Check_ExtendedMessage+0x80>
 800159a:	2b1a      	cmp	r3, #26
 800159c:	d90a      	bls.n	80015b4 <PE_Check_ExtendedMessage+0x80>
 800159e:	f3c1 2080 	ubfx	r0, r1, #10, #1
 80015a2:	b938      	cbnz	r0, 80015b4 <PE_Check_ExtendedMessage+0x80>
 80015a4:	f8b4 048e 	ldrh.w	r0, [r4, #1166]	@ 0x48e
 80015a8:	4298      	cmp	r0, r3
 80015aa:	d203      	bcs.n	80015b4 <PE_Check_ExtendedMessage+0x80>
 80015ac:	2100      	movs	r1, #0
 80015ae:	83e1      	strh	r1, [r4, #30]
 80015b0:	2037      	movs	r0, #55	@ 0x37
 80015b2:	e089      	b.n	80016c8 <PE_Check_ExtendedMessage+0x194>
 80015b4:	7f20      	ldrb	r0, [r4, #28]
 80015b6:	78b1      	ldrb	r1, [r6, #2]
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d034      	beq.n	8001626 <PE_Check_ExtendedMessage+0xf2>
 80015bc:	2901      	cmp	r1, #1
 80015be:	d008      	beq.n	80015d2 <PE_Check_ExtendedMessage+0x9e>
 80015c0:	2902      	cmp	r1, #2
 80015c2:	d018      	beq.n	80015f6 <PE_Check_ExtendedMessage+0xc2>
 80015c4:	2905      	cmp	r1, #5
 80015c6:	d028      	beq.n	800161a <PE_Check_ExtendedMessage+0xe6>
 80015c8:	2907      	cmp	r1, #7
 80015ca:	d021      	beq.n	8001610 <PE_Check_ExtendedMessage+0xdc>
 80015cc:	290f      	cmp	r1, #15
 80015ce:	d009      	beq.n	80015e4 <PE_Check_ExtendedMessage+0xb0>
 80015d0:	e07c      	b.n	80016cc <PE_Check_ExtendedMessage+0x198>
 80015d2:	f000 f884 	bl	80016de <.text_7>
 80015d6:	2319      	movs	r3, #25
 80015d8:	2108      	movs	r1, #8
 80015da:	47b8      	blx	r7
 80015dc:	2003      	movs	r0, #3
 80015de:	7460      	strb	r0, [r4, #17]
 80015e0:	2147      	movs	r1, #71	@ 0x47
 80015e2:	e010      	b.n	8001606 <PE_Check_ExtendedMessage+0xd2>
 80015e4:	f000 f87b 	bl	80016de <.text_7>
 80015e8:	2318      	movs	r3, #24
 80015ea:	2113      	movs	r1, #19
 80015ec:	47b8      	blx	r7
 80015ee:	2003      	movs	r0, #3
 80015f0:	7460      	strb	r0, [r4, #17]
 80015f2:	2162      	movs	r1, #98	@ 0x62
 80015f4:	e007      	b.n	8001606 <PE_Check_ExtendedMessage+0xd2>
 80015f6:	f000 f872 	bl	80016de <.text_7>
 80015fa:	2307      	movs	r3, #7
 80015fc:	2109      	movs	r1, #9
 80015fe:	47b8      	blx	r7
 8001600:	2003      	movs	r0, #3
 8001602:	7460      	strb	r0, [r4, #17]
 8001604:	214e      	movs	r1, #78	@ 0x4e
 8001606:	7c20      	ldrb	r0, [r4, #16]
 8001608:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}
 800160c:	f7fe bf9f 	b.w	800054e <USBPD_PE_Notification>
 8001610:	f000 f865 	bl	80016de <.text_7>
 8001614:	231a      	movs	r3, #26
 8001616:	210d      	movs	r1, #13
 8001618:	e003      	b.n	8001622 <PE_Check_ExtendedMessage+0xee>
 800161a:	f000 f860 	bl	80016de <.text_7>
 800161e:	2309      	movs	r3, #9
 8001620:	2111      	movs	r1, #17
 8001622:	47b8      	blx	r7
 8001624:	e04f      	b.n	80016c6 <PE_Check_ExtendedMessage+0x192>
 8001626:	1ecb      	subs	r3, r1, #3
 8001628:	2b08      	cmp	r3, #8
 800162a:	d84f      	bhi.n	80016cc <PE_Check_ExtendedMessage+0x198>
 800162c:	e8df f003 	tbb	[pc, r3]
 8001630:	174e0e05 	.word	0x174e0e05
 8001634:	243a314e 	.word	0x243a314e
 8001638:	0029      	.short	0x0029
 800163a:	f000 f84a 	bl	80016d2 <.text_6>
 800163e:	d045      	beq.n	80016cc <PE_Check_ExtendedMessage+0x198>
 8001640:	f000 f853 	bl	80016ea <.text_8>
 8001644:	2110      	movs	r1, #16
 8001646:	47b8      	blx	r7
 8001648:	203a      	movs	r0, #58	@ 0x3a
 800164a:	e03d      	b.n	80016c8 <PE_Check_ExtendedMessage+0x194>
 800164c:	f000 f841 	bl	80016d2 <.text_6>
 8001650:	d03c      	beq.n	80016cc <PE_Check_ExtendedMessage+0x198>
 8001652:	f000 f84a 	bl	80016ea <.text_8>
 8001656:	210e      	movs	r1, #14
 8001658:	47b8      	blx	r7
 800165a:	203b      	movs	r0, #59	@ 0x3b
 800165c:	e034      	b.n	80016c8 <PE_Check_ExtendedMessage+0x194>
 800165e:	6820      	ldr	r0, [r4, #0]
 8001660:	8901      	ldrh	r1, [r0, #8]
 8001662:	f3c1 1080 	ubfx	r0, r1, #6, #1
 8001666:	2800      	cmp	r0, #0
 8001668:	d030      	beq.n	80016cc <PE_Check_ExtendedMessage+0x198>
 800166a:	f000 f838 	bl	80016de <.text_7>
 800166e:	2302      	movs	r3, #2
 8001670:	210c      	movs	r1, #12
 8001672:	47b8      	blx	r7
 8001674:	203c      	movs	r0, #60	@ 0x3c
 8001676:	e027      	b.n	80016c8 <PE_Check_ExtendedMessage+0x194>
 8001678:	6820      	ldr	r0, [r4, #0]
 800167a:	8901      	ldrh	r1, [r0, #8]
 800167c:	f3c1 2080 	ubfx	r0, r1, #10, #1
 8001680:	e00b      	b.n	800169a <PE_Check_ExtendedMessage+0x166>
 8001682:	68a0      	ldr	r0, [r4, #8]
 8001684:	6905      	ldr	r5, [r0, #16]
 8001686:	b31d      	cbz	r5, 80016d0 <PE_Check_ExtendedMessage+0x19c>
 8001688:	f8b4 348e 	ldrh.w	r3, [r4, #1166]	@ 0x48e
 800168c:	7c20      	ldrb	r0, [r4, #16]
 800168e:	47a8      	blx	r5
 8001690:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001692:	6820      	ldr	r0, [r4, #0]
 8001694:	8901      	ldrh	r1, [r0, #8]
 8001696:	f3c1 2040 	ubfx	r0, r1, #9, #1
 800169a:	b1b8      	cbz	r0, 80016cc <PE_Check_ExtendedMessage+0x198>
 800169c:	68a1      	ldr	r1, [r4, #8]
 800169e:	6908      	ldr	r0, [r1, #16]
 80016a0:	b950      	cbnz	r0, 80016b8 <PE_Check_ExtendedMessage+0x184>
 80016a2:	e013      	b.n	80016cc <PE_Check_ExtendedMessage+0x198>
 80016a4:	6820      	ldr	r0, [r4, #0]
 80016a6:	8901      	ldrh	r1, [r0, #8]
 80016a8:	f3c1 2040 	ubfx	r0, r1, #9, #1
 80016ac:	2800      	cmp	r0, #0
 80016ae:	bf1e      	ittt	ne
 80016b0:	68a1      	ldrne	r1, [r4, #8]
 80016b2:	6908      	ldrne	r0, [r1, #16]
 80016b4:	2800      	cmpne	r0, #0
 80016b6:	d00b      	beq.n	80016d0 <PE_Check_ExtendedMessage+0x19c>
 80016b8:	68a5      	ldr	r5, [r4, #8]
 80016ba:	78b1      	ldrb	r1, [r6, #2]
 80016bc:	f8b4 348e 	ldrh.w	r3, [r4, #1166]	@ 0x48e
 80016c0:	7c20      	ldrb	r0, [r4, #16]
 80016c2:	692e      	ldr	r6, [r5, #16]
 80016c4:	47b0      	blx	r6
 80016c6:	2003      	movs	r0, #3
 80016c8:	7460      	strb	r0, [r4, #17]
 80016ca:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80016cc:	2101      	movs	r1, #1
 80016ce:	7461      	strb	r1, [r4, #17]
 80016d0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080016d2 <.text_6>:
 80016d2:	6820      	ldr	r0, [r4, #0]
 80016d4:	8901      	ldrh	r1, [r0, #8]
 80016d6:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80016da:	2800      	cmp	r0, #0
 80016dc:	4770      	bx	lr

080016de <.text_7>:
 80016de:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80016e0:	68a5      	ldr	r5, [r4, #8]
 80016e2:	69af      	ldr	r7, [r5, #24]
 80016e4:	1d02      	adds	r2, r0, #4
 80016e6:	7c20      	ldrb	r0, [r4, #16]
 80016e8:	4770      	bx	lr

080016ea <.text_8>:
 80016ea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80016ec:	68a5      	ldr	r5, [r4, #8]
 80016ee:	69af      	ldr	r7, [r5, #24]
 80016f0:	1d02      	adds	r2, r0, #4
 80016f2:	7c20      	ldrb	r0, [r4, #16]
 80016f4:	2301      	movs	r3, #1
 80016f6:	4770      	bx	lr

080016f8 <PE_Send_ExtendedMessage>:
 80016f8:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 80016fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80016fe:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8001700:	4606      	mov	r6, r0
 8001702:	460f      	mov	r7, r1
 8001704:	4690      	mov	r8, r2
 8001706:	4699      	mov	r9, r3
 8001708:	f7ff fed2 	bl	80014b0 <.text_3>
 800170c:	b1b8      	cbz	r0, 800173e <PE_Send_ExtendedMessage+0x46>
 800170e:	9501      	str	r5, [sp, #4]
 8001710:	9400      	str	r4, [sp, #0]
 8001712:	464b      	mov	r3, r9
 8001714:	7c30      	ldrb	r0, [r6, #16]
 8001716:	f048 0280 	orr.w	r2, r8, #128	@ 0x80
 800171a:	4639      	mov	r1, r7
 800171c:	f003 f9c8 	bl	8004ab0 <USBPD_PRL_SendMessage>
 8001720:	2803      	cmp	r0, #3
 8001722:	d0f1      	beq.n	8001708 <PE_Send_ExtendedMessage+0x10>
 8001724:	2810      	cmp	r0, #16
 8001726:	d008      	beq.n	800173a <PE_Send_ExtendedMessage+0x42>
 8001728:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 800172c:	9100      	str	r1, [sp, #0]
 800172e:	4603      	mov	r3, r0
 8001730:	2200      	movs	r2, #0
 8001732:	4639      	mov	r1, r7
 8001734:	4630      	mov	r0, r6
 8001736:	f000 fa97 	bl	8001c68 <PE_CheckSendMessageStatus>
 800173a:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 800173e:	2011      	movs	r0, #17
 8001740:	7470      	strb	r0, [r6, #17]
 8001742:	2010      	movs	r0, #16
 8001744:	e7f9      	b.n	800173a <PE_Send_ExtendedMessage+0x42>

08001746 <PE_SubStateMachine_ExtendedMessages>:
 8001746:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	4604      	mov	r4, r0
 800174e:	f04f 0802 	mov.w	r8, #2
 8001752:	7c61      	ldrb	r1, [r4, #17]
 8001754:	2931      	cmp	r1, #49	@ 0x31
 8001756:	f204 2a67 	addw	sl, r4, #615	@ 0x267
 800175a:	f204 3b85 	addw	fp, r4, #901	@ 0x385
 800175e:	f204 265a 	addw	r6, r4, #602	@ 0x25a
 8001762:	f104 0930 	add.w	r9, r4, #48	@ 0x30
 8001766:	f204 2563 	addw	r5, r4, #611	@ 0x263
 800176a:	f204 478e 	addw	r7, r4, #1166	@ 0x48e
 800176e:	f248 001b 	movw	r0, #32795	@ 0x801b
 8001772:	d015      	beq.n	80017a0 <PE_SubStateMachine_ExtendedMessages+0x5a>
 8001774:	2933      	cmp	r1, #51	@ 0x33
 8001776:	d058      	beq.n	800182a <PE_SubStateMachine_ExtendedMessages+0xe4>
 8001778:	2934      	cmp	r1, #52	@ 0x34
 800177a:	d05f      	beq.n	800183c <PE_SubStateMachine_ExtendedMessages+0xf6>
 800177c:	2935      	cmp	r1, #53	@ 0x35
 800177e:	f000 808a 	beq.w	8001896 <PE_SubStateMachine_ExtendedMessages+0x150>
 8001782:	2936      	cmp	r1, #54	@ 0x36
 8001784:	f000 809d 	beq.w	80018c2 <PE_SubStateMachine_ExtendedMessages+0x17c>
 8001788:	2937      	cmp	r1, #55	@ 0x37
 800178a:	f000 809f 	beq.w	80018cc <PE_SubStateMachine_ExtendedMessages+0x186>
 800178e:	2938      	cmp	r1, #56	@ 0x38
 8001790:	bf01      	itttt	eq
 8001792:	2003      	moveq	r0, #3
 8001794:	7460      	strbeq	r0, [r4, #17]
 8001796:	f04f 0800 	moveq.w	r8, #0
 800179a:	f8a7 8000 	strheq.w	r8, [r7]
 800179e:	e0c3      	b.n	8001928 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80017a0:	9503      	str	r5, [sp, #12]
 80017a2:	2500      	movs	r5, #0
 80017a4:	803d      	strh	r5, [r7, #0]
 80017a6:	7c20      	ldrb	r0, [r4, #16]
 80017a8:	f7ff faf1 	bl	8000d8e <PE_Get_UnchunkedSupport>
 80017ac:	2801      	cmp	r0, #1
 80017ae:	d106      	bne.n	80017be <PE_SubStateMachine_ExtendedMessages+0x78>
 80017b0:	f204 3087 	addw	r0, r4, #903	@ 0x387
 80017b4:	7005      	strb	r5, [r0, #0]
 80017b6:	7045      	strb	r5, [r0, #1]
 80017b8:	f8cd b00c 	str.w	fp, [sp, #12]
 80017bc:	e017      	b.n	80017ee <PE_SubStateMachine_ExtendedMessages+0xa8>
 80017be:	72f5      	strb	r5, [r6, #11]
 80017c0:	7335      	strb	r5, [r6, #12]
 80017c2:	7c20      	ldrb	r0, [r4, #16]
 80017c4:	f7ff fae3 	bl	8000d8e <PE_Get_UnchunkedSupport>
 80017c8:	b918      	cbnz	r0, 80017d2 <PE_SubStateMachine_ExtendedMessages+0x8c>
 80017ca:	7b30      	ldrb	r0, [r6, #12]
 80017cc:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80017d0:	7330      	strb	r0, [r6, #12]
 80017d2:	8878      	ldrh	r0, [r7, #2]
 80017d4:	281b      	cmp	r0, #27
 80017d6:	4628      	mov	r0, r5
 80017d8:	d306      	bcc.n	80017e8 <PE_SubStateMachine_ExtendedMessages+0xa2>
 80017da:	f000 f8a9 	bl	8001930 <.text_11>
 80017de:	281a      	cmp	r0, #26
 80017e0:	d3fb      	bcc.n	80017da <PE_SubStateMachine_ExtendedMessages+0x94>
 80017e2:	e004      	b.n	80017ee <PE_SubStateMachine_ExtendedMessages+0xa8>
 80017e4:	f000 f8a4 	bl	8001930 <.text_11>
 80017e8:	8879      	ldrh	r1, [r7, #2]
 80017ea:	4288      	cmp	r0, r1
 80017ec:	d3fa      	bcc.n	80017e4 <PE_SubStateMachine_ExtendedMessages+0x9e>
 80017ee:	6960      	ldr	r0, [r4, #20]
 80017f0:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80017f4:	b130      	cbz	r0, 8001804 <PE_SubStateMachine_ExtendedMessages+0xbe>
 80017f6:	f000 f985 	bl	8001b04 <.text_16>
 80017fa:	bf14      	ite	ne
 80017fc:	2501      	movne	r5, #1
 80017fe:	2502      	moveq	r5, #2
 8001800:	2033      	movs	r0, #51	@ 0x33
 8001802:	e000      	b.n	8001806 <PE_SubStateMachine_ExtendedMessages+0xc0>
 8001804:	2003      	movs	r0, #3
 8001806:	9502      	str	r5, [sp, #8]
 8001808:	9001      	str	r0, [sp, #4]
 800180a:	8878      	ldrh	r0, [r7, #2]
 800180c:	9b03      	ldr	r3, [sp, #12]
 800180e:	1d00      	adds	r0, r0, #4
 8001810:	b280      	uxth	r0, r0
 8001812:	9000      	str	r0, [sp, #0]
 8001814:	78f2      	ldrb	r2, [r6, #3]
 8001816:	f899 1003 	ldrb.w	r1, [r9, #3]
 800181a:	4620      	mov	r0, r4
 800181c:	f7ff ff6c 	bl	80016f8 <PE_Send_ExtendedMessage>
 8001820:	2800      	cmp	r0, #0
 8001822:	d101      	bne.n	8001828 <PE_SubStateMachine_ExtendedMessages+0xe2>
 8001824:	7970      	ldrb	r0, [r6, #5]
 8001826:	7720      	strb	r0, [r4, #28]
 8001828:	e07e      	b.n	8001928 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 800182a:	83e0      	strh	r0, [r4, #30]
 800182c:	f04f 081b 	mov.w	r8, #27
 8001830:	78f0      	ldrb	r0, [r6, #3]
 8001832:	2804      	cmp	r0, #4
 8001834:	d148      	bne.n	80018c8 <PE_SubStateMachine_ExtendedMessages+0x182>
 8001836:	2174      	movs	r1, #116	@ 0x74
 8001838:	7461      	strb	r1, [r4, #17]
 800183a:	e075      	b.n	8001928 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 800183c:	8831      	ldrh	r1, [r6, #0]
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	f3c1 21c3 	ubfx	r1, r1, #11, #4
 8001844:	201a      	movs	r0, #26
 8001846:	4341      	muls	r1, r0
 8001848:	4291      	cmp	r1, r2
 800184a:	da04      	bge.n	8001856 <PE_SubStateMachine_ExtendedMessages+0x110>
 800184c:	8830      	ldrh	r0, [r6, #0]
 800184e:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 8001852:	280a      	cmp	r0, #10
 8001854:	d301      	bcc.n	800185a <PE_SubStateMachine_ExtendedMessages+0x114>
 8001856:	2003      	movs	r0, #3
 8001858:	e019      	b.n	800188e <PE_SubStateMachine_ExtendedMessages+0x148>
 800185a:	1a50      	subs	r0, r2, r1
 800185c:	281a      	cmp	r0, #26
 800185e:	bf3a      	itte	cc
 8001860:	1a52      	subcc	r2, r2, r1
 8001862:	b2d2      	uxtbcc	r2, r2
 8001864:	221a      	movcs	r2, #26
 8001866:	2000      	movs	r0, #0
 8001868:	e005      	b.n	8001876 <PE_SubStateMachine_ExtendedMessages+0x130>
 800186a:	1843      	adds	r3, r0, r1
 800186c:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8001870:	f80a 3000 	strb.w	r3, [sl, r0]
 8001874:	1c40      	adds	r0, r0, #1
 8001876:	4290      	cmp	r0, r2
 8001878:	d3f7      	bcc.n	800186a <PE_SubStateMachine_ExtendedMessages+0x124>
 800187a:	8831      	ldrh	r1, [r6, #0]
 800187c:	887a      	ldrh	r2, [r7, #2]
 800187e:	7c20      	ldrb	r0, [r4, #16]
 8001880:	0ac9      	lsrs	r1, r1, #11
 8001882:	462b      	mov	r3, r5
 8001884:	f001 010f 	and.w	r1, r1, #15
 8001888:	f003 fd9f 	bl	80053ca <USBPD_PRL_PrepareExtendedTxChunkSending>
 800188c:	2035      	movs	r0, #53	@ 0x35
 800188e:	7460      	strb	r0, [r4, #17]
 8001890:	f04f 0800 	mov.w	r8, #0
 8001894:	e048      	b.n	8001928 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 8001896:	6960      	ldr	r0, [r4, #20]
 8001898:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800189c:	2800      	cmp	r0, #0
 800189e:	bf14      	ite	ne
 80018a0:	2036      	movne	r0, #54	@ 0x36
 80018a2:	2003      	moveq	r0, #3
 80018a4:	2100      	movs	r1, #0
 80018a6:	9001      	str	r0, [sp, #4]
 80018a8:	9102      	str	r1, [sp, #8]
 80018aa:	462b      	mov	r3, r5
 80018ac:	8878      	ldrh	r0, [r7, #2]
 80018ae:	9000      	str	r0, [sp, #0]
 80018b0:	78f2      	ldrb	r2, [r6, #3]
 80018b2:	f899 1000 	ldrb.w	r1, [r9]
 80018b6:	4620      	mov	r0, r4
 80018b8:	f7ff ff1e 	bl	80016f8 <PE_Send_ExtendedMessage>
 80018bc:	2000      	movs	r0, #0
 80018be:	8038      	strh	r0, [r7, #0]
 80018c0:	e032      	b.n	8001928 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80018c2:	83e0      	strh	r0, [r4, #30]
 80018c4:	f04f 081b 	mov.w	r8, #27
 80018c8:	2039      	movs	r0, #57	@ 0x39
 80018ca:	e004      	b.n	80018d6 <PE_SubStateMachine_ExtendedMessages+0x190>
 80018cc:	8be1      	ldrh	r1, [r4, #30]
 80018ce:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80018d2:	d102      	bne.n	80018da <PE_SubStateMachine_ExtendedMessages+0x194>
 80018d4:	200f      	movs	r0, #15
 80018d6:	7460      	strb	r0, [r4, #17]
 80018d8:	e026      	b.n	8001928 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80018da:	83e0      	strh	r0, [r4, #30]
 80018dc:	4629      	mov	r1, r5
 80018de:	7c20      	ldrb	r0, [r4, #16]
 80018e0:	f003 fd9c 	bl	800541c <USBPD_PRL_PrepareChunkRequest>
 80018e4:	f04f 081b 	mov.w	r8, #27
 80018e8:	6860      	ldr	r0, [r4, #4]
 80018ea:	f7ff fde2 	bl	80014b2 <.text_3+0x2>
 80018ee:	b180      	cbz	r0, 8001912 <PE_SubStateMachine_ExtendedMessages+0x1cc>
 80018f0:	2000      	movs	r0, #0
 80018f2:	2106      	movs	r1, #6
 80018f4:	9001      	str	r0, [sp, #4]
 80018f6:	9100      	str	r1, [sp, #0]
 80018f8:	462b      	mov	r3, r5
 80018fa:	78b2      	ldrb	r2, [r6, #2]
 80018fc:	f899 1000 	ldrb.w	r1, [r9]
 8001900:	7c20      	ldrb	r0, [r4, #16]
 8001902:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001906:	f003 f8d3 	bl	8004ab0 <USBPD_PRL_SendMessage>
 800190a:	2803      	cmp	r0, #3
 800190c:	4603      	mov	r3, r0
 800190e:	d0eb      	beq.n	80018e8 <PE_SubStateMachine_ExtendedMessages+0x1a2>
 8001910:	e002      	b.n	8001918 <PE_SubStateMachine_ExtendedMessages+0x1d2>
 8001912:	2011      	movs	r0, #17
 8001914:	7460      	strb	r0, [r4, #17]
 8001916:	2310      	movs	r3, #16
 8001918:	2039      	movs	r0, #57	@ 0x39
 800191a:	9000      	str	r0, [sp, #0]
 800191c:	2200      	movs	r2, #0
 800191e:	f899 1000 	ldrb.w	r1, [r9]
 8001922:	4620      	mov	r0, r4
 8001924:	f000 f9a0 	bl	8001c68 <PE_CheckSendMessageStatus>
 8001928:	4640      	mov	r0, r8
 800192a:	b005      	add	sp, #20
 800192c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001930 <.text_11>:
 8001930:	f81b 1000 	ldrb.w	r1, [fp, r0]
 8001934:	f80a 1000 	strb.w	r1, [sl, r0]
 8001938:	1c40      	adds	r0, r0, #1
 800193a:	4770      	bx	lr

0800193c <PE_ManageRXEvent>:
 800193c:	f100 0130 	add.w	r1, r0, #48	@ 0x30
 8001940:	780a      	ldrb	r2, [r1, #0]
 8001942:	704a      	strb	r2, [r1, #1]
 8001944:	888a      	ldrh	r2, [r1, #4]
 8001946:	0bd1      	lsrs	r1, r2, #15
 8001948:	bf18      	it	ne
 800194a:	f7ff bdf3 	bne.w	8001534 <PE_Check_ExtendedMessage>
 800194e:	f412 4f70 	tst.w	r2, #61440	@ 0xf000
 8001952:	bf08      	it	eq
 8001954:	f000 b802 	beq.w	800195c <PE_Check_ControlMessage>
 8001958:	e0da      	b.n	8001b10 <PE_Check_DataMessage>
	...

0800195c <PE_Check_ControlMessage>:
 800195c:	b510      	push	{r4, lr}
 800195e:	f000 f97d 	bl	8001c5c <.text_18>
 8001962:	1e40      	subs	r0, r0, #1
 8001964:	2817      	cmp	r0, #23
 8001966:	d851      	bhi.n	8001a0c <PE_Check_ControlMessage+0xb0>
 8001968:	e8df f000 	tbb	[pc, r0]
 800196c:	b5b50cc2 	.word	0xb5b50cc2
 8001970:	4b20b51e 	.word	0x4b20b51e
 8001974:	b53b3143 	.word	0xb53b3143
 8001978:	afb7b717 	.word	0xafb7b717
 800197c:	8ca7805d 	.word	0x8ca7805d
 8001980:	abb772a0 	.word	0xabb772a0
 8001984:	f000 f8be 	bl	8001b04 <.text_16>
 8001988:	f040 80b2 	bne.w	8001af0 <PE_Check_ControlMessage+0x194>
 800198c:	2002      	movs	r0, #2
 800198e:	7720      	strb	r0, [r4, #28]
 8001990:	212b      	movs	r1, #43	@ 0x2b
 8001992:	f000 f8b4 	bl	8001afe <.text_15>
 8001996:	2198      	movs	r1, #152	@ 0x98
 8001998:	e0a9      	b.n	8001aee <PE_Check_ControlMessage+0x192>
 800199a:	2003      	movs	r0, #3
 800199c:	7720      	strb	r0, [r4, #28]
 800199e:	2132      	movs	r1, #50	@ 0x32
 80019a0:	f000 f8ad 	bl	8001afe <.text_15>
 80019a4:	2010      	movs	r0, #16
 80019a6:	e09f      	b.n	8001ae8 <PE_Check_ControlMessage+0x18c>
 80019a8:	2133      	movs	r1, #51	@ 0x33
 80019aa:	e08f      	b.n	8001acc <PE_Check_ControlMessage+0x170>
 80019ac:	2006      	movs	r0, #6
 80019ae:	7720      	strb	r0, [r4, #28]
 80019b0:	f000 f8a8 	bl	8001b04 <.text_16>
 80019b4:	bf01      	itttt	eq
 80019b6:	6820      	ldreq	r0, [r4, #0]
 80019b8:	6841      	ldreq	r1, [r0, #4]
 80019ba:	f3c1 00c0 	ubfxeq	r0, r1, #3, #1
 80019be:	2800      	cmpeq	r0, #0
 80019c0:	d012      	beq.n	80019e8 <PE_Check_ControlMessage+0x8c>
 80019c2:	7c20      	ldrb	r0, [r4, #16]
 80019c4:	210c      	movs	r1, #12
 80019c6:	f7fe fdc2 	bl	800054e <USBPD_PE_Notification>
 80019ca:	204c      	movs	r0, #76	@ 0x4c
 80019cc:	e08c      	b.n	8001ae8 <PE_Check_ControlMessage+0x18c>
 80019ce:	f000 f890 	bl	8001af2 <.text_14>
 80019d2:	d009      	beq.n	80019e8 <PE_Check_ControlMessage+0x8c>
 80019d4:	2008      	movs	r0, #8
 80019d6:	7720      	strb	r0, [r4, #28]
 80019d8:	213c      	movs	r1, #60	@ 0x3c
 80019da:	f000 f890 	bl	8001afe <.text_15>
 80019de:	2022      	movs	r0, #34	@ 0x22
 80019e0:	e082      	b.n	8001ae8 <PE_Check_ControlMessage+0x18c>
 80019e2:	68a1      	ldr	r1, [r4, #8]
 80019e4:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d077      	beq.n	8001ada <PE_Check_ControlMessage+0x17e>
 80019ea:	2111      	movs	r1, #17
 80019ec:	7721      	strb	r1, [r4, #28]
 80019ee:	209d      	movs	r0, #157	@ 0x9d
 80019f0:	e07a      	b.n	8001ae8 <PE_Check_ControlMessage+0x18c>
 80019f2:	68a1      	ldr	r1, [r4, #8]
 80019f4:	6b88      	ldr	r0, [r1, #56]	@ 0x38
 80019f6:	2800      	cmp	r0, #0
 80019f8:	d06f      	beq.n	8001ada <PE_Check_ControlMessage+0x17e>
 80019fa:	2010      	movs	r0, #16
 80019fc:	7720      	strb	r0, [r4, #28]
 80019fe:	2193      	movs	r1, #147	@ 0x93
 8001a00:	e075      	b.n	8001aee <PE_Check_ControlMessage+0x192>
 8001a02:	6860      	ldr	r0, [r4, #4]
 8001a04:	6801      	ldr	r1, [r0, #0]
 8001a06:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8001a0a:	2803      	cmp	r0, #3
 8001a0c:	d165      	bne.n	8001ada <PE_Check_ControlMessage+0x17e>
 8001a0e:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001a12:	b110      	cbz	r0, 8001a1a <PE_Check_ControlMessage+0xbe>
 8001a14:	f000 f86d 	bl	8001af2 <.text_14>
 8001a18:	d05f      	beq.n	8001ada <PE_Check_ControlMessage+0x17e>
 8001a1a:	211d      	movs	r1, #29
 8001a1c:	7461      	strb	r1, [r4, #17]
 8001a1e:	2007      	movs	r0, #7
 8001a20:	7720      	strb	r0, [r4, #28]
 8001a22:	2106      	movs	r1, #6
 8001a24:	e052      	b.n	8001acc <PE_Check_ControlMessage+0x170>
 8001a26:	6820      	ldr	r0, [r4, #0]
 8001a28:	8901      	ldrh	r1, [r0, #8]
 8001a2a:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001a2e:	2800      	cmp	r0, #0
 8001a30:	d059      	beq.n	8001ae6 <PE_Check_ControlMessage+0x18a>
 8001a32:	f000 f867 	bl	8001b04 <.text_16>
 8001a36:	bf01      	itttt	eq
 8001a38:	6820      	ldreq	r0, [r4, #0]
 8001a3a:	6841      	ldreq	r1, [r0, #4]
 8001a3c:	f3c1 00c0 	ubfxeq	r0, r1, #3, #1
 8001a40:	2800      	cmpeq	r0, #0
 8001a42:	d050      	beq.n	8001ae6 <PE_Check_ControlMessage+0x18a>
 8001a44:	2163      	movs	r1, #99	@ 0x63
 8001a46:	7461      	strb	r1, [r4, #17]
 8001a48:	200a      	movs	r0, #10
 8001a4a:	7720      	strb	r0, [r4, #28]
 8001a4c:	2146      	movs	r1, #70	@ 0x46
 8001a4e:	e03d      	b.n	8001acc <PE_Check_ControlMessage+0x170>
 8001a50:	6860      	ldr	r0, [r4, #4]
 8001a52:	6801      	ldr	r1, [r0, #0]
 8001a54:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001a58:	b110      	cbz	r0, 8001a60 <PE_Check_ControlMessage+0x104>
 8001a5a:	f000 f84a 	bl	8001af2 <.text_14>
 8001a5e:	d042      	beq.n	8001ae6 <PE_Check_ControlMessage+0x18a>
 8001a60:	2164      	movs	r1, #100	@ 0x64
 8001a62:	7461      	strb	r1, [r4, #17]
 8001a64:	205f      	movs	r0, #95	@ 0x5f
 8001a66:	7720      	strb	r0, [r4, #28]
 8001a68:	2160      	movs	r1, #96	@ 0x60
 8001a6a:	e02f      	b.n	8001acc <PE_Check_ControlMessage+0x170>
 8001a6c:	6820      	ldr	r0, [r4, #0]
 8001a6e:	8901      	ldrh	r1, [r0, #8]
 8001a70:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8001a74:	b318      	cbz	r0, 8001abe <PE_Check_ControlMessage+0x162>
 8001a76:	200b      	movs	r0, #11
 8001a78:	7720      	strb	r0, [r4, #28]
 8001a7a:	214d      	movs	r1, #77	@ 0x4d
 8001a7c:	f000 f83f 	bl	8001afe <.text_15>
 8001a80:	2030      	movs	r0, #48	@ 0x30
 8001a82:	e031      	b.n	8001ae8 <PE_Check_ControlMessage+0x18c>
 8001a84:	6820      	ldr	r0, [r4, #0]
 8001a86:	8901      	ldrh	r1, [r0, #8]
 8001a88:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	d02a      	beq.n	8001ae6 <PE_Check_ControlMessage+0x18a>
 8001a90:	200b      	movs	r0, #11
 8001a92:	7720      	strb	r0, [r4, #28]
 8001a94:	2149      	movs	r1, #73	@ 0x49
 8001a96:	f000 f832 	bl	8001afe <.text_15>
 8001a9a:	6860      	ldr	r0, [r4, #4]
 8001a9c:	6801      	ldr	r1, [r0, #0]
 8001a9e:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001aa2:	b108      	cbz	r0, 8001aa8 <PE_Check_ControlMessage+0x14c>
 8001aa4:	202d      	movs	r0, #45	@ 0x2d
 8001aa6:	e01f      	b.n	8001ae8 <PE_Check_ControlMessage+0x18c>
 8001aa8:	2111      	movs	r1, #17
 8001aaa:	e020      	b.n	8001aee <PE_Check_ControlMessage+0x192>
 8001aac:	6820      	ldr	r0, [r4, #0]
 8001aae:	8901      	ldrh	r1, [r0, #8]
 8001ab0:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8001ab4:	b118      	cbz	r0, 8001abe <PE_Check_ControlMessage+0x162>
 8001ab6:	202f      	movs	r0, #47	@ 0x2f
 8001ab8:	e016      	b.n	8001ae8 <PE_Check_ControlMessage+0x18c>
 8001aba:	2009      	movs	r0, #9
 8001abc:	7720      	strb	r0, [r4, #28]
 8001abe:	2101      	movs	r1, #1
 8001ac0:	e015      	b.n	8001aee <PE_Check_ControlMessage+0x192>
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	7720      	strb	r0, [r4, #28]
 8001ac6:	214b      	movs	r1, #75	@ 0x4b
 8001ac8:	e011      	b.n	8001aee <PE_Check_ControlMessage+0x192>
 8001aca:	2159      	movs	r1, #89	@ 0x59
 8001acc:	7c20      	ldrb	r0, [r4, #16]
 8001ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ad2:	f7fe bd3c 	b.w	800054e <USBPD_PE_Notification>
 8001ad6:	2011      	movs	r0, #17
 8001ad8:	e006      	b.n	8001ae8 <PE_Check_ControlMessage+0x18c>
 8001ada:	6860      	ldr	r0, [r4, #4]
 8001adc:	7801      	ldrb	r1, [r0, #0]
 8001ade:	f001 0103 	and.w	r1, r1, #3
 8001ae2:	2902      	cmp	r1, #2
 8001ae4:	d102      	bne.n	8001aec <PE_Check_ControlMessage+0x190>
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	7460      	strb	r0, [r4, #17]
 8001aea:	bd10      	pop	{r4, pc}
 8001aec:	212a      	movs	r1, #42	@ 0x2a
 8001aee:	7461      	strb	r1, [r4, #17]
 8001af0:	bd10      	pop	{r4, pc}

08001af2 <.text_14>:
 8001af2:	6820      	ldr	r0, [r4, #0]
 8001af4:	6841      	ldr	r1, [r0, #4]
 8001af6:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001afa:	2800      	cmp	r0, #0
 8001afc:	4770      	bx	lr

08001afe <.text_15>:
 8001afe:	7c20      	ldrb	r0, [r4, #16]
 8001b00:	f7fe bd25 	b.w	800054e <USBPD_PE_Notification>

08001b04 <.text_16>:
 8001b04:	6860      	ldr	r0, [r4, #4]
 8001b06:	6801      	ldr	r1, [r0, #0]
 8001b08:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001b0c:	2800      	cmp	r0, #0
 8001b0e:	4770      	bx	lr

08001b10 <PE_Check_DataMessage>:
 8001b10:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001b12:	f000 f8a3 	bl	8001c5c <.text_18>
 8001b16:	2801      	cmp	r0, #1
 8001b18:	d02a      	beq.n	8001b70 <PE_Check_DataMessage+0x60>
 8001b1a:	2802      	cmp	r0, #2
 8001b1c:	d00c      	beq.n	8001b38 <PE_Check_DataMessage+0x28>
 8001b1e:	2803      	cmp	r0, #3
 8001b20:	d03c      	beq.n	8001b9c <PE_Check_DataMessage+0x8c>
 8001b22:	2806      	cmp	r0, #6
 8001b24:	d07c      	beq.n	8001c20 <PE_Check_DataMessage+0x110>
 8001b26:	2807      	cmp	r0, #7
 8001b28:	f000 8089 	beq.w	8001c3e <PE_Check_DataMessage+0x12e>
 8001b2c:	280a      	cmp	r0, #10
 8001b2e:	f000 808f 	beq.w	8001c50 <PE_Check_DataMessage+0x140>
 8001b32:	280f      	cmp	r0, #15
 8001b34:	d070      	beq.n	8001c18 <PE_Check_DataMessage+0x108>
 8001b36:	e08e      	b.n	8001c56 <PE_Check_DataMessage+0x146>
 8001b38:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001b3a:	7881      	ldrb	r1, [r0, #2]
 8001b3c:	78c2      	ldrb	r2, [r0, #3]
 8001b3e:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8001b42:	7901      	ldrb	r1, [r0, #4]
 8001b44:	7940      	ldrb	r0, [r0, #5]
 8001b46:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8001b4a:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	f7ff ffd8 	bl	8001b04 <.text_16>
 8001b54:	d063      	beq.n	8001c1e <PE_Check_DataMessage+0x10e>
 8001b56:	68a5      	ldr	r5, [r4, #8]
 8001b58:	7c20      	ldrb	r0, [r4, #16]
 8001b5a:	69ae      	ldr	r6, [r5, #24]
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	466a      	mov	r2, sp
 8001b60:	2106      	movs	r1, #6
 8001b62:	47b0      	blx	r6
 8001b64:	2001      	movs	r0, #1
 8001b66:	7720      	strb	r0, [r4, #28]
 8001b68:	2100      	movs	r1, #0
 8001b6a:	84a1      	strh	r1, [r4, #36]	@ 0x24
 8001b6c:	2009      	movs	r0, #9
 8001b6e:	e070      	b.n	8001c52 <PE_Check_DataMessage+0x142>
 8001b70:	f7ff ffc8 	bl	8001b04 <.text_16>
 8001b74:	d171      	bne.n	8001c5a <PE_Check_DataMessage+0x14a>
 8001b76:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001b78:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8001b7c:	7c20      	ldrb	r0, [r4, #16]
 8001b7e:	f7ff f856 	bl	8000c2e <PE_ExtRevisionInteroperability>
 8001b82:	68a5      	ldr	r5, [r4, #8]
 8001b84:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001b86:	69ae      	ldr	r6, [r5, #24]
 8001b88:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8001b8c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001b8e:	1c82      	adds	r2, r0, #2
 8001b90:	7c20      	ldrb	r0, [r4, #16]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	2104      	movs	r1, #4
 8001b96:	47b0      	blx	r6
 8001b98:	2044      	movs	r0, #68	@ 0x44
 8001b9a:	e05a      	b.n	8001c52 <PE_Check_DataMessage+0x142>
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	9101      	str	r1, [sp, #4]
 8001ba0:	9100      	str	r1, [sp, #0]
 8001ba2:	466b      	mov	r3, sp
 8001ba4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001ba6:	7881      	ldrb	r1, [r0, #2]
 8001ba8:	78c2      	ldrb	r2, [r0, #3]
 8001baa:	68a6      	ldr	r6, [r4, #8]
 8001bac:	6977      	ldr	r7, [r6, #20]
 8001bae:	eb01 2502 	add.w	r5, r1, r2, lsl #8
 8001bb2:	7901      	ldrb	r1, [r0, #4]
 8001bb4:	7940      	ldrb	r0, [r0, #5]
 8001bb6:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8001bba:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 8001bbe:	7c20      	ldrb	r0, [r4, #16]
 8001bc0:	aa01      	add	r2, sp, #4
 8001bc2:	2103      	movs	r1, #3
 8001bc4:	47b8      	blx	r7
 8001bc6:	9800      	ldr	r0, [sp, #0]
 8001bc8:	2104      	movs	r1, #4
 8001bca:	f7ff fbe9 	bl	80013a0 <PE_CheckDataSizeFromGetDataInfo>
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	bf01      	itttt	eq
 8001bd2:	6860      	ldreq	r0, [r4, #4]
 8001bd4:	6801      	ldreq	r1, [r0, #0]
 8001bd6:	f3c1 2002 	ubfxeq	r0, r1, #8, #3
 8001bda:	2803      	cmpeq	r0, #3
 8001bdc:	d11a      	bne.n	8001c14 <PE_Check_DataMessage+0x104>
 8001bde:	9801      	ldr	r0, [sp, #4]
 8001be0:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001be4:	4288      	cmp	r0, r1
 8001be6:	d115      	bne.n	8001c14 <PE_Check_DataMessage+0x104>
 8001be8:	0f2d      	lsrs	r5, r5, #28
 8001bea:	2d05      	cmp	r5, #5
 8001bec:	d010      	beq.n	8001c10 <PE_Check_DataMessage+0x100>
 8001bee:	2d08      	cmp	r5, #8
 8001bf0:	d00c      	beq.n	8001c0c <PE_Check_DataMessage+0xfc>
 8001bf2:	2d09      	cmp	r5, #9
 8001bf4:	d004      	beq.n	8001c00 <PE_Check_DataMessage+0xf0>
 8001bf6:	2d0a      	cmp	r5, #10
 8001bf8:	d12f      	bne.n	8001c5a <PE_Check_DataMessage+0x14a>
 8001bfa:	7c20      	ldrb	r0, [r4, #16]
 8001bfc:	2166      	movs	r1, #102	@ 0x66
 8001bfe:	e001      	b.n	8001c04 <PE_Check_DataMessage+0xf4>
 8001c00:	7c20      	ldrb	r0, [r4, #16]
 8001c02:	2165      	movs	r1, #101	@ 0x65
 8001c04:	f7fe fca3 	bl	800054e <USBPD_PE_Notification>
 8001c08:	2003      	movs	r0, #3
 8001c0a:	e022      	b.n	8001c52 <PE_Check_DataMessage+0x142>
 8001c0c:	2129      	movs	r1, #41	@ 0x29
 8001c0e:	e023      	b.n	8001c58 <PE_Check_DataMessage+0x148>
 8001c10:	2027      	movs	r0, #39	@ 0x27
 8001c12:	e01e      	b.n	8001c52 <PE_Check_DataMessage+0x142>
 8001c14:	2103      	movs	r1, #3
 8001c16:	e01f      	b.n	8001c58 <PE_Check_DataMessage+0x148>
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f002 fd56 	bl	80046ca <PE_Check_DataMessageVDM>
 8001c1e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001c20:	6820      	ldr	r0, [r4, #0]
 8001c22:	8901      	ldrh	r1, [r0, #8]
 8001c24:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8001c28:	b180      	cbz	r0, 8001c4c <PE_Check_DataMessage+0x13c>
 8001c2a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001c2c:	68a5      	ldr	r5, [r4, #8]
 8001c2e:	69ae      	ldr	r6, [r5, #24]
 8001c30:	1c82      	adds	r2, r0, #2
 8001c32:	7c20      	ldrb	r0, [r4, #16]
 8001c34:	2304      	movs	r3, #4
 8001c36:	210b      	movs	r1, #11
 8001c38:	47b0      	blx	r6
 8001c3a:	202c      	movs	r0, #44	@ 0x2c
 8001c3c:	e009      	b.n	8001c52 <PE_Check_DataMessage+0x142>
 8001c3e:	6820      	ldr	r0, [r4, #0]
 8001c40:	8901      	ldrh	r1, [r0, #8]
 8001c42:	f3c1 2000 	ubfx	r0, r1, #8, #1
 8001c46:	b108      	cbz	r0, 8001c4c <PE_Check_DataMessage+0x13c>
 8001c48:	203d      	movs	r0, #61	@ 0x3d
 8001c4a:	e002      	b.n	8001c52 <PE_Check_DataMessage+0x142>
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	e003      	b.n	8001c58 <PE_Check_DataMessage+0x148>
 8001c50:	2001      	movs	r0, #1
 8001c52:	7460      	strb	r0, [r4, #17]
 8001c54:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001c56:	2111      	movs	r1, #17
 8001c58:	7461      	strb	r1, [r4, #17]
 8001c5a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001c5c <.text_18>:
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8001c62:	f000 001f 	and.w	r0, r0, #31
 8001c66:	4770      	bx	lr

08001c68 <PE_CheckSendMessageStatus>:
 8001c68:	b510      	push	{r4, lr}
 8001c6a:	2410      	movs	r4, #16
 8001c6c:	2b05      	cmp	r3, #5
 8001c6e:	d007      	beq.n	8001c80 <PE_CheckSendMessageStatus+0x18>
 8001c70:	2b06      	cmp	r3, #6
 8001c72:	d00c      	beq.n	8001c8e <PE_CheckSendMessageStatus+0x26>
 8001c74:	2b07      	cmp	r3, #7
 8001c76:	d00f      	beq.n	8001c98 <PE_CheckSendMessageStatus+0x30>
 8001c78:	2b09      	cmp	r3, #9
 8001c7a:	bf08      	it	eq
 8001c7c:	2409      	moveq	r4, #9
 8001c7e:	e027      	b.n	8001cd0 <PE_CheckSendMessageStatus+0x68>
 8001c80:	9902      	ldr	r1, [sp, #8]
 8001c82:	7441      	strb	r1, [r0, #17]
 8001c84:	2400      	movs	r4, #0
 8001c86:	6941      	ldr	r1, [r0, #20]
 8001c88:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8001c8c:	e002      	b.n	8001c94 <PE_CheckSendMessageStatus+0x2c>
 8001c8e:	6941      	ldr	r1, [r0, #20]
 8001c90:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8001c94:	6141      	str	r1, [r0, #20]
 8001c96:	e01b      	b.n	8001cd0 <PE_CheckSendMessageStatus+0x68>
 8001c98:	b129      	cbz	r1, 8001ca6 <PE_CheckSendMessageStatus+0x3e>
 8001c9a:	2a01      	cmp	r2, #1
 8001c9c:	bf08      	it	eq
 8001c9e:	2199      	moveq	r1, #153	@ 0x99
 8001ca0:	d015      	beq.n	8001cce <PE_CheckSendMessageStatus+0x66>
 8001ca2:	2407      	movs	r4, #7
 8001ca4:	e014      	b.n	8001cd0 <PE_CheckSendMessageStatus+0x68>
 8001ca6:	6841      	ldr	r1, [r0, #4]
 8001ca8:	680b      	ldr	r3, [r1, #0]
 8001caa:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8001cae:	2904      	cmp	r1, #4
 8001cb0:	d003      	beq.n	8001cba <PE_CheckSendMessageStatus+0x52>
 8001cb2:	2a01      	cmp	r2, #1
 8001cb4:	d10a      	bne.n	8001ccc <PE_CheckSendMessageStatus+0x64>
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	e009      	b.n	8001cce <PE_CheckSendMessageStatus+0x66>
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	d1fb      	bne.n	8001cb6 <PE_CheckSendMessageStatus+0x4e>
 8001cbe:	6882      	ldr	r2, [r0, #8]
 8001cc0:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8001cc2:	2900      	cmp	r1, #0
 8001cc4:	d0f7      	beq.n	8001cb6 <PE_CheckSendMessageStatus+0x4e>
 8001cc6:	2292      	movs	r2, #146	@ 0x92
 8001cc8:	7442      	strb	r2, [r0, #17]
 8001cca:	e001      	b.n	8001cd0 <PE_CheckSendMessageStatus+0x68>
 8001ccc:	2111      	movs	r1, #17
 8001cce:	7441      	strb	r1, [r0, #17]
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	bd10      	pop	{r4, pc}

08001cd4 <USBPD_PE_StateMachine_SNK>:
 8001cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cd8:	4604      	mov	r4, r0
 8001cda:	f8df 0c2c 	ldr.w	r0, [pc, #3116]	@ 8002908 <.text_22>
 8001cde:	b08c      	sub	sp, #48	@ 0x30
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8001ce6:	7c68      	ldrb	r0, [r5, #17]
 8001ce8:	2848      	cmp	r0, #72	@ 0x48
 8001cea:	d12c      	bne.n	8001d46 <USBPD_PE_StateMachine_SNK+0x72>
 8001cec:	4628      	mov	r0, r5
 8001cee:	f7fe ff32 	bl	8000b56 <PE_Reset_ZI>
 8001cf2:	4628      	mov	r0, r5
 8001cf4:	f7fe ff69 	bl	8000bca <PE_Reset_Counter>
 8001cf8:	6828      	ldr	r0, [r5, #0]
 8001cfa:	7903      	ldrb	r3, [r0, #4]
 8001cfc:	7c28      	ldrb	r0, [r5, #16]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	f002 fe7a 	bl	80049fe <USBPD_PRL_SetHeader>
 8001d0a:	6868      	ldr	r0, [r5, #4]
 8001d0c:	6801      	ldr	r1, [r0, #0]
 8001d0e:	f021 0108 	bic.w	r1, r1, #8
 8001d12:	6001      	str	r1, [r0, #0]
 8001d14:	6828      	ldr	r0, [r5, #0]
 8001d16:	6841      	ldr	r1, [r0, #4]
 8001d18:	6868      	ldr	r0, [r5, #4]
 8001d1a:	6802      	ldr	r2, [r0, #0]
 8001d1c:	f361 0201 	bfi	r2, r1, #0, #2
 8001d20:	6002      	str	r2, [r0, #0]
 8001d22:	2101      	movs	r1, #1
 8001d24:	7c28      	ldrb	r0, [r5, #16]
 8001d26:	f002 fec1 	bl	8004aac <USBPD_PRL_SOPCapability>
 8001d2a:	7c28      	ldrb	r0, [r5, #16]
 8001d2c:	f003 f933 	bl	8004f96 <USBPD_PRL_Reset>
 8001d30:	7ca9      	ldrb	r1, [r5, #18]
 8001d32:	203e      	movs	r0, #62	@ 0x3e
 8001d34:	293e      	cmp	r1, #62	@ 0x3e
 8001d36:	7468      	strb	r0, [r5, #17]
 8001d38:	d005      	beq.n	8001d46 <USBPD_PE_StateMachine_SNK+0x72>
 8001d3a:	74a8      	strb	r0, [r5, #18]
 8001d3c:	f000 fd25 	bl	800278a <.text_12>
 8001d40:	223e      	movs	r2, #62	@ 0x3e
 8001d42:	2004      	movs	r0, #4
 8001d44:	47b8      	blx	r7
 8001d46:	6968      	ldr	r0, [r5, #20]
 8001d48:	f3c0 4080 	ubfx	r0, r0, #18, #1
 8001d4c:	b130      	cbz	r0, 8001d5c <USBPD_PE_StateMachine_SNK+0x88>
 8001d4e:	6968      	ldr	r0, [r5, #20]
 8001d50:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 8001d54:	6168      	str	r0, [r5, #20]
 8001d56:	2164      	movs	r1, #100	@ 0x64
 8001d58:	f000 fd3b 	bl	80027d2 <.text_18>
 8001d5c:	4628      	mov	r0, r5
 8001d5e:	f7fe fded 	bl	800093c <PE_Get_RxEvent>
 8001d62:	2803      	cmp	r0, #3
 8001d64:	f88d 000c 	strb.w	r0, [sp, #12]
 8001d68:	d103      	bne.n	8001d72 <USBPD_PE_StateMachine_SNK+0x9e>
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	b00d      	add	sp, #52	@ 0x34
 8001d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d72:	f88d 400d 	strb.w	r4, [sp, #13]
 8001d76:	f44f 78fa 	mov.w	r8, #500	@ 0x1f4
 8001d7a:	f248 19f4 	movw	r9, #33268	@ 0x81f4
 8001d7e:	f248 0b1b 	movw	fp, #32795	@ 0x801b
 8001d82:	6868      	ldr	r0, [r5, #4]
 8001d84:	6801      	ldr	r1, [r0, #0]
 8001d86:	2402      	movs	r4, #2
 8001d88:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	f000 8110 	beq.w	8001fb2 <USBPD_PE_StateMachine_SNK+0x2de>
 8001d92:	6968      	ldr	r0, [r5, #20]
 8001d94:	f105 0630 	add.w	r6, r5, #48	@ 0x30
 8001d98:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8001d9c:	b180      	cbz	r0, 8001dc0 <USBPD_PE_StateMachine_SNK+0xec>
 8001d9e:	20a7      	movs	r0, #167	@ 0xa7
 8001da0:	6969      	ldr	r1, [r5, #20]
 8001da2:	7468      	strb	r0, [r5, #17]
 8001da4:	f421 3100 	bic.w	r1, r1, #131072	@ 0x20000
 8001da8:	6169      	str	r1, [r5, #20]
 8001daa:	2000      	movs	r0, #0
 8001dac:	70b0      	strb	r0, [r6, #2]
 8001dae:	7ca9      	ldrb	r1, [r5, #18]
 8001db0:	29a7      	cmp	r1, #167	@ 0xa7
 8001db2:	d020      	beq.n	8001df6 <USBPD_PE_StateMachine_SNK+0x122>
 8001db4:	20a7      	movs	r0, #167	@ 0xa7
 8001db6:	f000 fcef 	bl	8002798 <.text_13>
 8001dba:	22a7      	movs	r2, #167	@ 0xa7
 8001dbc:	2004      	movs	r0, #4
 8001dbe:	47e0      	blx	ip
 8001dc0:	78b0      	ldrb	r0, [r6, #2]
 8001dc2:	280f      	cmp	r0, #15
 8001dc4:	bf18      	it	ne
 8001dc6:	2814      	cmpne	r0, #20
 8001dc8:	d115      	bne.n	8001df6 <USBPD_PE_StateMachine_SNK+0x122>
 8001dca:	f000 fcce 	bl	800276a <.text_9+0x2>
 8001dce:	d001      	beq.n	8001dd4 <USBPD_PE_StateMachine_SNK+0x100>
 8001dd0:	f000 fd06 	bl	80027e0 <.text_20>
 8001dd4:	78b2      	ldrb	r2, [r6, #2]
 8001dd6:	746a      	strb	r2, [r5, #17]
 8001dd8:	2000      	movs	r0, #0
 8001dda:	70b0      	strb	r0, [r6, #2]
 8001ddc:	7ca9      	ldrb	r1, [r5, #18]
 8001dde:	4291      	cmp	r1, r2
 8001de0:	d009      	beq.n	8001df6 <USBPD_PE_StateMachine_SNK+0x122>
 8001de2:	74aa      	strb	r2, [r5, #18]
 8001de4:	9000      	str	r0, [sp, #0]
 8001de6:	2300      	movs	r3, #0
 8001de8:	f8df 7b20 	ldr.w	r7, [pc, #2848]	@ 800290c <.text_23>
 8001dec:	7c29      	ldrb	r1, [r5, #16]
 8001dee:	f8d7 c000 	ldr.w	ip, [r7]
 8001df2:	2004      	movs	r0, #4
 8001df4:	47e0      	blx	ip
 8001df6:	f000 fcb3 	bl	8002760 <.text_8>
 8001dfa:	d117      	bne.n	8001e2c <USBPD_PE_StateMachine_SNK+0x158>
 8001dfc:	6868      	ldr	r0, [r5, #4]
 8001dfe:	6801      	ldr	r1, [r0, #0]
 8001e00:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001e04:	88b1      	ldrh	r1, [r6, #4]
 8001e06:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001e0a:	4288      	cmp	r0, r1
 8001e0c:	d10e      	bne.n	8001e2c <USBPD_PE_StateMachine_SNK+0x158>
 8001e0e:	f000 fca3 	bl	8002758 <.text_7>
 8001e12:	f000 fce8 	bl	80027e6 <.text_20+0x6>
 8001e16:	7ca9      	ldrb	r1, [r5, #18]
 8001e18:	2092      	movs	r0, #146	@ 0x92
 8001e1a:	2992      	cmp	r1, #146	@ 0x92
 8001e1c:	7468      	strb	r0, [r5, #17]
 8001e1e:	f000 80d4 	beq.w	8001fca <USBPD_PE_StateMachine_SNK+0x2f6>
 8001e22:	f000 fcb9 	bl	8002798 <.text_13>
 8001e26:	2292      	movs	r2, #146	@ 0x92
 8001e28:	2004      	movs	r0, #4
 8001e2a:	47e0      	blx	ip
 8001e2c:	7c68      	ldrb	r0, [r5, #17]
 8001e2e:	0001      	movs	r1, r0
 8001e30:	f205 275e 	addw	r7, r5, #606	@ 0x25e
 8001e34:	f24f 0a1f 	movw	sl, #61471	@ 0xf01f
 8001e38:	f000 80bf 	beq.w	8001fba <USBPD_PE_StateMachine_SNK+0x2e6>
 8001e3c:	1e41      	subs	r1, r0, #1
 8001e3e:	d070      	beq.n	8001f22 <USBPD_PE_StateMachine_SNK+0x24e>
 8001e40:	1e89      	subs	r1, r1, #2
 8001e42:	2901      	cmp	r1, #1
 8001e44:	f240 82aa 	bls.w	800239c <USBPD_PE_StateMachine_SNK+0x6c8>
 8001e48:	1e89      	subs	r1, r1, #2
 8001e4a:	f000 81bb 	beq.w	80021c4 <USBPD_PE_StateMachine_SNK+0x4f0>
 8001e4e:	390a      	subs	r1, #10
 8001e50:	f000 81bd 	beq.w	80021ce <USBPD_PE_StateMachine_SNK+0x4fa>
 8001e54:	1e49      	subs	r1, r1, #1
 8001e56:	f000 8242 	beq.w	80022de <USBPD_PE_StateMachine_SNK+0x60a>
 8001e5a:	1e49      	subs	r1, r1, #1
 8001e5c:	f000 8248 	beq.w	80022f0 <USBPD_PE_StateMachine_SNK+0x61c>
 8001e60:	1ec9      	subs	r1, r1, #3
 8001e62:	f000 81e0 	beq.w	8002226 <USBPD_PE_StateMachine_SNK+0x552>
 8001e66:	1f09      	subs	r1, r1, #4
 8001e68:	2901      	cmp	r1, #1
 8001e6a:	d95a      	bls.n	8001f22 <USBPD_PE_StateMachine_SNK+0x24e>
 8001e6c:	1e89      	subs	r1, r1, #2
 8001e6e:	f000 826e 	beq.w	800234e <USBPD_PE_StateMachine_SNK+0x67a>
 8001e72:	1ec9      	subs	r1, r1, #3
 8001e74:	d055      	beq.n	8001f22 <USBPD_PE_StateMachine_SNK+0x24e>
 8001e76:	1e49      	subs	r1, r1, #1
 8001e78:	f000 8333 	beq.w	80024e2 <USBPD_PE_StateMachine_SNK+0x80e>
 8001e7c:	1f09      	subs	r1, r1, #4
 8001e7e:	f000 829b 	beq.w	80023b8 <USBPD_PE_StateMachine_SNK+0x6e4>
 8001e82:	1f49      	subs	r1, r1, #5
 8001e84:	2902      	cmp	r1, #2
 8001e86:	d94c      	bls.n	8001f22 <USBPD_PE_StateMachine_SNK+0x24e>
 8001e88:	1ec9      	subs	r1, r1, #3
 8001e8a:	f000 8280 	beq.w	800238e <USBPD_PE_StateMachine_SNK+0x6ba>
 8001e8e:	1e49      	subs	r1, r1, #1
 8001e90:	f000 838f 	beq.w	80025b2 <USBPD_PE_StateMachine_SNK+0x8de>
 8001e94:	1e49      	subs	r1, r1, #1
 8001e96:	d044      	beq.n	8001f22 <USBPD_PE_StateMachine_SNK+0x24e>
 8001e98:	1e89      	subs	r1, r1, #2
 8001e9a:	f000 83cd 	beq.w	8002638 <USBPD_PE_StateMachine_SNK+0x964>
 8001e9e:	1e49      	subs	r1, r1, #1
 8001ea0:	2901      	cmp	r1, #1
 8001ea2:	d93e      	bls.n	8001f22 <USBPD_PE_StateMachine_SNK+0x24e>
 8001ea4:	1e89      	subs	r1, r1, #2
 8001ea6:	d001      	beq.n	8001eac <USBPD_PE_StateMachine_SNK+0x1d8>
 8001ea8:	1e89      	subs	r1, r1, #2
 8001eaa:	2905      	cmp	r1, #5
 8001eac:	f240 83f3 	bls.w	8002696 <USBPD_PE_StateMachine_SNK+0x9c2>
 8001eb0:	1f89      	subs	r1, r1, #6
 8001eb2:	f000 83ce 	beq.w	8002652 <USBPD_PE_StateMachine_SNK+0x97e>
 8001eb6:	1e49      	subs	r1, r1, #1
 8001eb8:	2903      	cmp	r1, #3
 8001eba:	d932      	bls.n	8001f22 <USBPD_PE_StateMachine_SNK+0x24e>
 8001ebc:	1f09      	subs	r1, r1, #4
 8001ebe:	f000 808d 	beq.w	8001fdc <USBPD_PE_StateMachine_SNK+0x308>
 8001ec2:	1e89      	subs	r1, r1, #2
 8001ec4:	f000 81da 	beq.w	800227c <USBPD_PE_StateMachine_SNK+0x5a8>
 8001ec8:	1ec9      	subs	r1, r1, #3
 8001eca:	f000 80a0 	beq.w	800200e <USBPD_PE_StateMachine_SNK+0x33a>
 8001ece:	1e49      	subs	r1, r1, #1
 8001ed0:	f000 80d7 	beq.w	8002082 <USBPD_PE_StateMachine_SNK+0x3ae>
 8001ed4:	1e49      	subs	r1, r1, #1
 8001ed6:	f000 80e3 	beq.w	80020a0 <USBPD_PE_StateMachine_SNK+0x3cc>
 8001eda:	1e49      	subs	r1, r1, #1
 8001edc:	f000 80fb 	beq.w	80020d6 <USBPD_PE_StateMachine_SNK+0x402>
 8001ee0:	1e49      	subs	r1, r1, #1
 8001ee2:	f000 8146 	beq.w	8002172 <USBPD_PE_StateMachine_SNK+0x49e>
 8001ee6:	1e89      	subs	r1, r1, #2
 8001ee8:	d0ac      	beq.n	8001e44 <USBPD_PE_StateMachine_SNK+0x170>
 8001eea:	1e89      	subs	r1, r1, #2
 8001eec:	d019      	beq.n	8001f22 <USBPD_PE_StateMachine_SNK+0x24e>
 8001eee:	1e49      	subs	r1, r1, #1
 8001ef0:	f000 8343 	beq.w	800257a <USBPD_PE_StateMachine_SNK+0x8a6>
 8001ef4:	1f09      	subs	r1, r1, #4
 8001ef6:	f000 8212 	beq.w	800231e <USBPD_PE_StateMachine_SNK+0x64a>
 8001efa:	1ec9      	subs	r1, r1, #3
 8001efc:	f000 82b2 	beq.w	8002464 <USBPD_PE_StateMachine_SNK+0x790>
 8001f00:	1f49      	subs	r1, r1, #5
 8001f02:	f000 82fb 	beq.w	80024fc <USBPD_PE_StateMachine_SNK+0x828>
 8001f06:	1e49      	subs	r1, r1, #1
 8001f08:	f000 8283 	beq.w	8002412 <USBPD_PE_StateMachine_SNK+0x73e>
 8001f0c:	3909      	subs	r1, #9
 8001f0e:	2902      	cmp	r1, #2
 8001f10:	d907      	bls.n	8001f22 <USBPD_PE_StateMachine_SNK+0x24e>
 8001f12:	1ec9      	subs	r1, r1, #3
 8001f14:	f000 835e 	beq.w	80025d4 <USBPD_PE_StateMachine_SNK+0x900>
 8001f18:	1e49      	subs	r1, r1, #1
 8001f1a:	f000 836b 	beq.w	80025f4 <USBPD_PE_StateMachine_SNK+0x920>
 8001f1e:	1e49      	subs	r1, r1, #1
 8001f20:	2901      	cmp	r1, #1
 8001f22:	f240 83bc 	bls.w	800269e <USBPD_PE_StateMachine_SNK+0x9ca>
 8001f26:	390d      	subs	r1, #13
 8001f28:	d0fb      	beq.n	8001f22 <USBPD_PE_StateMachine_SNK+0x24e>
 8001f2a:	3912      	subs	r1, #18
 8001f2c:	f000 83cc 	beq.w	80026c8 <USBPD_PE_StateMachine_SNK+0x9f4>
 8001f30:	390c      	subs	r1, #12
 8001f32:	d04a      	beq.n	8001fca <USBPD_PE_StateMachine_SNK+0x2f6>
 8001f34:	1e49      	subs	r1, r1, #1
 8001f36:	2902      	cmp	r1, #2
 8001f38:	d9f3      	bls.n	8001f22 <USBPD_PE_StateMachine_SNK+0x24e>
 8001f3a:	1f49      	subs	r1, r1, #5
 8001f3c:	f000 8213 	beq.w	8002366 <USBPD_PE_StateMachine_SNK+0x692>
 8001f40:	1e49      	subs	r1, r1, #1
 8001f42:	d0ee      	beq.n	8001f22 <USBPD_PE_StateMachine_SNK+0x24e>
 8001f44:	1e49      	subs	r1, r1, #1
 8001f46:	f000 813d 	beq.w	80021c4 <USBPD_PE_StateMachine_SNK+0x4f0>
 8001f4a:	1e49      	subs	r1, r1, #1
 8001f4c:	f000 817d 	beq.w	800224a <USBPD_PE_StateMachine_SNK+0x576>
 8001f50:	1e49      	subs	r1, r1, #1
 8001f52:	2908      	cmp	r1, #8
 8001f54:	f240 83a8 	bls.w	80026a8 <USBPD_PE_StateMachine_SNK+0x9d4>
 8001f58:	390b      	subs	r1, #11
 8001f5a:	f000 83bb 	beq.w	80026d4 <USBPD_PE_StateMachine_SNK+0xa00>
 8001f5e:	a903      	add	r1, sp, #12
 8001f60:	4628      	mov	r0, r5
 8001f62:	f002 f825 	bl	8003fb0 <PE_StateMachine_VDM>
 8001f66:	4604      	mov	r4, r0
 8001f68:	7c6a      	ldrb	r2, [r5, #17]
 8001f6a:	7ca8      	ldrb	r0, [r5, #18]
 8001f6c:	4290      	cmp	r0, r2
 8001f6e:	d004      	beq.n	8001f7a <USBPD_PE_StateMachine_SNK+0x2a6>
 8001f70:	74aa      	strb	r2, [r5, #18]
 8001f72:	f000 fc0a 	bl	800278a <.text_12>
 8001f76:	2004      	movs	r0, #4
 8001f78:	47b8      	blx	r7
 8001f7a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001f7e:	f8df 698c 	ldr.w	r6, [pc, #2444]	@ 800290c <.text_23>
 8001f82:	2814      	cmp	r0, #20
 8001f84:	f000 83b1 	beq.w	80026ea <USBPD_PE_StateMachine_SNK+0xa16>
 8001f88:	4628      	mov	r0, r5
 8001f8a:	f7fe fd4c 	bl	8000a26 <PE_Check_AMSConflict>
 8001f8e:	2815      	cmp	r0, #21
 8001f90:	d104      	bne.n	8001f9c <USBPD_PE_StateMachine_SNK+0x2c8>
 8001f92:	f000 fbea 	bl	800276a <.text_9+0x2>
 8001f96:	d001      	beq.n	8001f9c <USBPD_PE_StateMachine_SNK+0x2c8>
 8001f98:	f000 fc22 	bl	80027e0 <.text_20>
 8001f9c:	7c6a      	ldrb	r2, [r5, #17]
 8001f9e:	7ca8      	ldrb	r0, [r5, #18]
 8001fa0:	4290      	cmp	r0, r2
 8001fa2:	d004      	beq.n	8001fae <USBPD_PE_StateMachine_SNK+0x2da>
 8001fa4:	74aa      	strb	r2, [r5, #18]
 8001fa6:	f000 fbea 	bl	800277e <.text_11>
 8001faa:	2004      	movs	r0, #4
 8001fac:	47a0      	blx	r4
 8001fae:	2400      	movs	r4, #0
 8001fb0:	e3b7      	b.n	8002722 <USBPD_PE_StateMachine_SNK+0xa4e>
 8001fb2:	f04f 34ff 	mov.w	r4, #4294967295
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	e6d8      	b.n	8001d6c <USBPD_PE_StateMachine_SNK+0x98>
 8001fba:	f000 fbfc 	bl	80027b6 <.text_15>
 8001fbe:	215f      	movs	r1, #95	@ 0x5f
 8001fc0:	f000 fc07 	bl	80027d2 <.text_18>
 8001fc4:	f04f 34ff 	mov.w	r4, #4294967295
 8001fc8:	e7ce      	b.n	8001f68 <USBPD_PE_StateMachine_SNK+0x294>
 8001fca:	f000 fbf4 	bl	80027b6 <.text_15>
 8001fce:	68a8      	ldr	r0, [r5, #8]
 8001fd0:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8001fd2:	2900      	cmp	r1, #0
 8001fd4:	d0f6      	beq.n	8001fc4 <USBPD_PE_StateMachine_SNK+0x2f0>
 8001fd6:	7c28      	ldrb	r0, [r5, #16]
 8001fd8:	4788      	blx	r1
 8001fda:	e7f3      	b.n	8001fc4 <USBPD_PE_StateMachine_SNK+0x2f0>
 8001fdc:	6868      	ldr	r0, [r5, #4]
 8001fde:	6801      	ldr	r1, [r0, #0]
 8001fe0:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d0bf      	beq.n	8001f68 <USBPD_PE_StateMachine_SNK+0x294>
 8001fe8:	f001 0203 	and.w	r2, r1, #3
 8001fec:	6868      	ldr	r0, [r5, #4]
 8001fee:	2a01      	cmp	r2, #1
 8001ff0:	bf0c      	ite	eq
 8001ff2:	2200      	moveq	r2, #0
 8001ff4:	2220      	movne	r2, #32
 8001ff6:	f021 0120 	bic.w	r1, r1, #32
 8001ffa:	4311      	orrs	r1, r2
 8001ffc:	6001      	str	r1, [r0, #0]
 8001ffe:	2001      	movs	r0, #1
 8002000:	7728      	strb	r0, [r5, #28]
 8002002:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002006:	4644      	mov	r4, r8
 8002008:	2143      	movs	r1, #67	@ 0x43
 800200a:	7469      	strb	r1, [r5, #17]
 800200c:	e7ac      	b.n	8001f68 <USBPD_PE_StateMachine_SNK+0x294>
 800200e:	f000 fba7 	bl	8002760 <.text_8>
 8002012:	d12f      	bne.n	8002074 <USBPD_PE_StateMachine_SNK+0x3a0>
 8002014:	88b1      	ldrh	r1, [r6, #4]
 8002016:	0bc8      	lsrs	r0, r1, #15
 8002018:	d128      	bne.n	800206c <USBPD_PE_StateMachine_SNK+0x398>
 800201a:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800201e:	b328      	cbz	r0, 800206c <USBPD_PE_StateMachine_SNK+0x398>
 8002020:	4608      	mov	r0, r1
 8002022:	f000 011f 	and.w	r1, r0, #31
 8002026:	2901      	cmp	r1, #1
 8002028:	d120      	bne.n	800206c <USBPD_PE_StateMachine_SNK+0x398>
 800202a:	2200      	movs	r2, #0
 800202c:	70ba      	strb	r2, [r7, #2]
 800202e:	6969      	ldr	r1, [r5, #20]
 8002030:	f041 0104 	orr.w	r1, r1, #4
 8002034:	6169      	str	r1, [r5, #20]
 8002036:	f3c0 1181 	ubfx	r1, r0, #6, #2
 800203a:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800203e:	f7fe fdf6 	bl	8000c2e <PE_ExtRevisionInteroperability>
 8002042:	88b0      	ldrh	r0, [r6, #4]
 8002044:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8002048:	68b0      	ldr	r0, [r6, #8]
 800204a:	68ae      	ldr	r6, [r5, #8]
 800204c:	69b7      	ldr	r7, [r6, #24]
 800204e:	1c82      	adds	r2, r0, #2
 8002050:	7c28      	ldrb	r0, [r5, #16]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	2104      	movs	r1, #4
 8002056:	47b8      	blx	r7
 8002058:	2001      	movs	r0, #1
 800205a:	7728      	strb	r0, [r5, #28]
 800205c:	f000 fbab 	bl	80027b6 <.text_15>
 8002060:	2044      	movs	r0, #68	@ 0x44
 8002062:	7468      	strb	r0, [r5, #17]
 8002064:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002068:	2914      	cmp	r1, #20
 800206a:	d003      	beq.n	8002074 <USBPD_PE_StateMachine_SNK+0x3a0>
 800206c:	f000 fb74 	bl	8002758 <.text_7>
 8002070:	f000 fbb9 	bl	80027e6 <.text_20+0x6>
 8002074:	f000 fb6c 	bl	8002750 <.text_6>
 8002078:	d102      	bne.n	8002080 <USBPD_PE_StateMachine_SNK+0x3ac>
 800207a:	210f      	movs	r1, #15
 800207c:	7469      	strb	r1, [r5, #17]
 800207e:	2400      	movs	r4, #0
 8002080:	e772      	b.n	8001f68 <USBPD_PE_StateMachine_SNK+0x294>
 8002082:	68ab      	ldr	r3, [r5, #8]
 8002084:	7c28      	ldrb	r0, [r5, #16]
 8002086:	6a1c      	ldr	r4, [r3, #32]
 8002088:	466a      	mov	r2, sp
 800208a:	f105 0118 	add.w	r1, r5, #24
 800208e:	47a0      	blx	r4
 8002090:	9800      	ldr	r0, [sp, #0]
 8002092:	6969      	ldr	r1, [r5, #20]
 8002094:	f360 01c4 	bfi	r1, r0, #3, #2
 8002098:	2045      	movs	r0, #69	@ 0x45
 800209a:	6169      	str	r1, [r5, #20]
 800209c:	7468      	strb	r0, [r5, #17]
 800209e:	e7ee      	b.n	800207e <USBPD_PE_StateMachine_SNK+0x3aa>
 80020a0:	6968      	ldr	r0, [r5, #20]
 80020a2:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80020a6:	b100      	cbz	r0, 80020aa <USBPD_PE_StateMachine_SNK+0x3d6>
 80020a8:	2002      	movs	r0, #2
 80020aa:	9002      	str	r0, [sp, #8]
 80020ac:	2101      	movs	r1, #1
 80020ae:	2046      	movs	r0, #70	@ 0x46
 80020b0:	9001      	str	r0, [sp, #4]
 80020b2:	9100      	str	r1, [sp, #0]
 80020b4:	f105 0318 	add.w	r3, r5, #24
 80020b8:	2202      	movs	r2, #2
 80020ba:	2100      	movs	r1, #0
 80020bc:	4628      	mov	r0, r5
 80020be:	f7ff f9fc 	bl	80014ba <PE_Send_DataMessage>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	d106      	bne.n	80020d4 <USBPD_PE_StateMachine_SNK+0x400>
 80020c6:	6968      	ldr	r0, [r5, #20]
 80020c8:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 80020cc:	6168      	str	r0, [r5, #20]
 80020ce:	f8a5 b01e 	strh.w	fp, [r5, #30]
 80020d2:	241b      	movs	r4, #27
 80020d4:	e748      	b.n	8001f68 <USBPD_PE_StateMachine_SNK+0x294>
 80020d6:	f000 fb43 	bl	8002760 <.text_8>
 80020da:	bf04      	itt	eq
 80020dc:	88b0      	ldrheq	r0, [r6, #4]
 80020de:	f410 4f70 	tsteq.w	r0, #61440	@ 0xf000
 80020e2:	d142      	bne.n	800216a <USBPD_PE_StateMachine_SNK+0x496>
 80020e4:	f000 001f 	and.w	r0, r0, #31
 80020e8:	2802      	cmp	r0, #2
 80020ea:	bf18      	it	ne
 80020ec:	2803      	cmpne	r0, #3
 80020ee:	d019      	beq.n	8002124 <USBPD_PE_StateMachine_SNK+0x450>
 80020f0:	2804      	cmp	r0, #4
 80020f2:	bf18      	it	ne
 80020f4:	280c      	cmpne	r0, #12
 80020f6:	d124      	bne.n	8002142 <USBPD_PE_StateMachine_SNK+0x46e>
 80020f8:	6868      	ldr	r0, [r5, #4]
 80020fa:	6801      	ldr	r1, [r0, #0]
 80020fc:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002100:	2803      	cmp	r0, #3
 8002102:	d005      	beq.n	8002110 <USBPD_PE_StateMachine_SNK+0x43c>
 8002104:	2043      	movs	r0, #67	@ 0x43
 8002106:	7468      	strb	r0, [r5, #17]
 8002108:	f8a5 901e 	strh.w	r9, [r5, #30]
 800210c:	4644      	mov	r4, r8
 800210e:	e014      	b.n	800213a <USBPD_PE_StateMachine_SNK+0x466>
 8002110:	7930      	ldrb	r0, [r6, #4]
 8002112:	f000 001f 	and.w	r0, r0, #31
 8002116:	280c      	cmp	r0, #12
 8002118:	bf0c      	ite	eq
 800211a:	2049      	moveq	r0, #73	@ 0x49
 800211c:	2003      	movne	r0, #3
 800211e:	7468      	strb	r0, [r5, #17]
 8002120:	2400      	movs	r4, #0
 8002122:	e00a      	b.n	800213a <USBPD_PE_StateMachine_SNK+0x466>
 8002124:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002128:	f000 fb4f 	bl	80027ca <.text_17>
 800212c:	2047      	movs	r0, #71	@ 0x47
 800212e:	7468      	strb	r0, [r5, #17]
 8002130:	4644      	mov	r4, r8
 8002132:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002136:	2914      	cmp	r1, #20
 8002138:	d003      	beq.n	8002142 <USBPD_PE_StateMachine_SNK+0x46e>
 800213a:	f000 fb0d 	bl	8002758 <.text_7>
 800213e:	f000 fb52 	bl	80027e6 <.text_20+0x6>
 8002142:	7930      	ldrb	r0, [r6, #4]
 8002144:	f000 001f 	and.w	r0, r0, #31
 8002148:	2802      	cmp	r0, #2
 800214a:	d009      	beq.n	8002160 <USBPD_PE_StateMachine_SNK+0x48c>
 800214c:	2803      	cmp	r0, #3
 800214e:	d009      	beq.n	8002164 <USBPD_PE_StateMachine_SNK+0x490>
 8002150:	2804      	cmp	r0, #4
 8002152:	d003      	beq.n	800215c <USBPD_PE_StateMachine_SNK+0x488>
 8002154:	280c      	cmp	r0, #12
 8002156:	d108      	bne.n	800216a <USBPD_PE_StateMachine_SNK+0x496>
 8002158:	2103      	movs	r1, #3
 800215a:	e004      	b.n	8002166 <USBPD_PE_StateMachine_SNK+0x492>
 800215c:	2102      	movs	r1, #2
 800215e:	e002      	b.n	8002166 <USBPD_PE_StateMachine_SNK+0x492>
 8002160:	2104      	movs	r1, #4
 8002162:	e000      	b.n	8002166 <USBPD_PE_StateMachine_SNK+0x492>
 8002164:	2101      	movs	r1, #1
 8002166:	f000 fb34 	bl	80027d2 <.text_18>
 800216a:	f000 faf1 	bl	8002750 <.text_6>
 800216e:	d1b1      	bne.n	80020d4 <USBPD_PE_StateMachine_SNK+0x400>
 8002170:	e783      	b.n	800207a <USBPD_PE_StateMachine_SNK+0x3a6>
 8002172:	f000 faf5 	bl	8002760 <.text_8>
 8002176:	bf02      	ittt	eq
 8002178:	88b0      	ldrheq	r0, [r6, #4]
 800217a:	ea0a 0000 	andeq.w	r0, sl, r0
 800217e:	2806      	cmpeq	r0, #6
 8002180:	d1f3      	bne.n	800216a <USBPD_PE_StateMachine_SNK+0x496>
 8002182:	f000 fb2d 	bl	80027e0 <.text_20>
 8002186:	2103      	movs	r1, #3
 8002188:	f000 fb20 	bl	80027cc <.text_17+0x2>
 800218c:	7c28      	ldrb	r0, [r5, #16]
 800218e:	2110      	movs	r1, #16
 8002190:	f7fe f9dd 	bl	800054e <USBPD_PE_Notification>
 8002194:	f000 fb09 	bl	80027aa <.text_14>
 8002198:	bf1a      	itte	ne
 800219a:	6828      	ldrne	r0, [r5, #0]
 800219c:	6801      	ldrne	r1, [r0, #0]
 800219e:	2101      	moveq	r1, #1
 80021a0:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80021a4:	f002 fc82 	bl	8004aac <USBPD_PRL_SOPCapability>
 80021a8:	2000      	movs	r0, #0
 80021aa:	84a8      	strh	r0, [r5, #36]	@ 0x24
 80021ac:	6968      	ldr	r0, [r5, #20]
 80021ae:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80021b2:	2803      	cmp	r0, #3
 80021b4:	bf04      	itt	eq
 80021b6:	f24a 3028 	movweq	r0, #41768	@ 0xa328
 80021ba:	84a8      	strheq	r0, [r5, #36]	@ 0x24
 80021bc:	2103      	movs	r1, #3
 80021be:	7469      	strb	r1, [r5, #17]
 80021c0:	2400      	movs	r4, #0
 80021c2:	e7d2      	b.n	800216a <USBPD_PE_StateMachine_SNK+0x496>
 80021c4:	a903      	add	r1, sp, #12
 80021c6:	4628      	mov	r0, r5
 80021c8:	f001 fadc 	bl	8003784 <PE_StateMachine_VDMCable>
 80021cc:	e6cb      	b.n	8001f66 <USBPD_PE_StateMachine_SNK+0x292>
 80021ce:	f000 faec 	bl	80027aa <.text_14>
 80021d2:	bf1e      	ittt	ne
 80021d4:	68a8      	ldrne	r0, [r5, #8]
 80021d6:	6b02      	ldrne	r2, [r0, #48]	@ 0x30
 80021d8:	2a00      	cmpne	r2, #0
 80021da:	d002      	beq.n	80021e2 <USBPD_PE_StateMachine_SNK+0x50e>
 80021dc:	7c28      	ldrb	r0, [r5, #16]
 80021de:	2100      	movs	r1, #0
 80021e0:	4790      	blx	r2
 80021e2:	f000 fae8 	bl	80027b6 <.text_15>
 80021e6:	4628      	mov	r0, r5
 80021e8:	2101      	movs	r1, #1
 80021ea:	f7ff f897 	bl	800131c <PE_SetPowerNegotiation>
 80021ee:	78b8      	ldrb	r0, [r7, #2]
 80021f0:	2803      	cmp	r0, #3
 80021f2:	d30a      	bcc.n	800220a <USBPD_PE_StateMachine_SNK+0x536>
 80021f4:	6968      	ldr	r0, [r5, #20]
 80021f6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80021fa:	2800      	cmp	r0, #0
 80021fc:	bf1e      	ittt	ne
 80021fe:	68a9      	ldrne	r1, [r5, #8]
 8002200:	6b48      	ldrne	r0, [r1, #52]	@ 0x34
 8002202:	2800      	cmpne	r0, #0
 8002204:	d166      	bne.n	80022d4 <USBPD_PE_StateMachine_SNK+0x600>
 8002206:	2100      	movs	r1, #0
 8002208:	e6ff      	b.n	800200a <USBPD_PE_StateMachine_SNK+0x336>
 800220a:	1c40      	adds	r0, r0, #1
 800220c:	70b8      	strb	r0, [r7, #2]
 800220e:	2105      	movs	r1, #5
 8002210:	4628      	mov	r0, r5
 8002212:	f7fe fb6b 	bl	80008ec <PE_Send_RESET>
 8002216:	f248 30e8 	movw	r0, #33768	@ 0x83e8
 800221a:	83e8      	strh	r0, [r5, #30]
 800221c:	2201      	movs	r2, #1
 800221e:	f000 fad0 	bl	80027c2 <.text_16>
 8002222:	209b      	movs	r0, #155	@ 0x9b
 8002224:	e73a      	b.n	800209c <USBPD_PE_StateMachine_SNK+0x3c8>
 8002226:	f000 fac0 	bl	80027aa <.text_14>
 800222a:	bf1e      	ittt	ne
 800222c:	68a8      	ldrne	r0, [r5, #8]
 800222e:	6b02      	ldrne	r2, [r0, #48]	@ 0x30
 8002230:	2a00      	cmpne	r2, #0
 8002232:	d002      	beq.n	800223a <USBPD_PE_StateMachine_SNK+0x566>
 8002234:	7c28      	ldrb	r0, [r5, #16]
 8002236:	2100      	movs	r1, #0
 8002238:	4790      	blx	r2
 800223a:	2200      	movs	r2, #0
 800223c:	f000 fac1 	bl	80027c2 <.text_16>
 8002240:	f248 30e8 	movw	r0, #33768	@ 0x83e8
 8002244:	83e8      	strh	r0, [r5, #30]
 8002246:	219b      	movs	r1, #155	@ 0x9b
 8002248:	e718      	b.n	800207c <USBPD_PE_StateMachine_SNK+0x3a8>
 800224a:	68aa      	ldr	r2, [r5, #8]
 800224c:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002250:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002252:	4798      	blx	r3
 8002254:	2801      	cmp	r0, #1
 8002256:	d10d      	bne.n	8002274 <USBPD_PE_StateMachine_SNK+0x5a0>
 8002258:	f648 00e3 	movw	r0, #35043	@ 0x88e3
 800225c:	83e8      	strh	r0, [r5, #30]
 800225e:	2169      	movs	r1, #105	@ 0x69
 8002260:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002264:	f7fe f973 	bl	800054e <USBPD_PE_Notification>
 8002268:	2040      	movs	r0, #64	@ 0x40
 800226a:	7468      	strb	r0, [r5, #17]
 800226c:	2113      	movs	r1, #19
 800226e:	f000 fab0 	bl	80027d2 <.text_18>
 8002272:	2400      	movs	r4, #0
 8002274:	f000 fa6c 	bl	8002750 <.text_6>
 8002278:	d150      	bne.n	800231c <USBPD_PE_StateMachine_SNK+0x648>
 800227a:	e01b      	b.n	80022b4 <USBPD_PE_StateMachine_SNK+0x5e0>
 800227c:	68aa      	ldr	r2, [r5, #8]
 800227e:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002282:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002284:	2101      	movs	r1, #1
 8002286:	4798      	blx	r3
 8002288:	2801      	cmp	r0, #1
 800228a:	d110      	bne.n	80022ae <USBPD_PE_StateMachine_SNK+0x5da>
 800228c:	4628      	mov	r0, r5
 800228e:	f7fe fc2c 	bl	8000aea <PE_Reset_HardReset>
 8002292:	2205      	movs	r2, #5
 8002294:	2100      	movs	r1, #0
 8002296:	f000 fa95 	bl	80027c4 <.text_16+0x2>
 800229a:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800229e:	2168      	movs	r1, #104	@ 0x68
 80022a0:	f7fe f955 	bl	800054e <USBPD_PE_Notification>
 80022a4:	f8a5 901e 	strh.w	r9, [r5, #30]
 80022a8:	2043      	movs	r0, #67	@ 0x43
 80022aa:	4644      	mov	r4, r8
 80022ac:	7468      	strb	r0, [r5, #17]
 80022ae:	f000 fa4f 	bl	8002750 <.text_6>
 80022b2:	d133      	bne.n	800231c <USBPD_PE_StateMachine_SNK+0x648>
 80022b4:	2206      	movs	r2, #6
 80022b6:	2100      	movs	r1, #0
 80022b8:	f000 fa84 	bl	80027c4 <.text_16+0x2>
 80022bc:	78b8      	ldrb	r0, [r7, #2]
 80022be:	2803      	cmp	r0, #3
 80022c0:	f4ff aedb 	bcc.w	800207a <USBPD_PE_StateMachine_SNK+0x3a6>
 80022c4:	6968      	ldr	r0, [r5, #20]
 80022c6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80022ca:	2800      	cmp	r0, #0
 80022cc:	bf1e      	ittt	ne
 80022ce:	68a9      	ldrne	r1, [r5, #8]
 80022d0:	6b48      	ldrne	r0, [r1, #52]	@ 0x34
 80022d2:	2800      	cmpne	r0, #0
 80022d4:	f040 80c4 	bne.w	8002460 <USBPD_PE_StateMachine_SNK+0x78c>
 80022d8:	2100      	movs	r1, #0
 80022da:	7469      	strb	r1, [r5, #17]
 80022dc:	e6cf      	b.n	800207e <USBPD_PE_StateMachine_SNK+0x3aa>
 80022de:	2000      	movs	r0, #0
 80022e0:	9000      	str	r0, [sp, #0]
 80022e2:	2303      	movs	r3, #3
 80022e4:	2203      	movs	r2, #3
 80022e6:	f000 fa78 	bl	80027da <.text_19+0x2>
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d116      	bne.n	800231c <USBPD_PE_StateMachine_SNK+0x648>
 80022ee:	e686      	b.n	8001ffe <USBPD_PE_StateMachine_SNK+0x32a>
 80022f0:	6868      	ldr	r0, [r5, #4]
 80022f2:	6801      	ldr	r1, [r0, #0]
 80022f4:	f3c1 2002 	ubfx	r0, r1, #8, #3
 80022f8:	2804      	cmp	r0, #4
 80022fa:	f43f aebe 	beq.w	800207a <USBPD_PE_StateMachine_SNK+0x3a6>
 80022fe:	2000      	movs	r0, #0
 8002300:	9000      	str	r0, [sp, #0]
 8002302:	2350      	movs	r3, #80	@ 0x50
 8002304:	7871      	ldrb	r1, [r6, #1]
 8002306:	220d      	movs	r2, #13
 8002308:	f000 fa67 	bl	80027da <.text_19+0x2>
 800230c:	2800      	cmp	r0, #0
 800230e:	d105      	bne.n	800231c <USBPD_PE_StateMachine_SNK+0x648>
 8002310:	2003      	movs	r0, #3
 8002312:	f000 fa18 	bl	8002746 <.text_5>
 8002316:	2130      	movs	r1, #48	@ 0x30
 8002318:	f000 fa5b 	bl	80027d2 <.text_18>
 800231c:	e624      	b.n	8001f68 <USBPD_PE_StateMachine_SNK+0x294>
 800231e:	f000 fa24 	bl	800276a <.text_9+0x2>
 8002322:	d013      	beq.n	800234c <USBPD_PE_StateMachine_SNK+0x678>
 8002324:	7831      	ldrb	r1, [r6, #0]
 8002326:	7870      	ldrb	r0, [r6, #1]
 8002328:	4281      	cmp	r1, r0
 800232a:	bf02      	ittt	eq
 800232c:	88b1      	ldrheq	r1, [r6, #4]
 800232e:	ea0a 0001 	andeq.w	r0, sl, r1
 8002332:	2803      	cmpeq	r0, #3
 8002334:	d10a      	bne.n	800234c <USBPD_PE_StateMachine_SNK+0x678>
 8002336:	2001      	movs	r0, #1
 8002338:	7728      	strb	r0, [r5, #28]
 800233a:	f8a5 901e 	strh.w	r9, [r5, #30]
 800233e:	2143      	movs	r1, #67	@ 0x43
 8002340:	7469      	strb	r1, [r5, #17]
 8002342:	f000 fa09 	bl	8002758 <.text_7>
 8002346:	4644      	mov	r4, r8
 8002348:	f000 fa4d 	bl	80027e6 <.text_20+0x6>
 800234c:	e70d      	b.n	800216a <USBPD_PE_StateMachine_SNK+0x496>
 800234e:	9400      	str	r4, [sp, #0]
 8002350:	2343      	movs	r3, #67	@ 0x43
 8002352:	2207      	movs	r2, #7
 8002354:	f000 fa40 	bl	80027d8 <.text_19>
 8002358:	2800      	cmp	r0, #0
 800235a:	d117      	bne.n	800238c <USBPD_PE_StateMachine_SNK+0x6b8>
 800235c:	2006      	movs	r0, #6
 800235e:	f000 f9f2 	bl	8002746 <.text_5>
 8002362:	210b      	movs	r1, #11
 8002364:	e7d8      	b.n	8002318 <USBPD_PE_StateMachine_SNK+0x644>
 8002366:	f000 f9fb 	bl	8002760 <.text_8>
 800236a:	bf02      	ittt	eq
 800236c:	88b0      	ldrheq	r0, [r6, #4]
 800236e:	ea0a 0000 	andeq.w	r0, sl, r0
 8002372:	2806      	cmpeq	r0, #6
 8002374:	d10a      	bne.n	800238c <USBPD_PE_StateMachine_SNK+0x6b8>
 8002376:	7c28      	ldrb	r0, [r5, #16]
 8002378:	212c      	movs	r1, #44	@ 0x2c
 800237a:	f7fe f8e8 	bl	800054e <USBPD_PE_Notification>
 800237e:	2003      	movs	r0, #3
 8002380:	7468      	strb	r0, [r5, #17]
 8002382:	f000 f9f1 	bl	8002768 <.text_9>
 8002386:	d001      	beq.n	800238c <USBPD_PE_StateMachine_SNK+0x6b8>
 8002388:	f000 fa2a 	bl	80027e0 <.text_20>
 800238c:	e5ec      	b.n	8001f68 <USBPD_PE_StateMachine_SNK+0x294>
 800238e:	2000      	movs	r0, #0
 8002390:	9000      	str	r0, [sp, #0]
 8002392:	2303      	movs	r3, #3
 8002394:	2204      	movs	r2, #4
 8002396:	f000 fa20 	bl	80027da <.text_19+0x2>
 800239a:	e5e5      	b.n	8001f68 <USBPD_PE_StateMachine_SNK+0x294>
 800239c:	2804      	cmp	r0, #4
 800239e:	d006      	beq.n	80023ae <USBPD_PE_StateMachine_SNK+0x6da>
 80023a0:	2000      	movs	r0, #0
 80023a2:	7728      	strb	r0, [r5, #28]
 80023a4:	2104      	movs	r1, #4
 80023a6:	7469      	strb	r1, [r5, #17]
 80023a8:	2120      	movs	r1, #32
 80023aa:	f000 fa12 	bl	80027d2 <.text_18>
 80023ae:	a903      	add	r1, sp, #12
 80023b0:	4628      	mov	r0, r5
 80023b2:	f000 fa1b 	bl	80027ec <PE_StateMachine_SNK_ReadyWait>
 80023b6:	e5d6      	b.n	8001f66 <USBPD_PE_StateMachine_SNK+0x292>
 80023b8:	68a8      	ldr	r0, [r5, #8]
 80023ba:	6881      	ldr	r1, [r0, #8]
 80023bc:	b339      	cbz	r1, 800240e <USBPD_PE_StateMachine_SNK+0x73a>
 80023be:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80023c2:	4788      	blx	r1
 80023c4:	280a      	cmp	r0, #10
 80023c6:	d002      	beq.n	80023ce <USBPD_PE_StateMachine_SNK+0x6fa>
 80023c8:	280d      	cmp	r0, #13
 80023ca:	d01a      	beq.n	8002402 <USBPD_PE_StateMachine_SNK+0x72e>
 80023cc:	e01f      	b.n	800240e <USBPD_PE_StateMachine_SNK+0x73a>
 80023ce:	f000 f9b6 	bl	800273e <.text_4>
 80023d2:	2201      	movs	r2, #1
 80023d4:	2100      	movs	r1, #0
 80023d6:	47b0      	blx	r6
 80023d8:	2000      	movs	r0, #0
 80023da:	9000      	str	r0, [sp, #0]
 80023dc:	2359      	movs	r3, #89	@ 0x59
 80023de:	2203      	movs	r2, #3
 80023e0:	f000 f9fa 	bl	80027d8 <.text_19>
 80023e4:	2800      	cmp	r0, #0
 80023e6:	d10b      	bne.n	8002400 <USBPD_PE_StateMachine_SNK+0x72c>
 80023e8:	2008      	movs	r0, #8
 80023ea:	7728      	strb	r0, [r5, #28]
 80023ec:	2206      	movs	r2, #6
 80023ee:	f000 f9c0 	bl	8002772 <.text_10>
 80023f2:	2100      	movs	r1, #0
 80023f4:	68ab      	ldr	r3, [r5, #8]
 80023f6:	7c28      	ldrb	r0, [r5, #16]
 80023f8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80023fa:	47a0      	blx	r4
 80023fc:	f000 f999 	bl	8002732 <.text_3>
 8002400:	e5b2      	b.n	8001f68 <USBPD_PE_StateMachine_SNK+0x294>
 8002402:	2000      	movs	r0, #0
 8002404:	9000      	str	r0, [sp, #0]
 8002406:	2303      	movs	r3, #3
 8002408:	220c      	movs	r2, #12
 800240a:	2100      	movs	r1, #0
 800240c:	e7c3      	b.n	8002396 <USBPD_PE_StateMachine_SNK+0x6c2>
 800240e:	202a      	movs	r0, #42	@ 0x2a
 8002410:	e644      	b.n	800209c <USBPD_PE_StateMachine_SNK+0x3c8>
 8002412:	f000 f9a5 	bl	8002760 <.text_8>
 8002416:	bf02      	ittt	eq
 8002418:	88b0      	ldrheq	r0, [r6, #4]
 800241a:	ea0a 0000 	andeq.w	r0, sl, r0
 800241e:	2806      	cmpeq	r0, #6
 8002420:	d110      	bne.n	8002444 <USBPD_PE_StateMachine_SNK+0x770>
 8002422:	7f28      	ldrb	r0, [r5, #28]
 8002424:	2809      	cmp	r0, #9
 8002426:	d003      	beq.n	8002430 <USBPD_PE_StateMachine_SNK+0x75c>
 8002428:	f000 f989 	bl	800273e <.text_4>
 800242c:	2209      	movs	r2, #9
 800242e:	47b0      	blx	r6
 8002430:	2053      	movs	r0, #83	@ 0x53
 8002432:	7468      	strb	r0, [r5, #17]
 8002434:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002438:	2914      	cmp	r1, #20
 800243a:	d003      	beq.n	8002444 <USBPD_PE_StateMachine_SNK+0x770>
 800243c:	f000 f98c 	bl	8002758 <.text_7>
 8002440:	f000 f9d1 	bl	80027e6 <.text_20+0x6>
 8002444:	f000 f984 	bl	8002750 <.text_6>
 8002448:	d1da      	bne.n	8002400 <USBPD_PE_StateMachine_SNK+0x72c>
 800244a:	68ab      	ldr	r3, [r5, #8]
 800244c:	7c28      	ldrb	r0, [r5, #16]
 800244e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002450:	220f      	movs	r2, #15
 8002452:	2100      	movs	r1, #0
 8002454:	47a0      	blx	r4
 8002456:	68a9      	ldr	r1, [r5, #8]
 8002458:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800245a:	2800      	cmp	r0, #0
 800245c:	f43f ae0d 	beq.w	800207a <USBPD_PE_StateMachine_SNK+0x3a6>
 8002460:	2192      	movs	r1, #146	@ 0x92
 8002462:	e60b      	b.n	800207c <USBPD_PE_StateMachine_SNK+0x3a8>
 8002464:	f000 f9b1 	bl	80027ca <.text_17>
 8002468:	f000 f969 	bl	800273e <.text_4>
 800246c:	220a      	movs	r2, #10
 800246e:	2100      	movs	r1, #0
 8002470:	47b0      	blx	r6
 8002472:	6868      	ldr	r0, [r5, #4]
 8002474:	7801      	ldrb	r1, [r0, #0]
 8002476:	f001 0103 	and.w	r1, r1, #3
 800247a:	2902      	cmp	r1, #2
 800247c:	bf04      	itt	eq
 800247e:	7c28      	ldrbeq	r0, [r5, #16]
 8002480:	f002 fb01 	bleq	8004a86 <USBPD_PRL_SRCSetSinkNG>
 8002484:	2101      	movs	r1, #1
 8002486:	4628      	mov	r0, r5
 8002488:	f7fe fa50 	bl	800092c <PE_ChangePowerRole>
 800248c:	7f28      	ldrb	r0, [r5, #28]
 800248e:	2809      	cmp	r0, #9
 8002490:	d004      	beq.n	800249c <USBPD_PE_StateMachine_SNK+0x7c8>
 8002492:	f000 f954 	bl	800273e <.text_4>
 8002496:	220b      	movs	r2, #11
 8002498:	2101      	movs	r1, #1
 800249a:	47b0      	blx	r6
 800249c:	2000      	movs	r0, #0
 800249e:	9000      	str	r0, [sp, #0]
 80024a0:	235b      	movs	r3, #91	@ 0x5b
 80024a2:	2206      	movs	r2, #6
 80024a4:	f000 f998 	bl	80027d8 <.text_19>
 80024a8:	b948      	cbnz	r0, 80024be <USBPD_PE_StateMachine_SNK+0x7ea>
 80024aa:	68ab      	ldr	r3, [r5, #8]
 80024ac:	7c28      	ldrb	r0, [r5, #16]
 80024ae:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80024b0:	220c      	movs	r2, #12
 80024b2:	2100      	movs	r1, #0
 80024b4:	47a0      	blx	r4
 80024b6:	f248 0014 	movw	r0, #32788	@ 0x8014
 80024ba:	83e8      	strh	r0, [r5, #30]
 80024bc:	2414      	movs	r4, #20
 80024be:	7c68      	ldrb	r0, [r5, #17]
 80024c0:	285b      	cmp	r0, #91	@ 0x5b
 80024c2:	d00d      	beq.n	80024e0 <USBPD_PE_StateMachine_SNK+0x80c>
 80024c4:	2100      	movs	r1, #0
 80024c6:	4628      	mov	r0, r5
 80024c8:	f7fe fa30 	bl	800092c <PE_ChangePowerRole>
 80024cc:	f000 f937 	bl	800273e <.text_4>
 80024d0:	2206      	movs	r2, #6
 80024d2:	2101      	movs	r1, #1
 80024d4:	47b0      	blx	r6
 80024d6:	2207      	movs	r2, #7
 80024d8:	f000 f931 	bl	800273e <.text_4>
 80024dc:	2100      	movs	r1, #0
 80024de:	47b0      	blx	r6
 80024e0:	e542      	b.n	8001f68 <USBPD_PE_StateMachine_SNK+0x294>
 80024e2:	9400      	str	r4, [sp, #0]
 80024e4:	2358      	movs	r3, #88	@ 0x58
 80024e6:	220a      	movs	r2, #10
 80024e8:	f000 f977 	bl	80027da <.text_19+0x2>
 80024ec:	b920      	cbnz	r0, 80024f8 <USBPD_PE_StateMachine_SNK+0x824>
 80024ee:	2008      	movs	r0, #8
 80024f0:	f000 f929 	bl	8002746 <.text_5>
 80024f4:	2202      	movs	r2, #2
 80024f6:	e7ef      	b.n	80024d8 <USBPD_PE_StateMachine_SNK+0x804>
 80024f8:	220f      	movs	r2, #15
 80024fa:	e7ed      	b.n	80024d8 <USBPD_PE_StateMachine_SNK+0x804>
 80024fc:	f000 f930 	bl	8002760 <.text_8>
 8002500:	bf04      	itt	eq
 8002502:	88b0      	ldrheq	r0, [r6, #4]
 8002504:	f410 4f70 	tsteq.w	r0, #61440	@ 0xf000
 8002508:	d109      	bne.n	800251e <USBPD_PE_StateMachine_SNK+0x84a>
 800250a:	f000 001f 	and.w	r0, r0, #31
 800250e:	2803      	cmp	r0, #3
 8002510:	d006      	beq.n	8002520 <USBPD_PE_StateMachine_SNK+0x84c>
 8002512:	2804      	cmp	r0, #4
 8002514:	d020      	beq.n	8002558 <USBPD_PE_StateMachine_SNK+0x884>
 8002516:	280c      	cmp	r0, #12
 8002518:	d01c      	beq.n	8002554 <USBPD_PE_StateMachine_SNK+0x880>
 800251a:	2810      	cmp	r0, #16
 800251c:	d023      	beq.n	8002566 <USBPD_PE_StateMachine_SNK+0x892>
 800251e:	e087      	b.n	8002630 <USBPD_PE_StateMachine_SNK+0x95c>
 8002520:	f000 f927 	bl	8002772 <.text_10>
 8002524:	f000 f905 	bl	8002732 <.text_3>
 8002528:	7f28      	ldrb	r0, [r5, #28]
 800252a:	2809      	cmp	r0, #9
 800252c:	d004      	beq.n	8002538 <USBPD_PE_StateMachine_SNK+0x864>
 800252e:	f000 f906 	bl	800273e <.text_4>
 8002532:	2206      	movs	r2, #6
 8002534:	2100      	movs	r1, #0
 8002536:	47b0      	blx	r6
 8002538:	f000 f947 	bl	80027ca <.text_17>
 800253c:	7c28      	ldrb	r0, [r5, #16]
 800253e:	213a      	movs	r1, #58	@ 0x3a
 8002540:	f7fe f805 	bl	800054e <USBPD_PE_Notification>
 8002544:	f000 f911 	bl	800276a <.text_9+0x2>
 8002548:	d001      	beq.n	800254e <USBPD_PE_StateMachine_SNK+0x87a>
 800254a:	f000 f949 	bl	80027e0 <.text_20>
 800254e:	2059      	movs	r0, #89	@ 0x59
 8002550:	7468      	strb	r0, [r5, #17]
 8002552:	e06d      	b.n	8002630 <USBPD_PE_StateMachine_SNK+0x95c>
 8002554:	213b      	movs	r1, #59	@ 0x3b
 8002556:	e000      	b.n	800255a <USBPD_PE_StateMachine_SNK+0x886>
 8002558:	2116      	movs	r1, #22
 800255a:	f000 f93a 	bl	80027d2 <.text_18>
 800255e:	f000 f904 	bl	800276a <.text_9+0x2>
 8002562:	d107      	bne.n	8002574 <USBPD_PE_StateMachine_SNK+0x8a0>
 8002564:	e061      	b.n	800262a <USBPD_PE_StateMachine_SNK+0x956>
 8002566:	7c28      	ldrb	r0, [r5, #16]
 8002568:	2117      	movs	r1, #23
 800256a:	f7fd fff0 	bl	800054e <USBPD_PE_Notification>
 800256e:	f000 f8fc 	bl	800276a <.text_9+0x2>
 8002572:	d05a      	beq.n	800262a <USBPD_PE_StateMachine_SNK+0x956>
 8002574:	f000 f934 	bl	80027e0 <.text_20>
 8002578:	e057      	b.n	800262a <USBPD_PE_StateMachine_SNK+0x956>
 800257a:	9104      	str	r1, [sp, #16]
 800257c:	ab04      	add	r3, sp, #16
 800257e:	68ae      	ldr	r6, [r5, #8]
 8002580:	7c28      	ldrb	r0, [r5, #16]
 8002582:	6977      	ldr	r7, [r6, #20]
 8002584:	aa05      	add	r2, sp, #20
 8002586:	47b8      	blx	r7
 8002588:	9804      	ldr	r0, [sp, #16]
 800258a:	2104      	movs	r1, #4
 800258c:	f7fe ff08 	bl	80013a0 <PE_CheckDataSizeFromGetDataInfo>
 8002590:	b110      	cbz	r0, 8002598 <USBPD_PE_StateMachine_SNK+0x8c4>
 8002592:	2003      	movs	r0, #3
 8002594:	7468      	strb	r0, [r5, #17]
 8002596:	e4e7      	b.n	8001f68 <USBPD_PE_StateMachine_SNK+0x294>
 8002598:	9a04      	ldr	r2, [sp, #16]
 800259a:	2003      	movs	r0, #3
 800259c:	0892      	lsrs	r2, r2, #2
 800259e:	2100      	movs	r1, #0
 80025a0:	9001      	str	r0, [sp, #4]
 80025a2:	9200      	str	r2, [sp, #0]
 80025a4:	9102      	str	r1, [sp, #8]
 80025a6:	ab05      	add	r3, sp, #20
 80025a8:	2201      	movs	r2, #1
 80025aa:	4628      	mov	r0, r5
 80025ac:	f7fe ff85 	bl	80014ba <PE_Send_DataMessage>
 80025b0:	e4da      	b.n	8001f68 <USBPD_PE_StateMachine_SNK+0x294>
 80025b2:	2000      	movs	r0, #0
 80025b4:	2103      	movs	r1, #3
 80025b6:	2201      	movs	r2, #1
 80025b8:	9002      	str	r0, [sp, #8]
 80025ba:	9101      	str	r1, [sp, #4]
 80025bc:	9200      	str	r2, [sp, #0]
 80025be:	f105 032c 	add.w	r3, r5, #44	@ 0x2c
 80025c2:	2206      	movs	r2, #6
 80025c4:	2100      	movs	r1, #0
 80025c6:	4628      	mov	r0, r5
 80025c8:	f7fe ff77 	bl	80014ba <PE_Send_DataMessage>
 80025cc:	2800      	cmp	r0, #0
 80025ce:	d1ef      	bne.n	80025b0 <USBPD_PE_StateMachine_SNK+0x8dc>
 80025d0:	215d      	movs	r1, #93	@ 0x5d
 80025d2:	e6a1      	b.n	8002318 <USBPD_PE_StateMachine_SNK+0x644>
 80025d4:	9400      	str	r4, [sp, #0]
 80025d6:	2366      	movs	r3, #102	@ 0x66
 80025d8:	2214      	movs	r2, #20
 80025da:	f000 f8fe 	bl	80027da <.text_19+0x2>
 80025de:	2800      	cmp	r0, #0
 80025e0:	d107      	bne.n	80025f2 <USBPD_PE_StateMachine_SNK+0x91e>
 80025e2:	f8a5 b01e 	strh.w	fp, [r5, #30]
 80025e6:	214a      	movs	r1, #74	@ 0x4a
 80025e8:	f000 f8f3 	bl	80027d2 <.text_18>
 80025ec:	200b      	movs	r0, #11
 80025ee:	241b      	movs	r4, #27
 80025f0:	7728      	strb	r0, [r5, #28]
 80025f2:	e4b9      	b.n	8001f68 <USBPD_PE_StateMachine_SNK+0x294>
 80025f4:	f000 f8b4 	bl	8002760 <.text_8>
 80025f8:	d11a      	bne.n	8002630 <USBPD_PE_StateMachine_SNK+0x95c>
 80025fa:	88b1      	ldrh	r1, [r6, #4]
 80025fc:	0bc8      	lsrs	r0, r1, #15
 80025fe:	d017      	beq.n	8002630 <USBPD_PE_StateMachine_SNK+0x95c>
 8002600:	f001 011f 	and.w	r1, r1, #31
 8002604:	290c      	cmp	r1, #12
 8002606:	d113      	bne.n	8002630 <USBPD_PE_StateMachine_SNK+0x95c>
 8002608:	68b0      	ldr	r0, [r6, #8]
 800260a:	68ac      	ldr	r4, [r5, #8]
 800260c:	69a6      	ldr	r6, [r4, #24]
 800260e:	1d02      	adds	r2, r0, #4
 8002610:	7c28      	ldrb	r0, [r5, #16]
 8002612:	2304      	movs	r3, #4
 8002614:	210a      	movs	r1, #10
 8002616:	47b0      	blx	r6
 8002618:	f000 f8a7 	bl	800276a <.text_9+0x2>
 800261c:	d001      	beq.n	8002622 <USBPD_PE_StateMachine_SNK+0x94e>
 800261e:	f000 f8df 	bl	80027e0 <.text_20>
 8002622:	7c28      	ldrb	r0, [r5, #16]
 8002624:	214b      	movs	r1, #75	@ 0x4b
 8002626:	f7fd ff92 	bl	800054e <USBPD_PE_Notification>
 800262a:	2003      	movs	r0, #3
 800262c:	7468      	strb	r0, [r5, #17]
 800262e:	2400      	movs	r4, #0
 8002630:	f000 f88e 	bl	8002750 <.text_6>
 8002634:	d1dd      	bne.n	80025f2 <USBPD_PE_StateMachine_SNK+0x91e>
 8002636:	e02c      	b.n	8002692 <USBPD_PE_StateMachine_SNK+0x9be>
 8002638:	9400      	str	r4, [sp, #0]
 800263a:	2339      	movs	r3, #57	@ 0x39
 800263c:	783a      	ldrb	r2, [r7, #0]
 800263e:	f000 f8cb 	bl	80027d8 <.text_19>
 8002642:	2800      	cmp	r0, #0
 8002644:	d1d5      	bne.n	80025f2 <USBPD_PE_StateMachine_SNK+0x91e>
 8002646:	7878      	ldrb	r0, [r7, #1]
 8002648:	7728      	strb	r0, [r5, #28]
 800264a:	2144      	movs	r1, #68	@ 0x44
 800264c:	f000 f8c1 	bl	80027d2 <.text_18>
 8002650:	e53d      	b.n	80020ce <USBPD_PE_StateMachine_SNK+0x3fa>
 8002652:	f000 f88a 	bl	800276a <.text_9+0x2>
 8002656:	d019      	beq.n	800268c <USBPD_PE_StateMachine_SNK+0x9b8>
 8002658:	88b0      	ldrh	r0, [r6, #4]
 800265a:	0bc0      	lsrs	r0, r0, #15
 800265c:	d009      	beq.n	8002672 <USBPD_PE_StateMachine_SNK+0x99e>
 800265e:	4628      	mov	r0, r5
 8002660:	f7fe ff68 	bl	8001534 <PE_Check_ExtendedMessage>
 8002664:	f000 f881 	bl	800276a <.text_9+0x2>
 8002668:	d001      	beq.n	800266e <USBPD_PE_StateMachine_SNK+0x99a>
 800266a:	f000 f8b9 	bl	80027e0 <.text_20>
 800266e:	2000      	movs	r0, #0
 8002670:	83e8      	strh	r0, [r5, #30]
 8002672:	88b0      	ldrh	r0, [r6, #4]
 8002674:	ea0a 0000 	and.w	r0, sl, r0
 8002678:	2810      	cmp	r0, #16
 800267a:	d107      	bne.n	800268c <USBPD_PE_StateMachine_SNK+0x9b8>
 800267c:	2103      	movs	r1, #3
 800267e:	7469      	strb	r1, [r5, #17]
 8002680:	f000 f872 	bl	8002768 <.text_9>
 8002684:	d001      	beq.n	800268a <USBPD_PE_StateMachine_SNK+0x9b6>
 8002686:	f000 f8ab 	bl	80027e0 <.text_20>
 800268a:	83ec      	strh	r4, [r5, #30]
 800268c:	f000 f860 	bl	8002750 <.text_6>
 8002690:	d119      	bne.n	80026c6 <USBPD_PE_StateMachine_SNK+0x9f2>
 8002692:	2103      	movs	r1, #3
 8002694:	e4f2      	b.n	800207c <USBPD_PE_StateMachine_SNK+0x3a8>
 8002696:	4628      	mov	r0, r5
 8002698:	f7ff f855 	bl	8001746 <PE_SubStateMachine_ExtendedMessages>
 800269c:	e463      	b.n	8001f66 <USBPD_PE_StateMachine_SNK+0x292>
 800269e:	a903      	add	r1, sp, #12
 80026a0:	4628      	mov	r0, r5
 80026a2:	f7fe fb85 	bl	8000db0 <PE_SubStateMachine_Generic>
 80026a6:	e45e      	b.n	8001f66 <USBPD_PE_StateMachine_SNK+0x292>
 80026a8:	a903      	add	r1, sp, #12
 80026aa:	4628      	mov	r0, r5
 80026ac:	f001 f98b 	bl	80039c6 <PE_SubStateMachine_VconnSwap>
 80026b0:	4604      	mov	r4, r0
 80026b2:	f000 f87a 	bl	80027aa <.text_14>
 80026b6:	bf0e      	itee	eq
 80026b8:	2101      	moveq	r1, #1
 80026ba:	6828      	ldrne	r0, [r5, #0]
 80026bc:	6801      	ldrne	r1, [r0, #0]
 80026be:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80026c2:	f002 f9f3 	bl	8004aac <USBPD_PRL_SOPCapability>
 80026c6:	e44f      	b.n	8001f68 <USBPD_PE_StateMachine_SNK+0x294>
 80026c8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80026cc:	4628      	mov	r0, r5
 80026ce:	f001 ffb9 	bl	8004644 <PE_StateMachine_UVDM>
 80026d2:	e449      	b.n	8001f68 <USBPD_PE_StateMachine_SNK+0x294>
 80026d4:	2000      	movs	r0, #0
 80026d6:	9000      	str	r0, [sp, #0]
 80026d8:	2358      	movs	r3, #88	@ 0x58
 80026da:	2213      	movs	r2, #19
 80026dc:	f000 f87d 	bl	80027da <.text_19+0x2>
 80026e0:	2800      	cmp	r0, #0
 80026e2:	d1f6      	bne.n	80026d2 <USBPD_PE_StateMachine_SNK+0x9fe>
 80026e4:	2009      	movs	r0, #9
 80026e6:	7728      	strb	r0, [r5, #28]
 80026e8:	e4f1      	b.n	80020ce <USBPD_PE_StateMachine_SNK+0x3fa>
 80026ea:	6968      	ldr	r0, [r5, #20]
 80026ec:	f3c0 3040 	ubfx	r0, r0, #13, #1
 80026f0:	b1b8      	cbz	r0, 8002722 <USBPD_PE_StateMachine_SNK+0xa4e>
 80026f2:	6968      	ldr	r0, [r5, #20]
 80026f4:	f3c0 3080 	ubfx	r0, r0, #14, #1
 80026f8:	b138      	cbz	r0, 800270a <USBPD_PE_StateMachine_SNK+0xa36>
 80026fa:	7c28      	ldrb	r0, [r5, #16]
 80026fc:	215b      	movs	r1, #91	@ 0x5b
 80026fe:	f7fd ff26 	bl	800054e <USBPD_PE_Notification>
 8002702:	6968      	ldr	r0, [r5, #20]
 8002704:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 8002708:	6168      	str	r0, [r5, #20]
 800270a:	2003      	movs	r0, #3
 800270c:	7ca9      	ldrb	r1, [r5, #18]
 800270e:	7468      	strb	r0, [r5, #17]
 8002710:	2903      	cmp	r1, #3
 8002712:	d005      	beq.n	8002720 <USBPD_PE_StateMachine_SNK+0xa4c>
 8002714:	74a8      	strb	r0, [r5, #18]
 8002716:	f000 f832 	bl	800277e <.text_11>
 800271a:	2203      	movs	r2, #3
 800271c:	2004      	movs	r0, #4
 800271e:	47a0      	blx	r4
 8002720:	2401      	movs	r4, #1
 8002722:	6968      	ldr	r0, [r5, #20]
 8002724:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
 8002728:	2c00      	cmp	r4, #0
 800272a:	6168      	str	r0, [r5, #20]
 800272c:	f43f ab29 	beq.w	8001d82 <USBPD_PE_StateMachine_SNK+0xae>
 8002730:	e441      	b.n	8001fb6 <USBPD_PE_StateMachine_SNK+0x2e2>

08002732 <.text_3>:
 8002732:	f248 3084 	movw	r0, #33668	@ 0x8384
 8002736:	83e8      	strh	r0, [r5, #30]
 8002738:	f44f 7461 	mov.w	r4, #900	@ 0x384
 800273c:	4770      	bx	lr

0800273e <.text_4>:
 800273e:	68ab      	ldr	r3, [r5, #8]
 8002740:	7c28      	ldrb	r0, [r5, #16]
 8002742:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8002744:	4770      	bx	lr

08002746 <.text_5>:
 8002746:	7728      	strb	r0, [r5, #28]
 8002748:	f8a5 b01e 	strh.w	fp, [r5, #30]
 800274c:	241b      	movs	r4, #27
 800274e:	4770      	bx	lr

08002750 <.text_6>:
 8002750:	8be8      	ldrh	r0, [r5, #30]
 8002752:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002756:	4770      	bx	lr

08002758 <.text_7>:
 8002758:	2014      	movs	r0, #20
 800275a:	f88d 000c 	strb.w	r0, [sp, #12]
 800275e:	4770      	bx	lr

08002760 <.text_8>:
 8002760:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002764:	2811      	cmp	r0, #17
 8002766:	4770      	bx	lr

08002768 <.text_9>:
 8002768:	2400      	movs	r4, #0
 800276a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800276e:	2814      	cmp	r0, #20
 8002770:	4770      	bx	lr

08002772 <.text_10>:
 8002772:	6868      	ldr	r0, [r5, #4]
 8002774:	6801      	ldr	r1, [r0, #0]
 8002776:	f041 0110 	orr.w	r1, r1, #16
 800277a:	6001      	str	r1, [r0, #0]
 800277c:	4770      	bx	lr

0800277e <.text_11>:
 800277e:	2100      	movs	r1, #0
 8002780:	9100      	str	r1, [sp, #0]
 8002782:	2300      	movs	r3, #0
 8002784:	7c29      	ldrb	r1, [r5, #16]
 8002786:	6834      	ldr	r4, [r6, #0]
 8002788:	4770      	bx	lr

0800278a <.text_12>:
 800278a:	2100      	movs	r1, #0
 800278c:	9100      	str	r1, [sp, #0]
 800278e:	2300      	movs	r3, #0
 8002790:	4e5e      	ldr	r6, [pc, #376]	@ (800290c <.text_23>)
 8002792:	7c29      	ldrb	r1, [r5, #16]
 8002794:	6837      	ldr	r7, [r6, #0]
 8002796:	4770      	bx	lr

08002798 <.text_13>:
 8002798:	74a8      	strb	r0, [r5, #18]
 800279a:	2100      	movs	r1, #0
 800279c:	9100      	str	r1, [sp, #0]
 800279e:	2300      	movs	r3, #0
 80027a0:	4f5a      	ldr	r7, [pc, #360]	@ (800290c <.text_23>)
 80027a2:	7c29      	ldrb	r1, [r5, #16]
 80027a4:	f8d7 c000 	ldr.w	ip, [r7]
 80027a8:	4770      	bx	lr

080027aa <.text_14>:
 80027aa:	6868      	ldr	r0, [r5, #4]
 80027ac:	6801      	ldr	r1, [r0, #0]
 80027ae:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 80027b2:	2800      	cmp	r0, #0
 80027b4:	4770      	bx	lr

080027b6 <.text_15>:
 80027b6:	6868      	ldr	r0, [r5, #4]
 80027b8:	6801      	ldr	r1, [r0, #0]
 80027ba:	f021 0110 	bic.w	r1, r1, #16
 80027be:	6001      	str	r1, [r0, #0]
 80027c0:	4770      	bx	lr

080027c2 <.text_16>:
 80027c2:	2101      	movs	r1, #1
 80027c4:	4628      	mov	r0, r5
 80027c6:	f7fe bda2 	b.w	800130e <PE_CallHardResetCallback>

080027ca <.text_17>:
 80027ca:	2104      	movs	r1, #4
 80027cc:	4628      	mov	r0, r5
 80027ce:	f7fe bda5 	b.w	800131c <PE_SetPowerNegotiation>

080027d2 <.text_18>:
 80027d2:	7c28      	ldrb	r0, [r5, #16]
 80027d4:	f7fd bebb 	b.w	800054e <USBPD_PE_Notification>

080027d8 <.text_19>:
 80027d8:	2100      	movs	r1, #0
 80027da:	4628      	mov	r0, r5
 80027dc:	f7fe be40 	b.w	8001460 <PE_Send_CtrlMessage>

080027e0 <.text_20>:
 80027e0:	2114      	movs	r1, #20
 80027e2:	f88d 100c 	strb.w	r1, [sp, #12]
 80027e6:	4628      	mov	r0, r5
 80027e8:	f7fe b8dc 	b.w	80009a4 <PE_Clear_RxEvent>

080027ec <PE_StateMachine_SNK_ReadyWait>:
 80027ec:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80027ee:	460e      	mov	r6, r1
 80027f0:	4604      	mov	r4, r0
 80027f2:	7830      	ldrb	r0, [r6, #0]
 80027f4:	2502      	movs	r5, #2
 80027f6:	2814      	cmp	r0, #20
 80027f8:	d00b      	beq.n	8002812 <PE_StateMachine_SNK_ReadyWait+0x26>
 80027fa:	4620      	mov	r0, r4
 80027fc:	f7ff f89e 	bl	800193c <PE_ManageRXEvent>
 8002800:	7830      	ldrb	r0, [r6, #0]
 8002802:	2814      	cmp	r0, #20
 8002804:	d07d      	beq.n	8002902 <PE_StateMachine_SNK_ReadyWait+0x116>
 8002806:	2114      	movs	r1, #20
 8002808:	7031      	strb	r1, [r6, #0]
 800280a:	4620      	mov	r0, r4
 800280c:	f7fe f8ca 	bl	80009a4 <PE_Clear_RxEvent>
 8002810:	e077      	b.n	8002902 <PE_StateMachine_SNK_ReadyWait+0x116>
 8002812:	6961      	ldr	r1, [r4, #20]
 8002814:	0cc8      	lsrs	r0, r1, #19
 8002816:	f504 7518 	add.w	r5, r4, #608	@ 0x260
 800281a:	d027      	beq.n	800286c <PE_StateMachine_SNK_ReadyWait+0x80>
 800281c:	8c20      	ldrh	r0, [r4, #32]
 800281e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002822:	d10e      	bne.n	8002842 <PE_StateMachine_SNK_ReadyWait+0x56>
 8002824:	210f      	movs	r1, #15
 8002826:	7461      	strb	r1, [r4, #17]
 8002828:	2000      	movs	r0, #0
 800282a:	9000      	str	r0, [sp, #0]
 800282c:	2300      	movs	r3, #0
 800282e:	7c21      	ldrb	r1, [r4, #16]
 8002830:	4c36      	ldr	r4, [pc, #216]	@ (800290c <.text_23>)
 8002832:	6826      	ldr	r6, [r4, #0]
 8002834:	2270      	movs	r2, #112	@ 0x70
 8002836:	2009      	movs	r0, #9
 8002838:	47b0      	blx	r6
 800283a:	7828      	ldrb	r0, [r5, #0]
 800283c:	1c40      	adds	r0, r0, #1
 800283e:	7028      	strb	r0, [r5, #0]
 8002840:	e054      	b.n	80028ec <PE_StateMachine_SNK_ReadyWait+0x100>
 8002842:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8002844:	6962      	ldr	r2, [r4, #20]
 8002846:	f3c1 2142 	ubfx	r1, r1, #9, #3
 800284a:	2033      	movs	r0, #51	@ 0x33
 800284c:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 8002850:	fb11 f100 	smulbb	r1, r1, r0
 8002854:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002858:	8421      	strh	r1, [r4, #32]
 800285a:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 800285c:	6962      	ldr	r2, [r4, #20]
 800285e:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8002862:	eb01 45d2 	add.w	r5, r1, r2, lsr #19
 8002866:	4345      	muls	r5, r0
 8002868:	b2ad      	uxth	r5, r5
 800286a:	e04a      	b.n	8002902 <PE_StateMachine_SNK_ReadyWait+0x116>
 800286c:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 800286e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002872:	d106      	bne.n	8002882 <PE_StateMachine_SNK_ReadyWait+0x96>
 8002874:	2245      	movs	r2, #69	@ 0x45
 8002876:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800287a:	7462      	strb	r2, [r4, #17]
 800287c:	2500      	movs	r5, #0
 800287e:	6161      	str	r1, [r4, #20]
 8002880:	e03f      	b.n	8002902 <PE_StateMachine_SNK_ReadyWait+0x116>
 8002882:	7c20      	ldrb	r0, [r4, #16]
 8002884:	f7fe f8b3 	bl	80009ee <PE_PRL_Control_RxEvent>
 8002888:	f104 0631 	add.w	r6, r4, #49	@ 0x31
 800288c:	bb18      	cbnz	r0, 80028d6 <PE_StateMachine_SNK_ReadyWait+0xea>
 800288e:	7870      	ldrb	r0, [r6, #1]
 8002890:	b308      	cbz	r0, 80028d6 <PE_StateMachine_SNK_ReadyWait+0xea>
 8002892:	6860      	ldr	r0, [r4, #4]
 8002894:	6800      	ldr	r0, [r0, #0]
 8002896:	f000 0103 	and.w	r1, r0, #3
 800289a:	2901      	cmp	r1, #1
 800289c:	d008      	beq.n	80028b0 <PE_StateMachine_SNK_ReadyWait+0xc4>
 800289e:	f000 0003 	and.w	r0, r0, #3
 80028a2:	2802      	cmp	r0, #2
 80028a4:	d117      	bne.n	80028d6 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028a6:	7c20      	ldrb	r0, [r4, #16]
 80028a8:	f002 f8fa 	bl	8004aa0 <USBPD_PRL_IsResistor_SinkTxOK>
 80028ac:	2801      	cmp	r0, #1
 80028ae:	d112      	bne.n	80028d6 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028b0:	78b0      	ldrb	r0, [r6, #2]
 80028b2:	7030      	strb	r0, [r6, #0]
 80028b4:	7870      	ldrb	r0, [r6, #1]
 80028b6:	7460      	strb	r0, [r4, #17]
 80028b8:	2845      	cmp	r0, #69	@ 0x45
 80028ba:	d103      	bne.n	80028c4 <PE_StateMachine_SNK_ReadyWait+0xd8>
 80028bc:	6960      	ldr	r0, [r4, #20]
 80028be:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 80028c2:	6160      	str	r0, [r4, #20]
 80028c4:	2000      	movs	r0, #0
 80028c6:	7070      	strb	r0, [r6, #1]
 80028c8:	6960      	ldr	r0, [r4, #20]
 80028ca:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80028cc:	62e1      	str	r1, [r4, #44]	@ 0x2c
 80028ce:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 80028d2:	6160      	str	r0, [r4, #20]
 80028d4:	e00a      	b.n	80028ec <PE_StateMachine_SNK_ReadyWait+0x100>
 80028d6:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 80028d8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80028dc:	d108      	bne.n	80028f0 <PE_StateMachine_SNK_ReadyWait+0x104>
 80028de:	2100      	movs	r1, #0
 80028e0:	8461      	strh	r1, [r4, #34]	@ 0x22
 80028e2:	2105      	movs	r1, #5
 80028e4:	78a8      	ldrb	r0, [r5, #2]
 80028e6:	1c40      	adds	r0, r0, #1
 80028e8:	70a8      	strb	r0, [r5, #2]
 80028ea:	7461      	strb	r1, [r4, #17]
 80028ec:	2500      	movs	r5, #0
 80028ee:	e008      	b.n	8002902 <PE_StateMachine_SNK_ReadyWait+0x116>
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7fe fd2d 	bl	8001350 <PE_CalculateMinTiming>
 80028f6:	4605      	mov	r5, r0
 80028f8:	7870      	ldrb	r0, [r6, #1]
 80028fa:	b110      	cbz	r0, 8002902 <PE_StateMachine_SNK_ReadyWait+0x116>
 80028fc:	2d02      	cmp	r5, #2
 80028fe:	bf28      	it	cs
 8002900:	2502      	movcs	r5, #2
 8002902:	4628      	mov	r0, r5
 8002904:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

08002908 <.text_22>:
 8002908:	20000278 	.word	0x20000278

0800290c <.text_23>:
 800290c:	20000000 	.word	0x20000000

08002910 <USBPD_PE_StateMachine_SRC>:
 8002910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002914:	4680      	mov	r8, r0
 8002916:	481a      	ldr	r0, [pc, #104]	@ (8002980 <USBPD_PE_StateMachine_SRC+0x70>)
 8002918:	b086      	sub	sp, #24
 800291a:	4641      	mov	r1, r8
 800291c:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
 8002920:	7c70      	ldrb	r0, [r6, #17]
 8002922:	2848      	cmp	r0, #72	@ 0x48
 8002924:	d136      	bne.n	8002994 <USBPD_PE_StateMachine_SRC+0x84>
 8002926:	4630      	mov	r0, r6
 8002928:	f7fe f915 	bl	8000b56 <PE_Reset_ZI>
 800292c:	4630      	mov	r0, r6
 800292e:	f7fe f94c 	bl	8000bca <PE_Reset_Counter>
 8002932:	6830      	ldr	r0, [r6, #0]
 8002934:	7903      	ldrb	r3, [r0, #4]
 8002936:	7c30      	ldrb	r0, [r6, #16]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	2201      	movs	r2, #1
 800293e:	2101      	movs	r1, #1
 8002940:	f002 f85d 	bl	80049fe <USBPD_PRL_SetHeader>
 8002944:	6870      	ldr	r0, [r6, #4]
 8002946:	6801      	ldr	r1, [r0, #0]
 8002948:	f041 0108 	orr.w	r1, r1, #8
 800294c:	6001      	str	r1, [r0, #0]
 800294e:	6830      	ldr	r0, [r6, #0]
 8002950:	6841      	ldr	r1, [r0, #4]
 8002952:	6870      	ldr	r0, [r6, #4]
 8002954:	6802      	ldr	r2, [r0, #0]
 8002956:	f361 0201 	bfi	r2, r1, #0, #2
 800295a:	6002      	str	r2, [r0, #0]
 800295c:	2101      	movs	r1, #1
 800295e:	7c30      	ldrb	r0, [r6, #16]
 8002960:	f002 f8a4 	bl	8004aac <USBPD_PRL_SOPCapability>
 8002964:	7c30      	ldrb	r0, [r6, #16]
 8002966:	f002 fb16 	bl	8004f96 <USBPD_PRL_Reset>
 800296a:	7cb1      	ldrb	r1, [r6, #18]
 800296c:	2002      	movs	r0, #2
 800296e:	2902      	cmp	r1, #2
 8002970:	7470      	strb	r0, [r6, #17]
 8002972:	d00f      	beq.n	8002994 <USBPD_PE_StateMachine_SRC+0x84>
 8002974:	74b0      	strb	r0, [r6, #18]
 8002976:	2100      	movs	r1, #0
 8002978:	9100      	str	r1, [sp, #0]
 800297a:	2300      	movs	r3, #0
 800297c:	4c01      	ldr	r4, [pc, #4]	@ (8002984 <USBPD_PE_StateMachine_SRC+0x74>)
 800297e:	e003      	b.n	8002988 <USBPD_PE_StateMachine_SRC+0x78>
 8002980:	20000278 	.word	0x20000278
 8002984:	20000000 	.word	0x20000000
 8002988:	7c31      	ldrb	r1, [r6, #16]
 800298a:	f8d4 9000 	ldr.w	r9, [r4]
 800298e:	2202      	movs	r2, #2
 8002990:	2004      	movs	r0, #4
 8002992:	47c8      	blx	r9
 8002994:	6970      	ldr	r0, [r6, #20]
 8002996:	f3c0 4080 	ubfx	r0, r0, #18, #1
 800299a:	b130      	cbz	r0, 80029aa <USBPD_PE_StateMachine_SRC+0x9a>
 800299c:	6970      	ldr	r0, [r6, #20]
 800299e:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 80029a2:	6170      	str	r0, [r6, #20]
 80029a4:	2164      	movs	r1, #100	@ 0x64
 80029a6:	f000 feab 	bl	8003700 <.text_17>
 80029aa:	4630      	mov	r0, r6
 80029ac:	f7fd ffc6 	bl	800093c <PE_Get_RxEvent>
 80029b0:	2803      	cmp	r0, #3
 80029b2:	f88d 000c 	strb.w	r0, [sp, #12]
 80029b6:	f206 255e 	addw	r5, r6, #606	@ 0x25e
 80029ba:	f8df 9ca8 	ldr.w	r9, [pc, #3240]	@ 8003664 <.text_3>
 80029be:	f248 0a1b 	movw	sl, #32795	@ 0x801b
 80029c2:	f248 0b1e 	movw	fp, #32798	@ 0x801e
 80029c6:	d103      	bne.n	80029d0 <USBPD_PE_StateMachine_SRC+0xc0>
 80029c8:	2001      	movs	r0, #1
 80029ca:	b007      	add	sp, #28
 80029cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029d0:	6870      	ldr	r0, [r6, #4]
 80029d2:	6801      	ldr	r1, [r0, #0]
 80029d4:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80029d8:	2800      	cmp	r0, #0
 80029da:	f000 8117 	beq.w	8002c0c <USBPD_PE_StateMachine_SRC+0x2fc>
 80029de:	6970      	ldr	r0, [r6, #20]
 80029e0:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80029e4:	2800      	cmp	r0, #0
 80029e6:	f106 0730 	add.w	r7, r6, #48	@ 0x30
 80029ea:	f000 8119 	beq.w	8002c20 <USBPD_PE_StateMachine_SRC+0x310>
 80029ee:	4640      	mov	r0, r8
 80029f0:	f002 f858 	bl	8004aa4 <USBPD_PRL_FastRoleSwapSignalling>
 80029f4:	20a6      	movs	r0, #166	@ 0xa6
 80029f6:	7470      	strb	r0, [r6, #17]
 80029f8:	2109      	movs	r1, #9
 80029fa:	7731      	strb	r1, [r6, #28]
 80029fc:	2000      	movs	r0, #0
 80029fe:	70b8      	strb	r0, [r7, #2]
 8002a00:	f248 0011 	movw	r0, #32785	@ 0x8011
 8002a04:	6971      	ldr	r1, [r6, #20]
 8002a06:	f421 3100 	bic.w	r1, r1, #131072	@ 0x20000
 8002a0a:	6171      	str	r1, [r6, #20]
 8002a0c:	84f0      	strh	r0, [r6, #38]	@ 0x26
 8002a0e:	7cb1      	ldrb	r1, [r6, #18]
 8002a10:	29a6      	cmp	r1, #166	@ 0xa6
 8002a12:	f040 80ff 	bne.w	8002c14 <USBPD_PE_StateMachine_SRC+0x304>
 8002a16:	2402      	movs	r4, #2
 8002a18:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002a1c:	2811      	cmp	r0, #17
 8002a1e:	d11c      	bne.n	8002a5a <USBPD_PE_StateMachine_SRC+0x14a>
 8002a20:	6870      	ldr	r0, [r6, #4]
 8002a22:	6801      	ldr	r1, [r0, #0]
 8002a24:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8002a28:	88b9      	ldrh	r1, [r7, #4]
 8002a2a:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8002a2e:	4288      	cmp	r0, r1
 8002a30:	d113      	bne.n	8002a5a <USBPD_PE_StateMachine_SRC+0x14a>
 8002a32:	f000 fe26 	bl	8003682 <.text_7>
 8002a36:	f000 fe72 	bl	800371e <.text_20+0x6>
 8002a3a:	7cb1      	ldrb	r1, [r6, #18]
 8002a3c:	2092      	movs	r0, #146	@ 0x92
 8002a3e:	2992      	cmp	r1, #146	@ 0x92
 8002a40:	7470      	strb	r0, [r6, #17]
 8002a42:	f000 810e 	beq.w	8002c62 <USBPD_PE_StateMachine_SRC+0x352>
 8002a46:	74b0      	strb	r0, [r6, #18]
 8002a48:	2100      	movs	r1, #0
 8002a4a:	9100      	str	r1, [sp, #0]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	7c31      	ldrb	r1, [r6, #16]
 8002a50:	f8d9 c000 	ldr.w	ip, [r9]
 8002a54:	2292      	movs	r2, #146	@ 0x92
 8002a56:	2004      	movs	r0, #4
 8002a58:	47e0      	blx	ip
 8002a5a:	7c71      	ldrb	r1, [r6, #17]
 8002a5c:	000a      	movs	r2, r1
 8002a5e:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 8002a62:	f000 80f6 	beq.w	8002c52 <USBPD_PE_StateMachine_SRC+0x342>
 8002a66:	1e4a      	subs	r2, r1, #1
 8002a68:	d06f      	beq.n	8002b4a <USBPD_PE_StateMachine_SRC+0x23a>
 8002a6a:	1e52      	subs	r2, r2, #1
 8002a6c:	f000 8105 	beq.w	8002c7a <USBPD_PE_StateMachine_SRC+0x36a>
 8002a70:	1e52      	subs	r2, r2, #1
 8002a72:	2a01      	cmp	r2, #1
 8002a74:	f240 84b1 	bls.w	80033da <USBPD_PE_StateMachine_SRC+0xaca>
 8002a78:	1e92      	subs	r2, r2, #2
 8002a7a:	f000 8143 	beq.w	8002d04 <USBPD_PE_StateMachine_SRC+0x3f4>
 8002a7e:	1e52      	subs	r2, r2, #1
 8002a80:	f000 8145 	beq.w	8002d0e <USBPD_PE_StateMachine_SRC+0x3fe>
 8002a84:	1e52      	subs	r2, r2, #1
 8002a86:	f000 814a 	beq.w	8002d1e <USBPD_PE_StateMachine_SRC+0x40e>
 8002a8a:	1e52      	subs	r2, r2, #1
 8002a8c:	f000 819d 	beq.w	8002dca <USBPD_PE_StateMachine_SRC+0x4ba>
 8002a90:	1e52      	subs	r2, r2, #1
 8002a92:	f000 81e3 	beq.w	8002e5c <USBPD_PE_StateMachine_SRC+0x54c>
 8002a96:	1ed2      	subs	r2, r2, #3
 8002a98:	f000 8226 	beq.w	8002ee8 <USBPD_PE_StateMachine_SRC+0x5d8>
 8002a9c:	1e52      	subs	r2, r2, #1
 8002a9e:	f000 8234 	beq.w	8002f0a <USBPD_PE_StateMachine_SRC+0x5fa>
 8002aa2:	1e52      	subs	r2, r2, #1
 8002aa4:	f000 80da 	beq.w	8002c5c <USBPD_PE_StateMachine_SRC+0x34c>
 8002aa8:	1e52      	subs	r2, r2, #1
 8002aaa:	f000 82a3 	beq.w	8002ff4 <USBPD_PE_StateMachine_SRC+0x6e4>
 8002aae:	1e52      	subs	r2, r2, #1
 8002ab0:	f000 826a 	beq.w	8002f88 <USBPD_PE_StateMachine_SRC+0x678>
 8002ab4:	1e52      	subs	r2, r2, #1
 8002ab6:	f000 826c 	beq.w	8002f92 <USBPD_PE_StateMachine_SRC+0x682>
 8002aba:	1e52      	subs	r2, r2, #1
 8002abc:	f000 8277 	beq.w	8002fae <USBPD_PE_StateMachine_SRC+0x69e>
 8002ac0:	1e52      	subs	r2, r2, #1
 8002ac2:	f000 8302 	beq.w	80030ca <USBPD_PE_StateMachine_SRC+0x7ba>
 8002ac6:	1e52      	subs	r2, r2, #1
 8002ac8:	f000 82ba 	beq.w	8003040 <USBPD_PE_StateMachine_SRC+0x730>
 8002acc:	1e52      	subs	r2, r2, #1
 8002ace:	f000 82c1 	beq.w	8003054 <USBPD_PE_StateMachine_SRC+0x744>
 8002ad2:	1e52      	subs	r2, r2, #1
 8002ad4:	f000 8192 	beq.w	8002dfc <USBPD_PE_StateMachine_SRC+0x4ec>
 8002ad8:	1e52      	subs	r2, r2, #1
 8002ada:	f000 82d8 	beq.w	800308e <USBPD_PE_StateMachine_SRC+0x77e>
 8002ade:	1e52      	subs	r2, r2, #1
 8002ae0:	2a01      	cmp	r2, #1
 8002ae2:	d932      	bls.n	8002b4a <USBPD_PE_StateMachine_SRC+0x23a>
 8002ae4:	1e92      	subs	r2, r2, #2
 8002ae6:	f000 8313 	beq.w	8003110 <USBPD_PE_StateMachine_SRC+0x800>
 8002aea:	1e52      	subs	r2, r2, #1
 8002aec:	f000 831e 	beq.w	800312c <USBPD_PE_StateMachine_SRC+0x81c>
 8002af0:	1e92      	subs	r2, r2, #2
 8002af2:	d02a      	beq.n	8002b4a <USBPD_PE_StateMachine_SRC+0x23a>
 8002af4:	1e52      	subs	r2, r2, #1
 8002af6:	f000 83cd 	beq.w	8003294 <USBPD_PE_StateMachine_SRC+0x984>
 8002afa:	1e52      	subs	r2, r2, #1
 8002afc:	f000 83db 	beq.w	80032b6 <USBPD_PE_StateMachine_SRC+0x9a6>
 8002b00:	1e52      	subs	r2, r2, #1
 8002b02:	f000 8419 	beq.w	8003338 <USBPD_PE_StateMachine_SRC+0xa28>
 8002b06:	1e52      	subs	r2, r2, #1
 8002b08:	f000 8439 	beq.w	800337e <USBPD_PE_StateMachine_SRC+0xa6e>
 8002b0c:	1e52      	subs	r2, r2, #1
 8002b0e:	f000 8349 	beq.w	80031a4 <USBPD_PE_StateMachine_SRC+0x894>
 8002b12:	1e92      	subs	r2, r2, #2
 8002b14:	f000 8368 	beq.w	80031e8 <USBPD_PE_StateMachine_SRC+0x8d8>
 8002b18:	1e52      	subs	r2, r2, #1
 8002b1a:	f000 837f 	beq.w	800321c <USBPD_PE_StateMachine_SRC+0x90c>
 8002b1e:	1e52      	subs	r2, r2, #1
 8002b20:	f000 8399 	beq.w	8003256 <USBPD_PE_StateMachine_SRC+0x946>
 8002b24:	1e52      	subs	r2, r2, #1
 8002b26:	2a02      	cmp	r2, #2
 8002b28:	d90f      	bls.n	8002b4a <USBPD_PE_StateMachine_SRC+0x23a>
 8002b2a:	1ed2      	subs	r2, r2, #3
 8002b2c:	f000 8358 	beq.w	80031e0 <USBPD_PE_StateMachine_SRC+0x8d0>
 8002b30:	1e52      	subs	r2, r2, #1
 8002b32:	f000 84c4 	beq.w	80034be <USBPD_PE_StateMachine_SRC+0xbae>
 8002b36:	1e52      	subs	r2, r2, #1
 8002b38:	d007      	beq.n	8002b4a <USBPD_PE_StateMachine_SRC+0x23a>
 8002b3a:	1e52      	subs	r2, r2, #1
 8002b3c:	f000 84d0 	beq.w	80034e0 <USBPD_PE_StateMachine_SRC+0xbd0>
 8002b40:	1e52      	subs	r2, r2, #1
 8002b42:	f000 84ff 	beq.w	8003544 <USBPD_PE_StateMachine_SRC+0xc34>
 8002b46:	1e52      	subs	r2, r2, #1
 8002b48:	2a01      	cmp	r2, #1
 8002b4a:	f240 8534 	bls.w	80035b6 <USBPD_PE_StateMachine_SRC+0xca6>
 8002b4e:	1e92      	subs	r2, r2, #2
 8002b50:	d001      	beq.n	8002b56 <USBPD_PE_StateMachine_SRC+0x246>
 8002b52:	1e92      	subs	r2, r2, #2
 8002b54:	2a05      	cmp	r2, #5
 8002b56:	f240 852a 	bls.w	80035ae <USBPD_PE_StateMachine_SRC+0xc9e>
 8002b5a:	1f92      	subs	r2, r2, #6
 8002b5c:	f000 8502 	beq.w	8003564 <USBPD_PE_StateMachine_SRC+0xc54>
 8002b60:	1e52      	subs	r2, r2, #1
 8002b62:	2a03      	cmp	r2, #3
 8002b64:	d9f1      	bls.n	8002b4a <USBPD_PE_StateMachine_SRC+0x23a>
 8002b66:	3a11      	subs	r2, #17
 8002b68:	d0ef      	beq.n	8002b4a <USBPD_PE_StateMachine_SRC+0x23a>
 8002b6a:	1e52      	subs	r2, r2, #1
 8002b6c:	f000 811b 	beq.w	8002da6 <USBPD_PE_StateMachine_SRC+0x496>
 8002b70:	3a0f      	subs	r2, #15
 8002b72:	f000 841b 	beq.w	80033ac <USBPD_PE_StateMachine_SRC+0xa9c>
 8002b76:	1fd2      	subs	r2, r2, #7
 8002b78:	2a01      	cmp	r2, #1
 8002b7a:	bf84      	itt	hi
 8002b7c:	1f52      	subhi	r2, r2, #5
 8002b7e:	2a01      	cmphi	r2, #1
 8002b80:	d9e3      	bls.n	8002b4a <USBPD_PE_StateMachine_SRC+0x23a>
 8002b82:	3a0d      	subs	r2, #13
 8002b84:	d0e1      	beq.n	8002b4a <USBPD_PE_StateMachine_SRC+0x23a>
 8002b86:	3a12      	subs	r2, #18
 8002b88:	f000 8541 	beq.w	800360e <USBPD_PE_StateMachine_SRC+0xcfe>
 8002b8c:	3a0c      	subs	r2, #12
 8002b8e:	d068      	beq.n	8002c62 <USBPD_PE_StateMachine_SRC+0x352>
 8002b90:	1e52      	subs	r2, r2, #1
 8002b92:	2a02      	cmp	r2, #2
 8002b94:	d9d9      	bls.n	8002b4a <USBPD_PE_StateMachine_SRC+0x23a>
 8002b96:	1ed2      	subs	r2, r2, #3
 8002b98:	f000 81d1 	beq.w	8002f3e <USBPD_PE_StateMachine_SRC+0x62e>
 8002b9c:	1e52      	subs	r2, r2, #1
 8002b9e:	f000 81e1 	beq.w	8002f64 <USBPD_PE_StateMachine_SRC+0x654>
 8002ba2:	1e92      	subs	r2, r2, #2
 8002ba4:	d0d1      	beq.n	8002b4a <USBPD_PE_StateMachine_SRC+0x23a>
 8002ba6:	1e52      	subs	r2, r2, #1
 8002ba8:	f000 80ac 	beq.w	8002d04 <USBPD_PE_StateMachine_SRC+0x3f4>
 8002bac:	1e92      	subs	r2, r2, #2
 8002bae:	2a08      	cmp	r2, #8
 8002bb0:	f240 8507 	bls.w	80035c2 <USBPD_PE_StateMachine_SRC+0xcb2>
 8002bb4:	3a0a      	subs	r2, #10
 8002bb6:	f000 8513 	beq.w	80035e0 <USBPD_PE_StateMachine_SRC+0xcd0>
 8002bba:	a903      	add	r1, sp, #12
 8002bbc:	4630      	mov	r0, r6
 8002bbe:	f001 f9f7 	bl	8003fb0 <PE_StateMachine_VDM>
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	7c72      	ldrb	r2, [r6, #17]
 8002bc6:	7cb0      	ldrb	r0, [r6, #18]
 8002bc8:	4290      	cmp	r0, r2
 8002bca:	d003      	beq.n	8002bd4 <USBPD_PE_StateMachine_SRC+0x2c4>
 8002bcc:	74b2      	strb	r2, [r6, #18]
 8002bce:	2100      	movs	r1, #0
 8002bd0:	f000 fd62 	bl	8003698 <.text_9>
 8002bd4:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002bd8:	2814      	cmp	r0, #20
 8002bda:	f000 851e 	beq.w	800361a <USBPD_PE_StateMachine_SRC+0xd0a>
 8002bde:	4630      	mov	r0, r6
 8002be0:	f7fd ff21 	bl	8000a26 <PE_Check_AMSConflict>
 8002be4:	2815      	cmp	r0, #21
 8002be6:	d105      	bne.n	8002bf4 <USBPD_PE_StateMachine_SRC+0x2e4>
 8002be8:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002bec:	2814      	cmp	r0, #20
 8002bee:	d001      	beq.n	8002bf4 <USBPD_PE_StateMachine_SRC+0x2e4>
 8002bf0:	f000 fd92 	bl	8003718 <.text_20>
 8002bf4:	7c72      	ldrb	r2, [r6, #17]
 8002bf6:	7cb0      	ldrb	r0, [r6, #18]
 8002bf8:	4290      	cmp	r0, r2
 8002bfa:	d004      	beq.n	8002c06 <USBPD_PE_StateMachine_SRC+0x2f6>
 8002bfc:	74b2      	strb	r2, [r6, #18]
 8002bfe:	f000 fd53 	bl	80036a8 <.text_10+0x2>
 8002c02:	2004      	movs	r0, #4
 8002c04:	47a0      	blx	r4
 8002c06:	2400      	movs	r4, #0
 8002c08:	f000 bd22 	b.w	8003650 <USBPD_PE_StateMachine_SRC+0xd40>
 8002c0c:	f04f 34ff 	mov.w	r4, #4294967295
 8002c10:	4620      	mov	r0, r4
 8002c12:	e6da      	b.n	80029ca <USBPD_PE_StateMachine_SRC+0xba>
 8002c14:	20a6      	movs	r0, #166	@ 0xa6
 8002c16:	f000 fd46 	bl	80036a6 <.text_10>
 8002c1a:	22a6      	movs	r2, #166	@ 0xa6
 8002c1c:	2004      	movs	r0, #4
 8002c1e:	47a0      	blx	r4
 8002c20:	78b8      	ldrb	r0, [r7, #2]
 8002c22:	2402      	movs	r4, #2
 8002c24:	280f      	cmp	r0, #15
 8002c26:	bf18      	it	ne
 8002c28:	2814      	cmpne	r0, #20
 8002c2a:	d111      	bne.n	8002c50 <USBPD_PE_StateMachine_SRC+0x340>
 8002c2c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002c30:	2814      	cmp	r0, #20
 8002c32:	d001      	beq.n	8002c38 <USBPD_PE_StateMachine_SRC+0x328>
 8002c34:	f000 fd70 	bl	8003718 <.text_20>
 8002c38:	78ba      	ldrb	r2, [r7, #2]
 8002c3a:	7472      	strb	r2, [r6, #17]
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	70b8      	strb	r0, [r7, #2]
 8002c40:	2100      	movs	r1, #0
 8002c42:	7cb0      	ldrb	r0, [r6, #18]
 8002c44:	62f1      	str	r1, [r6, #44]	@ 0x2c
 8002c46:	4290      	cmp	r0, r2
 8002c48:	d002      	beq.n	8002c50 <USBPD_PE_StateMachine_SRC+0x340>
 8002c4a:	74b2      	strb	r2, [r6, #18]
 8002c4c:	f000 fd24 	bl	8003698 <.text_9>
 8002c50:	e6e2      	b.n	8002a18 <USBPD_PE_StateMachine_SRC+0x108>
 8002c52:	f000 fd3c 	bl	80036ce <.text_13>
 8002c56:	215f      	movs	r1, #95	@ 0x5f
 8002c58:	f000 fd52 	bl	8003700 <.text_17>
 8002c5c:	f04f 34ff 	mov.w	r4, #4294967295
 8002c60:	e7b0      	b.n	8002bc4 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002c62:	6870      	ldr	r0, [r6, #4]
 8002c64:	6801      	ldr	r1, [r0, #0]
 8002c66:	f021 0110 	bic.w	r1, r1, #16
 8002c6a:	6001      	str	r1, [r0, #0]
 8002c6c:	68b0      	ldr	r0, [r6, #8]
 8002c6e:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002c70:	2900      	cmp	r1, #0
 8002c72:	d0f3      	beq.n	8002c5c <USBPD_PE_StateMachine_SRC+0x34c>
 8002c74:	7c30      	ldrb	r0, [r6, #16]
 8002c76:	4788      	blx	r1
 8002c78:	e7f0      	b.n	8002c5c <USBPD_PE_StateMachine_SRC+0x34c>
 8002c7a:	f000 fd22 	bl	80036c2 <.text_12>
 8002c7e:	bf1a      	itte	ne
 8002c80:	6830      	ldrne	r0, [r6, #0]
 8002c82:	6801      	ldrne	r1, [r0, #0]
 8002c84:	2101      	moveq	r1, #1
 8002c86:	4640      	mov	r0, r8
 8002c88:	f001 ff10 	bl	8004aac <USBPD_PRL_SOPCapability>
 8002c8c:	6870      	ldr	r0, [r6, #4]
 8002c8e:	6801      	ldr	r1, [r0, #0]
 8002c90:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002c94:	b388      	cbz	r0, 8002cfa <USBPD_PE_StateMachine_SRC+0x3ea>
 8002c96:	f001 0203 	and.w	r2, r1, #3
 8002c9a:	6870      	ldr	r0, [r6, #4]
 8002c9c:	2a01      	cmp	r2, #1
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2200      	moveq	r2, #0
 8002ca2:	2220      	movne	r2, #32
 8002ca4:	f021 0120 	bic.w	r1, r1, #32
 8002ca8:	4311      	orrs	r1, r2
 8002caa:	6001      	str	r1, [r0, #0]
 8002cac:	2000      	movs	r0, #0
 8002cae:	70e8      	strb	r0, [r5, #3]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	f000 fd29 	bl	8003708 <.text_18+0x2>
 8002cb6:	6870      	ldr	r0, [r6, #4]
 8002cb8:	6801      	ldr	r1, [r0, #0]
 8002cba:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8002cbe:	b130      	cbz	r0, 8002cce <USBPD_PE_StateMachine_SRC+0x3be>
 8002cc0:	f248 0014 	movw	r0, #32788	@ 0x8014
 8002cc4:	83f0      	strh	r0, [r6, #30]
 8002cc6:	2414      	movs	r4, #20
 8002cc8:	2106      	movs	r1, #6
 8002cca:	7471      	strb	r1, [r6, #17]
 8002ccc:	e77a      	b.n	8002bc4 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002cce:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d00a      	beq.n	8002cec <USBPD_PE_StateMachine_SRC+0x3dc>
 8002cd6:	6830      	ldr	r0, [r6, #0]
 8002cd8:	7801      	ldrb	r1, [r0, #0]
 8002cda:	078a      	lsls	r2, r1, #30
 8002cdc:	f140 808c 	bpl.w	8002df8 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002ce0:	7929      	ldrb	r1, [r5, #4]
 8002ce2:	2914      	cmp	r1, #20
 8002ce4:	f080 8088 	bcs.w	8002df8 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002ce8:	68f0      	ldr	r0, [r6, #12]
 8002cea:	2800      	cmp	r0, #0
 8002cec:	f000 8084 	beq.w	8002df8 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002cf0:	1c49      	adds	r1, r1, #1
 8002cf2:	7129      	strb	r1, [r5, #4]
 8002cf4:	2005      	movs	r0, #5
 8002cf6:	7470      	strb	r0, [r6, #17]
 8002cf8:	e764      	b.n	8002bc4 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002cfa:	7c30      	ldrb	r0, [r6, #16]
 8002cfc:	2121      	movs	r1, #33	@ 0x21
 8002cfe:	f7fd fc26 	bl	800054e <USBPD_PE_Notification>
 8002d02:	e1e0      	b.n	80030c6 <USBPD_PE_StateMachine_SRC+0x7b6>
 8002d04:	a903      	add	r1, sp, #12
 8002d06:	4630      	mov	r0, r6
 8002d08:	f000 fd3c 	bl	8003784 <PE_StateMachine_VDMCable>
 8002d0c:	e759      	b.n	8002bc2 <USBPD_PE_StateMachine_SRC+0x2b2>
 8002d0e:	8bf0      	ldrh	r0, [r6, #30]
 8002d10:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002d14:	d102      	bne.n	8002d1c <USBPD_PE_StateMachine_SRC+0x40c>
 8002d16:	2107      	movs	r1, #7
 8002d18:	7471      	strb	r1, [r6, #17]
 8002d1a:	2400      	movs	r4, #0
 8002d1c:	e752      	b.n	8002bc4 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d1e:	6971      	ldr	r1, [r6, #20]
 8002d20:	0889      	lsrs	r1, r1, #2
 8002d22:	f001 0101 	and.w	r1, r1, #1
 8002d26:	4630      	mov	r0, r6
 8002d28:	f000 fd01 	bl	800372e <PE_Send_SRCCapabilities>
 8002d2c:	2805      	cmp	r0, #5
 8002d2e:	d002      	beq.n	8002d36 <USBPD_PE_StateMachine_SRC+0x426>
 8002d30:	2809      	cmp	r0, #9
 8002d32:	d0f3      	beq.n	8002d1c <USBPD_PE_StateMachine_SRC+0x40c>
 8002d34:	e011      	b.n	8002d5a <USBPD_PE_StateMachine_SRC+0x44a>
 8002d36:	2001      	movs	r0, #1
 8002d38:	6971      	ldr	r1, [r6, #20]
 8002d3a:	7730      	strb	r0, [r6, #28]
 8002d3c:	f041 0104 	orr.w	r1, r1, #4
 8002d40:	6171      	str	r1, [r6, #20]
 8002d42:	2000      	movs	r0, #0
 8002d44:	70e8      	strb	r0, [r5, #3]
 8002d46:	70a8      	strb	r0, [r5, #2]
 8002d48:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8002d4c:	2016      	movs	r0, #22
 8002d4e:	241b      	movs	r4, #27
 8002d50:	7470      	strb	r0, [r6, #17]
 8002d52:	210f      	movs	r1, #15
 8002d54:	f000 fcd4 	bl	8003700 <.text_17>
 8002d58:	e734      	b.n	8002bc4 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d5a:	6970      	ldr	r0, [r6, #20]
 8002d5c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002d60:	b978      	cbnz	r0, 8002d82 <USBPD_PE_StateMachine_SRC+0x472>
 8002d62:	78e8      	ldrb	r0, [r5, #3]
 8002d64:	2833      	cmp	r0, #51	@ 0x33
 8002d66:	d218      	bcs.n	8002d9a <USBPD_PE_StateMachine_SRC+0x48a>
 8002d68:	f248 0196 	movw	r1, #32918	@ 0x8096
 8002d6c:	83f1      	strh	r1, [r6, #30]
 8002d6e:	2008      	movs	r0, #8
 8002d70:	7470      	strb	r0, [r6, #17]
 8002d72:	2496      	movs	r4, #150	@ 0x96
 8002d74:	8c71      	ldrh	r1, [r6, #34]	@ 0x22
 8002d76:	0448      	lsls	r0, r1, #17
 8002d78:	d002      	beq.n	8002d80 <USBPD_PE_StateMachine_SRC+0x470>
 8002d7a:	8c74      	ldrh	r4, [r6, #34]	@ 0x22
 8002d7c:	f3c4 040e 	ubfx	r4, r4, #0, #15
 8002d80:	e720      	b.n	8002bc4 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d82:	6870      	ldr	r0, [r6, #4]
 8002d84:	7801      	ldrb	r1, [r0, #0]
 8002d86:	f001 0103 	and.w	r1, r1, #3
 8002d8a:	2902      	cmp	r1, #2
 8002d8c:	bf04      	itt	eq
 8002d8e:	7c30      	ldrbeq	r0, [r6, #16]
 8002d90:	f001 fe7b 	bleq	8004a8a <USBPD_PRL_SRCReleaseSinkNG>
 8002d94:	2011      	movs	r0, #17
 8002d96:	7470      	strb	r0, [r6, #17]
 8002d98:	e7bf      	b.n	8002d1a <USBPD_PE_StateMachine_SRC+0x40a>
 8002d9a:	7c30      	ldrb	r0, [r6, #16]
 8002d9c:	2121      	movs	r1, #33	@ 0x21
 8002d9e:	f7fd fbd6 	bl	800054e <USBPD_PE_Notification>
 8002da2:	2000      	movs	r0, #0
 8002da4:	e7a7      	b.n	8002cf6 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002da6:	2100      	movs	r1, #0
 8002da8:	4630      	mov	r0, r6
 8002daa:	f000 fcc0 	bl	800372e <PE_Send_SRCCapabilities>
 8002dae:	2805      	cmp	r0, #5
 8002db0:	d107      	bne.n	8002dc2 <USBPD_PE_StateMachine_SRC+0x4b2>
 8002db2:	f000 fca8 	bl	8003706 <.text_18>
 8002db6:	2001      	movs	r0, #1
 8002db8:	f000 fc5f 	bl	800367a <.text_6>
 8002dbc:	2116      	movs	r1, #22
 8002dbe:	7471      	strb	r1, [r6, #17]
 8002dc0:	e7c7      	b.n	8002d52 <USBPD_PE_StateMachine_SRC+0x442>
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	7730      	strb	r0, [r6, #28]
 8002dc6:	2111      	movs	r1, #17
 8002dc8:	e77f      	b.n	8002cca <USBPD_PE_StateMachine_SRC+0x3ba>
 8002dca:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
 8002dcc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002dd0:	d106      	bne.n	8002de0 <USBPD_PE_StateMachine_SRC+0x4d0>
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	8471      	strh	r1, [r6, #34]	@ 0x22
 8002dd6:	2105      	movs	r1, #5
 8002dd8:	7928      	ldrb	r0, [r5, #4]
 8002dda:	1c40      	adds	r0, r0, #1
 8002ddc:	7128      	strb	r0, [r5, #4]
 8002dde:	7471      	strb	r1, [r6, #17]
 8002de0:	8bf0      	ldrh	r0, [r6, #30]
 8002de2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002de6:	d1cb      	bne.n	8002d80 <USBPD_PE_StateMachine_SRC+0x470>
 8002de8:	6830      	ldr	r0, [r6, #0]
 8002dea:	6841      	ldr	r1, [r0, #4]
 8002dec:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8002df0:	b110      	cbz	r0, 8002df8 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002df2:	78e8      	ldrb	r0, [r5, #3]
 8002df4:	1c40      	adds	r0, r0, #1
 8002df6:	70e8      	strb	r0, [r5, #3]
 8002df8:	2007      	movs	r0, #7
 8002dfa:	e77c      	b.n	8002cf6 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002dfc:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002e00:	2811      	cmp	r0, #17
 8002e02:	d10b      	bne.n	8002e1c <USBPD_PE_StateMachine_SRC+0x50c>
 8002e04:	88b9      	ldrh	r1, [r7, #4]
 8002e06:	0bc8      	lsrs	r0, r1, #15
 8002e08:	d108      	bne.n	8002e1c <USBPD_PE_StateMachine_SRC+0x50c>
 8002e0a:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	f000 80eb 	beq.w	8002fea <USBPD_PE_StateMachine_SRC+0x6da>
 8002e14:	7938      	ldrb	r0, [r7, #4]
 8002e16:	f000 001f 	and.w	r0, r0, #31
 8002e1a:	2802      	cmp	r0, #2
 8002e1c:	f040 80e5 	bne.w	8002fea <USBPD_PE_StateMachine_SRC+0x6da>
 8002e20:	68b8      	ldr	r0, [r7, #8]
 8002e22:	7881      	ldrb	r1, [r0, #2]
 8002e24:	78c2      	ldrb	r2, [r0, #3]
 8002e26:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8002e2a:	7901      	ldrb	r1, [r0, #4]
 8002e2c:	7940      	ldrb	r0, [r0, #5]
 8002e2e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8002e32:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	88b8      	ldrh	r0, [r7, #4]
 8002e3a:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8002e3e:	7c30      	ldrb	r0, [r6, #16]
 8002e40:	f7fd fef5 	bl	8000c2e <PE_ExtRevisionInteroperability>
 8002e44:	68b4      	ldr	r4, [r6, #8]
 8002e46:	7c30      	ldrb	r0, [r6, #16]
 8002e48:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8002e4c:	2304      	movs	r3, #4
 8002e4e:	466a      	mov	r2, sp
 8002e50:	2106      	movs	r1, #6
 8002e52:	47e0      	blx	ip
 8002e54:	2009      	movs	r0, #9
 8002e56:	7470      	strb	r0, [r6, #17]
 8002e58:	2400      	movs	r4, #0
 8002e5a:	e0c0      	b.n	8002fde <USBPD_PE_StateMachine_SRC+0x6ce>
 8002e5c:	68b2      	ldr	r2, [r6, #8]
 8002e5e:	7c30      	ldrb	r0, [r6, #16]
 8002e60:	69d3      	ldr	r3, [r2, #28]
 8002e62:	a901      	add	r1, sp, #4
 8002e64:	4798      	blx	r3
 8002e66:	280a      	cmp	r0, #10
 8002e68:	d011      	beq.n	8002e8e <USBPD_PE_StateMachine_SRC+0x57e>
 8002e6a:	280b      	cmp	r0, #11
 8002e6c:	d02f      	beq.n	8002ece <USBPD_PE_StateMachine_SRC+0x5be>
 8002e6e:	280d      	cmp	r0, #13
 8002e70:	6870      	ldr	r0, [r6, #4]
 8002e72:	6801      	ldr	r1, [r0, #0]
 8002e74:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002e78:	d12e      	bne.n	8002ed8 <USBPD_PE_StateMachine_SRC+0x5c8>
 8002e7a:	2803      	cmp	r0, #3
 8002e7c:	bf0c      	ite	eq
 8002e7e:	2303      	moveq	r3, #3
 8002e80:	230e      	movne	r3, #14
 8002e82:	2000      	movs	r0, #0
 8002e84:	9000      	str	r0, [sp, #0]
 8002e86:	220c      	movs	r2, #12
 8002e88:	f000 fc4d 	bl	8003726 <.text_21+0x2>
 8002e8c:	e69a      	b.n	8002bc4 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002e8e:	f8a6 b01e 	strh.w	fp, [r6, #30]
 8002e92:	241e      	movs	r4, #30
 8002e94:	6870      	ldr	r0, [r6, #4]
 8002e96:	6801      	ldr	r1, [r0, #0]
 8002e98:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002e9c:	2801      	cmp	r0, #1
 8002e9e:	d00b      	beq.n	8002eb8 <USBPD_PE_StateMachine_SRC+0x5a8>
 8002ea0:	9801      	ldr	r0, [sp, #4]
 8002ea2:	2803      	cmp	r0, #3
 8002ea4:	bf02      	ittt	eq
 8002ea6:	6970      	ldreq	r0, [r6, #20]
 8002ea8:	f3c0 00c1 	ubfxeq	r0, r0, #3, #2
 8002eac:	2803      	cmpeq	r0, #3
 8002eae:	d103      	bne.n	8002eb8 <USBPD_PE_StateMachine_SRC+0x5a8>
 8002eb0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002eb4:	83f0      	strh	r0, [r6, #30]
 8002eb6:	2400      	movs	r4, #0
 8002eb8:	2000      	movs	r0, #0
 8002eba:	9000      	str	r0, [sp, #0]
 8002ebc:	230c      	movs	r3, #12
 8002ebe:	f000 fc31 	bl	8003724 <.text_21>
 8002ec2:	9801      	ldr	r0, [sp, #4]
 8002ec4:	6971      	ldr	r1, [r6, #20]
 8002ec6:	f360 01c4 	bfi	r1, r0, #3, #2
 8002eca:	6171      	str	r1, [r6, #20]
 8002ecc:	e67a      	b.n	8002bc4 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002ece:	2000      	movs	r0, #0
 8002ed0:	9000      	str	r0, [sp, #0]
 8002ed2:	230c      	movs	r3, #12
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	e7d7      	b.n	8002e88 <USBPD_PE_StateMachine_SRC+0x578>
 8002ed8:	2803      	cmp	r0, #3
 8002eda:	bf0c      	ite	eq
 8002edc:	2303      	moveq	r3, #3
 8002ede:	230e      	movne	r3, #14
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	9000      	str	r0, [sp, #0]
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	e7cf      	b.n	8002e88 <USBPD_PE_StateMachine_SRC+0x578>
 8002ee8:	8bf0      	ldrh	r0, [r6, #30]
 8002eea:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002eee:	d1ed      	bne.n	8002ecc <USBPD_PE_StateMachine_SRC+0x5bc>
 8002ef0:	f000 fc09 	bl	8003706 <.text_18>
 8002ef4:	68b0      	ldr	r0, [r6, #8]
 8002ef6:	6801      	ldr	r1, [r0, #0]
 8002ef8:	2900      	cmp	r1, #0
 8002efa:	d0e7      	beq.n	8002ecc <USBPD_PE_StateMachine_SRC+0x5bc>
 8002efc:	7c30      	ldrb	r0, [r6, #16]
 8002efe:	4788      	blx	r1
 8002f00:	2800      	cmp	r0, #0
 8002f02:	f040 8251 	bne.w	80033a8 <USBPD_PE_StateMachine_SRC+0xa98>
 8002f06:	200d      	movs	r0, #13
 8002f08:	e6f5      	b.n	8002cf6 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	9100      	str	r1, [sp, #0]
 8002f0e:	2303      	movs	r3, #3
 8002f10:	2206      	movs	r2, #6
 8002f12:	f000 fc09 	bl	8003728 <.text_21+0x4>
 8002f16:	2800      	cmp	r0, #0
 8002f18:	d110      	bne.n	8002f3c <USBPD_PE_StateMachine_SRC+0x62c>
 8002f1a:	2103      	movs	r1, #3
 8002f1c:	f000 fbf4 	bl	8003708 <.text_18+0x2>
 8002f20:	7c30      	ldrb	r0, [r6, #16]
 8002f22:	2110      	movs	r1, #16
 8002f24:	f7fd fb13 	bl	800054e <USBPD_PE_Notification>
 8002f28:	2000      	movs	r0, #0
 8002f2a:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8002f2c:	6970      	ldr	r0, [r6, #20]
 8002f2e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8002f32:	2803      	cmp	r0, #3
 8002f34:	d102      	bne.n	8002f3c <USBPD_PE_StateMachine_SRC+0x62c>
 8002f36:	f24b 60b0 	movw	r0, #46768	@ 0xb6b0
 8002f3a:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8002f3c:	e642      	b.n	8002bc4 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002f3e:	2101      	movs	r1, #1
 8002f40:	9100      	str	r1, [sp, #0]
 8002f42:	2397      	movs	r3, #151	@ 0x97
 8002f44:	2202      	movs	r2, #2
 8002f46:	f000 fbee 	bl	8003726 <.text_21+0x2>
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	d1f6      	bne.n	8002f3c <USBPD_PE_StateMachine_SRC+0x62c>
 8002f4e:	7c30      	ldrb	r0, [r6, #16]
 8002f50:	7734      	strb	r4, [r6, #28]
 8002f52:	2129      	movs	r1, #41	@ 0x29
 8002f54:	f7fd fafb 	bl	800054e <USBPD_PE_Notification>
 8002f58:	f248 2026 	movw	r0, #33318	@ 0x8226
 8002f5c:	83f0      	strh	r0, [r6, #30]
 8002f5e:	f240 2426 	movw	r4, #550	@ 0x226
 8002f62:	e62f      	b.n	8002bc4 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002f64:	8bf0      	ldrh	r0, [r6, #30]
 8002f66:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002f6a:	d1fa      	bne.n	8002f62 <USBPD_PE_StateMachine_SRC+0x652>
 8002f6c:	7c30      	ldrb	r0, [r6, #16]
 8002f6e:	212a      	movs	r1, #42	@ 0x2a
 8002f70:	f7fd faed 	bl	800054e <USBPD_PE_Notification>
 8002f74:	2000      	movs	r0, #0
 8002f76:	9000      	str	r0, [sp, #0]
 8002f78:	2303      	movs	r3, #3
 8002f7a:	2206      	movs	r2, #6
 8002f7c:	f000 fbd3 	bl	8003726 <.text_21+0x2>
 8002f80:	2800      	cmp	r0, #0
 8002f82:	d1ee      	bne.n	8002f62 <USBPD_PE_StateMachine_SRC+0x652>
 8002f84:	212e      	movs	r1, #46	@ 0x2e
 8002f86:	e6e5      	b.n	8002d54 <USBPD_PE_StateMachine_SRC+0x444>
 8002f88:	2000      	movs	r0, #0
 8002f8a:	9000      	str	r0, [sp, #0]
 8002f8c:	2307      	movs	r3, #7
 8002f8e:	2203      	movs	r2, #3
 8002f90:	e77a      	b.n	8002e88 <USBPD_PE_StateMachine_SRC+0x578>
 8002f92:	2000      	movs	r0, #0
 8002f94:	9000      	str	r0, [sp, #0]
 8002f96:	2312      	movs	r3, #18
 8002f98:	7879      	ldrb	r1, [r7, #1]
 8002f9a:	220d      	movs	r2, #13
 8002f9c:	f000 fbc4 	bl	8003728 <.text_21+0x4>
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	d1de      	bne.n	8002f62 <USBPD_PE_StateMachine_SRC+0x652>
 8002fa4:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8002fa8:	241b      	movs	r4, #27
 8002faa:	2130      	movs	r1, #48	@ 0x30
 8002fac:	e6d2      	b.n	8002d54 <USBPD_PE_StateMachine_SRC+0x444>
 8002fae:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002fb2:	2914      	cmp	r1, #20
 8002fb4:	d019      	beq.n	8002fea <USBPD_PE_StateMachine_SRC+0x6da>
 8002fb6:	783a      	ldrb	r2, [r7, #0]
 8002fb8:	7879      	ldrb	r1, [r7, #1]
 8002fba:	428a      	cmp	r2, r1
 8002fbc:	bf02      	ittt	eq
 8002fbe:	88ba      	ldrheq	r2, [r7, #4]
 8002fc0:	4010      	andeq	r0, r2
 8002fc2:	2803      	cmpeq	r0, #3
 8002fc4:	d111      	bne.n	8002fea <USBPD_PE_StateMachine_SRC+0x6da>
 8002fc6:	7c30      	ldrb	r0, [r6, #16]
 8002fc8:	2131      	movs	r1, #49	@ 0x31
 8002fca:	f7fd fac0 	bl	800054e <USBPD_PE_Notification>
 8002fce:	7838      	ldrb	r0, [r7, #0]
 8002fd0:	b910      	cbnz	r0, 8002fd8 <USBPD_PE_StateMachine_SRC+0x6c8>
 8002fd2:	2107      	movs	r1, #7
 8002fd4:	7471      	strb	r1, [r6, #17]
 8002fd6:	e002      	b.n	8002fde <USBPD_PE_StateMachine_SRC+0x6ce>
 8002fd8:	2003      	movs	r0, #3
 8002fda:	7470      	strb	r0, [r6, #17]
 8002fdc:	2400      	movs	r4, #0
 8002fde:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002fe2:	2814      	cmp	r0, #20
 8002fe4:	d001      	beq.n	8002fea <USBPD_PE_StateMachine_SRC+0x6da>
 8002fe6:	f000 fb97 	bl	8003718 <.text_20>
 8002fea:	8bf0      	ldrh	r0, [r6, #30]
 8002fec:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002ff0:	d1b7      	bne.n	8002f62 <USBPD_PE_StateMachine_SRC+0x652>
 8002ff2:	e1d9      	b.n	80033a8 <USBPD_PE_StateMachine_SRC+0xa98>
 8002ff4:	6870      	ldr	r0, [r6, #4]
 8002ff6:	7801      	ldrb	r1, [r0, #0]
 8002ff8:	f001 0103 	and.w	r1, r1, #3
 8002ffc:	2902      	cmp	r1, #2
 8002ffe:	bf04      	itt	eq
 8003000:	7c30      	ldrbeq	r0, [r6, #16]
 8003002:	f001 fd42 	bleq	8004a8a <USBPD_PRL_SRCReleaseSinkNG>
 8003006:	2105      	movs	r1, #5
 8003008:	4630      	mov	r0, r6
 800300a:	f7fd fc6f 	bl	80008ec <PE_Send_RESET>
 800300e:	f000 fb5e 	bl	80036ce <.text_13>
 8003012:	2100      	movs	r1, #0
 8003014:	78a8      	ldrb	r0, [r5, #2]
 8003016:	1c40      	adds	r0, r0, #1
 8003018:	70a8      	strb	r0, [r5, #2]
 800301a:	2202      	movs	r2, #2
 800301c:	6970      	ldr	r0, [r6, #20]
 800301e:	f420 60c0 	bic.w	r0, r0, #1536	@ 0x600
 8003022:	6170      	str	r0, [r6, #20]
 8003024:	70b9      	strb	r1, [r7, #2]
 8003026:	4630      	mov	r0, r6
 8003028:	2101      	movs	r1, #1
 800302a:	f7fe f970 	bl	800130e <PE_CallHardResetCallback>
 800302e:	2169      	movs	r1, #105	@ 0x69
 8003030:	4640      	mov	r0, r8
 8003032:	f7fd fa8c 	bl	800054e <USBPD_PE_Notification>
 8003036:	f8a6 a01e 	strh.w	sl, [r6, #30]
 800303a:	241b      	movs	r4, #27
 800303c:	2015      	movs	r0, #21
 800303e:	e65a      	b.n	8002cf6 <USBPD_PE_StateMachine_SRC+0x3e6>
 8003040:	6870      	ldr	r0, [r6, #4]
 8003042:	7801      	ldrb	r1, [r0, #0]
 8003044:	f001 0103 	and.w	r1, r1, #3
 8003048:	2902      	cmp	r1, #2
 800304a:	bf04      	itt	eq
 800304c:	7c30      	ldrbeq	r0, [r6, #16]
 800304e:	f001 fd1c 	bleq	8004a8a <USBPD_PRL_SRCReleaseSinkNG>
 8003052:	e7ec      	b.n	800302e <USBPD_PE_StateMachine_SRC+0x71e>
 8003054:	8bf0      	ldrh	r0, [r6, #30]
 8003056:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800305a:	d117      	bne.n	800308c <USBPD_PE_StateMachine_SRC+0x77c>
 800305c:	78a9      	ldrb	r1, [r5, #2]
 800305e:	6970      	ldr	r0, [r6, #20]
 8003060:	2903      	cmp	r1, #3
 8003062:	d303      	bcc.n	800306c <USBPD_PE_StateMachine_SRC+0x75c>
 8003064:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8003068:	bb48      	cbnz	r0, 80030be <USBPD_PE_StateMachine_SRC+0x7ae>
 800306a:	e02c      	b.n	80030c6 <USBPD_PE_StateMachine_SRC+0x7b6>
 800306c:	f248 218a 	movw	r1, #33418	@ 0x828a
 8003070:	83f1      	strh	r1, [r6, #30]
 8003072:	2217      	movs	r2, #23
 8003074:	7472      	strb	r2, [r6, #17]
 8003076:	2400      	movs	r4, #0
 8003078:	f3c0 2041 	ubfx	r0, r0, #9, #2
 800307c:	1e42      	subs	r2, r0, #1
 800307e:	4192      	sbcs	r2, r2
 8003080:	0fd2      	lsrs	r2, r2, #31
 8003082:	f000 fb45 	bl	8003710 <.text_19+0x2>
 8003086:	2203      	movs	r2, #3
 8003088:	f000 fb42 	bl	8003710 <.text_19+0x2>
 800308c:	e59a      	b.n	8002bc4 <USBPD_PE_StateMachine_SRC+0x2b4>
 800308e:	68b2      	ldr	r2, [r6, #8]
 8003090:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8003092:	2100      	movs	r1, #0
 8003094:	4640      	mov	r0, r8
 8003096:	4798      	blx	r3
 8003098:	2801      	cmp	r0, #1
 800309a:	d106      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x79a>
 800309c:	f248 3020 	movw	r0, #33568	@ 0x8320
 80030a0:	83f0      	strh	r0, [r6, #30]
 80030a2:	2113      	movs	r1, #19
 80030a4:	f44f 7448 	mov.w	r4, #800	@ 0x320
 80030a8:	7471      	strb	r1, [r6, #17]
 80030aa:	8bf0      	ldrh	r0, [r6, #30]
 80030ac:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80030b0:	d1ec      	bne.n	800308c <USBPD_PE_StateMachine_SRC+0x77c>
 80030b2:	f000 fb2c 	bl	800370e <.text_19>
 80030b6:	6970      	ldr	r0, [r6, #20]
 80030b8:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80030bc:	b118      	cbz	r0, 80030c6 <USBPD_PE_StateMachine_SRC+0x7b6>
 80030be:	68b1      	ldr	r1, [r6, #8]
 80030c0:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80030c2:	2800      	cmp	r0, #0
 80030c4:	d11f      	bne.n	8003106 <USBPD_PE_StateMachine_SRC+0x7f6>
 80030c6:	2100      	movs	r1, #0
 80030c8:	e5ff      	b.n	8002cca <USBPD_PE_StateMachine_SRC+0x3ba>
 80030ca:	8bf0      	ldrh	r0, [r6, #30]
 80030cc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80030d0:	d1dc      	bne.n	800308c <USBPD_PE_StateMachine_SRC+0x77c>
 80030d2:	2204      	movs	r2, #4
 80030d4:	f000 fb1c 	bl	8003710 <.text_19+0x2>
 80030d8:	68b2      	ldr	r2, [r6, #8]
 80030da:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80030dc:	2101      	movs	r1, #1
 80030de:	4640      	mov	r0, r8
 80030e0:	4798      	blx	r3
 80030e2:	2801      	cmp	r0, #1
 80030e4:	d10a      	bne.n	80030fc <USBPD_PE_StateMachine_SRC+0x7ec>
 80030e6:	4630      	mov	r0, r6
 80030e8:	f7fd fcff 	bl	8000aea <PE_Reset_HardReset>
 80030ec:	2168      	movs	r1, #104	@ 0x68
 80030ee:	4640      	mov	r0, r8
 80030f0:	f7fd fa2d 	bl	800054e <USBPD_PE_Notification>
 80030f4:	2205      	movs	r2, #5
 80030f6:	f000 fb0b 	bl	8003710 <.text_19+0x2>
 80030fa:	e67d      	b.n	8002df8 <USBPD_PE_StateMachine_SRC+0x4e8>
 80030fc:	f000 fb07 	bl	800370e <.text_19>
 8003100:	68b1      	ldr	r1, [r6, #8]
 8003102:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8003104:	2800      	cmp	r0, #0
 8003106:	f040 8280 	bne.w	800360a <USBPD_PE_StateMachine_SRC+0xcfa>
 800310a:	2100      	movs	r1, #0
 800310c:	7471      	strb	r1, [r6, #17]
 800310e:	e604      	b.n	8002d1a <USBPD_PE_StateMachine_SRC+0x40a>
 8003110:	2001      	movs	r0, #1
 8003112:	9000      	str	r0, [sp, #0]
 8003114:	231b      	movs	r3, #27
 8003116:	2207      	movs	r2, #7
 8003118:	f000 fb05 	bl	8003726 <.text_21+0x2>
 800311c:	2800      	cmp	r0, #0
 800311e:	d1b5      	bne.n	800308c <USBPD_PE_StateMachine_SRC+0x77c>
 8003120:	2006      	movs	r0, #6
 8003122:	f000 faaa 	bl	800367a <.text_6>
 8003126:	241b      	movs	r4, #27
 8003128:	210b      	movs	r1, #11
 800312a:	e613      	b.n	8002d54 <USBPD_PE_StateMachine_SRC+0x444>
 800312c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003130:	2811      	cmp	r0, #17
 8003132:	d131      	bne.n	8003198 <USBPD_PE_StateMachine_SRC+0x888>
 8003134:	88b9      	ldrh	r1, [r7, #4]
 8003136:	0bc8      	lsrs	r0, r1, #15
 8003138:	d11b      	bne.n	8003172 <USBPD_PE_StateMachine_SRC+0x862>
 800313a:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800313e:	b1c0      	cbz	r0, 8003172 <USBPD_PE_StateMachine_SRC+0x862>
 8003140:	4608      	mov	r0, r1
 8003142:	f000 011f 	and.w	r1, r0, #31
 8003146:	2901      	cmp	r1, #1
 8003148:	d113      	bne.n	8003172 <USBPD_PE_StateMachine_SRC+0x862>
 800314a:	68b4      	ldr	r4, [r6, #8]
 800314c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8003150:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8003154:	68b8      	ldr	r0, [r7, #8]
 8003156:	1c82      	adds	r2, r0, #2
 8003158:	7c30      	ldrb	r0, [r6, #16]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	2104      	movs	r1, #4
 800315e:	47e0      	blx	ip
 8003160:	f000 fa93 	bl	800368a <.text_8>
 8003164:	d001      	beq.n	800316a <USBPD_PE_StateMachine_SRC+0x85a>
 8003166:	f000 fad7 	bl	8003718 <.text_20>
 800316a:	7c30      	ldrb	r0, [r6, #16]
 800316c:	210d      	movs	r1, #13
 800316e:	f7fd f9ee 	bl	800054e <USBPD_PE_Notification>
 8003172:	88b8      	ldrh	r0, [r7, #4]
 8003174:	f410 4f70 	tst.w	r0, #61440	@ 0xf000
 8003178:	d10e      	bne.n	8003198 <USBPD_PE_StateMachine_SRC+0x888>
 800317a:	f000 001f 	and.w	r0, r0, #31
 800317e:	2804      	cmp	r0, #4
 8003180:	bf18      	it	ne
 8003182:	2810      	cmpne	r0, #16
 8003184:	d108      	bne.n	8003198 <USBPD_PE_StateMachine_SRC+0x888>
 8003186:	f000 fa80 	bl	800368a <.text_8>
 800318a:	d001      	beq.n	8003190 <USBPD_PE_StateMachine_SRC+0x880>
 800318c:	f000 fac4 	bl	8003718 <.text_20>
 8003190:	7c30      	ldrb	r0, [r6, #16]
 8003192:	210e      	movs	r1, #14
 8003194:	f7fd f9db 	bl	800054e <USBPD_PE_Notification>
 8003198:	8bf0      	ldrh	r0, [r6, #30]
 800319a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800319e:	d11a      	bne.n	80031d6 <USBPD_PE_StateMachine_SRC+0x8c6>
 80031a0:	2103      	movs	r1, #3
 80031a2:	e5b9      	b.n	8002d18 <USBPD_PE_StateMachine_SRC+0x408>
 80031a4:	68b0      	ldr	r0, [r6, #8]
 80031a6:	6881      	ldr	r1, [r0, #8]
 80031a8:	b1d1      	cbz	r1, 80031e0 <USBPD_PE_StateMachine_SRC+0x8d0>
 80031aa:	7c30      	ldrb	r0, [r6, #16]
 80031ac:	4788      	blx	r1
 80031ae:	280a      	cmp	r0, #10
 80031b0:	d002      	beq.n	80031b8 <USBPD_PE_StateMachine_SRC+0x8a8>
 80031b2:	280d      	cmp	r0, #13
 80031b4:	d010      	beq.n	80031d8 <USBPD_PE_StateMachine_SRC+0x8c8>
 80031b6:	e013      	b.n	80031e0 <USBPD_PE_StateMachine_SRC+0x8d0>
 80031b8:	f8a6 b01e 	strh.w	fp, [r6, #30]
 80031bc:	2000      	movs	r0, #0
 80031be:	9000      	str	r0, [sp, #0]
 80031c0:	2324      	movs	r3, #36	@ 0x24
 80031c2:	f000 faaf 	bl	8003724 <.text_21>
 80031c6:	241e      	movs	r4, #30
 80031c8:	2800      	cmp	r0, #0
 80031ca:	d104      	bne.n	80031d6 <USBPD_PE_StateMachine_SRC+0x8c6>
 80031cc:	f000 fa50 	bl	8003670 <.text_5>
 80031d0:	2201      	movs	r2, #1
 80031d2:	2101      	movs	r1, #1
 80031d4:	47e0      	blx	ip
 80031d6:	e4f5      	b.n	8002bc4 <USBPD_PE_StateMachine_SRC+0x2b4>
 80031d8:	2000      	movs	r0, #0
 80031da:	9000      	str	r0, [sp, #0]
 80031dc:	2303      	movs	r3, #3
 80031de:	e652      	b.n	8002e86 <USBPD_PE_StateMachine_SRC+0x576>
 80031e0:	2000      	movs	r0, #0
 80031e2:	9000      	str	r0, [sp, #0]
 80031e4:	2303      	movs	r3, #3
 80031e6:	e67d      	b.n	8002ee4 <USBPD_PE_StateMachine_SRC+0x5d4>
 80031e8:	8bf0      	ldrh	r0, [r6, #30]
 80031ea:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80031ee:	d1f2      	bne.n	80031d6 <USBPD_PE_StateMachine_SRC+0x8c6>
 80031f0:	f000 fa89 	bl	8003706 <.text_18>
 80031f4:	f000 fa5f 	bl	80036b6 <.text_11>
 80031f8:	2206      	movs	r2, #6
 80031fa:	f000 fa74 	bl	80036e6 <.text_15>
 80031fe:	f000 fa78 	bl	80036f2 <.text_16>
 8003202:	7c30      	ldrb	r0, [r6, #16]
 8003204:	2100      	movs	r1, #0
 8003206:	f001 fc10 	bl	8004a2a <USBPD_PRL_SetHeaderPowerRole>
 800320a:	2000      	movs	r0, #0
 800320c:	9000      	str	r0, [sp, #0]
 800320e:	2325      	movs	r3, #37	@ 0x25
 8003210:	2206      	movs	r2, #6
 8003212:	f000 fa88 	bl	8003726 <.text_21+0x2>
 8003216:	2800      	cmp	r0, #0
 8003218:	d1dd      	bne.n	80031d6 <USBPD_PE_StateMachine_SRC+0x8c6>
 800321a:	e0a5      	b.n	8003368 <USBPD_PE_StateMachine_SRC+0xa58>
 800321c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003220:	2911      	cmp	r1, #17
 8003222:	bf02      	ittt	eq
 8003224:	88b9      	ldrheq	r1, [r7, #4]
 8003226:	4008      	andeq	r0, r1
 8003228:	2806      	cmpeq	r0, #6
 800322a:	d105      	bne.n	8003238 <USBPD_PE_StateMachine_SRC+0x928>
 800322c:	f000 fa29 	bl	8003682 <.text_7>
 8003230:	f000 fa75 	bl	800371e <.text_20+0x6>
 8003234:	2026      	movs	r0, #38	@ 0x26
 8003236:	7470      	strb	r0, [r6, #17]
 8003238:	8bf0      	ldrh	r0, [r6, #30]
 800323a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800323e:	d1ca      	bne.n	80031d6 <USBPD_PE_StateMachine_SRC+0x8c6>
 8003240:	68b3      	ldr	r3, [r6, #8]
 8003242:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003244:	2800      	cmp	r0, #0
 8003246:	f040 81e0 	bne.w	800360a <USBPD_PE_StateMachine_SRC+0xcfa>
 800324a:	7c30      	ldrb	r0, [r6, #16]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	220a      	movs	r2, #10
 8003250:	2101      	movs	r1, #1
 8003252:	4798      	blx	r3
 8003254:	e0a8      	b.n	80033a8 <USBPD_PE_StateMachine_SRC+0xa98>
 8003256:	2100      	movs	r1, #0
 8003258:	4630      	mov	r0, r6
 800325a:	f7fd fb67 	bl	800092c <PE_ChangePowerRole>
 800325e:	f000 fa03 	bl	8003668 <.text_4>
 8003262:	220d      	movs	r2, #13
 8003264:	2100      	movs	r1, #0
 8003266:	47a0      	blx	r4
 8003268:	7c30      	ldrb	r0, [r6, #16]
 800326a:	2114      	movs	r1, #20
 800326c:	f7fd f96f 	bl	800054e <USBPD_PE_Notification>
 8003270:	f000 f9fa 	bl	8003668 <.text_4>
 8003274:	220e      	movs	r2, #14
 8003276:	2100      	movs	r1, #0
 8003278:	47a0      	blx	r4
 800327a:	6870      	ldr	r0, [r6, #4]
 800327c:	7801      	ldrb	r1, [r0, #0]
 800327e:	f001 0103 	and.w	r1, r1, #3
 8003282:	2901      	cmp	r1, #1
 8003284:	bf04      	itt	eq
 8003286:	4640      	moveq	r0, r8
 8003288:	f001 fc10 	bleq	8004aac <USBPD_PRL_SOPCapability>
 800328c:	4630      	mov	r0, r6
 800328e:	f7fd fca1 	bl	8000bd4 <PE_Reset_StateMachine>
 8003292:	e542      	b.n	8002d1a <USBPD_PE_StateMachine_SRC+0x40a>
 8003294:	2001      	movs	r0, #1
 8003296:	9000      	str	r0, [sp, #0]
 8003298:	231f      	movs	r3, #31
 800329a:	220a      	movs	r2, #10
 800329c:	f000 fa43 	bl	8003726 <.text_21+0x2>
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d198      	bne.n	80031d6 <USBPD_PE_StateMachine_SRC+0x8c6>
 80032a4:	2008      	movs	r0, #8
 80032a6:	f000 f9e8 	bl	800367a <.text_6>
 80032aa:	2202      	movs	r2, #2
 80032ac:	f000 fa1b 	bl	80036e6 <.text_15>
 80032b0:	241b      	movs	r4, #27
 80032b2:	2139      	movs	r1, #57	@ 0x39
 80032b4:	e54e      	b.n	8002d54 <USBPD_PE_StateMachine_SRC+0x444>
 80032b6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80032ba:	2811      	cmp	r0, #17
 80032bc:	bf04      	itt	eq
 80032be:	88b8      	ldrheq	r0, [r7, #4]
 80032c0:	f410 4f70 	tsteq.w	r0, #61440	@ 0xf000
 80032c4:	d133      	bne.n	800332e <USBPD_PE_StateMachine_SRC+0xa1e>
 80032c6:	f000 001f 	and.w	r0, r0, #31
 80032ca:	2803      	cmp	r0, #3
 80032cc:	d006      	beq.n	80032dc <USBPD_PE_StateMachine_SRC+0x9cc>
 80032ce:	2804      	cmp	r0, #4
 80032d0:	d011      	beq.n	80032f6 <USBPD_PE_StateMachine_SRC+0x9e6>
 80032d2:	280c      	cmp	r0, #12
 80032d4:	d008      	beq.n	80032e8 <USBPD_PE_StateMachine_SRC+0x9d8>
 80032d6:	2810      	cmp	r0, #16
 80032d8:	d01a      	beq.n	8003310 <USBPD_PE_StateMachine_SRC+0xa00>
 80032da:	e028      	b.n	800332e <USBPD_PE_StateMachine_SRC+0xa1e>
 80032dc:	7c30      	ldrb	r0, [r6, #16]
 80032de:	213a      	movs	r1, #58	@ 0x3a
 80032e0:	f7fd f935 	bl	800054e <USBPD_PE_Notification>
 80032e4:	2020      	movs	r0, #32
 80032e6:	e00c      	b.n	8003302 <USBPD_PE_StateMachine_SRC+0x9f2>
 80032e8:	f000 f9be 	bl	8003668 <.text_4>
 80032ec:	2205      	movs	r2, #5
 80032ee:	2101      	movs	r1, #1
 80032f0:	47a0      	blx	r4
 80032f2:	213b      	movs	r1, #59	@ 0x3b
 80032f4:	e002      	b.n	80032fc <USBPD_PE_StateMachine_SRC+0x9ec>
 80032f6:	f000 f9f0 	bl	80036da <.text_14>
 80032fa:	2116      	movs	r1, #22
 80032fc:	f000 fa00 	bl	8003700 <.text_17>
 8003300:	2003      	movs	r0, #3
 8003302:	7470      	strb	r0, [r6, #17]
 8003304:	2400      	movs	r4, #0
 8003306:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800330a:	2814      	cmp	r0, #20
 800330c:	d10d      	bne.n	800332a <USBPD_PE_StateMachine_SRC+0xa1a>
 800330e:	e00e      	b.n	800332e <USBPD_PE_StateMachine_SRC+0xa1e>
 8003310:	f000 f9e3 	bl	80036da <.text_14>
 8003314:	7c30      	ldrb	r0, [r6, #16]
 8003316:	2117      	movs	r1, #23
 8003318:	f7fd f919 	bl	800054e <USBPD_PE_Notification>
 800331c:	2003      	movs	r0, #3
 800331e:	7470      	strb	r0, [r6, #17]
 8003320:	2400      	movs	r4, #0
 8003322:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003326:	2814      	cmp	r0, #20
 8003328:	d001      	beq.n	800332e <USBPD_PE_StateMachine_SRC+0xa1e>
 800332a:	f000 f9f5 	bl	8003718 <.text_20>
 800332e:	8bf0      	ldrh	r0, [r6, #30]
 8003330:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003334:	d122      	bne.n	800337c <USBPD_PE_StateMachine_SRC+0xa6c>
 8003336:	e733      	b.n	80031a0 <USBPD_PE_StateMachine_SRC+0x890>
 8003338:	f000 f9bd 	bl	80036b6 <.text_11>
 800333c:	7f30      	ldrb	r0, [r6, #28]
 800333e:	2809      	cmp	r0, #9
 8003340:	d004      	beq.n	800334c <USBPD_PE_StateMachine_SRC+0xa3c>
 8003342:	f000 f995 	bl	8003670 <.text_5>
 8003346:	2206      	movs	r2, #6
 8003348:	2101      	movs	r1, #1
 800334a:	47e0      	blx	ip
 800334c:	f000 f9d1 	bl	80036f2 <.text_16>
 8003350:	7c30      	ldrb	r0, [r6, #16]
 8003352:	2100      	movs	r1, #0
 8003354:	f001 fb69 	bl	8004a2a <USBPD_PRL_SetHeaderPowerRole>
 8003358:	2000      	movs	r0, #0
 800335a:	9000      	str	r0, [sp, #0]
 800335c:	2321      	movs	r3, #33	@ 0x21
 800335e:	2206      	movs	r2, #6
 8003360:	f000 f9e1 	bl	8003726 <.text_21+0x2>
 8003364:	2800      	cmp	r0, #0
 8003366:	d109      	bne.n	800337c <USBPD_PE_StateMachine_SRC+0xa6c>
 8003368:	f000 f97e 	bl	8003668 <.text_4>
 800336c:	2208      	movs	r2, #8
 800336e:	2101      	movs	r1, #1
 8003370:	47a0      	blx	r4
 8003372:	f248 10d6 	movw	r0, #33238	@ 0x81d6
 8003376:	83f0      	strh	r0, [r6, #30]
 8003378:	f44f 74eb 	mov.w	r4, #470	@ 0x1d6
 800337c:	e422      	b.n	8002bc4 <USBPD_PE_StateMachine_SRC+0x2b4>
 800337e:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003382:	2911      	cmp	r1, #17
 8003384:	bf02      	ittt	eq
 8003386:	88b9      	ldrheq	r1, [r7, #4]
 8003388:	4008      	andeq	r0, r1
 800338a:	2806      	cmpeq	r0, #6
 800338c:	d103      	bne.n	8003396 <USBPD_PE_StateMachine_SRC+0xa86>
 800338e:	2026      	movs	r0, #38	@ 0x26
 8003390:	7470      	strb	r0, [r6, #17]
 8003392:	f000 f9c1 	bl	8003718 <.text_20>
 8003396:	8bf0      	ldrh	r0, [r6, #30]
 8003398:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800339c:	d1ee      	bne.n	800337c <USBPD_PE_StateMachine_SRC+0xa6c>
 800339e:	68b1      	ldr	r1, [r6, #8]
 80033a0:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80033a2:	2800      	cmp	r0, #0
 80033a4:	f040 8131 	bne.w	800360a <USBPD_PE_StateMachine_SRC+0xcfa>
 80033a8:	210f      	movs	r1, #15
 80033aa:	e4b5      	b.n	8002d18 <USBPD_PE_StateMachine_SRC+0x408>
 80033ac:	8bf0      	ldrh	r0, [r6, #30]
 80033ae:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80033b2:	d1e3      	bne.n	800337c <USBPD_PE_StateMachine_SRC+0xa6c>
 80033b4:	f000 f95c 	bl	8003670 <.text_5>
 80033b8:	220e      	movs	r2, #14
 80033ba:	2101      	movs	r1, #1
 80033bc:	47e0      	blx	ip
 80033be:	6870      	ldr	r0, [r6, #4]
 80033c0:	7801      	ldrb	r1, [r0, #0]
 80033c2:	f001 0103 	and.w	r1, r1, #3
 80033c6:	2902      	cmp	r1, #2
 80033c8:	bf04      	itt	eq
 80033ca:	7c30      	ldrbeq	r0, [r6, #16]
 80033cc:	f001 fb5d 	bleq	8004a8a <USBPD_PRL_SRCReleaseSinkNG>
 80033d0:	4630      	mov	r0, r6
 80033d2:	f7fd fbff 	bl	8000bd4 <PE_Reset_StateMachine>
 80033d6:	2115      	movs	r1, #21
 80033d8:	e4bc      	b.n	8002d54 <USBPD_PE_StateMachine_SRC+0x444>
 80033da:	2903      	cmp	r1, #3
 80033dc:	d10f      	bne.n	80033fe <USBPD_PE_StateMachine_SRC+0xaee>
 80033de:	2000      	movs	r0, #0
 80033e0:	6871      	ldr	r1, [r6, #4]
 80033e2:	7730      	strb	r0, [r6, #28]
 80033e4:	7808      	ldrb	r0, [r1, #0]
 80033e6:	f000 0003 	and.w	r0, r0, #3
 80033ea:	2802      	cmp	r0, #2
 80033ec:	bf04      	itt	eq
 80033ee:	7c30      	ldrbeq	r0, [r6, #16]
 80033f0:	f001 fb4b 	bleq	8004a8a <USBPD_PRL_SRCReleaseSinkNG>
 80033f4:	2004      	movs	r0, #4
 80033f6:	7470      	strb	r0, [r6, #17]
 80033f8:	2167      	movs	r1, #103	@ 0x67
 80033fa:	f000 f981 	bl	8003700 <.text_17>
 80033fe:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003402:	2814      	cmp	r0, #20
 8003404:	d009      	beq.n	800341a <USBPD_PE_StateMachine_SRC+0xb0a>
 8003406:	4630      	mov	r0, r6
 8003408:	f7fe fa98 	bl	800193c <PE_ManageRXEvent>
 800340c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003410:	2814      	cmp	r0, #20
 8003412:	d0b3      	beq.n	800337c <USBPD_PE_StateMachine_SRC+0xa6c>
 8003414:	f000 f980 	bl	8003718 <.text_20>
 8003418:	e7b0      	b.n	800337c <USBPD_PE_StateMachine_SRC+0xa6c>
 800341a:	6970      	ldr	r0, [r6, #20]
 800341c:	0cc0      	lsrs	r0, r0, #19
 800341e:	d027      	beq.n	8003470 <USBPD_PE_StateMachine_SRC+0xb60>
 8003420:	8c30      	ldrh	r0, [r6, #32]
 8003422:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003426:	d10e      	bne.n	8003446 <USBPD_PE_StateMachine_SRC+0xb36>
 8003428:	210f      	movs	r1, #15
 800342a:	7471      	strb	r1, [r6, #17]
 800342c:	2000      	movs	r0, #0
 800342e:	9000      	str	r0, [sp, #0]
 8003430:	7c31      	ldrb	r1, [r6, #16]
 8003432:	f8d9 4000 	ldr.w	r4, [r9]
 8003436:	2300      	movs	r3, #0
 8003438:	2270      	movs	r2, #112	@ 0x70
 800343a:	2009      	movs	r0, #9
 800343c:	47a0      	blx	r4
 800343e:	78a8      	ldrb	r0, [r5, #2]
 8003440:	1c40      	adds	r0, r0, #1
 8003442:	70a8      	strb	r0, [r5, #2]
 8003444:	e469      	b.n	8002d1a <USBPD_PE_StateMachine_SRC+0x40a>
 8003446:	88b9      	ldrh	r1, [r7, #4]
 8003448:	6972      	ldr	r2, [r6, #20]
 800344a:	f3c1 2142 	ubfx	r1, r1, #9, #3
 800344e:	2033      	movs	r0, #51	@ 0x33
 8003450:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 8003454:	fb11 f100 	smulbb	r1, r1, r0
 8003458:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800345c:	8431      	strh	r1, [r6, #32]
 800345e:	88b9      	ldrh	r1, [r7, #4]
 8003460:	6972      	ldr	r2, [r6, #20]
 8003462:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8003466:	eb01 44d2 	add.w	r4, r1, r2, lsr #19
 800346a:	4344      	muls	r4, r0
 800346c:	b2a4      	uxth	r4, r4
 800346e:	e785      	b.n	800337c <USBPD_PE_StateMachine_SRC+0xa6c>
 8003470:	8cb0      	ldrh	r0, [r6, #36]	@ 0x24
 8003472:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003476:	bf08      	it	eq
 8003478:	210f      	moveq	r1, #15
 800347a:	d01b      	beq.n	80034b4 <USBPD_PE_StateMachine_SRC+0xba4>
 800347c:	7c30      	ldrb	r0, [r6, #16]
 800347e:	f7fd fab6 	bl	80009ee <PE_PRL_Control_RxEvent>
 8003482:	b968      	cbnz	r0, 80034a0 <USBPD_PE_StateMachine_SRC+0xb90>
 8003484:	78b8      	ldrb	r0, [r7, #2]
 8003486:	b158      	cbz	r0, 80034a0 <USBPD_PE_StateMachine_SRC+0xb90>
 8003488:	78f9      	ldrb	r1, [r7, #3]
 800348a:	7079      	strb	r1, [r7, #1]
 800348c:	7470      	strb	r0, [r6, #17]
 800348e:	2000      	movs	r0, #0
 8003490:	70b8      	strb	r0, [r7, #2]
 8003492:	6970      	ldr	r0, [r6, #20]
 8003494:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 8003496:	62f1      	str	r1, [r6, #44]	@ 0x2c
 8003498:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 800349c:	6170      	str	r0, [r6, #20]
 800349e:	e43c      	b.n	8002d1a <USBPD_PE_StateMachine_SRC+0x40a>
 80034a0:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
 80034a2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80034a6:	d106      	bne.n	80034b6 <USBPD_PE_StateMachine_SRC+0xba6>
 80034a8:	2100      	movs	r1, #0
 80034aa:	8471      	strh	r1, [r6, #34]	@ 0x22
 80034ac:	2105      	movs	r1, #5
 80034ae:	7928      	ldrb	r0, [r5, #4]
 80034b0:	1c40      	adds	r0, r0, #1
 80034b2:	7128      	strb	r0, [r5, #4]
 80034b4:	e430      	b.n	8002d18 <USBPD_PE_StateMachine_SRC+0x408>
 80034b6:	4630      	mov	r0, r6
 80034b8:	f7fd ff4a 	bl	8001350 <PE_CalculateMinTiming>
 80034bc:	e426      	b.n	8002d0c <USBPD_PE_StateMachine_SRC+0x3fc>
 80034be:	2000      	movs	r0, #0
 80034c0:	2103      	movs	r1, #3
 80034c2:	2201      	movs	r2, #1
 80034c4:	9002      	str	r0, [sp, #8]
 80034c6:	9101      	str	r1, [sp, #4]
 80034c8:	9200      	str	r2, [sp, #0]
 80034ca:	f106 032c 	add.w	r3, r6, #44	@ 0x2c
 80034ce:	2206      	movs	r2, #6
 80034d0:	2100      	movs	r1, #0
 80034d2:	4630      	mov	r0, r6
 80034d4:	f7fd fff1 	bl	80014ba <PE_Send_DataMessage>
 80034d8:	2800      	cmp	r0, #0
 80034da:	d13b      	bne.n	8003554 <USBPD_PE_StateMachine_SRC+0xc44>
 80034dc:	215d      	movs	r1, #93	@ 0x5d
 80034de:	e439      	b.n	8002d54 <USBPD_PE_StateMachine_SRC+0x444>
 80034e0:	2000      	movs	r0, #0
 80034e2:	9004      	str	r0, [sp, #16]
 80034e4:	ab04      	add	r3, sp, #16
 80034e6:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80034ea:	f8dc 7014 	ldr.w	r7, [ip, #20]
 80034ee:	aa05      	add	r2, sp, #20
 80034f0:	210a      	movs	r1, #10
 80034f2:	4640      	mov	r0, r8
 80034f4:	47b8      	blx	r7
 80034f6:	9804      	ldr	r0, [sp, #16]
 80034f8:	2104      	movs	r1, #4
 80034fa:	f7fd ff51 	bl	80013a0 <PE_CheckDataSizeFromGetDataInfo>
 80034fe:	b9f8      	cbnz	r0, 8003540 <USBPD_PE_StateMachine_SRC+0xc30>
 8003500:	71e8      	strb	r0, [r5, #7]
 8003502:	2100      	movs	r1, #0
 8003504:	7229      	strb	r1, [r5, #8]
 8003506:	7c30      	ldrb	r0, [r6, #16]
 8003508:	f7fd fc41 	bl	8000d8e <PE_Get_UnchunkedSupport>
 800350c:	b918      	cbnz	r0, 8003516 <USBPD_PE_StateMachine_SRC+0xc06>
 800350e:	7a28      	ldrb	r0, [r5, #8]
 8003510:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8003514:	7228      	strb	r0, [r5, #8]
 8003516:	a905      	add	r1, sp, #20
 8003518:	9a04      	ldr	r2, [sp, #16]
 800351a:	f206 2067 	addw	r0, r6, #615	@ 0x267
 800351e:	f015 fad9 	bl	8018ad4 <__aeabi_memcpy>
 8003522:	2000      	movs	r0, #0
 8003524:	2103      	movs	r1, #3
 8003526:	2208      	movs	r2, #8
 8003528:	9002      	str	r0, [sp, #8]
 800352a:	9101      	str	r1, [sp, #4]
 800352c:	9200      	str	r2, [sp, #0]
 800352e:	f206 2363 	addw	r3, r6, #611	@ 0x263
 8003532:	220c      	movs	r2, #12
 8003534:	2100      	movs	r1, #0
 8003536:	4630      	mov	r0, r6
 8003538:	f7fe f8de 	bl	80016f8 <PE_Send_ExtendedMessage>
 800353c:	214c      	movs	r1, #76	@ 0x4c
 800353e:	e7ce      	b.n	80034de <USBPD_PE_StateMachine_SRC+0xbce>
 8003540:	2001      	movs	r0, #1
 8003542:	e57c      	b.n	800303e <USBPD_PE_StateMachine_SRC+0x72e>
 8003544:	2101      	movs	r1, #1
 8003546:	9100      	str	r1, [sp, #0]
 8003548:	2339      	movs	r3, #57	@ 0x39
 800354a:	782a      	ldrb	r2, [r5, #0]
 800354c:	78f9      	ldrb	r1, [r7, #3]
 800354e:	f000 f8eb 	bl	8003728 <.text_21+0x4>
 8003552:	2800      	cmp	r0, #0
 8003554:	f47f ab36 	bne.w	8002bc4 <USBPD_PE_StateMachine_SRC+0x2b4>
 8003558:	7868      	ldrb	r0, [r5, #1]
 800355a:	f000 f88e 	bl	800367a <.text_6>
 800355e:	241b      	movs	r4, #27
 8003560:	2144      	movs	r1, #68	@ 0x44
 8003562:	e7bc      	b.n	80034de <USBPD_PE_StateMachine_SRC+0xbce>
 8003564:	8bf0      	ldrh	r0, [r6, #30]
 8003566:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800356a:	bf04      	itt	eq
 800356c:	f89d 000c 	ldrbeq.w	r0, [sp, #12]
 8003570:	2814      	cmpeq	r0, #20
 8003572:	f43f ae15 	beq.w	80031a0 <USBPD_PE_StateMachine_SRC+0x890>
 8003576:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800357a:	2814      	cmp	r0, #20
 800357c:	f43f ab22 	beq.w	8002bc4 <USBPD_PE_StateMachine_SRC+0x2b4>
 8003580:	88b9      	ldrh	r1, [r7, #4]
 8003582:	0bc8      	lsrs	r0, r1, #15
 8003584:	d003      	beq.n	800358e <USBPD_PE_StateMachine_SRC+0xc7e>
 8003586:	4630      	mov	r0, r6
 8003588:	f7fd ffd4 	bl	8001534 <PE_Check_ExtendedMessage>
 800358c:	e73e      	b.n	800340c <USBPD_PE_StateMachine_SRC+0xafc>
 800358e:	f001 011f 	and.w	r1, r1, #31
 8003592:	2910      	cmp	r1, #16
 8003594:	f47f ae04 	bne.w	80031a0 <USBPD_PE_StateMachine_SRC+0x890>
 8003598:	f000 f873 	bl	8003682 <.text_7>
 800359c:	2400      	movs	r4, #0
 800359e:	f000 f8be 	bl	800371e <.text_20+0x6>
 80035a2:	2000      	movs	r0, #0
 80035a4:	83f0      	strh	r0, [r6, #30]
 80035a6:	2103      	movs	r1, #3
 80035a8:	7471      	strb	r1, [r6, #17]
 80035aa:	2159      	movs	r1, #89	@ 0x59
 80035ac:	e797      	b.n	80034de <USBPD_PE_StateMachine_SRC+0xbce>
 80035ae:	4630      	mov	r0, r6
 80035b0:	f7fe f8c9 	bl	8001746 <PE_SubStateMachine_ExtendedMessages>
 80035b4:	e003      	b.n	80035be <USBPD_PE_StateMachine_SRC+0xcae>
 80035b6:	a903      	add	r1, sp, #12
 80035b8:	4630      	mov	r0, r6
 80035ba:	f7fd fbf9 	bl	8000db0 <PE_SubStateMachine_Generic>
 80035be:	f7ff bb00 	b.w	8002bc2 <USBPD_PE_StateMachine_SRC+0x2b2>
 80035c2:	a903      	add	r1, sp, #12
 80035c4:	4630      	mov	r0, r6
 80035c6:	f000 f9fe 	bl	80039c6 <PE_SubStateMachine_VconnSwap>
 80035ca:	4604      	mov	r4, r0
 80035cc:	f000 f879 	bl	80036c2 <.text_12>
 80035d0:	bf0e      	itee	eq
 80035d2:	2101      	moveq	r1, #1
 80035d4:	6830      	ldrne	r0, [r6, #0]
 80035d6:	6801      	ldrne	r1, [r0, #0]
 80035d8:	4640      	mov	r0, r8
 80035da:	f001 fa67 	bl	8004aac <USBPD_PRL_SOPCapability>
 80035de:	e6cd      	b.n	800337c <USBPD_PE_StateMachine_SRC+0xa6c>
 80035e0:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80035e4:	2911      	cmp	r1, #17
 80035e6:	bf02      	ittt	eq
 80035e8:	88b9      	ldrheq	r1, [r7, #4]
 80035ea:	4008      	andeq	r0, r1
 80035ec:	2813      	cmpeq	r0, #19
 80035ee:	d108      	bne.n	8003602 <USBPD_PE_StateMachine_SRC+0xcf2>
 80035f0:	f000 f847 	bl	8003682 <.text_7>
 80035f4:	f000 f893 	bl	800371e <.text_20+0x6>
 80035f8:	2000      	movs	r0, #0
 80035fa:	9000      	str	r0, [sp, #0]
 80035fc:	2320      	movs	r3, #32
 80035fe:	f000 f891 	bl	8003724 <.text_21>
 8003602:	8cf0      	ldrh	r0, [r6, #38]	@ 0x26
 8003604:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003608:	d1a4      	bne.n	8003554 <USBPD_PE_StateMachine_SRC+0xc44>
 800360a:	2192      	movs	r1, #146	@ 0x92
 800360c:	e752      	b.n	80034b4 <USBPD_PE_StateMachine_SRC+0xba4>
 800360e:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003612:	4630      	mov	r0, r6
 8003614:	f001 f816 	bl	8004644 <PE_StateMachine_UVDM>
 8003618:	e6b0      	b.n	800337c <USBPD_PE_StateMachine_SRC+0xa6c>
 800361a:	6970      	ldr	r0, [r6, #20]
 800361c:	f3c0 3040 	ubfx	r0, r0, #13, #1
 8003620:	b1b0      	cbz	r0, 8003650 <USBPD_PE_StateMachine_SRC+0xd40>
 8003622:	6970      	ldr	r0, [r6, #20]
 8003624:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8003628:	b138      	cbz	r0, 800363a <USBPD_PE_StateMachine_SRC+0xd2a>
 800362a:	7c30      	ldrb	r0, [r6, #16]
 800362c:	215b      	movs	r1, #91	@ 0x5b
 800362e:	f7fc ff8e 	bl	800054e <USBPD_PE_Notification>
 8003632:	6970      	ldr	r0, [r6, #20]
 8003634:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 8003638:	6170      	str	r0, [r6, #20]
 800363a:	2003      	movs	r0, #3
 800363c:	7cb1      	ldrb	r1, [r6, #18]
 800363e:	7470      	strb	r0, [r6, #17]
 8003640:	2903      	cmp	r1, #3
 8003642:	d004      	beq.n	800364e <USBPD_PE_StateMachine_SRC+0xd3e>
 8003644:	f000 f82f 	bl	80036a6 <.text_10>
 8003648:	2203      	movs	r2, #3
 800364a:	2004      	movs	r0, #4
 800364c:	47a0      	blx	r4
 800364e:	2401      	movs	r4, #1
 8003650:	6970      	ldr	r0, [r6, #20]
 8003652:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
 8003656:	2c00      	cmp	r4, #0
 8003658:	6170      	str	r0, [r6, #20]
 800365a:	f43f a9b9 	beq.w	80029d0 <USBPD_PE_StateMachine_SRC+0xc0>
 800365e:	f7ff bad7 	b.w	8002c10 <USBPD_PE_StateMachine_SRC+0x300>
	...

08003664 <.text_3>:
 8003664:	20000000 	.word	0x20000000

08003668 <.text_4>:
 8003668:	68b3      	ldr	r3, [r6, #8]
 800366a:	7c30      	ldrb	r0, [r6, #16]
 800366c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800366e:	4770      	bx	lr

08003670 <.text_5>:
 8003670:	68b3      	ldr	r3, [r6, #8]
 8003672:	7c30      	ldrb	r0, [r6, #16]
 8003674:	f8d3 c024 	ldr.w	ip, [r3, #36]	@ 0x24
 8003678:	4770      	bx	lr

0800367a <.text_6>:
 800367a:	7730      	strb	r0, [r6, #28]
 800367c:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8003680:	4770      	bx	lr

08003682 <.text_7>:
 8003682:	2014      	movs	r0, #20
 8003684:	f88d 000c 	strb.w	r0, [sp, #12]
 8003688:	4770      	bx	lr

0800368a <.text_8>:
 800368a:	2003      	movs	r0, #3
 800368c:	7470      	strb	r0, [r6, #17]
 800368e:	2400      	movs	r4, #0
 8003690:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003694:	2814      	cmp	r0, #20
 8003696:	4770      	bx	lr

08003698 <.text_9>:
 8003698:	9100      	str	r1, [sp, #0]
 800369a:	2300      	movs	r3, #0
 800369c:	7c31      	ldrb	r1, [r6, #16]
 800369e:	f8d9 c000 	ldr.w	ip, [r9]
 80036a2:	2004      	movs	r0, #4

080036a4 <__iar_annotation$$tailcall>:
 80036a4:	4760      	bx	ip

080036a6 <.text_10>:
 80036a6:	74b0      	strb	r0, [r6, #18]
 80036a8:	2100      	movs	r1, #0
 80036aa:	9100      	str	r1, [sp, #0]
 80036ac:	2300      	movs	r3, #0
 80036ae:	7c31      	ldrb	r1, [r6, #16]
 80036b0:	f8d9 4000 	ldr.w	r4, [r9]
 80036b4:	4770      	bx	lr

080036b6 <.text_11>:
 80036b6:	6870      	ldr	r0, [r6, #4]
 80036b8:	6801      	ldr	r1, [r0, #0]
 80036ba:	f041 0110 	orr.w	r1, r1, #16
 80036be:	6001      	str	r1, [r0, #0]
 80036c0:	4770      	bx	lr

080036c2 <.text_12>:
 80036c2:	6870      	ldr	r0, [r6, #4]
 80036c4:	6801      	ldr	r1, [r0, #0]
 80036c6:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 80036ca:	2800      	cmp	r0, #0
 80036cc:	4770      	bx	lr

080036ce <.text_13>:
 80036ce:	6870      	ldr	r0, [r6, #4]
 80036d0:	6801      	ldr	r1, [r0, #0]
 80036d2:	f021 0110 	bic.w	r1, r1, #16
 80036d6:	6001      	str	r1, [r0, #0]
 80036d8:	4770      	bx	lr

080036da <.text_14>:
 80036da:	68b3      	ldr	r3, [r6, #8]
 80036dc:	7c30      	ldrb	r0, [r6, #16]
 80036de:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80036e0:	2204      	movs	r2, #4
 80036e2:	2101      	movs	r1, #1

080036e4 <__iar_annotation$$tailcall>:
 80036e4:	4720      	bx	r4

080036e6 <.text_15>:
 80036e6:	68b3      	ldr	r3, [r6, #8]
 80036e8:	7c30      	ldrb	r0, [r6, #16]
 80036ea:	f8d3 c024 	ldr.w	ip, [r3, #36]	@ 0x24
 80036ee:	2101      	movs	r1, #1

080036f0 <__iar_annotation$$tailcall>:
 80036f0:	4760      	bx	ip

080036f2 <.text_16>:
 80036f2:	68b3      	ldr	r3, [r6, #8]
 80036f4:	7c30      	ldrb	r0, [r6, #16]
 80036f6:	f8d3 c024 	ldr.w	ip, [r3, #36]	@ 0x24
 80036fa:	2207      	movs	r2, #7
 80036fc:	2101      	movs	r1, #1

080036fe <__iar_annotation$$tailcall>:
 80036fe:	4760      	bx	ip

08003700 <.text_17>:
 8003700:	7c30      	ldrb	r0, [r6, #16]
 8003702:	f7fc bf24 	b.w	800054e <USBPD_PE_Notification>

08003706 <.text_18>:
 8003706:	2104      	movs	r1, #4
 8003708:	4630      	mov	r0, r6
 800370a:	f7fd be07 	b.w	800131c <PE_SetPowerNegotiation>

0800370e <.text_19>:
 800370e:	2206      	movs	r2, #6
 8003710:	2101      	movs	r1, #1
 8003712:	4630      	mov	r0, r6
 8003714:	f7fd bdfb 	b.w	800130e <PE_CallHardResetCallback>

08003718 <.text_20>:
 8003718:	2114      	movs	r1, #20
 800371a:	f88d 100c 	strb.w	r1, [sp, #12]
 800371e:	4630      	mov	r0, r6
 8003720:	f7fd b940 	b.w	80009a4 <PE_Clear_RxEvent>

08003724 <.text_21>:
 8003724:	2203      	movs	r2, #3
 8003726:	2100      	movs	r1, #0
 8003728:	4630      	mov	r0, r6
 800372a:	f7fd be99 	b.w	8001460 <PE_Send_CtrlMessage>

0800372e <PE_Send_SRCCapabilities>:
 800372e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8003730:	4604      	mov	r4, r0
 8003732:	2000      	movs	r0, #0
 8003734:	9002      	str	r0, [sp, #8]
 8003736:	460d      	mov	r5, r1
 8003738:	68a6      	ldr	r6, [r4, #8]
 800373a:	7c20      	ldrb	r0, [r4, #16]
 800373c:	6977      	ldr	r7, [r6, #20]
 800373e:	ab02      	add	r3, sp, #8
 8003740:	f204 2265 	addw	r2, r4, #613	@ 0x265
 8003744:	2100      	movs	r1, #0
 8003746:	47b8      	blx	r7
 8003748:	9802      	ldr	r0, [sp, #8]
 800374a:	1c80      	adds	r0, r0, #2
 800374c:	9002      	str	r0, [sp, #8]
 800374e:	9802      	ldr	r0, [sp, #8]
 8003750:	2104      	movs	r1, #4
 8003752:	f7fd fe25 	bl	80013a0 <PE_CheckDataSizeFromGetDataInfo>
 8003756:	b998      	cbnz	r0, 8003780 <PE_Send_SRCCapabilities+0x52>
 8003758:	6860      	ldr	r0, [r4, #4]
 800375a:	6801      	ldr	r1, [r0, #0]
 800375c:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8003760:	2800      	cmp	r0, #0
 8003762:	d00d      	beq.n	8003780 <PE_Send_SRCCapabilities+0x52>
 8003764:	9802      	ldr	r0, [sp, #8]
 8003766:	9501      	str	r5, [sp, #4]
 8003768:	b280      	uxth	r0, r0
 800376a:	9000      	str	r0, [sp, #0]
 800376c:	f204 2363 	addw	r3, r4, #611	@ 0x263
 8003770:	7c20      	ldrb	r0, [r4, #16]
 8003772:	2201      	movs	r2, #1
 8003774:	2100      	movs	r1, #0
 8003776:	f001 f99b 	bl	8004ab0 <USBPD_PRL_SendMessage>
 800377a:	2803      	cmp	r0, #3
 800377c:	d0e7      	beq.n	800374e <PE_Send_SRCCapabilities+0x20>
 800377e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003780:	2010      	movs	r0, #16
 8003782:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08003784 <PE_StateMachine_VDMCable>:
 8003784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003788:	b08c      	sub	sp, #48	@ 0x30
 800378a:	2602      	movs	r6, #2
 800378c:	4605      	mov	r5, r0
 800378e:	4688      	mov	r8, r1
 8003790:	7c68      	ldrb	r0, [r5, #17]
 8003792:	2805      	cmp	r0, #5
 8003794:	f505 7414 	add.w	r4, r5, #592	@ 0x250
 8003798:	f248 072d 	movw	r7, #32813	@ 0x802d
 800379c:	d002      	beq.n	80037a4 <PE_StateMachine_VDMCable+0x20>
 800379e:	289a      	cmp	r0, #154	@ 0x9a
 80037a0:	d061      	beq.n	8003866 <PE_StateMachine_VDMCable+0xe2>
 80037a2:	e0f1      	b.n	8003988 <PE_StateMachine_VDMCable+0x204>
 80037a4:	686a      	ldr	r2, [r5, #4]
 80037a6:	7811      	ldrb	r1, [r2, #0]
 80037a8:	f001 0103 	and.w	r1, r1, #3
 80037ac:	4628      	mov	r0, r5
 80037ae:	f000 fa36 	bl	8003c1e <PE_ExtRevisionInteroperability_Cable>
 80037b2:	6822      	ldr	r2, [r4, #0]
 80037b4:	0952      	lsrs	r2, r2, #5
 80037b6:	0152      	lsls	r2, r2, #5
 80037b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037bc:	f042 0201 	orr.w	r2, r2, #1
 80037c0:	6022      	str	r2, [r4, #0]
 80037c2:	4623      	mov	r3, r4
 80037c4:	6868      	ldr	r0, [r5, #4]
 80037c6:	6801      	ldr	r1, [r0, #0]
 80037c8:	f649 003f 	movw	r0, #38975	@ 0x983f
 80037cc:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80037d0:	4002      	ands	r2, r0
 80037d2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80037d6:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 80037da:	6022      	str	r2, [r4, #0]
 80037dc:	6868      	ldr	r0, [r5, #4]
 80037de:	6801      	ldr	r1, [r0, #0]
 80037e0:	f3c1 0080 	ubfx	r0, r1, #2, #1
 80037e4:	2800      	cmp	r0, #0
 80037e6:	bf1d      	ittte	ne
 80037e8:	6968      	ldrne	r0, [r5, #20]
 80037ea:	0880      	lsrne	r0, r0, #2
 80037ec:	f000 0001 	andne.w	r0, r0, #1
 80037f0:	2002      	moveq	r0, #2
 80037f2:	9002      	str	r0, [sp, #8]
 80037f4:	2101      	movs	r1, #1
 80037f6:	209a      	movs	r0, #154	@ 0x9a
 80037f8:	9001      	str	r0, [sp, #4]
 80037fa:	9100      	str	r1, [sp, #0]
 80037fc:	220f      	movs	r2, #15
 80037fe:	4628      	mov	r0, r5
 8003800:	f7fd fe5b 	bl	80014ba <PE_Send_DataMessage>
 8003804:	b950      	cbnz	r0, 800381c <PE_StateMachine_VDMCable+0x98>
 8003806:	6968      	ldr	r0, [r5, #20]
 8003808:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 800380c:	6168      	str	r0, [r5, #20]
 800380e:	2151      	movs	r1, #81	@ 0x51
 8003810:	7729      	strb	r1, [r5, #28]
 8003812:	f248 001e 	movw	r0, #32798	@ 0x801e
 8003816:	8468      	strh	r0, [r5, #34]	@ 0x22
 8003818:	261e      	movs	r6, #30
 800381a:	e0b5      	b.n	8003988 <PE_StateMachine_VDMCable+0x204>
 800381c:	2809      	cmp	r0, #9
 800381e:	d0fc      	beq.n	800381a <PE_StateMachine_VDMCable+0x96>
 8003820:	7ca0      	ldrb	r0, [r4, #18]
 8003822:	2815      	cmp	r0, #21
 8003824:	bf38      	it	cc
 8003826:	846f      	strhcc	r7, [r5, #34]	@ 0x22
 8003828:	d307      	bcc.n	800383a <PE_StateMachine_VDMCable+0xb6>
 800382a:	68e8      	ldr	r0, [r5, #12]
 800382c:	6944      	ldr	r4, [r0, #20]
 800382e:	b124      	cbz	r4, 800383a <PE_StateMachine_VDMCable+0xb6>
 8003830:	7c28      	ldrb	r0, [r5, #16]
 8003832:	2300      	movs	r3, #0
 8003834:	2205      	movs	r2, #5
 8003836:	2101      	movs	r1, #1
 8003838:	47a0      	blx	r4
 800383a:	f000 f8ae 	bl	800399a <.text_4>
 800383e:	f000 8080 	beq.w	8003942 <PE_StateMachine_VDMCable+0x1be>
 8003842:	8be8      	ldrh	r0, [r5, #30]
 8003844:	0441      	lsls	r1, r0, #17
 8003846:	d00b      	beq.n	8003860 <PE_StateMachine_VDMCable+0xdc>
 8003848:	2008      	movs	r0, #8
 800384a:	7468      	strb	r0, [r5, #17]
 800384c:	8be9      	ldrh	r1, [r5, #30]
 800384e:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8003852:	292d      	cmp	r1, #45	@ 0x2d
 8003854:	bf2e      	itee	cs
 8003856:	262d      	movcs	r6, #45	@ 0x2d
 8003858:	8bee      	ldrhcc	r6, [r5, #30]
 800385a:	f3c6 060e 	ubfxcc	r6, r6, #0, #15
 800385e:	e093      	b.n	8003988 <PE_StateMachine_VDMCable+0x204>
 8003860:	2007      	movs	r0, #7
 8003862:	7468      	strb	r0, [r5, #17]
 8003864:	e090      	b.n	8003988 <PE_StateMachine_VDMCable+0x204>
 8003866:	2001      	movs	r0, #1
 8003868:	f7fd f8d0 	bl	8000a0c <PE_Convert_SOPRxEvent>
 800386c:	f898 2000 	ldrb.w	r2, [r8]
 8003870:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8003872:	4282      	cmp	r2, r0
 8003874:	d142      	bne.n	80038fc <PE_StateMachine_VDMCable+0x178>
 8003876:	0bc8      	lsrs	r0, r1, #15
 8003878:	d140      	bne.n	80038fc <PE_StateMachine_VDMCable+0x178>
 800387a:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800387e:	2800      	cmp	r0, #0
 8003880:	d03c      	beq.n	80038fc <PE_StateMachine_VDMCable+0x178>
 8003882:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 8003886:	f000 001f 	and.w	r0, r0, #31
 800388a:	280f      	cmp	r0, #15
 800388c:	d136      	bne.n	80038fc <PE_StateMachine_VDMCable+0x178>
 800388e:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8003890:	7887      	ldrb	r7, [r0, #2]
 8003892:	f007 011f 	and.w	r1, r7, #31
 8003896:	2901      	cmp	r1, #1
 8003898:	d12b      	bne.n	80038f2 <PE_StateMachine_VDMCable+0x16e>
 800389a:	f3c7 1081 	ubfx	r0, r7, #6, #2
 800389e:	b340      	cbz	r0, 80038f2 <PE_StateMachine_VDMCable+0x16e>
 80038a0:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80038a2:	f3c0 1181 	ubfx	r1, r0, #6, #2
 80038a6:	4628      	mov	r0, r5
 80038a8:	f000 f9b9 	bl	8003c1e <PE_ExtRevisionInteroperability_Cable>
 80038ac:	68e9      	ldr	r1, [r5, #12]
 80038ae:	6948      	ldr	r0, [r1, #20]
 80038b0:	b1e8      	cbz	r0, 80038ee <PE_StateMachine_VDMCable+0x16a>
 80038b2:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80038b6:	2801      	cmp	r0, #1
 80038b8:	d119      	bne.n	80038ee <PE_StateMachine_VDMCable+0x16a>
 80038ba:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80038bc:	1d81      	adds	r1, r0, #6
 80038be:	7c28      	ldrb	r0, [r5, #16]
 80038c0:	aa03      	add	r2, sp, #12
 80038c2:	f000 ff5f 	bl	8004784 <PE_SVDM_CheckIdentity>
 80038c6:	b970      	cbnz	r0, 80038e6 <PE_StateMachine_VDMCable+0x162>
 80038c8:	68ee      	ldr	r6, [r5, #12]
 80038ca:	7c28      	ldrb	r0, [r5, #16]
 80038cc:	f3c7 1281 	ubfx	r2, r7, #6, #2
 80038d0:	6977      	ldr	r7, [r6, #20]
 80038d2:	ab03      	add	r3, sp, #12
 80038d4:	2101      	movs	r1, #1
 80038d6:	47b8      	blx	r7
 80038d8:	7c28      	ldrb	r0, [r5, #16]
 80038da:	2152      	movs	r1, #82	@ 0x52
 80038dc:	f7fc fe37 	bl	800054e <USBPD_PE_Notification>
 80038e0:	2014      	movs	r0, #20
 80038e2:	74a0      	strb	r0, [r4, #18]
 80038e4:	e003      	b.n	80038ee <PE_StateMachine_VDMCable+0x16a>
 80038e6:	7c28      	ldrb	r0, [r5, #16]
 80038e8:	211b      	movs	r1, #27
 80038ea:	f7fc fe30 	bl	800054e <USBPD_PE_Notification>
 80038ee:	f000 f85a 	bl	80039a6 <.text_5>
 80038f2:	f898 0000 	ldrb.w	r0, [r8]
 80038f6:	2814      	cmp	r0, #20
 80038f8:	d10e      	bne.n	8003918 <PE_StateMachine_VDMCable+0x194>
 80038fa:	e045      	b.n	8003988 <PE_StateMachine_VDMCable+0x204>
 80038fc:	f001 011f 	and.w	r1, r1, #31
 8003900:	2910      	cmp	r1, #16
 8003902:	d110      	bne.n	8003926 <PE_StateMachine_VDMCable+0x1a2>
 8003904:	f000 f84f 	bl	80039a6 <.text_5>
 8003908:	2159      	movs	r1, #89	@ 0x59
 800390a:	7c28      	ldrb	r0, [r5, #16]
 800390c:	f7fc fe1f 	bl	800054e <USBPD_PE_Notification>
 8003910:	f898 0000 	ldrb.w	r0, [r8]
 8003914:	2814      	cmp	r0, #20
 8003916:	d037      	beq.n	8003988 <PE_StateMachine_VDMCable+0x204>
 8003918:	2114      	movs	r1, #20
 800391a:	f888 1000 	strb.w	r1, [r8]
 800391e:	4628      	mov	r0, r5
 8003920:	f7fd f840 	bl	80009a4 <PE_Clear_RxEvent>
 8003924:	e030      	b.n	8003988 <PE_StateMachine_VDMCable+0x204>
 8003926:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8003928:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800392c:	d12c      	bne.n	8003988 <PE_StateMachine_VDMCable+0x204>
 800392e:	2100      	movs	r1, #0
 8003930:	8469      	strh	r1, [r5, #34]	@ 0x22
 8003932:	f000 f832 	bl	800399a <.text_4>
 8003936:	d108      	bne.n	800394a <PE_StateMachine_VDMCable+0x1c6>
 8003938:	68e8      	ldr	r0, [r5, #12]
 800393a:	6944      	ldr	r4, [r0, #20]
 800393c:	b10c      	cbz	r4, 8003942 <PE_StateMachine_VDMCable+0x1be>
 800393e:	f000 f827 	bl	8003990 <.text_3>
 8003942:	2003      	movs	r0, #3
 8003944:	7468      	strb	r0, [r5, #17]
 8003946:	2600      	movs	r6, #0
 8003948:	e01e      	b.n	8003988 <PE_StateMachine_VDMCable+0x204>
 800394a:	6868      	ldr	r0, [r5, #4]
 800394c:	6801      	ldr	r1, [r0, #0]
 800394e:	f3c1 6081 	ubfx	r0, r1, #26, #2
 8003952:	2802      	cmp	r0, #2
 8003954:	d10e      	bne.n	8003974 <PE_StateMachine_VDMCable+0x1f0>
 8003956:	6869      	ldr	r1, [r5, #4]
 8003958:	680a      	ldr	r2, [r1, #0]
 800395a:	2001      	movs	r0, #1
 800395c:	f360 629b 	bfi	r2, r0, #26, #2
 8003960:	600a      	str	r2, [r1, #0]
 8003962:	2101      	movs	r1, #1
 8003964:	7c28      	ldrb	r0, [r5, #16]
 8003966:	f001 f87b 	bl	8004a60 <USBPD_PRL_CBL_SetHeaderSpecification>
 800396a:	846f      	strh	r7, [r5, #34]	@ 0x22
 800396c:	2008      	movs	r0, #8
 800396e:	262d      	movs	r6, #45	@ 0x2d
 8003970:	7468      	strb	r0, [r5, #17]
 8003972:	e007      	b.n	8003984 <PE_StateMachine_VDMCable+0x200>
 8003974:	68e8      	ldr	r0, [r5, #12]
 8003976:	6944      	ldr	r4, [r0, #20]
 8003978:	b10c      	cbz	r4, 800397e <PE_StateMachine_VDMCable+0x1fa>
 800397a:	f000 f809 	bl	8003990 <.text_3>
 800397e:	2007      	movs	r0, #7
 8003980:	7468      	strb	r0, [r5, #17]
 8003982:	2600      	movs	r6, #0
 8003984:	2000      	movs	r0, #0
 8003986:	7728      	strb	r0, [r5, #28]
 8003988:	4630      	mov	r0, r6
 800398a:	b00c      	add	sp, #48	@ 0x30
 800398c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003990 <.text_3>:
 8003990:	7c28      	ldrb	r0, [r5, #16]
 8003992:	2300      	movs	r3, #0
 8003994:	2204      	movs	r2, #4
 8003996:	2101      	movs	r1, #1

08003998 <__iar_annotation$$tailcall>:
 8003998:	4720      	bx	r4

0800399a <.text_4>:
 800399a:	6868      	ldr	r0, [r5, #4]
 800399c:	6801      	ldr	r1, [r0, #0]
 800399e:	f3c1 2002 	ubfx	r0, r1, #8, #3
 80039a2:	2803      	cmp	r0, #3
 80039a4:	4770      	bx	lr

080039a6 <.text_5>:
 80039a6:	2000      	movs	r0, #0
 80039a8:	8468      	strh	r0, [r5, #34]	@ 0x22
 80039aa:	6868      	ldr	r0, [r5, #4]
 80039ac:	6801      	ldr	r1, [r0, #0]
 80039ae:	f3c1 2002 	ubfx	r0, r1, #8, #3
 80039b2:	2803      	cmp	r0, #3
 80039b4:	d102      	bne.n	80039bc <.text_5+0x16>
 80039b6:	7468      	strb	r0, [r5, #17]
 80039b8:	2600      	movs	r6, #0
 80039ba:	4770      	bx	lr
 80039bc:	2007      	movs	r0, #7
 80039be:	2600      	movs	r6, #0
 80039c0:	7468      	strb	r0, [r5, #17]
 80039c2:	772e      	strb	r6, [r5, #28]
 80039c4:	4770      	bx	lr

080039c6 <PE_SubStateMachine_VconnSwap>:
 80039c6:	b538      	push	{r3, r4, r5, lr}
 80039c8:	4604      	mov	r4, r0
 80039ca:	2502      	movs	r5, #2
 80039cc:	7c60      	ldrb	r0, [r4, #17]
 80039ce:	289d      	cmp	r0, #157	@ 0x9d
 80039d0:	d010      	beq.n	80039f4 <PE_SubStateMachine_VconnSwap+0x2e>
 80039d2:	d30e      	bcc.n	80039f2 <PE_SubStateMachine_VconnSwap+0x2c>
 80039d4:	289f      	cmp	r0, #159	@ 0x9f
 80039d6:	d054      	beq.n	8003a82 <PE_SubStateMachine_VconnSwap+0xbc>
 80039d8:	d33b      	bcc.n	8003a52 <PE_SubStateMachine_VconnSwap+0x8c>
 80039da:	28a1      	cmp	r0, #161	@ 0xa1
 80039dc:	f000 807e 	beq.w	8003adc <PE_SubStateMachine_VconnSwap+0x116>
 80039e0:	d370      	bcc.n	8003ac4 <PE_SubStateMachine_VconnSwap+0xfe>
 80039e2:	28a3      	cmp	r0, #163	@ 0xa3
 80039e4:	f000 809a 	beq.w	8003b1c <PE_SubStateMachine_VconnSwap+0x156>
 80039e8:	f0c0 8086 	bcc.w	8003af8 <PE_SubStateMachine_VconnSwap+0x132>
 80039ec:	28a4      	cmp	r0, #164	@ 0xa4
 80039ee:	f000 80ee 	beq.w	8003bce <PE_SubStateMachine_VconnSwap+0x208>
 80039f2:	e0f8      	b.n	8003be6 <PE_SubStateMachine_VconnSwap+0x220>
 80039f4:	6861      	ldr	r1, [r4, #4]
 80039f6:	6808      	ldr	r0, [r1, #0]
 80039f8:	f400 50b8 	and.w	r0, r0, #5888	@ 0x1700
 80039fc:	f5b0 5f98 	cmp.w	r0, #4864	@ 0x1300
 8003a00:	d11f      	bne.n	8003a42 <PE_SubStateMachine_VconnSwap+0x7c>
 8003a02:	68a1      	ldr	r1, [r4, #8]
 8003a04:	7c20      	ldrb	r0, [r4, #16]
 8003a06:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8003a08:	4790      	blx	r2
 8003a0a:	280a      	cmp	r0, #10
 8003a0c:	d002      	beq.n	8003a14 <PE_SubStateMachine_VconnSwap+0x4e>
 8003a0e:	280d      	cmp	r0, #13
 8003a10:	d007      	beq.n	8003a22 <PE_SubStateMachine_VconnSwap+0x5c>
 8003a12:	e00d      	b.n	8003a30 <PE_SubStateMachine_VconnSwap+0x6a>
 8003a14:	6961      	ldr	r1, [r4, #20]
 8003a16:	209e      	movs	r0, #158	@ 0x9e
 8003a18:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8003a1c:	7460      	strb	r0, [r4, #17]
 8003a1e:	6161      	str	r1, [r4, #20]
 8003a20:	e0e1      	b.n	8003be6 <PE_SubStateMachine_VconnSwap+0x220>
 8003a22:	2000      	movs	r0, #0
 8003a24:	9000      	str	r0, [sp, #0]
 8003a26:	2303      	movs	r3, #3
 8003a28:	220c      	movs	r2, #12
 8003a2a:	f000 f8f4 	bl	8003c16 <.text_10>
 8003a2e:	e0da      	b.n	8003be6 <PE_SubStateMachine_VconnSwap+0x220>
 8003a30:	2000      	movs	r0, #0
 8003a32:	9000      	str	r0, [sp, #0]
 8003a34:	2303      	movs	r3, #3
 8003a36:	2204      	movs	r2, #4
 8003a38:	f000 f8ed 	bl	8003c16 <.text_10>
 8003a3c:	2003      	movs	r0, #3
 8003a3e:	7460      	strb	r0, [r4, #17]
 8003a40:	e005      	b.n	8003a4e <PE_SubStateMachine_VconnSwap+0x88>
 8003a42:	6960      	ldr	r0, [r4, #20]
 8003a44:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003a48:	2103      	movs	r1, #3
 8003a4a:	6160      	str	r0, [r4, #20]
 8003a4c:	7461      	strb	r1, [r4, #17]
 8003a4e:	2500      	movs	r5, #0
 8003a50:	e0c9      	b.n	8003be6 <PE_SubStateMachine_VconnSwap+0x220>
 8003a52:	2000      	movs	r0, #0
 8003a54:	9000      	str	r0, [sp, #0]
 8003a56:	239e      	movs	r3, #158	@ 0x9e
 8003a58:	2203      	movs	r2, #3
 8003a5a:	f000 f8dc 	bl	8003c16 <.text_10>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	d1f6      	bne.n	8003a50 <PE_SubStateMachine_VconnSwap+0x8a>
 8003a62:	6860      	ldr	r0, [r4, #4]
 8003a64:	6801      	ldr	r1, [r0, #0]
 8003a66:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8003a6a:	b130      	cbz	r0, 8003a7a <PE_SubStateMachine_VconnSwap+0xb4>
 8003a6c:	209f      	movs	r0, #159	@ 0x9f
 8003a6e:	7460      	strb	r0, [r4, #17]
 8003a70:	f248 0196 	movw	r1, #32918	@ 0x8096
 8003a74:	83e1      	strh	r1, [r4, #30]
 8003a76:	2596      	movs	r5, #150	@ 0x96
 8003a78:	e001      	b.n	8003a7e <PE_SubStateMachine_VconnSwap+0xb8>
 8003a7a:	20a0      	movs	r0, #160	@ 0xa0
 8003a7c:	7460      	strb	r0, [r4, #17]
 8003a7e:	213f      	movs	r1, #63	@ 0x3f
 8003a80:	e0a1      	b.n	8003bc6 <PE_SubStateMachine_VconnSwap+0x200>
 8003a82:	8be0      	ldrh	r0, [r4, #30]
 8003a84:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003a88:	f000 8095 	beq.w	8003bb6 <PE_SubStateMachine_VconnSwap+0x1f0>
 8003a8c:	780a      	ldrb	r2, [r1, #0]
 8003a8e:	2a11      	cmp	r2, #17
 8003a90:	bf01      	itttt	eq
 8003a92:	8ea2      	ldrheq	r2, [r4, #52]	@ 0x34
 8003a94:	f24f 001f 	movweq	r0, #61471	@ 0xf01f
 8003a98:	4002      	andeq	r2, r0
 8003a9a:	2a06      	cmpeq	r2, #6
 8003a9c:	d111      	bne.n	8003ac2 <PE_SubStateMachine_VconnSwap+0xfc>
 8003a9e:	f000 f8ab 	bl	8003bf8 <.text_8>
 8003aa2:	68a0      	ldr	r0, [r4, #8]
 8003aa4:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003aa6:	b112      	cbz	r2, 8003aae <PE_SubStateMachine_VconnSwap+0xe8>
 8003aa8:	7c20      	ldrb	r0, [r4, #16]
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4790      	blx	r2
 8003aae:	f000 f89c 	bl	8003bea <.text_7>
 8003ab2:	2142      	movs	r1, #66	@ 0x42
 8003ab4:	7c20      	ldrb	r0, [r4, #16]
 8003ab6:	f7fc fd4a 	bl	800054e <USBPD_PE_Notification>
 8003aba:	2500      	movs	r5, #0
 8003abc:	8465      	strh	r5, [r4, #34]	@ 0x22
 8003abe:	f884 5262 	strb.w	r5, [r4, #610]	@ 0x262
 8003ac2:	e090      	b.n	8003be6 <PE_SubStateMachine_VconnSwap+0x220>
 8003ac4:	68a0      	ldr	r0, [r4, #8]
 8003ac6:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003ac8:	b112      	cbz	r2, 8003ad0 <PE_SubStateMachine_VconnSwap+0x10a>
 8003aca:	7c20      	ldrb	r0, [r4, #16]
 8003acc:	2101      	movs	r1, #1
 8003ace:	4790      	blx	r2
 8003ad0:	20a1      	movs	r0, #161	@ 0xa1
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	7460      	strb	r0, [r4, #17]
 8003ad6:	f884 1262 	strb.w	r1, [r4, #610]	@ 0x262
 8003ada:	e084      	b.n	8003be6 <PE_SubStateMachine_VconnSwap+0x220>
 8003adc:	2000      	movs	r0, #0
 8003ade:	9000      	str	r0, [sp, #0]
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	2206      	movs	r2, #6
 8003ae4:	f000 f897 	bl	8003c16 <.text_10>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	d17c      	bne.n	8003be6 <PE_SubStateMachine_VconnSwap+0x220>
 8003aec:	6960      	ldr	r0, [r4, #20]
 8003aee:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003af2:	6160      	str	r0, [r4, #20]
 8003af4:	2142      	movs	r1, #66	@ 0x42
 8003af6:	e066      	b.n	8003bc6 <PE_SubStateMachine_VconnSwap+0x200>
 8003af8:	2000      	movs	r0, #0
 8003afa:	9000      	str	r0, [sp, #0]
 8003afc:	23a3      	movs	r3, #163	@ 0xa3
 8003afe:	220b      	movs	r2, #11
 8003b00:	f000 f889 	bl	8003c16 <.text_10>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d16e      	bne.n	8003be6 <PE_SubStateMachine_VconnSwap+0x220>
 8003b08:	6960      	ldr	r0, [r4, #20]
 8003b0a:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8003b0e:	6160      	str	r0, [r4, #20]
 8003b10:	f248 011b 	movw	r1, #32795	@ 0x801b
 8003b14:	83e1      	strh	r1, [r4, #30]
 8003b16:	251b      	movs	r5, #27
 8003b18:	213e      	movs	r1, #62	@ 0x3e
 8003b1a:	e054      	b.n	8003bc6 <PE_SubStateMachine_VconnSwap+0x200>
 8003b1c:	7808      	ldrb	r0, [r1, #0]
 8003b1e:	2811      	cmp	r0, #17
 8003b20:	bf04      	itt	eq
 8003b22:	8ea0      	ldrheq	r0, [r4, #52]	@ 0x34
 8003b24:	f410 4f70 	tsteq.w	r0, #61440	@ 0xf000
 8003b28:	d141      	bne.n	8003bae <PE_SubStateMachine_VconnSwap+0x1e8>
 8003b2a:	f000 001f 	and.w	r0, r0, #31
 8003b2e:	2803      	cmp	r0, #3
 8003b30:	d006      	beq.n	8003b40 <PE_SubStateMachine_VconnSwap+0x17a>
 8003b32:	2804      	cmp	r0, #4
 8003b34:	d01c      	beq.n	8003b70 <PE_SubStateMachine_VconnSwap+0x1aa>
 8003b36:	280c      	cmp	r0, #12
 8003b38:	d013      	beq.n	8003b62 <PE_SubStateMachine_VconnSwap+0x19c>
 8003b3a:	2810      	cmp	r0, #16
 8003b3c:	d01f      	beq.n	8003b7e <PE_SubStateMachine_VconnSwap+0x1b8>
 8003b3e:	e036      	b.n	8003bae <PE_SubStateMachine_VconnSwap+0x1e8>
 8003b40:	6860      	ldr	r0, [r4, #4]
 8003b42:	6802      	ldr	r2, [r0, #0]
 8003b44:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	bf19      	ittee	ne
 8003b4c:	209f      	movne	r0, #159	@ 0x9f
 8003b4e:	7460      	strbne	r0, [r4, #17]
 8003b50:	22a0      	moveq	r2, #160	@ 0xa0
 8003b52:	7462      	strbeq	r2, [r4, #17]
 8003b54:	7808      	ldrb	r0, [r1, #0]
 8003b56:	2814      	cmp	r0, #20
 8003b58:	d001      	beq.n	8003b5e <PE_SubStateMachine_VconnSwap+0x198>
 8003b5a:	f000 f84d 	bl	8003bf8 <.text_8>
 8003b5e:	213f      	movs	r1, #63	@ 0x3f
 8003b60:	e022      	b.n	8003ba8 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b62:	f000 f84e 	bl	8003c02 <.text_9>
 8003b66:	d001      	beq.n	8003b6c <PE_SubStateMachine_VconnSwap+0x1a6>
 8003b68:	f000 f846 	bl	8003bf8 <.text_8>
 8003b6c:	2140      	movs	r1, #64	@ 0x40
 8003b6e:	e01b      	b.n	8003ba8 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b70:	f000 f847 	bl	8003c02 <.text_9>
 8003b74:	d001      	beq.n	8003b7a <PE_SubStateMachine_VconnSwap+0x1b4>
 8003b76:	f000 f83f 	bl	8003bf8 <.text_8>
 8003b7a:	2141      	movs	r1, #65	@ 0x41
 8003b7c:	e014      	b.n	8003ba8 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b7e:	6860      	ldr	r0, [r4, #4]
 8003b80:	6802      	ldr	r2, [r0, #0]
 8003b82:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8003b86:	b910      	cbnz	r0, 8003b8e <PE_SubStateMachine_VconnSwap+0x1c8>
 8003b88:	20a4      	movs	r0, #164	@ 0xa4
 8003b8a:	7460      	strb	r0, [r4, #17]
 8003b8c:	e006      	b.n	8003b9c <PE_SubStateMachine_VconnSwap+0x1d6>
 8003b8e:	6960      	ldr	r0, [r4, #20]
 8003b90:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003b94:	2203      	movs	r2, #3
 8003b96:	6160      	str	r0, [r4, #20]
 8003b98:	7462      	strb	r2, [r4, #17]
 8003b9a:	2500      	movs	r5, #0
 8003b9c:	7808      	ldrb	r0, [r1, #0]
 8003b9e:	2814      	cmp	r0, #20
 8003ba0:	d001      	beq.n	8003ba6 <PE_SubStateMachine_VconnSwap+0x1e0>
 8003ba2:	f000 f829 	bl	8003bf8 <.text_8>
 8003ba6:	2143      	movs	r1, #67	@ 0x43
 8003ba8:	7c20      	ldrb	r0, [r4, #16]
 8003baa:	f7fc fcd0 	bl	800054e <USBPD_PE_Notification>
 8003bae:	8be0      	ldrh	r0, [r4, #30]
 8003bb0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003bb4:	d117      	bne.n	8003be6 <PE_SubStateMachine_VconnSwap+0x220>
 8003bb6:	6960      	ldr	r0, [r4, #20]
 8003bb8:	2103      	movs	r1, #3
 8003bba:	7461      	strb	r1, [r4, #17]
 8003bbc:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003bc0:	6160      	str	r0, [r4, #20]
 8003bc2:	2500      	movs	r5, #0
 8003bc4:	211c      	movs	r1, #28
 8003bc6:	7c20      	ldrb	r0, [r4, #16]
 8003bc8:	f7fc fcc1 	bl	800054e <USBPD_PE_Notification>
 8003bcc:	e00b      	b.n	8003be6 <PE_SubStateMachine_VconnSwap+0x220>
 8003bce:	68a0      	ldr	r0, [r4, #8]
 8003bd0:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003bd2:	b112      	cbz	r2, 8003bda <PE_SubStateMachine_VconnSwap+0x214>
 8003bd4:	7c20      	ldrb	r0, [r4, #16]
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	4790      	blx	r2
 8003bda:	f000 f806 	bl	8003bea <.text_7>
 8003bde:	f248 002d 	movw	r0, #32813	@ 0x802d
 8003be2:	2500      	movs	r5, #0
 8003be4:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003be6:	4628      	mov	r0, r5
 8003be8:	bd32      	pop	{r1, r4, r5, pc}

08003bea <.text_7>:
 8003bea:	6960      	ldr	r0, [r4, #20]
 8003bec:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003bf0:	6160      	str	r0, [r4, #20]
 8003bf2:	2103      	movs	r1, #3
 8003bf4:	7461      	strb	r1, [r4, #17]
 8003bf6:	4770      	bx	lr

08003bf8 <.text_8>:
 8003bf8:	2214      	movs	r2, #20
 8003bfa:	700a      	strb	r2, [r1, #0]
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	f7fc bed1 	b.w	80009a4 <PE_Clear_RxEvent>

08003c02 <.text_9>:
 8003c02:	6960      	ldr	r0, [r4, #20]
 8003c04:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003c08:	6160      	str	r0, [r4, #20]
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	7462      	strb	r2, [r4, #17]
 8003c0e:	2500      	movs	r5, #0
 8003c10:	7808      	ldrb	r0, [r1, #0]
 8003c12:	2814      	cmp	r0, #20
 8003c14:	4770      	bx	lr

08003c16 <.text_10>:
 8003c16:	2100      	movs	r1, #0
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7fd bc21 	b.w	8001460 <PE_Send_CtrlMessage>

08003c1e <PE_ExtRevisionInteroperability_Cable>:
 8003c1e:	6842      	ldr	r2, [r0, #4]
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	f002 0303 	and.w	r3, r2, #3
 8003c26:	4299      	cmp	r1, r3
 8003c28:	bf28      	it	cs
 8003c2a:	4619      	movcs	r1, r3
 8003c2c:	f361 629b 	bfi	r2, r1, #26, #2
 8003c30:	6841      	ldr	r1, [r0, #4]
 8003c32:	600a      	str	r2, [r1, #0]
 8003c34:	f3c2 6181 	ubfx	r1, r2, #26, #2
 8003c38:	7c00      	ldrb	r0, [r0, #16]
 8003c3a:	f000 bf11 	b.w	8004a60 <USBPD_PRL_CBL_SetHeaderSpecification>
	...

08003c40 <USBPD_PE_SVDM_RequestIdentity>:
 8003c40:	b570      	push	{r4, r5, r6, lr}
 8003c42:	f8df 294c 	ldr.w	r2, [pc, #2380]	@ 8004590 <.text_17>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	685d      	ldr	r5, [r3, #4]
 8003c50:	2210      	movs	r2, #16
 8003c52:	f3c5 2340 	ubfx	r3, r5, #9, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bf1e      	ittt	ne
 8003c5a:	68e3      	ldrne	r3, [r4, #12]
 8003c5c:	2b00      	cmpne	r3, #0
 8003c5e:	2902      	cmpne	r1, #2
 8003c60:	d101      	bne.n	8003c66 <USBPD_PE_SVDM_RequestIdentity+0x26>
 8003c62:	2202      	movs	r2, #2
 8003c64:	e01d      	b.n	8003ca2 <USBPD_PE_SVDM_RequestIdentity+0x62>
 8003c66:	f104 0532 	add.w	r5, r4, #50	@ 0x32
 8003c6a:	782b      	ldrb	r3, [r5, #0]
 8003c6c:	b913      	cbnz	r3, 8003c74 <USBPD_PE_SVDM_RequestIdentity+0x34>
 8003c6e:	f000 f83f 	bl	8003cf0 <.text_4>
 8003c72:	b90b      	cbnz	r3, 8003c78 <USBPD_PE_SVDM_RequestIdentity+0x38>
 8003c74:	2203      	movs	r2, #3
 8003c76:	e014      	b.n	8003ca2 <USBPD_PE_SVDM_RequestIdentity+0x62>
 8003c78:	2901      	cmp	r1, #1
 8003c7a:	7069      	strb	r1, [r5, #1]
 8003c7c:	d111      	bne.n	8003ca2 <USBPD_PE_SVDM_RequestIdentity+0x62>
 8003c7e:	6861      	ldr	r1, [r4, #4]
 8003c80:	6809      	ldr	r1, [r1, #0]
 8003c82:	f240 7304 	movw	r3, #1796	@ 0x704
 8003c86:	400b      	ands	r3, r1
 8003c88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c8c:	bf1c      	itt	ne
 8003c8e:	f3c1 2102 	ubfxne	r1, r1, #8, #3
 8003c92:	2903      	cmpne	r1, #3
 8003c94:	d105      	bne.n	8003ca2 <USBPD_PE_SVDM_RequestIdentity+0x62>
 8003c96:	2105      	movs	r1, #5
 8003c98:	7029      	strb	r1, [r5, #0]
 8003c9a:	68a2      	ldr	r2, [r4, #8]
 8003c9c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003c9e:	4788      	blx	r1
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	bd70      	pop	{r4, r5, r6, pc}

08003ca6 <USBPD_PE_SVDM_RequestSVID>:
 8003ca6:	b570      	push	{r4, r5, r6, lr}
 8003ca8:	f000 f8fb 	bl	8003ea2 <.text_13>
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf14      	ite	ne
 8003cb0:	2902      	cmpne	r1, #2
 8003cb2:	2202      	moveq	r2, #2
 8003cb4:	d01a      	beq.n	8003cec <USBPD_PE_SVDM_RequestSVID+0x46>
 8003cb6:	f104 0532 	add.w	r5, r4, #50	@ 0x32
 8003cba:	782b      	ldrb	r3, [r5, #0]
 8003cbc:	b913      	cbnz	r3, 8003cc4 <USBPD_PE_SVDM_RequestSVID+0x1e>
 8003cbe:	f000 f817 	bl	8003cf0 <.text_4>
 8003cc2:	b90b      	cbnz	r3, 8003cc8 <USBPD_PE_SVDM_RequestSVID+0x22>
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	e011      	b.n	8003cec <USBPD_PE_SVDM_RequestSVID+0x46>
 8003cc8:	f3c6 2302 	ubfx	r3, r6, #8, #3
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d10d      	bne.n	8003cec <USBPD_PE_SVDM_RequestSVID+0x46>
 8003cd0:	237f      	movs	r3, #127	@ 0x7f
 8003cd2:	7069      	strb	r1, [r5, #1]
 8003cd4:	702b      	strb	r3, [r5, #0]
 8003cd6:	b129      	cbz	r1, 8003ce4 <USBPD_PE_SVDM_RequestSVID+0x3e>
 8003cd8:	2901      	cmp	r1, #1
 8003cda:	d107      	bne.n	8003cec <USBPD_PE_SVDM_RequestSVID+0x46>
 8003cdc:	6961      	ldr	r1, [r4, #20]
 8003cde:	f3c1 4100 	ubfx	r1, r1, #16, #1
 8003ce2:	b119      	cbz	r1, 8003cec <USBPD_PE_SVDM_RequestSVID+0x46>
 8003ce4:	68a1      	ldr	r1, [r4, #8]
 8003ce6:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003ce8:	4790      	blx	r2
 8003cea:	2200      	movs	r2, #0
 8003cec:	4610      	mov	r0, r2
 8003cee:	bd70      	pop	{r4, r5, r6, pc}

08003cf0 <.text_4>:
 8003cf0:	6863      	ldr	r3, [r4, #4]
 8003cf2:	681e      	ldr	r6, [r3, #0]
 8003cf4:	f3c6 3300 	ubfx	r3, r6, #12, #1
 8003cf8:	4770      	bx	lr

08003cfa <USBPD_PE_SVDM_RequestMode>:
 8003cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfc:	f8df 3890 	ldr.w	r3, [pc, #2192]	@ 8004590 <.text_17>
 8003d00:	4604      	mov	r4, r0
 8003d02:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8003d06:	68ec      	ldr	r4, [r5, #12]
 8003d08:	2310      	movs	r3, #16
 8003d0a:	2c00      	cmp	r4, #0
 8003d0c:	bf14      	ite	ne
 8003d0e:	2902      	cmpne	r1, #2
 8003d10:	2302      	moveq	r3, #2
 8003d12:	d01e      	beq.n	8003d52 <USBPD_PE_SVDM_RequestMode+0x58>
 8003d14:	f105 0632 	add.w	r6, r5, #50	@ 0x32
 8003d18:	7834      	ldrb	r4, [r6, #0]
 8003d1a:	b924      	cbnz	r4, 8003d26 <USBPD_PE_SVDM_RequestMode+0x2c>
 8003d1c:	686c      	ldr	r4, [r5, #4]
 8003d1e:	6827      	ldr	r7, [r4, #0]
 8003d20:	f3c7 3400 	ubfx	r4, r7, #12, #1
 8003d24:	b90c      	cbnz	r4, 8003d2a <USBPD_PE_SVDM_RequestMode+0x30>
 8003d26:	2303      	movs	r3, #3
 8003d28:	e013      	b.n	8003d52 <USBPD_PE_SVDM_RequestMode+0x58>
 8003d2a:	f3c7 2402 	ubfx	r4, r7, #8, #3
 8003d2e:	2c03      	cmp	r4, #3
 8003d30:	d10f      	bne.n	8003d52 <USBPD_PE_SVDM_RequestMode+0x58>
 8003d32:	2481      	movs	r4, #129	@ 0x81
 8003d34:	7071      	strb	r1, [r6, #1]
 8003d36:	7034      	strb	r4, [r6, #0]
 8003d38:	f8a5 2258 	strh.w	r2, [r5, #600]	@ 0x258
 8003d3c:	b129      	cbz	r1, 8003d4a <USBPD_PE_SVDM_RequestMode+0x50>
 8003d3e:	2901      	cmp	r1, #1
 8003d40:	d107      	bne.n	8003d52 <USBPD_PE_SVDM_RequestMode+0x58>
 8003d42:	6969      	ldr	r1, [r5, #20]
 8003d44:	f3c1 4100 	ubfx	r1, r1, #16, #1
 8003d48:	b119      	cbz	r1, 8003d52 <USBPD_PE_SVDM_RequestMode+0x58>
 8003d4a:	68a9      	ldr	r1, [r5, #8]
 8003d4c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003d4e:	4790      	blx	r2
 8003d50:	2300      	movs	r3, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003d56 <USBPD_PE_SVDM_RequestModeEnter>:
 8003d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d58:	f000 f854 	bl	8003e04 <.text_10>
 8003d5c:	b90d      	cbnz	r5, 8003d62 <USBPD_PE_SVDM_RequestModeEnter+0xc>
 8003d5e:	2402      	movs	r4, #2
 8003d60:	e01b      	b.n	8003d9a <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003d62:	f106 0732 	add.w	r7, r6, #50	@ 0x32
 8003d66:	783d      	ldrb	r5, [r7, #0]
 8003d68:	b915      	cbnz	r5, 8003d70 <USBPD_PE_SVDM_RequestModeEnter+0x1a>
 8003d6a:	f000 f845 	bl	8003df8 <.text_9>
 8003d6e:	b90d      	cbnz	r5, 8003d74 <USBPD_PE_SVDM_RequestModeEnter+0x1e>
 8003d70:	2403      	movs	r4, #3
 8003d72:	e012      	b.n	8003d9a <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003d74:	f40c 65e1 	and.w	r5, ip, #1800	@ 0x708
 8003d78:	f5b5 7f42 	cmp.w	r5, #776	@ 0x308
 8003d7c:	d10d      	bne.n	8003d9a <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003d7e:	2582      	movs	r5, #130	@ 0x82
 8003d80:	f000 f831 	bl	8003de6 <.text_8>
 8003d84:	b129      	cbz	r1, 8003d92 <USBPD_PE_SVDM_RequestModeEnter+0x3c>
 8003d86:	2902      	cmp	r1, #2
 8003d88:	d000      	beq.n	8003d8c <USBPD_PE_SVDM_RequestModeEnter+0x36>
 8003d8a:	d206      	bcs.n	8003d9a <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003d8c:	f3c2 4100 	ubfx	r1, r2, #16, #1
 8003d90:	b119      	cbz	r1, 8003d9a <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003d92:	68b1      	ldr	r1, [r6, #8]
 8003d94:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003d96:	4790      	blx	r2
 8003d98:	2400      	movs	r4, #0
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003d9e <USBPD_PE_SVDM_RequestModeExit>:
 8003d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da0:	f000 f830 	bl	8003e04 <.text_10>
 8003da4:	b90d      	cbnz	r5, 8003daa <USBPD_PE_SVDM_RequestModeExit+0xc>
 8003da6:	2402      	movs	r4, #2
 8003da8:	e01b      	b.n	8003de2 <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003daa:	f106 0732 	add.w	r7, r6, #50	@ 0x32
 8003dae:	783d      	ldrb	r5, [r7, #0]
 8003db0:	b915      	cbnz	r5, 8003db8 <USBPD_PE_SVDM_RequestModeExit+0x1a>
 8003db2:	f000 f821 	bl	8003df8 <.text_9>
 8003db6:	b90d      	cbnz	r5, 8003dbc <USBPD_PE_SVDM_RequestModeExit+0x1e>
 8003db8:	2403      	movs	r4, #3
 8003dba:	e012      	b.n	8003de2 <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dbc:	f40c 65e1 	and.w	r5, ip, #1800	@ 0x708
 8003dc0:	f5b5 7f42 	cmp.w	r5, #776	@ 0x308
 8003dc4:	d10d      	bne.n	8003de2 <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dc6:	2583      	movs	r5, #131	@ 0x83
 8003dc8:	f000 f80d 	bl	8003de6 <.text_8>
 8003dcc:	b129      	cbz	r1, 8003dda <USBPD_PE_SVDM_RequestModeExit+0x3c>
 8003dce:	2902      	cmp	r1, #2
 8003dd0:	d000      	beq.n	8003dd4 <USBPD_PE_SVDM_RequestModeExit+0x36>
 8003dd2:	d206      	bcs.n	8003de2 <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dd4:	f3c2 4100 	ubfx	r1, r2, #16, #1
 8003dd8:	b119      	cbz	r1, 8003de2 <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dda:	68b1      	ldr	r1, [r6, #8]
 8003ddc:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003dde:	4790      	blx	r2
 8003de0:	2400      	movs	r4, #0
 8003de2:	4620      	mov	r0, r4
 8003de4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003de6 <.text_8>:
 8003de6:	7079      	strb	r1, [r7, #1]
 8003de8:	703d      	strb	r5, [r7, #0]
 8003dea:	f8a6 2258 	strh.w	r2, [r6, #600]	@ 0x258
 8003dee:	6972      	ldr	r2, [r6, #20]
 8003df0:	f363 1288 	bfi	r2, r3, #6, #3
 8003df4:	6172      	str	r2, [r6, #20]
 8003df6:	4770      	bx	lr

08003df8 <.text_9>:
 8003df8:	6875      	ldr	r5, [r6, #4]
 8003dfa:	f8d5 c000 	ldr.w	ip, [r5]
 8003dfe:	f3cc 3500 	ubfx	r5, ip, #12, #1
 8003e02:	4770      	bx	lr

08003e04 <.text_10>:
 8003e04:	f8df 4788 	ldr.w	r4, [pc, #1928]	@ 8004590 <.text_17>
 8003e08:	4605      	mov	r5, r0
 8003e0a:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 8003e0e:	68f5      	ldr	r5, [r6, #12]
 8003e10:	2410      	movs	r4, #16
 8003e12:	4770      	bx	lr

08003e14 <USBPD_PE_SVDM_RequestSpecific>:
 8003e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e16:	f7ff fff5 	bl	8003e04 <.text_10>
 8003e1a:	b90d      	cbnz	r5, 8003e20 <USBPD_PE_SVDM_RequestSpecific+0xc>
 8003e1c:	2402      	movs	r4, #2
 8003e1e:	e01d      	b.n	8003e5c <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e20:	f106 0732 	add.w	r7, r6, #50	@ 0x32
 8003e24:	783d      	ldrb	r5, [r7, #0]
 8003e26:	b915      	cbnz	r5, 8003e2e <USBPD_PE_SVDM_RequestSpecific+0x1a>
 8003e28:	f7ff ffe6 	bl	8003df8 <.text_9>
 8003e2c:	b90d      	cbnz	r5, 8003e32 <USBPD_PE_SVDM_RequestSpecific+0x1e>
 8003e2e:	2403      	movs	r4, #3
 8003e30:	e014      	b.n	8003e5c <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e32:	6975      	ldr	r5, [r6, #20]
 8003e34:	f3c5 4500 	ubfx	r5, r5, #16, #1
 8003e38:	b90d      	cbnz	r5, 8003e3e <USBPD_PE_SVDM_RequestSpecific+0x2a>
 8003e3a:	000d      	movs	r5, r1
 8003e3c:	d10e      	bne.n	8003e5c <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e3e:	f3cc 2502 	ubfx	r5, ip, #8, #3
 8003e42:	2d03      	cmp	r5, #3
 8003e44:	d10a      	bne.n	8003e5c <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e46:	7079      	strb	r1, [r7, #1]
 8003e48:	2400      	movs	r4, #0
 8003e4a:	2185      	movs	r1, #133	@ 0x85
 8003e4c:	7039      	strb	r1, [r7, #0]
 8003e4e:	f506 7115 	add.w	r1, r6, #596	@ 0x254
 8003e52:	600a      	str	r2, [r1, #0]
 8003e54:	808b      	strh	r3, [r1, #4]
 8003e56:	68b1      	ldr	r1, [r6, #8]
 8003e58:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003e5a:	4790      	blx	r2
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003e60 <USBPD_PE_UVDM_RequestMessage>:
 8003e60:	b570      	push	{r4, r5, r6, lr}
 8003e62:	f000 f81e 	bl	8003ea2 <.text_13>
 8003e66:	b90b      	cbnz	r3, 8003e6c <USBPD_PE_UVDM_RequestMessage+0xc>
 8003e68:	2202      	movs	r2, #2
 8003e6a:	e018      	b.n	8003e9e <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003e6c:	f104 0532 	add.w	r5, r4, #50	@ 0x32
 8003e70:	782b      	ldrb	r3, [r5, #0]
 8003e72:	b913      	cbnz	r3, 8003e7a <USBPD_PE_UVDM_RequestMessage+0x1a>
 8003e74:	f7ff ff3c 	bl	8003cf0 <.text_4>
 8003e78:	b90b      	cbnz	r3, 8003e7e <USBPD_PE_UVDM_RequestMessage+0x1e>
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	e00f      	b.n	8003e9e <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003e7e:	f3c6 33c0 	ubfx	r3, r6, #15, #1
 8003e82:	b90b      	cbnz	r3, 8003e88 <USBPD_PE_UVDM_RequestMessage+0x28>
 8003e84:	000b      	movs	r3, r1
 8003e86:	d10a      	bne.n	8003e9e <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003e88:	f3c6 2302 	ubfx	r3, r6, #8, #3
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d106      	bne.n	8003e9e <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003e90:	7069      	strb	r1, [r5, #1]
 8003e92:	2186      	movs	r1, #134	@ 0x86
 8003e94:	7029      	strb	r1, [r5, #0]
 8003e96:	68a2      	ldr	r2, [r4, #8]
 8003e98:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003e9a:	4788      	blx	r1
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	bd70      	pop	{r4, r5, r6, pc}

08003ea2 <.text_13>:
 8003ea2:	f8df 26ec 	ldr.w	r2, [pc, #1772]	@ 8004590 <.text_17>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003eac:	68e3      	ldr	r3, [r4, #12]
 8003eae:	2210      	movs	r2, #16
 8003eb0:	4770      	bx	lr

08003eb2 <PE_Receive_SVDM>:
 8003eb2:	f100 0234 	add.w	r2, r0, #52	@ 0x34
 8003eb6:	8811      	ldrh	r1, [r2, #0]
 8003eb8:	0b09      	lsrs	r1, r1, #12
 8003eba:	f001 0107 	and.w	r1, r1, #7
 8003ebe:	1e4b      	subs	r3, r1, #1
 8003ec0:	f890 1031 	ldrb.w	r1, [r0, #49]	@ 0x31
 8003ec4:	f880 34ac 	strb.w	r3, [r0, #1196]	@ 0x4ac
 8003ec8:	2900      	cmp	r1, #0
 8003eca:	d000      	beq.n	8003ece <PE_Receive_SVDM+0x1c>
 8003ecc:	4770      	bx	lr
 8003ece:	b570      	push	{r4, r5, r6, lr}
 8003ed0:	e012      	b.n	8003ef8 <PE_Receive_SVDM+0x46>
 8003ed2:	6853      	ldr	r3, [r2, #4]
 8003ed4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003ed8:	799c      	ldrb	r4, [r3, #6]
 8003eda:	79dd      	ldrb	r5, [r3, #7]
 8003edc:	eb04 2605 	add.w	r6, r4, r5, lsl #8
 8003ee0:	7a1c      	ldrb	r4, [r3, #8]
 8003ee2:	7a5b      	ldrb	r3, [r3, #9]
 8003ee4:	eb06 4604 	add.w	r6, r6, r4, lsl #16
 8003ee8:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8003eec:	eb06 6603 	add.w	r6, r6, r3, lsl #24
 8003ef0:	1c49      	adds	r1, r1, #1
 8003ef2:	f8c4 6494 	str.w	r6, [r4, #1172]	@ 0x494
 8003ef6:	b2c9      	uxtb	r1, r1
 8003ef8:	f890 34ac 	ldrb.w	r3, [r0, #1196]	@ 0x4ac
 8003efc:	4299      	cmp	r1, r3
 8003efe:	dbe8      	blt.n	8003ed2 <PE_Receive_SVDM+0x20>
 8003f00:	f8d0 2250 	ldr.w	r2, [r0, #592]	@ 0x250
 8003f04:	f002 031f 	and.w	r3, r2, #31
 8003f08:	1e5b      	subs	r3, r3, #1
 8003f0a:	f248 010f 	movw	r1, #32783	@ 0x800f
 8003f0e:	d003      	beq.n	8003f18 <PE_Receive_SVDM+0x66>
 8003f10:	1e5b      	subs	r3, r3, #1
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d91a      	bls.n	8003f4c <PE_Receive_SVDM+0x9a>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	2250      	movs	r2, #80	@ 0x50
 8003f1a:	6843      	ldr	r3, [r0, #4]
 8003f1c:	7702      	strb	r2, [r0, #28]
 8003f1e:	681c      	ldr	r4, [r3, #0]
 8003f20:	f8d0 2250 	ldr.w	r2, [r0, #592]	@ 0x250
 8003f24:	f000 f83e 	bl	8003fa4 <.text_15>
 8003f28:	da04      	bge.n	8003f34 <PE_Receive_SVDM+0x82>
 8003f2a:	f8d0 2250 	ldr.w	r2, [r0, #592]	@ 0x250
 8003f2e:	f3c2 3241 	ubfx	r2, r2, #13, #2
 8003f32:	e003      	b.n	8003f3c <PE_Receive_SVDM+0x8a>
 8003f34:	6842      	ldr	r2, [r0, #4]
 8003f36:	6813      	ldr	r3, [r2, #0]
 8003f38:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8003f3c:	6843      	ldr	r3, [r0, #4]
 8003f3e:	681c      	ldr	r4, [r3, #0]
 8003f40:	f362 1445 	bfi	r4, r2, #5, #1
 8003f44:	601c      	str	r4, [r3, #0]
 8003f46:	83c1      	strh	r1, [r0, #30]
 8003f48:	2175      	movs	r1, #117	@ 0x75
 8003f4a:	e029      	b.n	8003fa0 <PE_Receive_SVDM+0xee>
 8003f4c:	6843      	ldr	r3, [r0, #4]
 8003f4e:	681c      	ldr	r4, [r3, #0]
 8003f50:	f000 f828 	bl	8003fa4 <.text_15>
 8003f54:	6843      	ldr	r3, [r0, #4]
 8003f56:	bfba      	itte	lt
 8003f58:	f8d0 2250 	ldrlt.w	r2, [r0, #592]	@ 0x250
 8003f5c:	f3c2 3241 	ubfxlt	r2, r2, #13, #2
 8003f60:	f3c4 1240 	ubfxge	r2, r4, #5, #1
 8003f64:	f362 1445 	bfi	r4, r2, #5, #1
 8003f68:	601c      	str	r4, [r3, #0]
 8003f6a:	83c1      	strh	r1, [r0, #30]
 8003f6c:	f8d0 1250 	ldr.w	r1, [r0, #592]	@ 0x250
 8003f70:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8003f74:	f8c0 1250 	str.w	r1, [r0, #592]	@ 0x250
 8003f78:	6841      	ldr	r1, [r0, #4]
 8003f7a:	680a      	ldr	r2, [r1, #0]
 8003f7c:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8003f80:	f8d0 2250 	ldr.w	r2, [r0, #592]	@ 0x250
 8003f84:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8003f88:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003f8c:	f8c0 2250 	str.w	r2, [r0, #592]	@ 0x250
 8003f90:	2102      	movs	r1, #2
 8003f92:	f361 1287 	bfi	r2, r1, #6, #2
 8003f96:	f8c0 2250 	str.w	r2, [r0, #592]	@ 0x250
 8003f9a:	2176      	movs	r1, #118	@ 0x76
 8003f9c:	2250      	movs	r2, #80	@ 0x50
 8003f9e:	7702      	strb	r2, [r0, #28]
 8003fa0:	7441      	strb	r1, [r0, #17]
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}

08003fa4 <.text_15>:
 8003fa4:	f3c2 3241 	ubfx	r2, r2, #13, #2
 8003fa8:	f3c4 1340 	ubfx	r3, r4, #5, #1
 8003fac:	429a      	cmp	r2, r3
 8003fae:	4770      	bx	lr

08003fb0 <PE_StateMachine_VDM>:
 8003fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb4:	b091      	sub	sp, #68	@ 0x44
 8003fb6:	4606      	mov	r6, r0
 8003fb8:	460c      	mov	r4, r1
 8003fba:	7c70      	ldrb	r0, [r6, #17]
 8003fbc:	2875      	cmp	r0, #117	@ 0x75
 8003fbe:	f04f 0902 	mov.w	r9, #2
 8003fc2:	f506 7714 	add.w	r7, r6, #592	@ 0x250
 8003fc6:	f106 0831 	add.w	r8, r6, #49	@ 0x31
 8003fca:	f106 0534 	add.w	r5, r6, #52	@ 0x34
 8003fce:	f248 0b32 	movw	fp, #32818	@ 0x8032
 8003fd2:	f248 0a1e 	movw	sl, #32798	@ 0x801e
 8003fd6:	d021      	beq.n	800401c <PE_StateMachine_VDM+0x6c>
 8003fd8:	2876      	cmp	r0, #118	@ 0x76
 8003fda:	f000 8093 	beq.w	8004104 <PE_StateMachine_VDM+0x154>
 8003fde:	287f      	cmp	r0, #127	@ 0x7f
 8003fe0:	f000 80a0 	beq.w	8004124 <PE_StateMachine_VDM+0x174>
 8003fe4:	2881      	cmp	r0, #129	@ 0x81
 8003fe6:	f000 80f1 	beq.w	80041cc <PE_StateMachine_VDM+0x21c>
 8003fea:	2882      	cmp	r0, #130	@ 0x82
 8003fec:	f000 8150 	beq.w	8004290 <PE_StateMachine_VDM+0x2e0>
 8003ff0:	2883      	cmp	r0, #131	@ 0x83
 8003ff2:	f000 81b3 	beq.w	800435c <PE_StateMachine_VDM+0x3ac>
 8003ff6:	2885      	cmp	r0, #133	@ 0x85
 8003ff8:	f000 821c 	beq.w	8004434 <PE_StateMachine_VDM+0x484>
 8003ffc:	2889      	cmp	r0, #137	@ 0x89
 8003ffe:	f000 80b4 	beq.w	800416a <PE_StateMachine_VDM+0x1ba>
 8004002:	288b      	cmp	r0, #139	@ 0x8b
 8004004:	f000 8107 	beq.w	8004216 <PE_StateMachine_VDM+0x266>
 8004008:	288c      	cmp	r0, #140	@ 0x8c
 800400a:	f000 8158 	beq.w	80042be <PE_StateMachine_VDM+0x30e>
 800400e:	288d      	cmp	r0, #141	@ 0x8d
 8004010:	f000 81c2 	beq.w	8004398 <PE_StateMachine_VDM+0x3e8>
 8004014:	288f      	cmp	r0, #143	@ 0x8f
 8004016:	f000 8250 	beq.w	80044ba <PE_StateMachine_VDM+0x50a>
 800401a:	e2b5      	b.n	8004588 <PE_StateMachine_VDM+0x5d8>
 800401c:	8bf0      	ldrh	r0, [r6, #30]
 800401e:	2401      	movs	r4, #1
 8004020:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004024:	f000 82ac 	beq.w	8004580 <PE_StateMachine_VDM+0x5d0>
 8004028:	6839      	ldr	r1, [r7, #0]
 800402a:	0949      	lsrs	r1, r1, #5
 800402c:	0149      	lsls	r1, r1, #5
 800402e:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004032:	f041 0101 	orr.w	r1, r1, #1
 8004036:	6039      	str	r1, [r7, #0]
 8004038:	f000 fadc 	bl	80045f4 <.text_27>
 800403c:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 8004040:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004044:	6039      	str	r1, [r7, #0]
 8004046:	6870      	ldr	r0, [r6, #4]
 8004048:	7802      	ldrb	r2, [r0, #0]
 800404a:	f002 020b 	and.w	r2, r2, #11
 800404e:	2a09      	cmp	r2, #9
 8004050:	bf1f      	itttt	ne
 8004052:	68f0      	ldrne	r0, [r6, #12]
 8004054:	2800      	cmpne	r0, #0
 8004056:	6802      	ldrne	r2, [r0, #0]
 8004058:	2a00      	cmpne	r2, #0
 800405a:	d040      	beq.n	80040de <PE_StateMachine_VDM+0x12e>
 800405c:	0c09      	lsrs	r1, r1, #16
 800405e:	f5b1 4f7f 	cmp.w	r1, #65280	@ 0xff00
 8004062:	d13c      	bne.n	80040de <PE_StateMachine_VDM+0x12e>
 8004064:	7c30      	ldrb	r0, [r6, #16]
 8004066:	4669      	mov	r1, sp
 8004068:	4790      	blx	r2
 800406a:	2803      	cmp	r0, #3
 800406c:	d002      	beq.n	8004074 <PE_StateMachine_VDM+0xc4>
 800406e:	280f      	cmp	r0, #15
 8004070:	d004      	beq.n	800407c <PE_StateMachine_VDM+0xcc>
 8004072:	e034      	b.n	80040de <PE_StateMachine_VDM+0x12e>
 8004074:	6839      	ldr	r1, [r7, #0]
 8004076:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 800407a:	e033      	b.n	80040e4 <PE_StateMachine_VDM+0x134>
 800407c:	6839      	ldr	r1, [r7, #0]
 800407e:	f364 1187 	bfi	r1, r4, #6, #2
 8004082:	6039      	str	r1, [r7, #0]
 8004084:	a809      	add	r0, sp, #36	@ 0x24
 8004086:	9900      	ldr	r1, [sp, #0]
 8004088:	6041      	str	r1, [r0, #4]
 800408a:	2404      	movs	r4, #4
 800408c:	9901      	ldr	r1, [sp, #4]
 800408e:	6081      	str	r1, [r0, #8]
 8004090:	9902      	ldr	r1, [sp, #8]
 8004092:	60c1      	str	r1, [r0, #12]
 8004094:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8004098:	f3c1 0140 	ubfx	r1, r1, #1, #1
 800409c:	b111      	cbz	r1, 80040a4 <PE_StateMachine_VDM+0xf4>
 800409e:	9904      	ldr	r1, [sp, #16]
 80040a0:	6101      	str	r1, [r0, #16]
 80040a2:	2405      	movs	r4, #5
 80040a4:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80040a8:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80040ac:	b121      	cbz	r1, 80040b8 <PE_StateMachine_VDM+0x108>
 80040ae:	9906      	ldr	r1, [sp, #24]
 80040b0:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 80040b4:	1c64      	adds	r4, r4, #1
 80040b6:	b2e4      	uxtb	r4, r4
 80040b8:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80040bc:	f3c1 1100 	ubfx	r1, r1, #4, #1
 80040c0:	b189      	cbz	r1, 80040e6 <PE_StateMachine_VDM+0x136>
 80040c2:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80040c6:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80040ca:	b119      	cbz	r1, 80040d4 <PE_StateMachine_VDM+0x124>
 80040cc:	2100      	movs	r1, #0
 80040ce:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 80040d2:	1c64      	adds	r4, r4, #1
 80040d4:	9907      	ldr	r1, [sp, #28]
 80040d6:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 80040da:	1c64      	adds	r4, r4, #1
 80040dc:	e003      	b.n	80040e6 <PE_StateMachine_VDM+0x136>
 80040de:	6839      	ldr	r1, [r7, #0]
 80040e0:	f369 1187 	bfi	r1, r9, #6, #2
 80040e4:	6039      	str	r1, [r7, #0]
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80040ea:	2103      	movs	r1, #3
 80040ec:	2000      	movs	r0, #0
 80040ee:	9101      	str	r1, [sp, #4]
 80040f0:	9002      	str	r0, [sp, #8]
 80040f2:	9400      	str	r4, [sp, #0]
 80040f4:	ab09      	add	r3, sp, #36	@ 0x24
 80040f6:	f898 1000 	ldrb.w	r1, [r8]
 80040fa:	220f      	movs	r2, #15
 80040fc:	4630      	mov	r0, r6
 80040fe:	f7fd f9dc 	bl	80014ba <PE_Send_DataMessage>
 8004102:	e241      	b.n	8004588 <PE_StateMachine_VDM+0x5d8>
 8004104:	2050      	movs	r0, #80	@ 0x50
 8004106:	7730      	strb	r0, [r6, #28]
 8004108:	2100      	movs	r1, #0
 800410a:	9102      	str	r1, [sp, #8]
 800410c:	2203      	movs	r2, #3
 800410e:	2001      	movs	r0, #1
 8004110:	9201      	str	r2, [sp, #4]
 8004112:	9000      	str	r0, [sp, #0]
 8004114:	463b      	mov	r3, r7
 8004116:	f898 1000 	ldrb.w	r1, [r8]
 800411a:	220f      	movs	r2, #15
 800411c:	4630      	mov	r0, r6
 800411e:	f7fd f9cc 	bl	80014ba <PE_Send_DataMessage>
 8004122:	e231      	b.n	8004588 <PE_StateMachine_VDM+0x5d8>
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	f8df 0854 	ldr.w	r0, [pc, #2132]	@ 800497c <.text_39>
 800412a:	f64f 7120 	movw	r1, #65312	@ 0xff20
 800412e:	400a      	ands	r2, r1
 8004130:	4302      	orrs	r2, r0
 8004132:	603a      	str	r2, [r7, #0]
 8004134:	f422 42ce 	bic.w	r2, r2, #26368	@ 0x6700
 8004138:	6870      	ldr	r0, [r6, #4]
 800413a:	6801      	ldr	r1, [r0, #0]
 800413c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004140:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8004144:	603a      	str	r2, [r7, #0]
 8004146:	463b      	mov	r3, r7
 8004148:	f000 fa5a 	bl	8004600 <.text_28>
 800414c:	bf1d      	ittte	ne
 800414e:	6970      	ldrne	r0, [r6, #20]
 8004150:	0880      	lsrne	r0, r0, #2
 8004152:	f000 0001 	andne.w	r0, r0, #1
 8004156:	2002      	moveq	r0, #2
 8004158:	9002      	str	r0, [sp, #8]
 800415a:	2101      	movs	r1, #1
 800415c:	2089      	movs	r0, #137	@ 0x89
 800415e:	f000 fa41 	bl	80045e4 <.text_26>
 8004162:	2800      	cmp	r0, #0
 8004164:	d1dd      	bne.n	8004122 <PE_StateMachine_VDM+0x172>
 8004166:	2052      	movs	r0, #82	@ 0x52
 8004168:	e052      	b.n	8004210 <PE_StateMachine_VDM+0x260>
 800416a:	f000 fa27 	bl	80045bc <.text_22>
 800416e:	7821      	ldrb	r1, [r4, #0]
 8004170:	4281      	cmp	r1, r0
 8004172:	d169      	bne.n	8004248 <PE_StateMachine_VDM+0x298>
 8004174:	8829      	ldrh	r1, [r5, #0]
 8004176:	0bc8      	lsrs	r0, r1, #15
 8004178:	d166      	bne.n	8004248 <PE_StateMachine_VDM+0x298>
 800417a:	f000 fa16 	bl	80045aa <.text_20>
 800417e:	d068      	beq.n	8004252 <PE_StateMachine_VDM+0x2a2>
 8004180:	f000 fa17 	bl	80045b2 <.text_21>
 8004184:	d160      	bne.n	8004248 <PE_StateMachine_VDM+0x298>
 8004186:	7820      	ldrb	r0, [r4, #0]
 8004188:	2814      	cmp	r0, #20
 800418a:	d001      	beq.n	8004190 <PE_StateMachine_VDM+0x1e0>
 800418c:	f000 fa25 	bl	80045da <.text_25>
 8004190:	6868      	ldr	r0, [r5, #4]
 8004192:	7887      	ldrb	r7, [r0, #2]
 8004194:	f007 011f 	and.w	r1, r7, #31
 8004198:	2902      	cmp	r1, #2
 800419a:	d155      	bne.n	8004248 <PE_StateMachine_VDM+0x298>
 800419c:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80041a0:	2800      	cmp	r0, #0
 80041a2:	d056      	beq.n	8004252 <PE_StateMachine_VDM+0x2a2>
 80041a4:	68f1      	ldr	r1, [r6, #12]
 80041a6:	6988      	ldr	r0, [r1, #24]
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d070      	beq.n	800428e <PE_StateMachine_VDM+0x2de>
 80041ac:	6868      	ldr	r0, [r5, #4]
 80041ae:	1d81      	adds	r1, r0, #6
 80041b0:	7c30      	ldrb	r0, [r6, #16]
 80041b2:	aa08      	add	r2, sp, #32
 80041b4:	f000 fb84 	bl	80048c0 <PE_SVDM_CheckSVIDs>
 80041b8:	f000 fa0a 	bl	80045d0 <.text_24>
 80041bc:	f8d4 9018 	ldr.w	r9, [r4, #24]
 80041c0:	ab08      	add	r3, sp, #32
 80041c2:	f3c7 1281 	ubfx	r2, r7, #6, #2
 80041c6:	47c8      	blx	r9
 80041c8:	2153      	movs	r1, #83	@ 0x53
 80041ca:	e05d      	b.n	8004288 <PE_StateMachine_VDM+0x2d8>
 80041cc:	f000 f9e8 	bl	80045a0 <.text_19>
 80041d0:	f040 0003 	orr.w	r0, r0, #3
 80041d4:	6038      	str	r0, [r7, #0]
 80041d6:	463b      	mov	r3, r7
 80041d8:	f000 f9dc 	bl	8004594 <.text_18>
 80041dc:	6870      	ldr	r0, [r6, #4]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	6801      	ldr	r1, [r0, #0]
 80041e2:	f3c1 1040 	ubfx	r0, r1, #5, #1
 80041e6:	f422 42ce 	bic.w	r2, r2, #26368	@ 0x6700
 80041ea:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 80041ee:	603a      	str	r2, [r7, #0]
 80041f0:	f000 fa06 	bl	8004600 <.text_28>
 80041f4:	bf1d      	ittte	ne
 80041f6:	6970      	ldrne	r0, [r6, #20]
 80041f8:	0880      	lsrne	r0, r0, #2
 80041fa:	f000 0001 	andne.w	r0, r0, #1
 80041fe:	2002      	moveq	r0, #2
 8004200:	9002      	str	r0, [sp, #8]
 8004202:	2101      	movs	r1, #1
 8004204:	208b      	movs	r0, #139	@ 0x8b
 8004206:	f000 f9ed 	bl	80045e4 <.text_26>
 800420a:	2800      	cmp	r0, #0
 800420c:	d102      	bne.n	8004214 <PE_StateMachine_VDM+0x264>
 800420e:	2053      	movs	r0, #83	@ 0x53
 8004210:	f000 f9d8 	bl	80045c4 <.text_23>
 8004214:	e1b8      	b.n	8004588 <PE_StateMachine_VDM+0x5d8>
 8004216:	f000 f9d1 	bl	80045bc <.text_22>
 800421a:	7821      	ldrb	r1, [r4, #0]
 800421c:	4281      	cmp	r1, r0
 800421e:	d113      	bne.n	8004248 <PE_StateMachine_VDM+0x298>
 8004220:	8829      	ldrh	r1, [r5, #0]
 8004222:	0bc8      	lsrs	r0, r1, #15
 8004224:	d110      	bne.n	8004248 <PE_StateMachine_VDM+0x298>
 8004226:	f000 f9c0 	bl	80045aa <.text_20>
 800422a:	d012      	beq.n	8004252 <PE_StateMachine_VDM+0x2a2>
 800422c:	f000 f9c1 	bl	80045b2 <.text_21>
 8004230:	d10a      	bne.n	8004248 <PE_StateMachine_VDM+0x298>
 8004232:	7820      	ldrb	r0, [r4, #0]
 8004234:	2814      	cmp	r0, #20
 8004236:	d001      	beq.n	800423c <PE_StateMachine_VDM+0x28c>
 8004238:	f000 f9cf 	bl	80045da <.text_25>
 800423c:	6868      	ldr	r0, [r5, #4]
 800423e:	f890 a002 	ldrb.w	sl, [r0, #2]
 8004242:	f00a 011f 	and.w	r1, sl, #31
 8004246:	2903      	cmp	r1, #3
 8004248:	f040 80e9 	bne.w	800441e <PE_StateMachine_VDM+0x46e>
 800424c:	f3ca 1081 	ubfx	r0, sl, #6, #2
 8004250:	2800      	cmp	r0, #0
 8004252:	f000 80e4 	beq.w	800441e <PE_StateMachine_VDM+0x46e>
 8004256:	68f1      	ldr	r1, [r6, #12]
 8004258:	69c8      	ldr	r0, [r1, #28]
 800425a:	2800      	cmp	r0, #0
 800425c:	d017      	beq.n	800428e <PE_StateMachine_VDM+0x2de>
 800425e:	6868      	ldr	r0, [r5, #4]
 8004260:	6839      	ldr	r1, [r7, #0]
 8004262:	1d82      	adds	r2, r0, #6
 8004264:	7c30      	ldrb	r0, [r6, #16]
 8004266:	ab08      	add	r3, sp, #32
 8004268:	0c09      	lsrs	r1, r1, #16
 800426a:	f000 fb5d 	bl	8004928 <PE_SVDM_CheckModes>
 800426e:	f000 f9af 	bl	80045d0 <.text_24>
 8004272:	f8d4 901c 	ldr.w	r9, [r4, #28]
 8004276:	ab08      	add	r3, sp, #32
 8004278:	f3ca 1281 	ubfx	r2, sl, #6, #2
 800427c:	47c8      	blx	r9
 800427e:	f3ca 1081 	ubfx	r0, sl, #6, #2
 8004282:	2801      	cmp	r0, #1
 8004284:	d103      	bne.n	800428e <PE_StateMachine_VDM+0x2de>
 8004286:	2154      	movs	r1, #84	@ 0x54
 8004288:	7c30      	ldrb	r0, [r6, #16]
 800428a:	f7fc f960 	bl	800054e <USBPD_PE_Notification>
 800428e:	e15c      	b.n	800454a <PE_StateMachine_VDM+0x59a>
 8004290:	f000 f986 	bl	80045a0 <.text_19>
 8004294:	f040 0004 	orr.w	r0, r0, #4
 8004298:	f000 f9b8 	bl	800460c <.text_29>
 800429c:	bf1d      	ittte	ne
 800429e:	6970      	ldrne	r0, [r6, #20]
 80042a0:	0880      	lsrne	r0, r0, #2
 80042a2:	f000 0001 	andne.w	r0, r0, #1
 80042a6:	2002      	moveq	r0, #2
 80042a8:	9002      	str	r0, [sp, #8]
 80042aa:	2101      	movs	r1, #1
 80042ac:	208c      	movs	r0, #140	@ 0x8c
 80042ae:	f000 f999 	bl	80045e4 <.text_26>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	d1ae      	bne.n	8004214 <PE_StateMachine_VDM+0x264>
 80042b6:	2054      	movs	r0, #84	@ 0x54
 80042b8:	7730      	strb	r0, [r6, #28]
 80042ba:	2134      	movs	r1, #52	@ 0x34
 80042bc:	e064      	b.n	8004388 <PE_StateMachine_VDM+0x3d8>
 80042be:	f000 f97d 	bl	80045bc <.text_22>
 80042c2:	7821      	ldrb	r1, [r4, #0]
 80042c4:	4281      	cmp	r1, r0
 80042c6:	f04f 0a34 	mov.w	sl, #52	@ 0x34
 80042ca:	d169      	bne.n	80043a0 <PE_StateMachine_VDM+0x3f0>
 80042cc:	8829      	ldrh	r1, [r5, #0]
 80042ce:	0bc8      	lsrs	r0, r1, #15
 80042d0:	d166      	bne.n	80043a0 <PE_StateMachine_VDM+0x3f0>
 80042d2:	f000 f96a 	bl	80045aa <.text_20>
 80042d6:	d069      	beq.n	80043ac <PE_StateMachine_VDM+0x3fc>
 80042d8:	f000 f96b 	bl	80045b2 <.text_21>
 80042dc:	d160      	bne.n	80043a0 <PE_StateMachine_VDM+0x3f0>
 80042de:	7820      	ldrb	r0, [r4, #0]
 80042e0:	2814      	cmp	r0, #20
 80042e2:	d001      	beq.n	80042e8 <PE_StateMachine_VDM+0x338>
 80042e4:	f000 f979 	bl	80045da <.text_25>
 80042e8:	2000      	movs	r0, #0
 80042ea:	7730      	strb	r0, [r6, #28]
 80042ec:	6869      	ldr	r1, [r5, #4]
 80042ee:	f891 b002 	ldrb.w	fp, [r1, #2]
 80042f2:	f00b 001f 	and.w	r0, fp, #31
 80042f6:	2804      	cmp	r0, #4
 80042f8:	d152      	bne.n	80043a0 <PE_StateMachine_VDM+0x3f0>
 80042fa:	f3cb 1081 	ubfx	r0, fp, #6, #2
 80042fe:	2800      	cmp	r0, #0
 8004300:	d054      	beq.n	80043ac <PE_StateMachine_VDM+0x3fc>
 8004302:	2801      	cmp	r0, #1
 8004304:	d00a      	beq.n	800431c <PE_StateMachine_VDM+0x36c>
 8004306:	d312      	bcc.n	800432e <PE_StateMachine_VDM+0x37e>
 8004308:	2803      	cmp	r0, #3
 800430a:	d00a      	beq.n	8004322 <PE_StateMachine_VDM+0x372>
 800430c:	bf3f      	itttt	cc
 800430e:	6970      	ldrcc	r0, [r6, #20]
 8004310:	f420 70e0 	biccc.w	r0, r0, #448	@ 0x1c0
 8004314:	6170      	strcc	r0, [r6, #20]
 8004316:	f04f 0a36 	movcc.w	sl, #54	@ 0x36
 800431a:	e008      	b.n	800432e <PE_StateMachine_VDM+0x37e>
 800431c:	f04f 0a35 	mov.w	sl, #53	@ 0x35
 8004320:	e005      	b.n	800432e <PE_StateMachine_VDM+0x37e>
 8004322:	6970      	ldr	r0, [r6, #20]
 8004324:	f420 70e0 	bic.w	r0, r0, #448	@ 0x1c0
 8004328:	6170      	str	r0, [r6, #20]
 800432a:	f04f 0a37 	mov.w	sl, #55	@ 0x37
 800432e:	7c30      	ldrb	r0, [r6, #16]
 8004330:	4651      	mov	r1, sl
 8004332:	f7fc f90c 	bl	800054e <USBPD_PE_Notification>
 8004336:	68f1      	ldr	r1, [r6, #12]
 8004338:	6a08      	ldr	r0, [r1, #32]
 800433a:	2800      	cmp	r0, #0
 800433c:	d00d      	beq.n	800435a <PE_StateMachine_VDM+0x3aa>
 800433e:	6838      	ldr	r0, [r7, #0]
 8004340:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004344:	9000      	str	r0, [sp, #0]
 8004346:	f3cb 1281 	ubfx	r2, fp, #6, #2
 800434a:	68f4      	ldr	r4, [r6, #12]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	f000 f940 	bl	80045d2 <.text_24+0x2>
 8004352:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8004356:	0c1b      	lsrs	r3, r3, #16
 8004358:	47c8      	blx	r9
 800435a:	e0f6      	b.n	800454a <PE_StateMachine_VDM+0x59a>
 800435c:	f000 f920 	bl	80045a0 <.text_19>
 8004360:	f040 0005 	orr.w	r0, r0, #5
 8004364:	f000 f952 	bl	800460c <.text_29>
 8004368:	bf1d      	ittte	ne
 800436a:	6970      	ldrne	r0, [r6, #20]
 800436c:	0880      	lsrne	r0, r0, #2
 800436e:	f000 0001 	andne.w	r0, r0, #1
 8004372:	2002      	moveq	r0, #2
 8004374:	9002      	str	r0, [sp, #8]
 8004376:	2101      	movs	r1, #1
 8004378:	208d      	movs	r0, #141	@ 0x8d
 800437a:	f000 f933 	bl	80045e4 <.text_26>
 800437e:	2800      	cmp	r0, #0
 8004380:	d109      	bne.n	8004396 <PE_StateMachine_VDM+0x3e6>
 8004382:	2055      	movs	r0, #85	@ 0x55
 8004384:	7730      	strb	r0, [r6, #28]
 8004386:	2155      	movs	r1, #85	@ 0x55
 8004388:	7c30      	ldrb	r0, [r6, #16]
 800438a:	f7fc f8e0 	bl	800054e <USBPD_PE_Notification>
 800438e:	f8a6 b01e 	strh.w	fp, [r6, #30]
 8004392:	f04f 0932 	mov.w	r9, #50	@ 0x32
 8004396:	e0f7      	b.n	8004588 <PE_StateMachine_VDM+0x5d8>
 8004398:	f000 f910 	bl	80045bc <.text_22>
 800439c:	7821      	ldrb	r1, [r4, #0]
 800439e:	4281      	cmp	r1, r0
 80043a0:	d13d      	bne.n	800441e <PE_StateMachine_VDM+0x46e>
 80043a2:	8829      	ldrh	r1, [r5, #0]
 80043a4:	0bc8      	lsrs	r0, r1, #15
 80043a6:	d13a      	bne.n	800441e <PE_StateMachine_VDM+0x46e>
 80043a8:	f000 f8ff 	bl	80045aa <.text_20>
 80043ac:	d037      	beq.n	800441e <PE_StateMachine_VDM+0x46e>
 80043ae:	f000 f900 	bl	80045b2 <.text_21>
 80043b2:	d134      	bne.n	800441e <PE_StateMachine_VDM+0x46e>
 80043b4:	7820      	ldrb	r0, [r4, #0]
 80043b6:	2814      	cmp	r0, #20
 80043b8:	d001      	beq.n	80043be <PE_StateMachine_VDM+0x40e>
 80043ba:	f000 f90e 	bl	80045da <.text_25>
 80043be:	2000      	movs	r0, #0
 80043c0:	7730      	strb	r0, [r6, #28]
 80043c2:	6869      	ldr	r1, [r5, #4]
 80043c4:	f891 a002 	ldrb.w	sl, [r1, #2]
 80043c8:	f00a 001f 	and.w	r0, sl, #31
 80043cc:	2805      	cmp	r0, #5
 80043ce:	d126      	bne.n	800441e <PE_StateMachine_VDM+0x46e>
 80043d0:	f3ca 1081 	ubfx	r0, sl, #6, #2
 80043d4:	b318      	cbz	r0, 800441e <PE_StateMachine_VDM+0x46e>
 80043d6:	2801      	cmp	r0, #1
 80043d8:	d004      	beq.n	80043e4 <PE_StateMachine_VDM+0x434>
 80043da:	d309      	bcc.n	80043f0 <PE_StateMachine_VDM+0x440>
 80043dc:	2803      	cmp	r0, #3
 80043de:	d005      	beq.n	80043ec <PE_StateMachine_VDM+0x43c>
 80043e0:	d302      	bcc.n	80043e8 <PE_StateMachine_VDM+0x438>
 80043e2:	e005      	b.n	80043f0 <PE_StateMachine_VDM+0x440>
 80043e4:	2156      	movs	r1, #86	@ 0x56
 80043e6:	e004      	b.n	80043f2 <PE_StateMachine_VDM+0x442>
 80043e8:	2157      	movs	r1, #87	@ 0x57
 80043ea:	e002      	b.n	80043f2 <PE_StateMachine_VDM+0x442>
 80043ec:	2158      	movs	r1, #88	@ 0x58
 80043ee:	e000      	b.n	80043f2 <PE_StateMachine_VDM+0x442>
 80043f0:	2155      	movs	r1, #85	@ 0x55
 80043f2:	7c30      	ldrb	r0, [r6, #16]
 80043f4:	f7fc f8ab 	bl	800054e <USBPD_PE_Notification>
 80043f8:	68f1      	ldr	r1, [r6, #12]
 80043fa:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d00d      	beq.n	800441c <PE_StateMachine_VDM+0x46c>
 8004400:	6838      	ldr	r0, [r7, #0]
 8004402:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004406:	9000      	str	r0, [sp, #0]
 8004408:	f3ca 1281 	ubfx	r2, sl, #6, #2
 800440c:	68f4      	ldr	r4, [r6, #12]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	f000 f8df 	bl	80045d2 <.text_24+0x2>
 8004414:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 8004418:	0c1b      	lsrs	r3, r3, #16
 800441a:	47c8      	blx	r9
 800441c:	e095      	b.n	800454a <PE_StateMachine_VDM+0x59a>
 800441e:	7828      	ldrb	r0, [r5, #0]
 8004420:	f000 001f 	and.w	r0, r0, #31
 8004424:	2810      	cmp	r0, #16
 8004426:	f000 8098 	beq.w	800455a <PE_StateMachine_VDM+0x5aa>
 800442a:	8bf0      	ldrh	r0, [r6, #30]
 800442c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004430:	d142      	bne.n	80044b8 <PE_StateMachine_VDM+0x508>
 8004432:	e0a5      	b.n	8004580 <PE_StateMachine_VDM+0x5d0>
 8004434:	2100      	movs	r1, #0
 8004436:	f88d 100c 	strb.w	r1, [sp, #12]
 800443a:	6838      	ldr	r0, [r7, #0]
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 8004442:	6038      	str	r0, [r7, #0]
 8004444:	f361 0004 	bfi	r0, r1, #0, #5
 8004448:	6038      	str	r0, [r7, #0]
 800444a:	8939      	ldrh	r1, [r7, #8]
 800444c:	f000 f8a2 	bl	8004594 <.text_18>
 8004450:	f000 f8d0 	bl	80045f4 <.text_27>
 8004454:	f421 41ce 	bic.w	r1, r1, #26368	@ 0x6700
 8004458:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 800445c:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8004460:	6039      	str	r1, [r7, #0]
 8004462:	9104      	str	r1, [sp, #16]
 8004464:	68f0      	ldr	r0, [r6, #12]
 8004466:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8004468:	b144      	cbz	r4, 800447c <PE_StateMachine_VDM+0x4cc>
 800446a:	a805      	add	r0, sp, #20
 800446c:	9000      	str	r0, [sp, #0]
 800446e:	ab03      	add	r3, sp, #12
 8004470:	783a      	ldrb	r2, [r7, #0]
 8004472:	f000 f8ae 	bl	80045d2 <.text_24+0x2>
 8004476:	f002 021f 	and.w	r2, r2, #31
 800447a:	47a0      	blx	r4
 800447c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004480:	1c40      	adds	r0, r0, #1
 8004482:	f88d 000c 	strb.w	r0, [sp, #12]
 8004486:	ab04      	add	r3, sp, #16
 8004488:	f000 f8ba 	bl	8004600 <.text_28>
 800448c:	bf1d      	ittte	ne
 800448e:	6970      	ldrne	r0, [r6, #20]
 8004490:	0880      	lsrne	r0, r0, #2
 8004492:	f000 0001 	andne.w	r0, r0, #1
 8004496:	2002      	moveq	r0, #2
 8004498:	9002      	str	r0, [sp, #8]
 800449a:	208f      	movs	r0, #143	@ 0x8f
 800449c:	f000 f90f 	bl	80046be <.text_31>
 80044a0:	f898 1000 	ldrb.w	r1, [r8]
 80044a4:	4630      	mov	r0, r6
 80044a6:	f7fd f808 	bl	80014ba <PE_Send_DataMessage>
 80044aa:	b910      	cbnz	r0, 80044b2 <PE_StateMachine_VDM+0x502>
 80044ac:	205a      	movs	r0, #90	@ 0x5a
 80044ae:	f000 f889 	bl	80045c4 <.text_23>
 80044b2:	2000      	movs	r0, #0
 80044b4:	f888 0001 	strb.w	r0, [r8, #1]
 80044b8:	e066      	b.n	8004588 <PE_StateMachine_VDM+0x5d8>
 80044ba:	8829      	ldrh	r1, [r5, #0]
 80044bc:	0b09      	lsrs	r1, r1, #12
 80044be:	f001 0107 	and.w	r1, r1, #7
 80044c2:	1e48      	subs	r0, r1, #1
 80044c4:	f88d 0004 	strb.w	r0, [sp, #4]
 80044c8:	f000 f878 	bl	80045bc <.text_22>
 80044cc:	7821      	ldrb	r1, [r4, #0]
 80044ce:	4281      	cmp	r1, r0
 80044d0:	d13e      	bne.n	8004550 <PE_StateMachine_VDM+0x5a0>
 80044d2:	8829      	ldrh	r1, [r5, #0]
 80044d4:	0bc8      	lsrs	r0, r1, #15
 80044d6:	d13b      	bne.n	8004550 <PE_StateMachine_VDM+0x5a0>
 80044d8:	f000 f867 	bl	80045aa <.text_20>
 80044dc:	d038      	beq.n	8004550 <PE_StateMachine_VDM+0x5a0>
 80044de:	f000 f868 	bl	80045b2 <.text_21>
 80044e2:	d135      	bne.n	8004550 <PE_StateMachine_VDM+0x5a0>
 80044e4:	7820      	ldrb	r0, [r4, #0]
 80044e6:	2814      	cmp	r0, #20
 80044e8:	d001      	beq.n	80044ee <PE_StateMachine_VDM+0x53e>
 80044ea:	f000 f876 	bl	80045da <.text_25>
 80044ee:	6868      	ldr	r0, [r5, #4]
 80044f0:	7882      	ldrb	r2, [r0, #2]
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f002 011f 	and.w	r1, r2, #31
 80044f8:	4281      	cmp	r1, r0
 80044fa:	d129      	bne.n	8004550 <PE_StateMachine_VDM+0x5a0>
 80044fc:	f3c2 1081 	ubfx	r0, r2, #6, #2
 8004500:	b330      	cbz	r0, 8004550 <PE_StateMachine_VDM+0x5a0>
 8004502:	68f1      	ldr	r1, [r6, #12]
 8004504:	6b88      	ldr	r0, [r1, #56]	@ 0x38
 8004506:	b300      	cbz	r0, 800454a <PE_StateMachine_VDM+0x59a>
 8004508:	2000      	movs	r0, #0
 800450a:	e010      	b.n	800452e <PE_StateMachine_VDM+0x57e>
 800450c:	6869      	ldr	r1, [r5, #4]
 800450e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8004512:	798b      	ldrb	r3, [r1, #6]
 8004514:	79cc      	ldrb	r4, [r1, #7]
 8004516:	eb03 2404 	add.w	r4, r3, r4, lsl #8
 800451a:	7a0b      	ldrb	r3, [r1, #8]
 800451c:	7a49      	ldrb	r1, [r1, #9]
 800451e:	eb04 4303 	add.w	r3, r4, r3, lsl #16
 8004522:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8004526:	ab02      	add	r3, sp, #8
 8004528:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 800452c:	1c40      	adds	r0, r0, #1
 800452e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004532:	4288      	cmp	r0, r1
 8004534:	d3ea      	bcc.n	800450c <PE_StateMachine_VDM+0x55c>
 8004536:	a802      	add	r0, sp, #8
 8004538:	9000      	str	r0, [sp, #0]
 800453a:	ab01      	add	r3, sp, #4
 800453c:	f000 f848 	bl	80045d0 <.text_24>
 8004540:	f8d4 9038 	ldr.w	r9, [r4, #56]	@ 0x38
 8004544:	f002 021f 	and.w	r2, r2, #31
 8004548:	47c8      	blx	r9
 800454a:	2000      	movs	r0, #0
 800454c:	83f0      	strh	r0, [r6, #30]
 800454e:	e017      	b.n	8004580 <PE_StateMachine_VDM+0x5d0>
 8004550:	7829      	ldrb	r1, [r5, #0]
 8004552:	f001 011f 	and.w	r1, r1, #31
 8004556:	2910      	cmp	r1, #16
 8004558:	d10e      	bne.n	8004578 <PE_StateMachine_VDM+0x5c8>
 800455a:	7820      	ldrb	r0, [r4, #0]
 800455c:	2814      	cmp	r0, #20
 800455e:	d001      	beq.n	8004564 <PE_StateMachine_VDM+0x5b4>
 8004560:	f000 f83b 	bl	80045da <.text_25>
 8004564:	2000      	movs	r0, #0
 8004566:	83f0      	strh	r0, [r6, #30]
 8004568:	2103      	movs	r1, #3
 800456a:	7471      	strb	r1, [r6, #17]
 800456c:	4681      	mov	r9, r0
 800456e:	7c30      	ldrb	r0, [r6, #16]
 8004570:	2159      	movs	r1, #89	@ 0x59
 8004572:	f7fb ffec 	bl	800054e <USBPD_PE_Notification>
 8004576:	e007      	b.n	8004588 <PE_StateMachine_VDM+0x5d8>
 8004578:	8bf0      	ldrh	r0, [r6, #30]
 800457a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800457e:	d103      	bne.n	8004588 <PE_StateMachine_VDM+0x5d8>
 8004580:	2103      	movs	r1, #3
 8004582:	7471      	strb	r1, [r6, #17]
 8004584:	f04f 0900 	mov.w	r9, #0
 8004588:	4648      	mov	r0, r9
 800458a:	b011      	add	sp, #68	@ 0x44
 800458c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004590 <.text_17>:
 8004590:	20000278 	.word	0x20000278

08004594 <.text_18>:
 8004594:	eac0 4001 	pkhbt	r0, r0, r1, lsl #16
 8004598:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 800459c:	6038      	str	r0, [r7, #0]
 800459e:	4770      	bx	lr

080045a0 <.text_19>:
 80045a0:	6838      	ldr	r0, [r7, #0]
 80045a2:	8939      	ldrh	r1, [r7, #8]
 80045a4:	f020 00df 	bic.w	r0, r0, #223	@ 0xdf
 80045a8:	4770      	bx	lr

080045aa <.text_20>:
 80045aa:	f3c1 3002 	ubfx	r0, r1, #12, #3
 80045ae:	2800      	cmp	r0, #0
 80045b0:	4770      	bx	lr

080045b2 <.text_21>:
 80045b2:	7828      	ldrb	r0, [r5, #0]
 80045b4:	f000 001f 	and.w	r0, r0, #31
 80045b8:	280f      	cmp	r0, #15
 80045ba:	4770      	bx	lr

080045bc <.text_22>:
 80045bc:	f898 0000 	ldrb.w	r0, [r8]
 80045c0:	f7fc ba24 	b.w	8000a0c <PE_Convert_SOPRxEvent>

080045c4 <.text_23>:
 80045c4:	7730      	strb	r0, [r6, #28]
 80045c6:	f8a6 a01e 	strh.w	sl, [r6, #30]
 80045ca:	f04f 091e 	mov.w	r9, #30
 80045ce:	4770      	bx	lr

080045d0 <.text_24>:
 80045d0:	68f4      	ldr	r4, [r6, #12]
 80045d2:	f898 1000 	ldrb.w	r1, [r8]
 80045d6:	7c30      	ldrb	r0, [r6, #16]
 80045d8:	4770      	bx	lr

080045da <.text_25>:
 80045da:	2114      	movs	r1, #20
 80045dc:	7021      	strb	r1, [r4, #0]
 80045de:	4630      	mov	r0, r6
 80045e0:	f7fc b9e0 	b.w	80009a4 <PE_Clear_RxEvent>

080045e4 <.text_26>:
 80045e4:	9100      	str	r1, [sp, #0]
 80045e6:	9001      	str	r0, [sp, #4]
 80045e8:	220f      	movs	r2, #15
 80045ea:	f898 1000 	ldrb.w	r1, [r8]
 80045ee:	4630      	mov	r0, r6
 80045f0:	f7fc bf63 	b.w	80014ba <PE_Send_DataMessage>

080045f4 <.text_27>:
 80045f4:	6870      	ldr	r0, [r6, #4]
 80045f6:	6801      	ldr	r1, [r0, #0]
 80045f8:	f3c1 1040 	ubfx	r0, r1, #5, #1
 80045fc:	6839      	ldr	r1, [r7, #0]
 80045fe:	4770      	bx	lr

08004600 <.text_28>:
 8004600:	6870      	ldr	r0, [r6, #4]
 8004602:	6801      	ldr	r1, [r0, #0]
 8004604:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004608:	2800      	cmp	r0, #0
 800460a:	4770      	bx	lr

0800460c <.text_29>:
 800460c:	6038      	str	r0, [r7, #0]
 800460e:	463b      	mov	r3, r7
 8004610:	eac0 4001 	pkhbt	r0, r0, r1, lsl #16
 8004614:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8004618:	6038      	str	r0, [r7, #0]
 800461a:	6870      	ldr	r0, [r6, #4]
 800461c:	6801      	ldr	r1, [r0, #0]
 800461e:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004622:	6839      	ldr	r1, [r7, #0]
 8004624:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 8004628:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 800462c:	6039      	str	r1, [r7, #0]
 800462e:	6970      	ldr	r0, [r6, #20]
 8004630:	0980      	lsrs	r0, r0, #6
 8004632:	f360 210a 	bfi	r1, r0, #8, #3
 8004636:	6039      	str	r1, [r7, #0]
 8004638:	6870      	ldr	r0, [r6, #4]
 800463a:	6801      	ldr	r1, [r0, #0]
 800463c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004640:	2800      	cmp	r0, #0
 8004642:	4770      	bx	lr

08004644 <PE_StateMachine_UVDM>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	2914      	cmp	r1, #20
 8004648:	b08c      	sub	sp, #48	@ 0x30
 800464a:	4604      	mov	r4, r0
 800464c:	d135      	bne.n	80046ba <PE_StateMachine_UVDM+0x76>
 800464e:	68e0      	ldr	r0, [r4, #12]
 8004650:	2800      	cmp	r0, #0
 8004652:	bf1c      	itt	ne
 8004654:	6bc0      	ldrne	r0, [r0, #60]	@ 0x3c
 8004656:	2800      	cmpne	r0, #0
 8004658:	d02f      	beq.n	80046ba <PE_StateMachine_UVDM+0x76>
 800465a:	2100      	movs	r1, #0
 800465c:	f88d 100c 	strb.w	r1, [sp, #12]
 8004660:	ab06      	add	r3, sp, #24
 8004662:	68e5      	ldr	r5, [r4, #12]
 8004664:	7c20      	ldrb	r0, [r4, #16]
 8004666:	6bee      	ldr	r6, [r5, #60]	@ 0x3c
 8004668:	aa03      	add	r2, sp, #12
 800466a:	a904      	add	r1, sp, #16
 800466c:	47b0      	blx	r6
 800466e:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004672:	9804      	ldr	r0, [sp, #16]
 8004674:	1c49      	adds	r1, r1, #1
 8004676:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800467a:	f88d 100c 	strb.w	r1, [sp, #12]
 800467e:	9004      	str	r0, [sp, #16]
 8004680:	f104 0531 	add.w	r5, r4, #49	@ 0x31
 8004684:	9904      	ldr	r1, [sp, #16]
 8004686:	9105      	str	r1, [sp, #20]
 8004688:	ab05      	add	r3, sp, #20
 800468a:	6860      	ldr	r0, [r4, #4]
 800468c:	6801      	ldr	r1, [r0, #0]
 800468e:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004692:	2800      	cmp	r0, #0
 8004694:	bf1d      	ittte	ne
 8004696:	6960      	ldrne	r0, [r4, #20]
 8004698:	0880      	lsrne	r0, r0, #2
 800469a:	f000 0001 	andne.w	r0, r0, #1
 800469e:	2002      	moveq	r0, #2
 80046a0:	9002      	str	r0, [sp, #8]
 80046a2:	2003      	movs	r0, #3
 80046a4:	f000 f80b 	bl	80046be <.text_31>
 80046a8:	7829      	ldrb	r1, [r5, #0]
 80046aa:	4620      	mov	r0, r4
 80046ac:	f7fc ff05 	bl	80014ba <PE_Send_DataMessage>
 80046b0:	b908      	cbnz	r0, 80046b6 <PE_StateMachine_UVDM+0x72>
 80046b2:	2059      	movs	r0, #89	@ 0x59
 80046b4:	7720      	strb	r0, [r4, #28]
 80046b6:	2100      	movs	r1, #0
 80046b8:	7069      	strb	r1, [r5, #1]
 80046ba:	b00c      	add	sp, #48	@ 0x30
 80046bc:	bd70      	pop	{r4, r5, r6, pc}

080046be <.text_31>:
 80046be:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80046c2:	9100      	str	r1, [sp, #0]
 80046c4:	9001      	str	r0, [sp, #4]
 80046c6:	220f      	movs	r2, #15
 80046c8:	4770      	bx	lr

080046ca <PE_Check_DataMessageVDM>:
 80046ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046cc:	4605      	mov	r5, r0
 80046ce:	68e8      	ldr	r0, [r5, #12]
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d04e      	beq.n	8004772 <PE_Check_DataMessageVDM+0xa8>
 80046d4:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 80046d6:	7888      	ldrb	r0, [r1, #2]
 80046d8:	78ca      	ldrb	r2, [r1, #3]
 80046da:	790b      	ldrb	r3, [r1, #4]
 80046dc:	7949      	ldrb	r1, [r1, #5]
 80046de:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 80046e2:	eb00 4003 	add.w	r0, r0, r3, lsl #16
 80046e6:	eb00 6001 	add.w	r0, r0, r1, lsl #24
 80046ea:	4601      	mov	r1, r0
 80046ec:	0bca      	lsrs	r2, r1, #15
 80046ee:	f012 0201 	ands.w	r2, r2, #1
 80046f2:	d012      	beq.n	800471a <PE_Check_DataMessageVDM+0x50>
 80046f4:	2a01      	cmp	r2, #1
 80046f6:	bf02      	ittt	eq
 80046f8:	f8c5 1250 	streq.w	r1, [r5, #592]	@ 0x250
 80046fc:	f3c0 1081 	ubfxeq	r0, r0, #6, #2
 8004700:	2800      	cmpeq	r0, #0
 8004702:	d136      	bne.n	8004772 <PE_Check_DataMessageVDM+0xa8>
 8004704:	6828      	ldr	r0, [r5, #0]
 8004706:	6841      	ldr	r1, [r0, #4]
 8004708:	f3c1 2000 	ubfx	r0, r1, #8, #1
 800470c:	2800      	cmp	r0, #0
 800470e:	d030      	beq.n	8004772 <PE_Check_DataMessageVDM+0xa8>
 8004710:	4628      	mov	r0, r5
 8004712:	e8bd 40f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, lr}
 8004716:	f7ff bbcc 	b.w	8003eb2 <PE_Receive_SVDM>
 800471a:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 800471c:	0b00      	lsrs	r0, r0, #12
 800471e:	f000 0007 	and.w	r0, r0, #7
 8004722:	1e42      	subs	r2, r0, #1
 8004724:	f885 24ac 	strb.w	r2, [r5, #1196]	@ 0x4ac
 8004728:	2000      	movs	r0, #0
 800472a:	f205 4394 	addw	r3, r5, #1172	@ 0x494
 800472e:	e00f      	b.n	8004750 <PE_Check_DataMessageVDM+0x86>
 8004730:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8004732:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8004736:	7994      	ldrb	r4, [r2, #6]
 8004738:	79d6      	ldrb	r6, [r2, #7]
 800473a:	eb04 2706 	add.w	r7, r4, r6, lsl #8
 800473e:	7a14      	ldrb	r4, [r2, #8]
 8004740:	7a52      	ldrb	r2, [r2, #9]
 8004742:	eb07 4704 	add.w	r7, r7, r4, lsl #16
 8004746:	eb07 6702 	add.w	r7, r7, r2, lsl #24
 800474a:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 800474e:	1c40      	adds	r0, r0, #1
 8004750:	f895 24ac 	ldrb.w	r2, [r5, #1196]	@ 0x4ac
 8004754:	4290      	cmp	r0, r2
 8004756:	d3eb      	bcc.n	8004730 <PE_Check_DataMessageVDM+0x66>
 8004758:	68e8      	ldr	r0, [r5, #12]
 800475a:	2800      	cmp	r0, #0
 800475c:	bf1c      	itt	ne
 800475e:	6c04      	ldrne	r4, [r0, #64]	@ 0x40
 8004760:	2c00      	cmpne	r4, #0
 8004762:	d006      	beq.n	8004772 <PE_Check_DataMessageVDM+0xa8>
 8004764:	7c28      	ldrb	r0, [r5, #16]
 8004766:	f205 42ac 	addw	r2, r5, #1196	@ 0x4ac
 800476a:	47a0      	blx	r4
 800476c:	b908      	cbnz	r0, 8004772 <PE_Check_DataMessageVDM+0xa8>
 800476e:	2003      	movs	r0, #3
 8004770:	e006      	b.n	8004780 <PE_Check_DataMessageVDM+0xb6>
 8004772:	6868      	ldr	r0, [r5, #4]
 8004774:	7801      	ldrb	r1, [r0, #0]
 8004776:	f001 0103 	and.w	r1, r1, #3
 800477a:	2902      	cmp	r1, #2
 800477c:	d101      	bne.n	8004782 <PE_Check_DataMessageVDM+0xb8>
 800477e:	2001      	movs	r0, #1
 8004780:	7468      	strb	r0, [r5, #17]
 8004782:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08004784 <PE_SVDM_CheckIdentity>:
 8004784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004786:	f000 f8f3 	bl	8004970 <.text_38>
 800478a:	0b24      	lsrs	r4, r4, #12
 800478c:	f004 0407 	and.w	r4, r4, #7
 8004790:	1e65      	subs	r5, r4, #1
 8004792:	2300      	movs	r3, #0
 8004794:	b2ee      	uxtb	r6, r5
 8004796:	2e03      	cmp	r6, #3
 8004798:	f0c0 8081 	bcc.w	800489e <PE_SVDM_CheckIdentity+0x11a>
 800479c:	780c      	ldrb	r4, [r1, #0]
 800479e:	784e      	ldrb	r6, [r1, #1]
 80047a0:	788f      	ldrb	r7, [r1, #2]
 80047a2:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 80047a6:	78ce      	ldrb	r6, [r1, #3]
 80047a8:	eb04 4407 	add.w	r4, r4, r7, lsl #16
 80047ac:	eb04 6406 	add.w	r4, r4, r6, lsl #24
 80047b0:	6014      	str	r4, [r2, #0]
 80047b2:	790f      	ldrb	r7, [r1, #4]
 80047b4:	794e      	ldrb	r6, [r1, #5]
 80047b6:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 80047ba:	798f      	ldrb	r7, [r1, #6]
 80047bc:	eb06 4707 	add.w	r7, r6, r7, lsl #16
 80047c0:	79ce      	ldrb	r6, [r1, #7]
 80047c2:	eb07 6606 	add.w	r6, r7, r6, lsl #24
 80047c6:	6056      	str	r6, [r2, #4]
 80047c8:	7a0f      	ldrb	r7, [r1, #8]
 80047ca:	f891 c009 	ldrb.w	ip, [r1, #9]
 80047ce:	eb07 2e0c 	add.w	lr, r7, ip, lsl #8
 80047d2:	7a8f      	ldrb	r7, [r1, #10]
 80047d4:	f891 c00b 	ldrb.w	ip, [r1, #11]
 80047d8:	eb0e 4707 	add.w	r7, lr, r7, lsl #16
 80047dc:	eb07 670c 	add.w	r7, r7, ip, lsl #24
 80047e0:	6097      	str	r7, [r2, #8]
 80047e2:	2608      	movs	r6, #8
 80047e4:	1eef      	subs	r7, r5, #3
 80047e6:	f892 5020 	ldrb.w	r5, [r2, #32]
 80047ea:	f005 0ee0 	and.w	lr, r5, #224	@ 0xe0
 80047ee:	b2fd      	uxtb	r5, r7
 80047f0:	2d00      	cmp	r5, #0
 80047f2:	f882 e020 	strb.w	lr, [r2, #32]
 80047f6:	d053      	beq.n	80048a0 <PE_SVDM_CheckIdentity+0x11c>
 80047f8:	0ee4      	lsrs	r4, r4, #27
 80047fa:	1e7d      	subs	r5, r7, #1
 80047fc:	f004 0407 	and.w	r4, r4, #7
 8004800:	2c05      	cmp	r4, #5
 8004802:	d84c      	bhi.n	800489e <PE_SVDM_CheckIdentity+0x11a>
 8004804:	e8df f004 	tbb	[pc, r4]
 8004808:	2303030c 	.word	0x2303030c
 800480c:	2f29      	.short	0x2f29
 800480e:	f04e 0408 	orr.w	r4, lr, #8
 8004812:	f000 f847 	bl	80048a4 <.text_34>
 8004816:	6194      	str	r4, [r2, #24]
 8004818:	462f      	mov	r7, r5
 800481a:	b2fc      	uxtb	r4, r7
 800481c:	2c00      	cmp	r4, #0
 800481e:	d03f      	beq.n	80048a0 <PE_SVDM_CheckIdentity+0x11c>
 8004820:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 8004822:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8004826:	2802      	cmp	r0, #2
 8004828:	d33a      	bcc.n	80048a0 <PE_SVDM_CheckIdentity+0x11c>
 800482a:	6810      	ldr	r0, [r2, #0]
 800482c:	0dc0      	lsrs	r0, r0, #23
 800482e:	f010 0007 	ands.w	r0, r0, #7
 8004832:	d035      	beq.n	80048a0 <PE_SVDM_CheckIdentity+0x11c>
 8004834:	1e40      	subs	r0, r0, #1
 8004836:	2802      	cmp	r0, #2
 8004838:	d831      	bhi.n	800489e <PE_SVDM_CheckIdentity+0x11a>
 800483a:	f892 0020 	ldrb.w	r0, [r2, #32]
 800483e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8004842:	2800      	cmp	r0, #0
 8004844:	bf1a      	itte	ne
 8004846:	3608      	addne	r6, #8
 8004848:	1e7f      	subne	r7, r7, #1
 800484a:	1d36      	addeq	r6, r6, #4
 800484c:	e011      	b.n	8004872 <PE_SVDM_CheckIdentity+0xee>
 800484e:	f04e 0401 	orr.w	r4, lr, #1
 8004852:	f000 f827 	bl	80048a4 <.text_34>
 8004856:	60d4      	str	r4, [r2, #12]
 8004858:	e7de      	b.n	8004818 <PE_SVDM_CheckIdentity+0x94>
 800485a:	f04e 0404 	orr.w	r4, lr, #4
 800485e:	f000 f821 	bl	80048a4 <.text_34>
 8004862:	6154      	str	r4, [r2, #20]
 8004864:	e7d8      	b.n	8004818 <PE_SVDM_CheckIdentity+0x94>
 8004866:	f04e 0402 	orr.w	r4, lr, #2
 800486a:	f000 f81b 	bl	80048a4 <.text_34>
 800486e:	6114      	str	r4, [r2, #16]
 8004870:	e7d2      	b.n	8004818 <PE_SVDM_CheckIdentity+0x94>
 8004872:	b2ff      	uxtb	r7, r7
 8004874:	2f01      	cmp	r7, #1
 8004876:	d112      	bne.n	800489e <PE_SVDM_CheckIdentity+0x11a>
 8004878:	f892 0020 	ldrb.w	r0, [r2, #32]
 800487c:	f040 0010 	orr.w	r0, r0, #16
 8004880:	f882 0020 	strb.w	r0, [r2, #32]
 8004884:	1988      	adds	r0, r1, r6
 8004886:	7801      	ldrb	r1, [r0, #0]
 8004888:	7844      	ldrb	r4, [r0, #1]
 800488a:	eb01 2504 	add.w	r5, r1, r4, lsl #8
 800488e:	7881      	ldrb	r1, [r0, #2]
 8004890:	78c0      	ldrb	r0, [r0, #3]
 8004892:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8004896:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 800489a:	61d5      	str	r5, [r2, #28]
 800489c:	e000      	b.n	80048a0 <PE_SVDM_CheckIdentity+0x11c>
 800489e:	2302      	movs	r3, #2
 80048a0:	4618      	mov	r0, r3
 80048a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048a4 <.text_34>:
 80048a4:	f882 4020 	strb.w	r4, [r2, #32]
 80048a8:	260c      	movs	r6, #12
 80048aa:	7b0c      	ldrb	r4, [r1, #12]
 80048ac:	7b4f      	ldrb	r7, [r1, #13]
 80048ae:	eb04 2707 	add.w	r7, r4, r7, lsl #8
 80048b2:	7b8c      	ldrb	r4, [r1, #14]
 80048b4:	eb07 4404 	add.w	r4, r7, r4, lsl #16
 80048b8:	7bcf      	ldrb	r7, [r1, #15]
 80048ba:	eb04 6407 	add.w	r4, r4, r7, lsl #24
 80048be:	4770      	bx	lr

080048c0 <PE_SVDM_CheckSVIDs>:
 80048c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004980 <.text_40>)
 80048c4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80048c8:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 80048ca:	0b1b      	lsrs	r3, r3, #12
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	1e5b      	subs	r3, r3, #1
 80048d2:	2400      	movs	r4, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2500      	movs	r5, #0
 80048d8:	7614      	strb	r4, [r2, #24]
 80048da:	7654      	strb	r4, [r2, #25]
 80048dc:	f000 f816 	bl	800490c <.text_36>
 80048e0:	bf19      	ittee	ne
 80048e2:	1c76      	addne	r6, r6, #1
 80048e4:	7616      	strbne	r6, [r2, #24]
 80048e6:	2501      	moveq	r5, #1
 80048e8:	7655      	strbeq	r5, [r2, #25]
 80048ea:	1ca4      	adds	r4, r4, #2
 80048ec:	b2e4      	uxtb	r4, r4
 80048ee:	f000 f80d 	bl	800490c <.text_36>
 80048f2:	bf19      	ittee	ne
 80048f4:	1c76      	addne	r6, r6, #1
 80048f6:	7616      	strbne	r6, [r2, #24]
 80048f8:	2501      	moveq	r5, #1
 80048fa:	7655      	strbeq	r5, [r2, #25]
 80048fc:	1ca4      	adds	r4, r4, #2
 80048fe:	b2e4      	uxtb	r4, r4
 8004900:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8004904:	d201      	bcs.n	800490a <PE_SVDM_CheckSVIDs+0x4a>
 8004906:	0028      	movs	r0, r5
 8004908:	d0e8      	beq.n	80048dc <PE_SVDM_CheckSVIDs+0x1c>
 800490a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800490c <.text_36>:
 800490c:	1c4e      	adds	r6, r1, #1
 800490e:	5d08      	ldrb	r0, [r1, r4]
 8004910:	5d37      	ldrb	r7, [r6, r4]
 8004912:	eb00 2607 	add.w	r6, r0, r7, lsl #8
 8004916:	7e10      	ldrb	r0, [r2, #24]
 8004918:	f822 6010 	strh.w	r6, [r2, r0, lsl #1]
 800491c:	7e16      	ldrb	r6, [r2, #24]
 800491e:	4637      	mov	r7, r6
 8004920:	f832 0017 	ldrh.w	r0, [r2, r7, lsl #1]
 8004924:	2800      	cmp	r0, #0
 8004926:	4770      	bx	lr

08004928 <PE_SVDM_CheckModes>:
 8004928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800492a:	f000 f821 	bl	8004970 <.text_38>
 800492e:	8399      	strh	r1, [r3, #28]
 8004930:	0b24      	lsrs	r4, r4, #12
 8004932:	f004 0407 	and.w	r4, r4, #7
 8004936:	1e60      	subs	r0, r4, #1
 8004938:	2400      	movs	r4, #0
 800493a:	b2c0      	uxtb	r0, r0
 800493c:	601c      	str	r4, [r3, #0]
 800493e:	1916      	adds	r6, r2, r4
 8004940:	5d15      	ldrb	r5, [r2, r4]
 8004942:	7871      	ldrb	r1, [r6, #1]
 8004944:	eb05 2701 	add.w	r7, r5, r1, lsl #8
 8004948:	1911      	adds	r1, r2, r4
 800494a:	1d24      	adds	r4, r4, #4
 800494c:	788d      	ldrb	r5, [r1, #2]
 800494e:	78ce      	ldrb	r6, [r1, #3]
 8004950:	6819      	ldr	r1, [r3, #0]
 8004952:	eb07 4705 	add.w	r7, r7, r5, lsl #16
 8004956:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 800495a:	eb07 6706 	add.w	r7, r7, r6, lsl #24
 800495e:	606f      	str	r7, [r5, #4]
 8004960:	b2e4      	uxtb	r4, r4
 8004962:	681e      	ldr	r6, [r3, #0]
 8004964:	1c76      	adds	r6, r6, #1
 8004966:	ebb4 0f80 	cmp.w	r4, r0, lsl #2
 800496a:	601e      	str	r6, [r3, #0]
 800496c:	d3e7      	bcc.n	800493e <PE_SVDM_CheckModes+0x16>
 800496e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004970 <.text_38>:
 8004970:	4c03      	ldr	r4, [pc, #12]	@ (8004980 <.text_40>)
 8004972:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004976:	8e84      	ldrh	r4, [r0, #52]	@ 0x34
 8004978:	4770      	bx	lr
	...

0800497c <.text_39>:
 800497c:	ff008002 	.word	0xff008002

08004980 <.text_40>:
 8004980:	20000278 	.word	0x20000278

08004984 <USBPD_PRL_TimerCounter>:
 8004984:	b510      	push	{r4, lr}
 8004986:	f000 f879 	bl	8004a7c <.text_12>
 800498a:	7919      	ldrb	r1, [r3, #4]
 800498c:	b111      	cbz	r1, 8004994 <USBPD_PRL_TimerCounter+0x10>
 800498e:	7919      	ldrb	r1, [r3, #4]
 8004990:	1e4c      	subs	r4, r1, #1
 8004992:	711c      	strb	r4, [r3, #4]
 8004994:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 8004998:	7848      	ldrb	r0, [r1, #1]
 800499a:	b108      	cbz	r0, 80049a0 <USBPD_PRL_TimerCounter+0x1c>
 800499c:	1e40      	subs	r0, r0, #1
 800499e:	7048      	strb	r0, [r1, #1]
 80049a0:	bd10      	pop	{r4, pc}

080049a2 <USBPD_PRL_Init>:
 80049a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049a6:	4680      	mov	r8, r0
 80049a8:	460e      	mov	r6, r1
 80049aa:	4617      	mov	r7, r2
 80049ac:	461d      	mov	r5, r3
 80049ae:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80049b2:	f013 ff95 	bl	80188e0 <malloc>
 80049b6:	0004      	movs	r4, r0
 80049b8:	f04f 0916 	mov.w	r9, #22
 80049bc:	d019      	beq.n	80049f2 <USBPD_PRL_Init+0x50>
 80049be:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80049c2:	f014 f889 	bl	8018ad8 <__aeabi_memclr>
 80049c6:	f000 fca8 	bl	800531a <.text_34>
 80049ca:	f8df 0a48 	ldr.w	r0, [pc, #2632]	@ 8005414 <.text_40>
 80049ce:	4641      	mov	r1, r8
 80049d0:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 80049d4:	62a7      	str	r7, [r4, #40]	@ 0x28
 80049d6:	62e5      	str	r5, [r4, #44]	@ 0x2c
 80049d8:	2001      	movs	r0, #1
 80049da:	9000      	str	r0, [sp, #0]
 80049dc:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 80049e0:	6870      	ldr	r0, [r6, #4]
 80049e2:	f60f 21a4 	addw	r1, pc, #2724	@ 0xaa4
 80049e6:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80049ea:	4640      	mov	r0, r8
 80049ec:	f00f fe6c 	bl	80146c8 <USBPD_PHY_Init>
 80049f0:	4681      	mov	r9, r0
 80049f2:	4648      	mov	r0, r9
 80049f4:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

080049f8 <USBPD_PRL_GetMemoryConsumption>:
 80049f8:	f44f 706a 	mov.w	r0, #936	@ 0x3a8
 80049fc:	4770      	bx	lr

080049fe <USBPD_PRL_SetHeader>:
 80049fe:	b530      	push	{r4, r5, lr}
 8004a00:	f8df 4a10 	ldr.w	r4, [pc, #2576]	@ 8005414 <.text_40>
 8004a04:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8004a08:	8a6d      	ldrh	r5, [r5, #18]
 8004a0a:	f361 2508 	bfi	r5, r1, #8, #1
 8004a0e:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8004a12:	824d      	strh	r5, [r1, #18]
 8004a14:	f362 1545 	bfi	r5, r2, #5, #1
 8004a18:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8004a1c:	824d      	strh	r5, [r1, #18]
 8004a1e:	f363 1587 	bfi	r5, r3, #6, #2
 8004a22:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004a26:	8245      	strh	r5, [r0, #18]
 8004a28:	bd30      	pop	{r4, r5, pc}

08004a2a <USBPD_PRL_SetHeaderPowerRole>:
 8004a2a:	b510      	push	{r4, lr}
 8004a2c:	f000 f80b 	bl	8004a46 <.text_9>
 8004a30:	f361 2408 	bfi	r4, r1, #8, #1
 8004a34:	825c      	strh	r4, [r3, #18]
 8004a36:	bd10      	pop	{r4, pc}

08004a38 <USBPD_PRL_SetHeaderDataRole>:
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	f000 f804 	bl	8004a46 <.text_9>
 8004a3e:	f361 1445 	bfi	r4, r1, #5, #1
 8004a42:	825c      	strh	r4, [r3, #18]
 8004a44:	bd10      	pop	{r4, pc}

08004a46 <.text_9>:
 8004a46:	f8df 29cc 	ldr.w	r2, [pc, #2508]	@ 8005414 <.text_40>
 8004a4a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8004a4e:	8a5c      	ldrh	r4, [r3, #18]
 8004a50:	4770      	bx	lr

08004a52 <USBPD_PRL_SetHeaderSpecification>:
 8004a52:	b510      	push	{r4, lr}
 8004a54:	f7ff fff7 	bl	8004a46 <.text_9>
 8004a58:	f361 1487 	bfi	r4, r1, #6, #2
 8004a5c:	825c      	strh	r4, [r3, #18]
 8004a5e:	bd10      	pop	{r4, pc}

08004a60 <USBPD_PRL_CBL_SetHeaderSpecification>:
 8004a60:	b540      	push	{r6, lr}
 8004a62:	f000 f80b 	bl	8004a7c <.text_12>
 8004a66:	8a9e      	ldrh	r6, [r3, #20]
 8004a68:	f361 1687 	bfi	r6, r1, #6, #2
 8004a6c:	829e      	strh	r6, [r3, #20]
 8004a6e:	8adb      	ldrh	r3, [r3, #22]
 8004a70:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004a74:	f361 1387 	bfi	r3, r1, #6, #2
 8004a78:	82c3      	strh	r3, [r0, #22]
 8004a7a:	bd40      	pop	{r6, pc}

08004a7c <.text_12>:
 8004a7c:	f8df 2994 	ldr.w	r2, [pc, #2452]	@ 8005414 <.text_40>
 8004a80:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8004a84:	4770      	bx	lr

08004a86 <USBPD_PRL_SRCSetSinkNG>:
 8004a86:	f00f befa 	b.w	801487e <USBPD_PHY_SetResistor_SinkTxNG>

08004a8a <USBPD_PRL_SRCReleaseSinkNG>:
 8004a8a:	b510      	push	{r4, lr}
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	f00f ff03 	bl	8014898 <USBPD_PHY_SetResistor_SinkTxOK>
 8004a92:	f8df 1980 	ldr.w	r1, [pc, #2432]	@ 8005414 <.text_40>
 8004a96:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	7150      	strb	r0, [r2, #5]
 8004a9e:	bd10      	pop	{r4, pc}

08004aa0 <USBPD_PRL_IsResistor_SinkTxOK>:
 8004aa0:	f00f bf1c 	b.w	80148dc <USBPD_PHY_IsResistor_SinkTxOk>

08004aa4 <USBPD_PRL_FastRoleSwapSignalling>:
 8004aa4:	f00f bf28 	b.w	80148f8 <USBPD_PHY_FastRoleSwapSignalling>

08004aa8 <PRL_FastRoleSwapReception>:
 8004aa8:	f7fc b8e8 	b.w	8000c7c <PE_PRL_FastRoleSwapReception>

08004aac <USBPD_PRL_SOPCapability>:
 8004aac:	f00f bf02 	b.w	80148b4 <USBPD_PHY_SOPSupported>

08004ab0 <USBPD_PRL_SendMessage>:
 8004ab0:	e92d 4dfd 	stmdb	sp!, {r0, r2, r3, r4, r5, r6, r7, r8, sl, fp, lr}
 8004ab4:	f8df a95c 	ldr.w	sl, [pc, #2396]	@ 8005414 <.text_40>
 8004ab8:	b083      	sub	sp, #12
 8004aba:	4680      	mov	r8, r0
 8004abc:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8004ac0:	4694      	mov	ip, r2
 8004ac2:	f10c 0701 	add.w	r7, ip, #1
 8004ac6:	2403      	movs	r4, #3
 8004ac8:	7938      	ldrb	r0, [r7, #4]
 8004aca:	b118      	cbz	r0, 8004ad4 <USBPD_PRL_SendMessage+0x24>
 8004acc:	7a38      	ldrb	r0, [r7, #8]
 8004ace:	b908      	cbnz	r0, 8004ad4 <USBPD_PRL_SendMessage+0x24>
 8004ad0:	200f      	movs	r0, #15
 8004ad2:	7150      	strb	r0, [r2, #5]
 8004ad4:	ea4f 0048 	mov.w	r0, r8, lsl #1
 8004ad8:	1c40      	adds	r0, r0, #1
 8004ada:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8004adc:	f88d 0005 	strb.w	r0, [sp, #5]
 8004ae0:	f88d 1004 	strb.w	r1, [sp, #4]
 8004ae4:	9302      	str	r3, [sp, #8]
 8004ae6:	eb0c 0e01 	add.w	lr, ip, r1
 8004aea:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8004aec:	f897 b004 	ldrb.w	fp, [r7, #4]
 8004af0:	f1bb 0f10 	cmp.w	fp, #16
 8004af4:	f10c 050e 	add.w	r5, ip, #14
 8004af8:	f200 81fb 	bhi.w	8004ef2 <USBPD_PRL_SendMessage+0x442>
 8004afc:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8004b00:	00250011 	.word	0x00250011
 8004b04:	01f90030 	.word	0x01f90030
 8004b08:	00550037 	.word	0x00550037
 8004b0c:	00b60045 	.word	0x00b60045
 8004b10:	01f901f9 	.word	0x01f901f9
 8004b14:	0182016d 	.word	0x0182016d
 8004b18:	01b1019b 	.word	0x01b1019b
 8004b1c:	01f501f9 	.word	0x01f501f9
 8004b20:	01e0      	.short	0x01e0
 8004b22:	f3ef 8510 	mrs	r5, PRIMASK
 8004b26:	b672      	cpsid	i
 8004b28:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004b2c:	f7fb ff5f 	bl	80009ee <PE_PRL_Control_RxEvent>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	bf04      	itt	eq
 8004b34:	7a78      	ldrbeq	r0, [r7, #9]
 8004b36:	2800      	cmpeq	r0, #0
 8004b38:	bf07      	ittee	eq
 8004b3a:	21ff      	moveq	r1, #255	@ 0xff
 8004b3c:	7239      	strbeq	r1, [r7, #8]
 8004b3e:	2000      	movne	r0, #0
 8004b40:	7238      	strbne	r0, [r7, #8]
 8004b42:	f385 8810 	msr	PRIMASK, r5
 8004b46:	2106      	movs	r1, #6
 8004b48:	e1a9      	b.n	8004e9e <USBPD_PRL_SendMessage+0x3ee>
 8004b4a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004b4e:	f00f fe96 	bl	801487e <USBPD_PHY_SetResistor_SinkTxNG>
 8004b52:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8004b56:	2002      	movs	r0, #2
 8004b58:	7148      	strb	r0, [r1, #5]
 8004b5a:	2013      	movs	r0, #19
 8004b5c:	7038      	strb	r0, [r7, #0]
 8004b5e:	e1cb      	b.n	8004ef8 <USBPD_PRL_SendMessage+0x448>
 8004b60:	2801      	cmp	r0, #1
 8004b62:	d110      	bne.n	8004b86 <USBPD_PRL_SendMessage+0xd6>
 8004b64:	7838      	ldrb	r0, [r7, #0]
 8004b66:	b960      	cbnz	r0, 8004b82 <USBPD_PRL_SendMessage+0xd2>
 8004b68:	2105      	movs	r1, #5
 8004b6a:	7151      	strb	r1, [r2, #5]
 8004b6c:	e1c4      	b.n	8004ef8 <USBPD_PRL_SendMessage+0x448>
 8004b6e:	2802      	cmp	r0, #2
 8004b70:	d109      	bne.n	8004b86 <USBPD_PRL_SendMessage+0xd6>
 8004b72:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004b76:	f00f feb1 	bl	80148dc <USBPD_PHY_IsResistor_SinkTxOk>
 8004b7a:	2801      	cmp	r0, #1
 8004b7c:	bf08      	it	eq
 8004b7e:	2005      	moveq	r0, #5
 8004b80:	d070      	beq.n	8004c64 <USBPD_PRL_SendMessage+0x1b4>
 8004b82:	2409      	movs	r4, #9
 8004b84:	e1b8      	b.n	8004ef8 <USBPD_PRL_SendMessage+0x448>
 8004b86:	2006      	movs	r0, #6
 8004b88:	e153      	b.n	8004e32 <USBPD_PRL_SendMessage+0x382>
 8004b8a:	f10c 0212 	add.w	r2, ip, #18
 8004b8e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8004b92:	f3c1 1181 	ubfx	r1, r1, #6, #2
 8004b96:	2902      	cmp	r1, #2
 8004b98:	d105      	bne.n	8004ba6 <USBPD_PRL_SendMessage+0xf6>
 8004b9a:	2801      	cmp	r0, #1
 8004b9c:	d062      	beq.n	8004c64 <USBPD_PRL_SendMessage+0x1b4>
 8004b9e:	2802      	cmp	r0, #2
 8004ba0:	bf08      	it	eq
 8004ba2:	2004      	moveq	r0, #4
 8004ba4:	d05e      	beq.n	8004c64 <USBPD_PRL_SendMessage+0x1b4>
 8004ba6:	2005      	movs	r0, #5
 8004ba8:	e05c      	b.n	8004c64 <USBPD_PRL_SendMessage+0x1b4>
 8004baa:	f10c 0012 	add.w	r0, ip, #18
 8004bae:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8004bb2:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8004bb6:	f10c 0312 	add.w	r3, ip, #18
 8004bba:	f362 0004 	bfi	r0, r2, #0, #5
 8004bbe:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8004bc2:	ea4f 1bd2 	mov.w	fp, r2, lsr #7
 8004bc6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8004bca:	ea40 30cb 	orr.w	r0, r0, fp, lsl #15
 8004bce:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	7078      	strb	r0, [r7, #1]
 8004bd6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8004bda:	0bd8      	lsrs	r0, r3, #15
 8004bdc:	d025      	beq.n	8004c2a <USBPD_PRL_SendMessage+0x17a>
 8004bde:	9802      	ldr	r0, [sp, #8]
 8004be0:	7883      	ldrb	r3, [r0, #2]
 8004be2:	78c7      	ldrb	r7, [r0, #3]
 8004be4:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8004be8:	81eb      	strh	r3, [r5, #14]
 8004bea:	89e8      	ldrh	r0, [r5, #14]
 8004bec:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8004bf0:	b968      	cbnz	r0, 8004c0e <USBPD_PRL_SendMessage+0x15e>
 8004bf2:	89e8      	ldrh	r0, [r5, #14]
 8004bf4:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 8004bf8:	bb08      	cbnz	r0, 8004c3e <USBPD_PRL_SendMessage+0x18e>
 8004bfa:	1f30      	subs	r0, r6, #4
 8004bfc:	82a8      	strh	r0, [r5, #20]
 8004bfe:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8004c02:	89eb      	ldrh	r3, [r5, #14]
 8004c04:	f403 437e 	and.w	r3, r3, #65024	@ 0xfe00
 8004c08:	4318      	orrs	r0, r3
 8004c0a:	81e8      	strh	r0, [r5, #14]
 8004c0c:	e017      	b.n	8004c3e <USBPD_PRL_SendMessage+0x18e>
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f10c 0312 	add.w	r3, ip, #18
 8004c14:	82a8      	strh	r0, [r5, #20]
 8004c16:	2001      	movs	r0, #1
 8004c18:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]
 8004c1c:	f360 370e 	bfi	r7, r0, #12, #3
 8004c20:	f10c 0012 	add.w	r0, ip, #18
 8004c24:	f820 7011 	strh.w	r7, [r0, r1, lsl #1]
 8004c28:	e009      	b.n	8004c3e <USBPD_PRL_SendMessage+0x18e>
 8004c2a:	1eb0      	subs	r0, r6, #2
 8004c2c:	0880      	lsrs	r0, r0, #2
 8004c2e:	f360 330e 	bfi	r3, r0, #12, #3
 8004c32:	f10c 0012 	add.w	r0, ip, #18
 8004c36:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	82ab      	strh	r3, [r5, #20]
 8004c3e:	2a0d      	cmp	r2, #13
 8004c40:	bf02      	ittt	eq
 8004c42:	f10c 0012 	addeq.w	r0, ip, #18
 8004c46:	f830 1011 	ldrheq.w	r1, [r0, r1, lsl #1]
 8004c4a:	f411 4f70 	tsteq.w	r1, #61440	@ 0xf000
 8004c4e:	d108      	bne.n	8004c62 <USBPD_PRL_SendMessage+0x1b2>
 8004c50:	2000      	movs	r0, #0
 8004c52:	f88e 000b 	strb.w	r0, [lr, #11]
 8004c56:	220f      	movs	r2, #15
 8004c58:	2103      	movs	r1, #3
 8004c5a:	f10c 0006 	add.w	r0, ip, #6
 8004c5e:	f000 fc20 	bl	80054a2 <__aeabi_memset>
 8004c62:	2007      	movs	r0, #7
 8004c64:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8004c68:	7148      	strb	r0, [r1, #5]
 8004c6a:	e145      	b.n	8004ef8 <USBPD_PRL_SendMessage+0x448>
 8004c6c:	f102 0312 	add.w	r3, r2, #18
 8004c70:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8004c74:	0bc0      	lsrs	r0, r0, #15
 8004c76:	d07c      	beq.n	8004d72 <USBPD_PRL_SendMessage+0x2c2>
 8004c78:	8b90      	ldrh	r0, [r2, #28]
 8004c7a:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d16c      	bne.n	8004d5c <USBPD_PRL_SendMessage+0x2ac>
 8004c82:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8004c86:	8c57      	ldrh	r7, [r2, #34]	@ 0x22
 8004c88:	8b93      	ldrh	r3, [r2, #28]
 8004c8a:	2f1b      	cmp	r7, #27
 8004c8c:	d30f      	bcc.n	8004cae <USBPD_PRL_SendMessage+0x1fe>
 8004c8e:	0bd8      	lsrs	r0, r3, #15
 8004c90:	d00d      	beq.n	8004cae <USBPD_PRL_SendMessage+0x1fe>
 8004c92:	f102 0312 	add.w	r3, r2, #18
 8004c96:	261e      	movs	r6, #30
 8004c98:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8004c9c:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
 8004ca0:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8004ca4:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
 8004ca6:	f1a0 031a 	sub.w	r3, r0, #26
 8004caa:	8453      	strh	r3, [r2, #34]	@ 0x22
 8004cac:	e056      	b.n	8004d5c <USBPD_PRL_SendMessage+0x2ac>
 8004cae:	f3c3 20c3 	ubfx	r0, r3, #11, #4
 8004cb2:	b918      	cbnz	r0, 8004cbc <USBPD_PRL_SendMessage+0x20c>
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f367 0008 	bfi	r0, r7, #0, #9
 8004cba:	8390      	strh	r0, [r2, #28]
 8004cbc:	f648 70ff 	movw	r0, #36863	@ 0x8fff
 8004cc0:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8004cc4:	f102 0312 	add.w	r3, r2, #18
 8004cc8:	f102 0712 	add.w	r7, r2, #18
 8004ccc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8004cd0:	4003      	ands	r3, r0
 8004cd2:	f827 3011 	strh.w	r3, [r7, r1, lsl #1]
 8004cd6:	8b90      	ldrh	r0, [r2, #28]
 8004cd8:	0bc0      	lsrs	r0, r0, #15
 8004cda:	d03b      	beq.n	8004d54 <USBPD_PRL_SendMessage+0x2a4>
 8004cdc:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
 8004cde:	1c80      	adds	r0, r0, #2
 8004ce0:	0880      	lsrs	r0, r0, #2
 8004ce2:	0307      	lsls	r7, r0, #12
 8004ce4:	f407 47e0 	and.w	r7, r7, #28672	@ 0x7000
 8004ce8:	f102 0012 	add.w	r0, r2, #18
 8004cec:	433b      	orrs	r3, r7
 8004cee:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8004cf2:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8004cf4:	1c92      	adds	r2, r2, #2
 8004cf6:	f012 0203 	ands.w	r2, r2, #3
 8004cfa:	d021      	beq.n	8004d40 <USBPD_PRL_SendMessage+0x290>
 8004cfc:	9802      	ldr	r0, [sp, #8]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e005      	b.n	8004d0e <USBPD_PRL_SendMessage+0x25e>
 8004d02:	8c7f      	ldrh	r7, [r7, #34]	@ 0x22
 8004d04:	442f      	add	r7, r5
 8004d06:	4407      	add	r7, r0
 8004d08:	2500      	movs	r5, #0
 8004d0a:	713d      	strb	r5, [r7, #4]
 8004d0c:	1c5b      	adds	r3, r3, #1
 8004d0e:	b2dd      	uxtb	r5, r3
 8004d10:	f1c2 0e04 	rsb	lr, r2, #4
 8004d14:	f85a 7028 	ldr.w	r7, [sl, r8, lsl #2]
 8004d18:	4575      	cmp	r5, lr
 8004d1a:	d3f2      	bcc.n	8004d02 <USBPD_PRL_SendMessage+0x252>
 8004d1c:	9002      	str	r0, [sp, #8]
 8004d1e:	f648 72ff 	movw	r2, #36863	@ 0x8fff
 8004d22:	f107 0012 	add.w	r0, r7, #18
 8004d26:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8004d2a:	4002      	ands	r2, r0
 8004d2c:	0b00      	lsrs	r0, r0, #12
 8004d2e:	1c40      	adds	r0, r0, #1
 8004d30:	0300      	lsls	r0, r0, #12
 8004d32:	f400 40e0 	and.w	r0, r0, #28672	@ 0x7000
 8004d36:	4310      	orrs	r0, r2
 8004d38:	f107 0212 	add.w	r2, r7, #18
 8004d3c:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8004d40:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8004d44:	f100 0212 	add.w	r2, r0, #18
 8004d48:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 8004d4c:	f3c3 3602 	ubfx	r6, r3, #12, #3
 8004d50:	00b6      	lsls	r6, r6, #2
 8004d52:	1cb6      	adds	r6, r6, #2
 8004d54:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8004d58:	2000      	movs	r0, #0
 8004d5a:	8450      	strh	r0, [r2, #34]	@ 0x22
 8004d5c:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8004d60:	8b82      	ldrh	r2, [r0, #28]
 8004d62:	9802      	ldr	r0, [sp, #8]
 8004d64:	7082      	strb	r2, [r0, #2]
 8004d66:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8004d6a:	8b90      	ldrh	r0, [r2, #28]
 8004d6c:	9a02      	ldr	r2, [sp, #8]
 8004d6e:	0a00      	lsrs	r0, r0, #8
 8004d70:	70d0      	strb	r0, [r2, #3]
 8004d72:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8004d76:	f8df 56a0 	ldr.w	r5, [pc, #1696]	@ 8005418 <.text_41>
 8004d7a:	f100 020b 	add.w	r2, r0, #11
 8004d7e:	3012      	adds	r0, #18
 8004d80:	5c53      	ldrb	r3, [r2, r1]
 8004d82:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8004d86:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8004d8a:	f363 204b 	bfi	r0, r3, #9, #3
 8004d8e:	f102 0312 	add.w	r3, r2, #18
 8004d92:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8004d96:	9a02      	ldr	r2, [sp, #8]
 8004d98:	7010      	strb	r0, [r2, #0]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8004da0:	f100 0312 	add.w	r3, r0, #18
 8004da4:	9802      	ldr	r0, [sp, #8]
 8004da6:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8004daa:	0a09      	lsrs	r1, r1, #8
 8004dac:	7041      	strb	r1, [r0, #1]
 8004dae:	210a      	movs	r1, #10
 8004db0:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8004db4:	81c6      	strh	r6, [r0, #14]
 8004db6:	7141      	strb	r1, [r0, #5]
 8004db8:	7402      	strb	r2, [r0, #16]
 8004dba:	b2b0      	uxth	r0, r6
 8004dbc:	9000      	str	r0, [sp, #0]
 8004dbe:	f000 f8a5 	bl	8004f0c <.text_21>
 8004dc2:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004dc6:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004dca:	f011 f841 	bl	8015e50 <USBPD_TIM_Start>
 8004dce:	f000 f897 	bl	8004f00 <.text_20>
 8004dd2:	b2b3      	uxth	r3, r6
 8004dd4:	f00f fd1b 	bl	801480e <USBPD_PHY_SendMessage>
 8004dd8:	e08e      	b.n	8004ef8 <USBPD_PRL_SendMessage+0x448>
 8004dda:	f3ef 8710 	mrs	r7, PRIMASK
 8004dde:	b672      	cpsid	i
 8004de0:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8004de4:	7941      	ldrb	r1, [r0, #5]
 8004de6:	290a      	cmp	r1, #10
 8004de8:	d109      	bne.n	8004dfe <USBPD_PRL_SendMessage+0x34e>
 8004dea:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004dee:	f011 f8a1 	bl	8015f34 <USBPD_TIM_IsExpired>
 8004df2:	2801      	cmp	r0, #1
 8004df4:	d103      	bne.n	8004dfe <USBPD_PRL_SendMessage+0x34e>
 8004df6:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8004dfa:	200d      	movs	r0, #13
 8004dfc:	7148      	strb	r0, [r1, #5]
 8004dfe:	f387 8810 	msr	PRIMASK, r7
 8004e02:	e079      	b.n	8004ef8 <USBPD_PRL_SendMessage+0x448>
 8004e04:	89a8      	ldrh	r0, [r5, #12]
 8004e06:	f89e 100b 	ldrb.w	r1, [lr, #11]
 8004e0a:	0a43      	lsrs	r3, r0, #9
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	4299      	cmp	r1, r3
 8004e12:	bf04      	itt	eq
 8004e14:	f000 001f 	andeq.w	r0, r0, #31
 8004e18:	2801      	cmpeq	r0, #1
 8004e1a:	d109      	bne.n	8004e30 <USBPD_PRL_SendMessage+0x380>
 8004e1c:	1c49      	adds	r1, r1, #1
 8004e1e:	f001 0107 	and.w	r1, r1, #7
 8004e22:	f88e 100b 	strb.w	r1, [lr, #11]
 8004e26:	2000      	movs	r0, #0
 8004e28:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8004e2c:	7148      	strb	r0, [r1, #5]
 8004e2e:	e016      	b.n	8004e5e <USBPD_PRL_SendMessage+0x3ae>
 8004e30:	200d      	movs	r0, #13
 8004e32:	7150      	strb	r0, [r2, #5]
 8004e34:	e060      	b.n	8004ef8 <USBPD_PRL_SendMessage+0x448>
 8004e36:	f89e 000b 	ldrb.w	r0, [lr, #11]
 8004e3a:	1c40      	adds	r0, r0, #1
 8004e3c:	f000 0007 	and.w	r0, r0, #7
 8004e40:	f88e 000b 	strb.w	r0, [lr, #11]
 8004e44:	2000      	movs	r0, #0
 8004e46:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8004e4a:	7148      	strb	r0, [r1, #5]
 8004e4c:	f248 71ff 	movw	r1, #34815	@ 0x87ff
 8004e50:	89ea      	ldrh	r2, [r5, #14]
 8004e52:	400a      	ands	r2, r1
 8004e54:	81ea      	strh	r2, [r5, #14]
 8004e56:	f64f 30ff 	movw	r0, #64511	@ 0xfbff
 8004e5a:	4002      	ands	r2, r0
 8004e5c:	81ea      	strh	r2, [r5, #14]
 8004e5e:	2405      	movs	r4, #5
 8004e60:	e04a      	b.n	8004ef8 <USBPD_PRL_SendMessage+0x448>
 8004e62:	7878      	ldrb	r0, [r7, #1]
 8004e64:	1c40      	adds	r0, r0, #1
 8004e66:	7078      	strb	r0, [r7, #1]
 8004e68:	f10c 0312 	add.w	r3, ip, #18
 8004e6c:	f10c 0012 	add.w	r0, ip, #18
 8004e70:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 8004e74:	f3c2 1081 	ubfx	r0, r2, #6, #2
 8004e78:	2801      	cmp	r0, #1
 8004e7a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8004e7e:	bf0c      	ite	eq
 8004e80:	2203      	moveq	r2, #3
 8004e82:	2202      	movne	r2, #2
 8004e84:	0bc0      	lsrs	r0, r0, #15
 8004e86:	d006      	beq.n	8004e96 <USBPD_PRL_SendMessage+0x3e6>
 8004e88:	89e9      	ldrh	r1, [r5, #14]
 8004e8a:	0bc8      	lsrs	r0, r1, #15
 8004e8c:	d103      	bne.n	8004e96 <USBPD_PRL_SendMessage+0x3e6>
 8004e8e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004e92:	291b      	cmp	r1, #27
 8004e94:	d207      	bcs.n	8004ea6 <USBPD_PRL_SendMessage+0x3f6>
 8004e96:	7878      	ldrb	r0, [r7, #1]
 8004e98:	4282      	cmp	r2, r0
 8004e9a:	d304      	bcc.n	8004ea6 <USBPD_PRL_SendMessage+0x3f6>
 8004e9c:	2110      	movs	r1, #16
 8004e9e:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8004ea2:	7141      	strb	r1, [r0, #5]
 8004ea4:	e028      	b.n	8004ef8 <USBPD_PRL_SendMessage+0x448>
 8004ea6:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8004eaa:	2100      	movs	r1, #0
 8004eac:	7141      	strb	r1, [r0, #5]
 8004eae:	2407      	movs	r4, #7
 8004eb0:	f89e 100b 	ldrb.w	r1, [lr, #11]
 8004eb4:	1c49      	adds	r1, r1, #1
 8004eb6:	f001 0107 	and.w	r1, r1, #7
 8004eba:	f88e 100b 	strb.w	r1, [lr, #11]
 8004ebe:	e01b      	b.n	8004ef8 <USBPD_PRL_SendMessage+0x448>
 8004ec0:	200a      	movs	r0, #10
 8004ec2:	7150      	strb	r0, [r2, #5]
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	70a9      	strb	r1, [r5, #2]
 8004ec8:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004ecc:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004ed0:	f010 ffbe 	bl	8015e50 <USBPD_TIM_Start>
 8004ed4:	882b      	ldrh	r3, [r5, #0]
 8004ed6:	f000 f813 	bl	8004f00 <.text_20>
 8004eda:	f8df 553c 	ldr.w	r5, [pc, #1340]	@ 8005418 <.text_41>
 8004ede:	f00f fc96 	bl	801480e <USBPD_PHY_SendMessage>
 8004ee2:	9600      	str	r6, [sp, #0]
 8004ee4:	f000 f812 	bl	8004f0c <.text_21>
 8004ee8:	e006      	b.n	8004ef8 <USBPD_PRL_SendMessage+0x448>
 8004eea:	2000      	movs	r0, #0
 8004eec:	7150      	strb	r0, [r2, #5]
 8004eee:	2406      	movs	r4, #6
 8004ef0:	e002      	b.n	8004ef8 <USBPD_PRL_SendMessage+0x448>
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	7150      	strb	r0, [r2, #5]
 8004ef6:	2410      	movs	r4, #16
 8004ef8:	4620      	mov	r0, r4
 8004efa:	b006      	add	sp, #24
 8004efc:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

08004f00 <.text_20>:
 8004f00:	9a02      	ldr	r2, [sp, #8]
 8004f02:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004f06:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004f0a:	4770      	bx	lr

08004f0c <.text_21>:
 8004f0c:	9b02      	ldr	r3, [sp, #8]
 8004f0e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004f12:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004f16:	f8d5 a000 	ldr.w	sl, [r5]
 8004f1a:	2002      	movs	r0, #2

08004f1c <__iar_annotation$$tailcall>:
 8004f1c:	4750      	bx	sl

08004f1e <USBPD_PRL_ResetRequestProcess>:
 8004f1e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8004f22:	4605      	mov	r5, r0
 8004f24:	f8df 84ec 	ldr.w	r8, [pc, #1260]	@ 8005414 <.text_40>
 8004f28:	462f      	mov	r7, r5
 8004f2a:	f858 4027 	ldr.w	r4, [r8, r7, lsl #2]
 8004f2e:	2000      	movs	r0, #0
 8004f30:	70e0      	strb	r0, [r4, #3]
 8004f32:	72e0      	strb	r0, [r4, #11]
 8004f34:	7320      	strb	r0, [r4, #12]
 8004f36:	7360      	strb	r0, [r4, #13]
 8004f38:	460e      	mov	r6, r1
 8004f3a:	f000 f9ee 	bl	800531a <.text_34>
 8004f3e:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 8004f42:	f8df 74d4 	ldr.w	r7, [pc, #1236]	@ 8005418 <.text_41>
 8004f46:	2200      	movs	r2, #0
 8004f48:	7142      	strb	r2, [r0, #5]
 8004f4a:	9200      	str	r2, [sp, #0]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f8d7 c000 	ldr.w	ip, [r7]
 8004f52:	4632      	mov	r2, r6
 8004f54:	4629      	mov	r1, r5
 8004f56:	2002      	movs	r0, #2
 8004f58:	47e0      	blx	ip
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f000 f83c 	bl	8004fd8 <PRL_DisableRX>
 8004f60:	4631      	mov	r1, r6
 8004f62:	4628      	mov	r0, r5
 8004f64:	f00f fc40 	bl	80147e8 <USBPD_PHY_ResetRequest>
 8004f68:	2005      	movs	r0, #5
 8004f6a:	7120      	strb	r0, [r4, #4]
 8004f6c:	78e0      	ldrb	r0, [r4, #3]
 8004f6e:	2801      	cmp	r0, #1
 8004f70:	bf1c      	itt	ne
 8004f72:	7920      	ldrbne	r0, [r4, #4]
 8004f74:	2800      	cmpne	r0, #0
 8004f76:	d1f9      	bne.n	8004f6c <USBPD_PRL_ResetRequestProcess+0x4e>
 8004f78:	e8bd 81f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, pc}

08004f7c <USBDPD_PRL_BistCarrierEyeMode>:
 8004f7c:	2905      	cmp	r1, #5
 8004f7e:	bf08      	it	eq
 8004f80:	f00f bc5b 	beq.w	801483a <USBPD_PHY_Send_BIST_Pattern>
 8004f84:	2010      	movs	r0, #16
 8004f86:	4770      	bx	lr

08004f88 <USBDPD_PRL_BistCarrierEyeModeExit>:
 8004f88:	2905      	cmp	r1, #5
 8004f8a:	bf04      	itt	eq
 8004f8c:	2107      	moveq	r1, #7
 8004f8e:	f00f bc62 	beq.w	8014856 <USBPD_PHY_ExitTransmit>
 8004f92:	2010      	movs	r0, #16
 8004f94:	4770      	bx	lr

08004f96 <USBPD_PRL_Reset>:
 8004f96:	b538      	push	{r3, r4, r5, lr}
 8004f98:	4604      	mov	r4, r0
 8004f9a:	f8df 0478 	ldr.w	r0, [pc, #1144]	@ 8005414 <.text_40>
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	716a      	strb	r2, [r5, #5]
 8004fa8:	702a      	strb	r2, [r5, #0]
 8004faa:	712a      	strb	r2, [r5, #4]
 8004fac:	72ea      	strb	r2, [r5, #11]
 8004fae:	732a      	strb	r2, [r5, #12]
 8004fb0:	736a      	strb	r2, [r5, #13]
 8004fb2:	2103      	movs	r1, #3
 8004fb4:	220f      	movs	r2, #15
 8004fb6:	1da8      	adds	r0, r5, #6
 8004fb8:	f000 fa73 	bl	80054a2 <__aeabi_memset>
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f885 2025 	strb.w	r2, [r5, #37]	@ 0x25
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f00f fc05 	bl	80147d2 <USBPD_PHY_Reset>
 8004fc8:	4620      	mov	r0, r4
 8004fca:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 8004fce:	f00f bca0 	b.w	8014912 <USBPD_PHY_EnableRX>

08004fd2 <USBPD_PRL_Stop>:
 8004fd2:	f00f bcab 	b.w	801492c <USBPD_PHY_DisableRX>

08004fd6 <USBPD_PRL_DeInit>:
 8004fd6:	4770      	bx	lr

08004fd8 <PRL_DisableRX>:
 8004fd8:	f00f bca8 	b.w	801492c <USBPD_PHY_DisableRX>

08004fdc <PRL_Received>:
 8004fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe0:	4682      	mov	sl, r0
 8004fe2:	f8df 9430 	ldr.w	r9, [pc, #1072]	@ 8005414 <.text_40>
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	4655      	mov	r5, sl
 8004fea:	f859 4025 	ldr.w	r4, [r9, r5, lsl #2]
 8004fee:	f8df b428 	ldr.w	fp, [pc, #1064]	@ 8005418 <.text_41>
 8004ff2:	4688      	mov	r8, r1
 8004ff4:	f00f fbe1 	bl	80147ba <USBPD_PHY_GetMinGOODCRCTimerValue>
 8004ff8:	4601      	mov	r1, r0
 8004ffa:	ea4f 004a 	mov.w	r0, sl, lsl #1
 8004ffe:	b2c0      	uxtb	r0, r0
 8005000:	f010 ff26 	bl	8015e50 <USBPD_TIM_Start>
 8005004:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 8005008:	7a30      	ldrb	r0, [r6, #8]
 800500a:	7a71      	ldrb	r1, [r6, #9]
 800500c:	eb00 2701 	add.w	r7, r0, r1, lsl #8
 8005010:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 8005014:	4038      	ands	r0, r7
 8005016:	2801      	cmp	r0, #1
 8005018:	d113      	bne.n	8005042 <PRL_Received+0x66>
 800501a:	0069      	lsls	r1, r5, #1
 800501c:	1c49      	adds	r1, r1, #1
 800501e:	b2c8      	uxtb	r0, r1
 8005020:	f010 ff88 	bl	8015f34 <USBPD_TIM_IsExpired>
 8005024:	2801      	cmp	r0, #1
 8005026:	d040      	beq.n	80050aa <PRL_Received+0xce>
 8005028:	f859 1025 	ldr.w	r1, [r9, r5, lsl #2]
 800502c:	200b      	movs	r0, #11
 800502e:	7148      	strb	r0, [r1, #5]
 8005030:	8367      	strh	r7, [r4, #26]
 8005032:	f000 f96c 	bl	800530e <.text_33>
 8005036:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800503a:	4642      	mov	r2, r8
 800503c:	4651      	mov	r1, sl
 800503e:	2001      	movs	r0, #1
 8005040:	e14d      	b.n	80052de <PRL_Received+0x302>
 8005042:	f20f 405c 	addw	r0, pc, #1116	@ 0x45c
 8005046:	8805      	ldrh	r5, [r0, #0]
 8005048:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 800504c:	2101      	movs	r1, #1
 800504e:	4038      	ands	r0, r7
 8005050:	72a1      	strb	r1, [r4, #10]
 8005052:	eb04 0208 	add.w	r2, r4, r8
 8005056:	280d      	cmp	r0, #13
 8005058:	9202      	str	r2, [sp, #8]
 800505a:	d103      	bne.n	8005064 <PRL_Received+0x88>
 800505c:	2100      	movs	r1, #0
 800505e:	72d1      	strb	r1, [r2, #11]
 8005060:	f000 f95b 	bl	800531a <.text_34>
 8005064:	ea5f 0008 	movs.w	r0, r8
 8005068:	d10c      	bne.n	8005084 <PRL_Received+0xa8>
 800506a:	8a60      	ldrh	r0, [r4, #18]
 800506c:	f3c0 1140 	ubfx	r1, r0, #5, #1
 8005070:	f3c0 2200 	ubfx	r2, r0, #8, #1
 8005074:	f64f 60df 	movw	r0, #65247	@ 0xfedf
 8005078:	4005      	ands	r5, r0
 800507a:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
 800507e:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8005082:	e002      	b.n	800508a <PRL_Received+0xae>
 8005084:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8005088:	4015      	ands	r5, r2
 800508a:	f24f 113f 	movw	r1, #61759	@ 0xf13f
 800508e:	400d      	ands	r5, r1
 8005090:	f407 6060 	and.w	r0, r7, #3584	@ 0xe00
 8005094:	4305      	orrs	r5, r0
 8005096:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
 800509a:	7625      	strb	r5, [r4, #24]
 800509c:	4641      	mov	r1, r8
 800509e:	0a2d      	lsrs	r5, r5, #8
 80050a0:	7665      	strb	r5, [r4, #25]
 80050a2:	4650      	mov	r0, sl
 80050a4:	f7fb fdf9 	bl	8000c9a <PE_PRL_PostReceiveEvent>
 80050a8:	2800      	cmp	r0, #0
 80050aa:	f000 811b 	beq.w	80052e4 <PRL_Received+0x308>
 80050ae:	2001      	movs	r0, #1
 80050b0:	7420      	strb	r0, [r4, #16]
 80050b2:	ea4f 004a 	mov.w	r0, sl, lsl #1
 80050b6:	b2c0      	uxtb	r0, r0
 80050b8:	f010 ff3c 	bl	8015f34 <USBPD_TIM_IsExpired>
 80050bc:	2800      	cmp	r0, #0
 80050be:	d0f8      	beq.n	80050b2 <PRL_Received+0xd6>
 80050c0:	2302      	movs	r3, #2
 80050c2:	f104 0218 	add.w	r2, r4, #24
 80050c6:	4641      	mov	r1, r8
 80050c8:	4650      	mov	r0, sl
 80050ca:	f00f fba0 	bl	801480e <USBPD_PHY_SendMessage>
 80050ce:	9003      	str	r0, [sp, #12]
 80050d0:	f884 8009 	strb.w	r8, [r4, #9]
 80050d4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80050d8:	4650      	mov	r0, sl
 80050da:	f7fb fe14 	bl	8000d06 <PE_PRL_PostReceiveEventCopy>
 80050de:	7ab0      	ldrb	r0, [r6, #10]
 80050e0:	7af1      	ldrb	r1, [r6, #11]
 80050e2:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 80050e6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80050ea:	0438      	lsls	r0, r7, #16
 80050ec:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80050f0:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80050f4:	0bc9      	lsrs	r1, r1, #15
 80050f6:	0fc0      	lsrs	r0, r0, #31
 80050f8:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80050fc:	f8ad 1006 	strh.w	r1, [sp, #6]
 8005100:	d004      	beq.n	800510c <PRL_Received+0x130>
 8005102:	0008      	movs	r0, r1
 8005104:	d102      	bne.n	800510c <PRL_Received+0x130>
 8005106:	1d29      	adds	r1, r5, #4
 8005108:	9100      	str	r1, [sp, #0]
 800510a:	e019      	b.n	8005140 <PRL_Received+0x164>
 800510c:	7821      	ldrb	r1, [r4, #0]
 800510e:	b9a9      	cbnz	r1, 800513c <PRL_Received+0x160>
 8005110:	f3c7 3002 	ubfx	r0, r7, #12, #3
 8005114:	b190      	cbz	r0, 800513c <PRL_Received+0x160>
 8005116:	f007 001f 	and.w	r0, r7, #31
 800511a:	2803      	cmp	r0, #3
 800511c:	d10e      	bne.n	800513c <PRL_Received+0x160>
 800511e:	7ab0      	ldrb	r0, [r6, #10]
 8005120:	7af1      	ldrb	r1, [r6, #11]
 8005122:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 8005126:	7b30      	ldrb	r0, [r6, #12]
 8005128:	7b71      	ldrb	r1, [r6, #13]
 800512a:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 800512e:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 8005132:	0f12      	lsrs	r2, r2, #28
 8005134:	2a08      	cmp	r2, #8
 8005136:	bf04      	itt	eq
 8005138:	2001      	moveq	r0, #1
 800513a:	7020      	strbeq	r0, [r4, #0]
 800513c:	f000 f8e7 	bl	800530e <.text_33>
 8005140:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8005144:	f8db c000 	ldr.w	ip, [fp]
 8005148:	4642      	mov	r2, r8
 800514a:	4651      	mov	r1, sl
 800514c:	2001      	movs	r0, #1
 800514e:	47e0      	blx	ip
 8005150:	9803      	ldr	r0, [sp, #12]
 8005152:	b948      	cbnz	r0, 8005168 <PRL_Received+0x18c>
 8005154:	2102      	movs	r1, #2
 8005156:	9100      	str	r1, [sp, #0]
 8005158:	f104 0318 	add.w	r3, r4, #24
 800515c:	f8db c000 	ldr.w	ip, [fp]
 8005160:	4642      	mov	r2, r8
 8005162:	4651      	mov	r1, sl
 8005164:	2002      	movs	r0, #2
 8005166:	47e0      	blx	ip
 8005168:	9802      	ldr	r0, [sp, #8]
 800516a:	7981      	ldrb	r1, [r0, #6]
 800516c:	f3c7 2042 	ubfx	r0, r7, #9, #3
 8005170:	4281      	cmp	r1, r0
 8005172:	bf04      	itt	eq
 8005174:	9803      	ldreq	r0, [sp, #12]
 8005176:	2800      	cmpeq	r0, #0
 8005178:	f000 80a2 	beq.w	80052c0 <PRL_Received+0x2e4>
 800517c:	0439      	lsls	r1, r7, #16
 800517e:	9a02      	ldr	r2, [sp, #8]
 8005180:	0e49      	lsrs	r1, r1, #25
 8005182:	f001 0107 	and.w	r1, r1, #7
 8005186:	7191      	strb	r1, [r2, #6]
 8005188:	0438      	lsls	r0, r7, #16
 800518a:	8427      	strh	r7, [r4, #32]
 800518c:	0fc0      	lsrs	r0, r0, #31
 800518e:	bf1c      	itt	ne
 8005190:	f8bd 0006 	ldrhne.w	r0, [sp, #6]
 8005194:	2800      	cmpne	r0, #0
 8005196:	d06e      	beq.n	8005276 <PRL_Received+0x29a>
 8005198:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800519c:	83e0      	strh	r0, [r4, #30]
 800519e:	201a      	movs	r0, #26
 80051a0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80051a4:	f411 4ff8 	tst.w	r1, #31744	@ 0x7c00
 80051a8:	d13c      	bne.n	8005224 <PRL_Received+0x248>
 80051aa:	f3c7 3102 	ubfx	r1, r7, #12, #3
 80051ae:	2907      	cmp	r1, #7
 80051b0:	d301      	bcc.n	80051b6 <PRL_Received+0x1da>
 80051b2:	2d1a      	cmp	r5, #26
 80051b4:	d820      	bhi.n	80051f8 <PRL_Received+0x21c>
 80051b6:	2100      	movs	r1, #0
 80051b8:	3434      	adds	r4, #52	@ 0x34
 80051ba:	e00c      	b.n	80051d6 <PRL_Received+0x1fa>
 80051bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80051c0:	6832      	ldr	r2, [r6, #0]
 80051c2:	f814 e001 	ldrb.w	lr, [r4, r1]
 80051c6:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 80051ca:	fb10 1303 	smlabb	r3, r0, r3, r1
 80051ce:	1c49      	adds	r1, r1, #1
 80051d0:	f802 e003 	strb.w	lr, [r2, r3]
 80051d4:	b289      	uxth	r1, r1
 80051d6:	f000 f894 	bl	8005302 <.text_32>
 80051da:	d3ef      	bcc.n	80051bc <PRL_Received+0x1e0>
 80051dc:	f3c7 3002 	ubfx	r0, r7, #12, #3
 80051e0:	0080      	lsls	r0, r0, #2
 80051e2:	1e80      	subs	r0, r0, #2
 80051e4:	42a8      	cmp	r0, r5
 80051e6:	d204      	bcs.n	80051f2 <PRL_Received+0x216>
 80051e8:	f3c7 3002 	ubfx	r0, r7, #12, #3
 80051ec:	0080      	lsls	r0, r0, #2
 80051ee:	1e80      	subs	r0, r0, #2
 80051f0:	e00f      	b.n	8005212 <PRL_Received+0x236>
 80051f2:	6870      	ldr	r0, [r6, #4]
 80051f4:	8005      	strh	r5, [r0, #0]
 80051f6:	e00e      	b.n	8005216 <PRL_Received+0x23a>
 80051f8:	2101      	movs	r1, #1
 80051fa:	f884 1025 	strb.w	r1, [r4, #37]	@ 0x25
 80051fe:	2000      	movs	r0, #0
 8005200:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 8005204:	6833      	ldr	r3, [r6, #0]
 8005206:	5c0a      	ldrb	r2, [r1, r0]
 8005208:	541a      	strb	r2, [r3, r0]
 800520a:	1c40      	adds	r0, r0, #1
 800520c:	281a      	cmp	r0, #26
 800520e:	d3f9      	bcc.n	8005204 <PRL_Received+0x228>
 8005210:	201a      	movs	r0, #26
 8005212:	6871      	ldr	r1, [r6, #4]
 8005214:	8008      	strh	r0, [r1, #0]
 8005216:	4641      	mov	r1, r8
 8005218:	4650      	mov	r0, sl
 800521a:	b005      	add	sp, #20
 800521c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005220:	f7fb bd3b 	b.w	8000c9a <PE_PRL_PostReceiveEvent>
 8005224:	6871      	ldr	r1, [r6, #4]
 8005226:	8809      	ldrh	r1, [r1, #0]
 8005228:	f240 1205 	movw	r2, #261	@ 0x105
 800522c:	f101 031a 	add.w	r3, r1, #26
 8005230:	4293      	cmp	r3, r2
 8005232:	bf3f      	itttt	cc
 8005234:	f3c7 3302 	ubfxcc	r3, r7, #12, #3
 8005238:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 800523c:	1e89      	subcc	r1, r1, #2
 800523e:	42a9      	cmpcc	r1, r5
 8005240:	d21a      	bcs.n	8005278 <PRL_Received+0x29c>
 8005242:	2101      	movs	r1, #1
 8005244:	f884 1025 	strb.w	r1, [r4, #37]	@ 0x25
 8005248:	3434      	adds	r4, #52	@ 0x34
 800524a:	2100      	movs	r1, #0
 800524c:	e007      	b.n	800525e <PRL_Received+0x282>
 800524e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005252:	6832      	ldr	r2, [r6, #0]
 8005254:	5c65      	ldrb	r5, [r4, r1]
 8005256:	f000 f848 	bl	80052ea <.text_30>
 800525a:	54d5      	strb	r5, [r2, r3]
 800525c:	b289      	uxth	r1, r1
 800525e:	f000 f850 	bl	8005302 <.text_32>
 8005262:	d3f4      	bcc.n	800524e <PRL_Received+0x272>
 8005264:	6871      	ldr	r1, [r6, #4]
 8005266:	880a      	ldrh	r2, [r1, #0]
 8005268:	043f      	lsls	r7, r7, #16
 800526a:	0ebf      	lsrs	r7, r7, #26
 800526c:	f007 071c 	and.w	r7, r7, #28
 8005270:	1eb8      	subs	r0, r7, #2
 8005272:	1882      	adds	r2, r0, r2
 8005274:	800a      	strh	r2, [r1, #0]
 8005276:	e035      	b.n	80052e4 <PRL_Received+0x308>
 8005278:	6871      	ldr	r1, [r6, #4]
 800527a:	880b      	ldrh	r3, [r1, #0]
 800527c:	f000 f83b 	bl	80052f6 <.text_31>
 8005280:	4291      	cmp	r1, r2
 8005282:	d219      	bcs.n	80052b8 <PRL_Received+0x2dc>
 8005284:	f000 f837 	bl	80052f6 <.text_31>
 8005288:	42a9      	cmp	r1, r5
 800528a:	d315      	bcc.n	80052b8 <PRL_Received+0x2dc>
 800528c:	2201      	movs	r2, #1
 800528e:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
 8005292:	2100      	movs	r1, #0
 8005294:	3434      	adds	r4, #52	@ 0x34
 8005296:	e009      	b.n	80052ac <PRL_Received+0x2d0>
 8005298:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800529c:	6832      	ldr	r2, [r6, #0]
 800529e:	f814 a001 	ldrb.w	sl, [r4, r1]
 80052a2:	f000 f822 	bl	80052ea <.text_30>
 80052a6:	f802 a003 	strb.w	sl, [r2, r3]
 80052aa:	b289      	uxth	r1, r1
 80052ac:	f000 f829 	bl	8005302 <.text_32>
 80052b0:	d3f2      	bcc.n	8005298 <PRL_Received+0x2bc>
 80052b2:	6870      	ldr	r0, [r6, #4]
 80052b4:	8005      	strh	r5, [r0, #0]
 80052b6:	e015      	b.n	80052e4 <PRL_Received+0x308>
 80052b8:	2100      	movs	r1, #0
 80052ba:	f884 1025 	strb.w	r1, [r4, #37]	@ 0x25
 80052be:	e011      	b.n	80052e4 <PRL_Received+0x308>
 80052c0:	20ff      	movs	r0, #255	@ 0xff
 80052c2:	7260      	strb	r0, [r4, #9]
 80052c4:	2100      	movs	r1, #0
 80052c6:	7421      	strb	r1, [r4, #16]
 80052c8:	4650      	mov	r0, sl
 80052ca:	f7fb fd06 	bl	8000cda <PE_PRL_PostReceiveEventError>
 80052ce:	2000      	movs	r0, #0
 80052d0:	72a0      	strb	r0, [r4, #10]
 80052d2:	2117      	movs	r1, #23
 80052d4:	9100      	str	r1, [sp, #0]
 80052d6:	2200      	movs	r2, #0
 80052d8:	a365      	add	r3, pc, #404	@ (adr r3, 8005470 <.text_43>)
 80052da:	4651      	mov	r1, sl
 80052dc:	2006      	movs	r0, #6
 80052de:	f8db 4000 	ldr.w	r4, [fp]
 80052e2:	47a0      	blx	r4
 80052e4:	b005      	add	sp, #20
 80052e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080052ea <.text_30>:
 80052ea:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 80052ee:	fb10 1303 	smlabb	r3, r0, r3, r1
 80052f2:	1c49      	adds	r1, r1, #1
 80052f4:	4770      	bx	lr

080052f6 <.text_31>:
 80052f6:	f3c7 3102 	ubfx	r1, r7, #12, #3
 80052fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80052fe:	1e89      	subs	r1, r1, #2
 8005300:	4770      	bx	lr

08005302 <.text_32>:
 8005302:	f3c7 3202 	ubfx	r2, r7, #12, #3
 8005306:	0092      	lsls	r2, r2, #2
 8005308:	1e92      	subs	r2, r2, #2
 800530a:	4291      	cmp	r1, r2
 800530c:	4770      	bx	lr

0800530e <.text_33>:
 800530e:	f3c7 3002 	ubfx	r0, r7, #12, #3
 8005312:	0080      	lsls	r0, r0, #2
 8005314:	1c80      	adds	r0, r0, #2
 8005316:	9000      	str	r0, [sp, #0]
 8005318:	4770      	bx	lr

0800531a <.text_34>:
 800531a:	220f      	movs	r2, #15
 800531c:	2103      	movs	r1, #3
 800531e:	1da0      	adds	r0, r4, #6
 8005320:	f000 b8bf 	b.w	80054a2 <__aeabi_memset>

08005324 <PRL_ResetIndicate>:
 8005324:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8005328:	460d      	mov	r5, r1
 800532a:	2d05      	cmp	r5, #5
 800532c:	4680      	mov	r8, r0
 800532e:	d116      	bne.n	800535e <PRL_ResetIndicate+0x3a>
 8005330:	4f38      	ldr	r7, [pc, #224]	@ (8005414 <.text_40>)
 8005332:	4646      	mov	r6, r8
 8005334:	f857 4026 	ldr.w	r4, [r7, r6, lsl #2]
 8005338:	2000      	movs	r0, #0
 800533a:	2100      	movs	r1, #0
 800533c:	b2c2      	uxtb	r2, r0
 800533e:	1c40      	adds	r0, r0, #1
 8005340:	18a2      	adds	r2, r4, r2
 8005342:	b2c3      	uxtb	r3, r0
 8005344:	2b03      	cmp	r3, #3
 8005346:	72d1      	strb	r1, [r2, #11]
 8005348:	d3f8      	bcc.n	800533c <PRL_ResetIndicate+0x18>
 800534a:	f7ff ffe6 	bl	800531a <.text_34>
 800534e:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 8005352:	2200      	movs	r2, #0
 8005354:	7142      	strb	r2, [r0, #5]
 8005356:	7022      	strb	r2, [r4, #0]
 8005358:	4640      	mov	r0, r8
 800535a:	f7ff fe3d 	bl	8004fd8 <PRL_DisableRX>
 800535e:	2000      	movs	r0, #0
 8005360:	4e2d      	ldr	r6, [pc, #180]	@ (8005418 <.text_41>)
 8005362:	6837      	ldr	r7, [r6, #0]
 8005364:	9000      	str	r0, [sp, #0]
 8005366:	2300      	movs	r3, #0
 8005368:	462a      	mov	r2, r5
 800536a:	4641      	mov	r1, r8
 800536c:	2001      	movs	r0, #1
 800536e:	47b8      	blx	r7
 8005370:	4629      	mov	r1, r5
 8005372:	4640      	mov	r0, r8
 8005374:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8005378:	f7fb bb91 	b.w	8000a9e <PE_PRL_ResetReceived>

0800537c <PRL_ResetCompleted>:
 800537c:	4a25      	ldr	r2, [pc, #148]	@ (8005414 <.text_40>)
 800537e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005382:	2101      	movs	r1, #1
 8005384:	70c1      	strb	r1, [r0, #3]
 8005386:	4770      	bx	lr

08005388 <PRL_BistCompleted>:
 8005388:	f7fb bbae 	b.w	8000ae8 <PE_PRL_BistCompleted>

0800538c <PRL_TxCompleted>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	4a21      	ldr	r2, [pc, #132]	@ (8005414 <.text_40>)
 8005390:	4604      	mov	r4, r0
 8005392:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 8005396:	7c2a      	ldrb	r2, [r5, #16]
 8005398:	2a01      	cmp	r2, #1
 800539a:	d002      	beq.n	80053a2 <PRL_TxCompleted+0x16>
 800539c:	2a02      	cmp	r2, #2
 800539e:	d009      	beq.n	80053b4 <PRL_TxCompleted+0x28>
 80053a0:	e010      	b.n	80053c4 <PRL_TxCompleted+0x38>
 80053a2:	b911      	cbnz	r1, 80053aa <PRL_TxCompleted+0x1e>
 80053a4:	f7fb fccc 	bl	8000d40 <PE_PRL_PostReceiveEventComplete>
 80053a8:	e001      	b.n	80053ae <PRL_TxCompleted+0x22>
 80053aa:	f7fb fc96 	bl	8000cda <PE_PRL_PostReceiveEventError>
 80053ae:	2000      	movs	r0, #0
 80053b0:	72a8      	strb	r0, [r5, #10]
 80053b2:	e007      	b.n	80053c4 <PRL_TxCompleted+0x38>
 80053b4:	f00f f9f4 	bl	80147a0 <USBPD_PHY_GetRetryTimerValue>
 80053b8:	0064      	lsls	r4, r4, #1
 80053ba:	4601      	mov	r1, r0
 80053bc:	1c64      	adds	r4, r4, #1
 80053be:	b2e0      	uxtb	r0, r4
 80053c0:	f010 fd46 	bl	8015e50 <USBPD_TIM_Start>
 80053c4:	2000      	movs	r0, #0
 80053c6:	7428      	strb	r0, [r5, #16]
 80053c8:	bd31      	pop	{r0, r4, r5, pc}

080053ca <USBPD_PRL_PrepareExtendedTxChunkSending>:
 80053ca:	b530      	push	{r4, r5, lr}
 80053cc:	4c11      	ldr	r4, [pc, #68]	@ (8005414 <.text_40>)
 80053ce:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 80053d2:	8ba5      	ldrh	r5, [r4, #28]
 80053d4:	f248 30ff 	movw	r0, #33791	@ 0x83ff
 80053d8:	4005      	ands	r5, r0
 80053da:	8a60      	ldrh	r0, [r4, #18]
 80053dc:	ea45 25c1 	orr.w	r5, r5, r1, lsl #11
 80053e0:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 80053e4:	f405 457e 	and.w	r5, r5, #65024	@ 0xfe00
 80053e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ec:	8260      	strh	r0, [r4, #18]
 80053ee:	432a      	orrs	r2, r5
 80053f0:	8c21      	ldrh	r1, [r4, #32]
 80053f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053f6:	f361 0004 	bfi	r0, r1, #0, #5
 80053fa:	83a2      	strh	r2, [r4, #28]
 80053fc:	8260      	strh	r0, [r4, #18]
 80053fe:	7018      	strb	r0, [r3, #0]
 8005400:	8a60      	ldrh	r0, [r4, #18]
 8005402:	0a00      	lsrs	r0, r0, #8
 8005404:	7058      	strb	r0, [r3, #1]
 8005406:	8ba0      	ldrh	r0, [r4, #28]
 8005408:	7098      	strb	r0, [r3, #2]
 800540a:	8ba1      	ldrh	r1, [r4, #28]
 800540c:	0a09      	lsrs	r1, r1, #8
 800540e:	70d9      	strb	r1, [r3, #3]
 8005410:	bd30      	pop	{r4, r5, pc}
	...

08005414 <.text_40>:
 8005414:	20000284 	.word	0x20000284

08005418 <.text_41>:
 8005418:	20000000 	.word	0x20000000

0800541c <USBPD_PRL_PrepareChunkRequest>:
 800541c:	b530      	push	{r4, r5, lr}
 800541e:	f7ff fb2d 	bl	8004a7c <.text_12>
 8005422:	8b9c      	ldrh	r4, [r3, #28]
 8005424:	8bdd      	ldrh	r5, [r3, #30]
 8005426:	f444 4404 	orr.w	r4, r4, #33792	@ 0x8400
 800542a:	0aed      	lsrs	r5, r5, #11
 800542c:	839c      	strh	r4, [r3, #28]
 800542e:	1c6d      	adds	r5, r5, #1
 8005430:	02ed      	lsls	r5, r5, #11
 8005432:	f404 4406 	and.w	r4, r4, #34304	@ 0x8600
 8005436:	f405 45f0 	and.w	r5, r5, #30720	@ 0x7800
 800543a:	432c      	orrs	r4, r5
 800543c:	839c      	strh	r4, [r3, #28]
 800543e:	8a5c      	ldrh	r4, [r3, #18]
 8005440:	8c1d      	ldrh	r5, [r3, #32]
 8005442:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 8005446:	825c      	strh	r4, [r3, #18]
 8005448:	f365 0404 	bfi	r4, r5, #0, #5
 800544c:	825c      	strh	r4, [r3, #18]
 800544e:	2400      	movs	r4, #0
 8005450:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005454:	7144      	strb	r4, [r0, #5]
 8005456:	8a5a      	ldrh	r2, [r3, #18]
 8005458:	700a      	strb	r2, [r1, #0]
 800545a:	8a58      	ldrh	r0, [r3, #18]
 800545c:	0a00      	lsrs	r0, r0, #8
 800545e:	7048      	strb	r0, [r1, #1]
 8005460:	8b98      	ldrh	r0, [r3, #28]
 8005462:	7088      	strb	r0, [r1, #2]
 8005464:	8b9a      	ldrh	r2, [r3, #28]
 8005466:	710c      	strb	r4, [r1, #4]
 8005468:	0a12      	lsrs	r2, r2, #8
 800546a:	714c      	strb	r4, [r1, #5]
 800546c:	70ca      	strb	r2, [r1, #3]
 800546e:	bd30      	pop	{r4, r5, pc}

08005470 <.text_43>:
 8005470:	5f4c5250 	.word	0x5f4c5250
 8005474:	4e455645 	.word	0x4e455645
 8005478:	58525f54 	.word	0x58525f54
 800547c:	5349445f 	.word	0x5349445f
 8005480:	44524143 	.word	0x44524143
 8005484:	00004445 	.word	0x00004445

08005488 <USBPD_PRL_Init::PRL_PhyCallbacks>:
 8005488:	08004fdd 08005325 0800537d 08005389     .O..%S..}S...S..
 8005498:	0800538d 08004aa9                       .S...J..

080054a0 <.text_45>:
 80054a0:	0001      	.short	0x0001

080054a2 <__aeabi_memset>:
 80054a2:	b470      	push	{r4, r5, r6}
 80054a4:	0784      	lsls	r4, r0, #30
 80054a6:	d046      	beq.n	8005536 <__aeabi_memset+0x94>
 80054a8:	1e4c      	subs	r4, r1, #1
 80054aa:	2900      	cmp	r1, #0
 80054ac:	d041      	beq.n	8005532 <__aeabi_memset+0x90>
 80054ae:	b2d5      	uxtb	r5, r2
 80054b0:	4603      	mov	r3, r0
 80054b2:	e002      	b.n	80054ba <__aeabi_memset+0x18>
 80054b4:	1e61      	subs	r1, r4, #1
 80054b6:	b3e4      	cbz	r4, 8005532 <__aeabi_memset+0x90>
 80054b8:	460c      	mov	r4, r1
 80054ba:	f803 5b01 	strb.w	r5, [r3], #1
 80054be:	0799      	lsls	r1, r3, #30
 80054c0:	d1f8      	bne.n	80054b4 <__aeabi_memset+0x12>
 80054c2:	2c03      	cmp	r4, #3
 80054c4:	d92e      	bls.n	8005524 <__aeabi_memset+0x82>
 80054c6:	b2d5      	uxtb	r5, r2
 80054c8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80054cc:	2c0f      	cmp	r4, #15
 80054ce:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80054d2:	d919      	bls.n	8005508 <__aeabi_memset+0x66>
 80054d4:	4626      	mov	r6, r4
 80054d6:	f103 0110 	add.w	r1, r3, #16
 80054da:	3e10      	subs	r6, #16
 80054dc:	2e0f      	cmp	r6, #15
 80054de:	f841 5c10 	str.w	r5, [r1, #-16]
 80054e2:	f841 5c0c 	str.w	r5, [r1, #-12]
 80054e6:	f841 5c08 	str.w	r5, [r1, #-8]
 80054ea:	f841 5c04 	str.w	r5, [r1, #-4]
 80054ee:	f101 0110 	add.w	r1, r1, #16
 80054f2:	d8f2      	bhi.n	80054da <__aeabi_memset+0x38>
 80054f4:	f1a4 0110 	sub.w	r1, r4, #16
 80054f8:	f021 010f 	bic.w	r1, r1, #15
 80054fc:	f004 040f 	and.w	r4, r4, #15
 8005500:	3110      	adds	r1, #16
 8005502:	2c03      	cmp	r4, #3
 8005504:	440b      	add	r3, r1
 8005506:	d90d      	bls.n	8005524 <__aeabi_memset+0x82>
 8005508:	461e      	mov	r6, r3
 800550a:	4621      	mov	r1, r4
 800550c:	3904      	subs	r1, #4
 800550e:	2903      	cmp	r1, #3
 8005510:	f846 5b04 	str.w	r5, [r6], #4
 8005514:	d8fa      	bhi.n	800550c <__aeabi_memset+0x6a>
 8005516:	1f21      	subs	r1, r4, #4
 8005518:	f021 0103 	bic.w	r1, r1, #3
 800551c:	3104      	adds	r1, #4
 800551e:	440b      	add	r3, r1
 8005520:	f004 0403 	and.w	r4, r4, #3
 8005524:	b12c      	cbz	r4, 8005532 <__aeabi_memset+0x90>
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	441c      	add	r4, r3
 800552a:	f803 2b01 	strb.w	r2, [r3], #1
 800552e:	42a3      	cmp	r3, r4
 8005530:	d1fb      	bne.n	800552a <__aeabi_memset+0x88>
 8005532:	bc70      	pop	{r4, r5, r6}
 8005534:	4770      	bx	lr
 8005536:	460c      	mov	r4, r1
 8005538:	4603      	mov	r3, r0
 800553a:	e7c2      	b.n	80054c2 <__aeabi_memset+0x20>

0800553c <__aeabi_drsub>:
 800553c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8005540:	e002      	b.n	8005548 <__adddf3>
 8005542:	bf00      	nop

08005544 <__aeabi_dsub>:
 8005544:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08005548 <__adddf3>:
 8005548:	b530      	push	{r4, r5, lr}
 800554a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800554e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005552:	ea94 0f05 	teq	r4, r5
 8005556:	bf08      	it	eq
 8005558:	ea90 0f02 	teqeq	r0, r2
 800555c:	bf1f      	itttt	ne
 800555e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005562:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005566:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800556a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800556e:	f000 80e2 	beq.w	8005736 <__adddf3+0x1ee>
 8005572:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005576:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800557a:	bfb8      	it	lt
 800557c:	426d      	neglt	r5, r5
 800557e:	dd0c      	ble.n	800559a <__adddf3+0x52>
 8005580:	442c      	add	r4, r5
 8005582:	ea80 0202 	eor.w	r2, r0, r2
 8005586:	ea81 0303 	eor.w	r3, r1, r3
 800558a:	ea82 0000 	eor.w	r0, r2, r0
 800558e:	ea83 0101 	eor.w	r1, r3, r1
 8005592:	ea80 0202 	eor.w	r2, r0, r2
 8005596:	ea81 0303 	eor.w	r3, r1, r3
 800559a:	2d36      	cmp	r5, #54	@ 0x36
 800559c:	bf88      	it	hi
 800559e:	bd30      	pophi	{r4, r5, pc}
 80055a0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80055a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80055a8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80055ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80055b0:	d002      	beq.n	80055b8 <__adddf3+0x70>
 80055b2:	4240      	negs	r0, r0
 80055b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80055b8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80055bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80055c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80055c4:	d002      	beq.n	80055cc <__adddf3+0x84>
 80055c6:	4252      	negs	r2, r2
 80055c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80055cc:	ea94 0f05 	teq	r4, r5
 80055d0:	f000 80a7 	beq.w	8005722 <__adddf3+0x1da>
 80055d4:	f1a4 0401 	sub.w	r4, r4, #1
 80055d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80055dc:	db0d      	blt.n	80055fa <__adddf3+0xb2>
 80055de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80055e2:	fa22 f205 	lsr.w	r2, r2, r5
 80055e6:	1880      	adds	r0, r0, r2
 80055e8:	f141 0100 	adc.w	r1, r1, #0
 80055ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80055f0:	1880      	adds	r0, r0, r2
 80055f2:	fa43 f305 	asr.w	r3, r3, r5
 80055f6:	4159      	adcs	r1, r3
 80055f8:	e00e      	b.n	8005618 <__adddf3+0xd0>
 80055fa:	f1a5 0520 	sub.w	r5, r5, #32
 80055fe:	f10e 0e20 	add.w	lr, lr, #32
 8005602:	2a01      	cmp	r2, #1
 8005604:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005608:	bf28      	it	cs
 800560a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800560e:	fa43 f305 	asr.w	r3, r3, r5
 8005612:	18c0      	adds	r0, r0, r3
 8005614:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005618:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800561c:	d507      	bpl.n	800562e <__adddf3+0xe6>
 800561e:	f04f 0e00 	mov.w	lr, #0
 8005622:	f1dc 0c00 	rsbs	ip, ip, #0
 8005626:	eb7e 0000 	sbcs.w	r0, lr, r0
 800562a:	eb6e 0101 	sbc.w	r1, lr, r1
 800562e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005632:	d31b      	bcc.n	800566c <__adddf3+0x124>
 8005634:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8005638:	d30c      	bcc.n	8005654 <__adddf3+0x10c>
 800563a:	0849      	lsrs	r1, r1, #1
 800563c:	ea5f 0030 	movs.w	r0, r0, rrx
 8005640:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005644:	f104 0401 	add.w	r4, r4, #1
 8005648:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800564c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8005650:	f080 809a 	bcs.w	8005788 <__adddf3+0x240>
 8005654:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8005658:	bf08      	it	eq
 800565a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800565e:	f150 0000 	adcs.w	r0, r0, #0
 8005662:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005666:	ea41 0105 	orr.w	r1, r1, r5
 800566a:	bd30      	pop	{r4, r5, pc}
 800566c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005670:	4140      	adcs	r0, r0
 8005672:	eb41 0101 	adc.w	r1, r1, r1
 8005676:	3c01      	subs	r4, #1
 8005678:	bf28      	it	cs
 800567a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800567e:	d2e9      	bcs.n	8005654 <__adddf3+0x10c>
 8005680:	f091 0f00 	teq	r1, #0
 8005684:	bf04      	itt	eq
 8005686:	4601      	moveq	r1, r0
 8005688:	2000      	moveq	r0, #0
 800568a:	fab1 f381 	clz	r3, r1
 800568e:	bf08      	it	eq
 8005690:	3320      	addeq	r3, #32
 8005692:	f1a3 030b 	sub.w	r3, r3, #11
 8005696:	f1b3 0220 	subs.w	r2, r3, #32
 800569a:	da0c      	bge.n	80056b6 <__adddf3+0x16e>
 800569c:	320c      	adds	r2, #12
 800569e:	dd08      	ble.n	80056b2 <__adddf3+0x16a>
 80056a0:	f102 0c14 	add.w	ip, r2, #20
 80056a4:	f1c2 020c 	rsb	r2, r2, #12
 80056a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80056ac:	fa21 f102 	lsr.w	r1, r1, r2
 80056b0:	e00c      	b.n	80056cc <__adddf3+0x184>
 80056b2:	f102 0214 	add.w	r2, r2, #20
 80056b6:	bfd8      	it	le
 80056b8:	f1c2 0c20 	rsble	ip, r2, #32
 80056bc:	fa01 f102 	lsl.w	r1, r1, r2
 80056c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80056c4:	bfdc      	itt	le
 80056c6:	ea41 010c 	orrle.w	r1, r1, ip
 80056ca:	4090      	lslle	r0, r2
 80056cc:	1ae4      	subs	r4, r4, r3
 80056ce:	bfa2      	ittt	ge
 80056d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80056d4:	4329      	orrge	r1, r5
 80056d6:	bd30      	popge	{r4, r5, pc}
 80056d8:	ea6f 0404 	mvn.w	r4, r4
 80056dc:	3c1f      	subs	r4, #31
 80056de:	da1c      	bge.n	800571a <__adddf3+0x1d2>
 80056e0:	340c      	adds	r4, #12
 80056e2:	dc0e      	bgt.n	8005702 <__adddf3+0x1ba>
 80056e4:	f104 0414 	add.w	r4, r4, #20
 80056e8:	f1c4 0220 	rsb	r2, r4, #32
 80056ec:	fa20 f004 	lsr.w	r0, r0, r4
 80056f0:	fa01 f302 	lsl.w	r3, r1, r2
 80056f4:	ea40 0003 	orr.w	r0, r0, r3
 80056f8:	fa21 f304 	lsr.w	r3, r1, r4
 80056fc:	ea45 0103 	orr.w	r1, r5, r3
 8005700:	bd30      	pop	{r4, r5, pc}
 8005702:	f1c4 040c 	rsb	r4, r4, #12
 8005706:	f1c4 0220 	rsb	r2, r4, #32
 800570a:	fa20 f002 	lsr.w	r0, r0, r2
 800570e:	fa01 f304 	lsl.w	r3, r1, r4
 8005712:	ea40 0003 	orr.w	r0, r0, r3
 8005716:	4629      	mov	r1, r5
 8005718:	bd30      	pop	{r4, r5, pc}
 800571a:	fa21 f004 	lsr.w	r0, r1, r4
 800571e:	4629      	mov	r1, r5
 8005720:	bd30      	pop	{r4, r5, pc}
 8005722:	f094 0f00 	teq	r4, #0
 8005726:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800572a:	bf06      	itte	eq
 800572c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8005730:	3401      	addeq	r4, #1
 8005732:	3d01      	subne	r5, #1
 8005734:	e74e      	b.n	80055d4 <__adddf3+0x8c>
 8005736:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800573a:	bf18      	it	ne
 800573c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005740:	d029      	beq.n	8005796 <__adddf3+0x24e>
 8005742:	ea94 0f05 	teq	r4, r5
 8005746:	bf08      	it	eq
 8005748:	ea90 0f02 	teqeq	r0, r2
 800574c:	d005      	beq.n	800575a <__adddf3+0x212>
 800574e:	ea54 0c00 	orrs.w	ip, r4, r0
 8005752:	bf04      	itt	eq
 8005754:	4619      	moveq	r1, r3
 8005756:	4610      	moveq	r0, r2
 8005758:	bd30      	pop	{r4, r5, pc}
 800575a:	ea91 0f03 	teq	r1, r3
 800575e:	bf1e      	ittt	ne
 8005760:	2100      	movne	r1, #0
 8005762:	2000      	movne	r0, #0
 8005764:	bd30      	popne	{r4, r5, pc}
 8005766:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800576a:	d105      	bne.n	8005778 <__adddf3+0x230>
 800576c:	0040      	lsls	r0, r0, #1
 800576e:	4149      	adcs	r1, r1
 8005770:	bf28      	it	cs
 8005772:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8005776:	bd30      	pop	{r4, r5, pc}
 8005778:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800577c:	bf3c      	itt	cc
 800577e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8005782:	bd30      	popcc	{r4, r5, pc}
 8005784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005788:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800578c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005790:	f04f 0000 	mov.w	r0, #0
 8005794:	bd30      	pop	{r4, r5, pc}
 8005796:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800579a:	bf1a      	itte	ne
 800579c:	4619      	movne	r1, r3
 800579e:	4610      	movne	r0, r2
 80057a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80057a4:	bf1c      	itt	ne
 80057a6:	460b      	movne	r3, r1
 80057a8:	4602      	movne	r2, r0
 80057aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80057ae:	bf06      	itte	eq
 80057b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80057b4:	ea91 0f03 	teqeq	r1, r3
 80057b8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80057bc:	bd30      	pop	{r4, r5, pc}
 80057be:	bf00      	nop

080057c0 <__aeabi_ui2d>:
 80057c0:	f090 0f00 	teq	r0, #0
 80057c4:	bf04      	itt	eq
 80057c6:	2100      	moveq	r1, #0
 80057c8:	4770      	bxeq	lr
 80057ca:	b530      	push	{r4, r5, lr}
 80057cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80057d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80057d4:	f04f 0500 	mov.w	r5, #0
 80057d8:	f04f 0100 	mov.w	r1, #0
 80057dc:	e750      	b.n	8005680 <__adddf3+0x138>
 80057de:	bf00      	nop

080057e0 <__aeabi_i2d>:
 80057e0:	f090 0f00 	teq	r0, #0
 80057e4:	bf04      	itt	eq
 80057e6:	2100      	moveq	r1, #0
 80057e8:	4770      	bxeq	lr
 80057ea:	b530      	push	{r4, r5, lr}
 80057ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80057f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80057f4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80057f8:	bf48      	it	mi
 80057fa:	4240      	negmi	r0, r0
 80057fc:	f04f 0100 	mov.w	r1, #0
 8005800:	e73e      	b.n	8005680 <__adddf3+0x138>
 8005802:	bf00      	nop

08005804 <__aeabi_f2d>:
 8005804:	0042      	lsls	r2, r0, #1
 8005806:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800580a:	ea4f 0131 	mov.w	r1, r1, rrx
 800580e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005812:	bf1f      	itttt	ne
 8005814:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8005818:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800581c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8005820:	4770      	bxne	lr
 8005822:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8005826:	bf08      	it	eq
 8005828:	4770      	bxeq	lr
 800582a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800582e:	bf04      	itt	eq
 8005830:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8005834:	4770      	bxeq	lr
 8005836:	b530      	push	{r4, r5, lr}
 8005838:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800583c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005840:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8005844:	e71c      	b.n	8005680 <__adddf3+0x138>
 8005846:	bf00      	nop

08005848 <__aeabi_ul2d>:
 8005848:	ea50 0201 	orrs.w	r2, r0, r1
 800584c:	bf08      	it	eq
 800584e:	4770      	bxeq	lr
 8005850:	b530      	push	{r4, r5, lr}
 8005852:	f04f 0500 	mov.w	r5, #0
 8005856:	e00a      	b.n	800586e <__aeabi_l2d+0x16>

08005858 <__aeabi_l2d>:
 8005858:	ea50 0201 	orrs.w	r2, r0, r1
 800585c:	bf08      	it	eq
 800585e:	4770      	bxeq	lr
 8005860:	b530      	push	{r4, r5, lr}
 8005862:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8005866:	d502      	bpl.n	800586e <__aeabi_l2d+0x16>
 8005868:	4240      	negs	r0, r0
 800586a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800586e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8005872:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8005876:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800587a:	f43f aed8 	beq.w	800562e <__adddf3+0xe6>
 800587e:	f04f 0203 	mov.w	r2, #3
 8005882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005886:	bf18      	it	ne
 8005888:	3203      	addne	r2, #3
 800588a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800588e:	bf18      	it	ne
 8005890:	3203      	addne	r2, #3
 8005892:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005896:	f1c2 0320 	rsb	r3, r2, #32
 800589a:	fa00 fc03 	lsl.w	ip, r0, r3
 800589e:	fa20 f002 	lsr.w	r0, r0, r2
 80058a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80058a6:	ea40 000e 	orr.w	r0, r0, lr
 80058aa:	fa21 f102 	lsr.w	r1, r1, r2
 80058ae:	4414      	add	r4, r2
 80058b0:	e6bd      	b.n	800562e <__adddf3+0xe6>
 80058b2:	bf00      	nop

080058b4 <__aeabi_dmul>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80058ba:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80058be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80058c2:	bf1d      	ittte	ne
 80058c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80058c8:	ea94 0f0c 	teqne	r4, ip
 80058cc:	ea95 0f0c 	teqne	r5, ip
 80058d0:	f000 f8de 	bleq	8005a90 <__aeabi_dmul+0x1dc>
 80058d4:	442c      	add	r4, r5
 80058d6:	ea81 0603 	eor.w	r6, r1, r3
 80058da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80058de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80058e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80058e6:	bf18      	it	ne
 80058e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80058ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80058f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058f4:	d038      	beq.n	8005968 <__aeabi_dmul+0xb4>
 80058f6:	fba0 ce02 	umull	ip, lr, r0, r2
 80058fa:	f04f 0500 	mov.w	r5, #0
 80058fe:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005902:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8005906:	fbe0 e503 	umlal	lr, r5, r0, r3
 800590a:	f04f 0600 	mov.w	r6, #0
 800590e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005912:	f09c 0f00 	teq	ip, #0
 8005916:	bf18      	it	ne
 8005918:	f04e 0e01 	orrne.w	lr, lr, #1
 800591c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8005920:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8005924:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8005928:	d204      	bcs.n	8005934 <__aeabi_dmul+0x80>
 800592a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800592e:	416d      	adcs	r5, r5
 8005930:	eb46 0606 	adc.w	r6, r6, r6
 8005934:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005938:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800593c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005940:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005944:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005948:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800594c:	bf88      	it	hi
 800594e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8005952:	d81e      	bhi.n	8005992 <__aeabi_dmul+0xde>
 8005954:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8005958:	bf08      	it	eq
 800595a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800595e:	f150 0000 	adcs.w	r0, r0, #0
 8005962:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800596c:	ea46 0101 	orr.w	r1, r6, r1
 8005970:	ea40 0002 	orr.w	r0, r0, r2
 8005974:	ea81 0103 	eor.w	r1, r1, r3
 8005978:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800597c:	bfc2      	ittt	gt
 800597e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005982:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005986:	bd70      	popgt	{r4, r5, r6, pc}
 8005988:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800598c:	f04f 0e00 	mov.w	lr, #0
 8005990:	3c01      	subs	r4, #1
 8005992:	f300 80ab 	bgt.w	8005aec <__aeabi_dmul+0x238>
 8005996:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800599a:	bfde      	ittt	le
 800599c:	2000      	movle	r0, #0
 800599e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80059a2:	bd70      	pople	{r4, r5, r6, pc}
 80059a4:	f1c4 0400 	rsb	r4, r4, #0
 80059a8:	3c20      	subs	r4, #32
 80059aa:	da35      	bge.n	8005a18 <__aeabi_dmul+0x164>
 80059ac:	340c      	adds	r4, #12
 80059ae:	dc1b      	bgt.n	80059e8 <__aeabi_dmul+0x134>
 80059b0:	f104 0414 	add.w	r4, r4, #20
 80059b4:	f1c4 0520 	rsb	r5, r4, #32
 80059b8:	fa00 f305 	lsl.w	r3, r0, r5
 80059bc:	fa20 f004 	lsr.w	r0, r0, r4
 80059c0:	fa01 f205 	lsl.w	r2, r1, r5
 80059c4:	ea40 0002 	orr.w	r0, r0, r2
 80059c8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80059cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80059d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80059d4:	fa21 f604 	lsr.w	r6, r1, r4
 80059d8:	eb42 0106 	adc.w	r1, r2, r6
 80059dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80059e0:	bf08      	it	eq
 80059e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
 80059e8:	f1c4 040c 	rsb	r4, r4, #12
 80059ec:	f1c4 0520 	rsb	r5, r4, #32
 80059f0:	fa00 f304 	lsl.w	r3, r0, r4
 80059f4:	fa20 f005 	lsr.w	r0, r0, r5
 80059f8:	fa01 f204 	lsl.w	r2, r1, r4
 80059fc:	ea40 0002 	orr.w	r0, r0, r2
 8005a00:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005a04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005a08:	f141 0100 	adc.w	r1, r1, #0
 8005a0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005a10:	bf08      	it	eq
 8005a12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005a16:	bd70      	pop	{r4, r5, r6, pc}
 8005a18:	f1c4 0520 	rsb	r5, r4, #32
 8005a1c:	fa00 f205 	lsl.w	r2, r0, r5
 8005a20:	ea4e 0e02 	orr.w	lr, lr, r2
 8005a24:	fa20 f304 	lsr.w	r3, r0, r4
 8005a28:	fa01 f205 	lsl.w	r2, r1, r5
 8005a2c:	ea43 0302 	orr.w	r3, r3, r2
 8005a30:	fa21 f004 	lsr.w	r0, r1, r4
 8005a34:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005a38:	fa21 f204 	lsr.w	r2, r1, r4
 8005a3c:	ea20 0002 	bic.w	r0, r0, r2
 8005a40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005a44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005a48:	bf08      	it	eq
 8005a4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005a4e:	bd70      	pop	{r4, r5, r6, pc}
 8005a50:	f094 0f00 	teq	r4, #0
 8005a54:	d10f      	bne.n	8005a76 <__aeabi_dmul+0x1c2>
 8005a56:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8005a5a:	0040      	lsls	r0, r0, #1
 8005a5c:	eb41 0101 	adc.w	r1, r1, r1
 8005a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005a64:	bf08      	it	eq
 8005a66:	3c01      	subeq	r4, #1
 8005a68:	d0f7      	beq.n	8005a5a <__aeabi_dmul+0x1a6>
 8005a6a:	ea41 0106 	orr.w	r1, r1, r6
 8005a6e:	f095 0f00 	teq	r5, #0
 8005a72:	bf18      	it	ne
 8005a74:	4770      	bxne	lr
 8005a76:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8005a7a:	0052      	lsls	r2, r2, #1
 8005a7c:	eb43 0303 	adc.w	r3, r3, r3
 8005a80:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8005a84:	bf08      	it	eq
 8005a86:	3d01      	subeq	r5, #1
 8005a88:	d0f7      	beq.n	8005a7a <__aeabi_dmul+0x1c6>
 8005a8a:	ea43 0306 	orr.w	r3, r3, r6
 8005a8e:	4770      	bx	lr
 8005a90:	ea94 0f0c 	teq	r4, ip
 8005a94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005a98:	bf18      	it	ne
 8005a9a:	ea95 0f0c 	teqne	r5, ip
 8005a9e:	d00c      	beq.n	8005aba <__aeabi_dmul+0x206>
 8005aa0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005aa4:	bf18      	it	ne
 8005aa6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005aaa:	d1d1      	bne.n	8005a50 <__aeabi_dmul+0x19c>
 8005aac:	ea81 0103 	eor.w	r1, r1, r3
 8005ab0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005ab4:	f04f 0000 	mov.w	r0, #0
 8005ab8:	bd70      	pop	{r4, r5, r6, pc}
 8005aba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005abe:	bf06      	itte	eq
 8005ac0:	4610      	moveq	r0, r2
 8005ac2:	4619      	moveq	r1, r3
 8005ac4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005ac8:	d019      	beq.n	8005afe <__aeabi_dmul+0x24a>
 8005aca:	ea94 0f0c 	teq	r4, ip
 8005ace:	d102      	bne.n	8005ad6 <__aeabi_dmul+0x222>
 8005ad0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005ad4:	d113      	bne.n	8005afe <__aeabi_dmul+0x24a>
 8005ad6:	ea95 0f0c 	teq	r5, ip
 8005ada:	d105      	bne.n	8005ae8 <__aeabi_dmul+0x234>
 8005adc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005ae0:	bf1c      	itt	ne
 8005ae2:	4610      	movne	r0, r2
 8005ae4:	4619      	movne	r1, r3
 8005ae6:	d10a      	bne.n	8005afe <__aeabi_dmul+0x24a>
 8005ae8:	ea81 0103 	eor.w	r1, r1, r3
 8005aec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005af0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8005af4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005af8:	f04f 0000 	mov.w	r0, #0
 8005afc:	bd70      	pop	{r4, r5, r6, pc}
 8005afe:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8005b02:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8005b06:	bd70      	pop	{r4, r5, r6, pc}

08005b08 <__aeabi_ddiv>:
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8005b0e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8005b12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005b16:	bf1d      	ittte	ne
 8005b18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005b1c:	ea94 0f0c 	teqne	r4, ip
 8005b20:	ea95 0f0c 	teqne	r5, ip
 8005b24:	f000 f8a7 	bleq	8005c76 <__aeabi_ddiv+0x16e>
 8005b28:	eba4 0405 	sub.w	r4, r4, r5
 8005b2c:	ea81 0e03 	eor.w	lr, r1, r3
 8005b30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005b34:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005b38:	f000 8088 	beq.w	8005c4c <__aeabi_ddiv+0x144>
 8005b3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005b40:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8005b44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005b48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005b4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005b50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005b54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005b58:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005b5c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8005b60:	429d      	cmp	r5, r3
 8005b62:	bf08      	it	eq
 8005b64:	4296      	cmpeq	r6, r2
 8005b66:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8005b6a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8005b6e:	d202      	bcs.n	8005b76 <__aeabi_ddiv+0x6e>
 8005b70:	085b      	lsrs	r3, r3, #1
 8005b72:	ea4f 0232 	mov.w	r2, r2, rrx
 8005b76:	1ab6      	subs	r6, r6, r2
 8005b78:	eb65 0503 	sbc.w	r5, r5, r3
 8005b7c:	085b      	lsrs	r3, r3, #1
 8005b7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005b82:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8005b86:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8005b8a:	ebb6 0e02 	subs.w	lr, r6, r2
 8005b8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005b92:	bf22      	ittt	cs
 8005b94:	1ab6      	subcs	r6, r6, r2
 8005b96:	4675      	movcs	r5, lr
 8005b98:	ea40 000c 	orrcs.w	r0, r0, ip
 8005b9c:	085b      	lsrs	r3, r3, #1
 8005b9e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005ba2:	ebb6 0e02 	subs.w	lr, r6, r2
 8005ba6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005baa:	bf22      	ittt	cs
 8005bac:	1ab6      	subcs	r6, r6, r2
 8005bae:	4675      	movcs	r5, lr
 8005bb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005bb4:	085b      	lsrs	r3, r3, #1
 8005bb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8005bba:	ebb6 0e02 	subs.w	lr, r6, r2
 8005bbe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005bc2:	bf22      	ittt	cs
 8005bc4:	1ab6      	subcs	r6, r6, r2
 8005bc6:	4675      	movcs	r5, lr
 8005bc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	ea4f 0232 	mov.w	r2, r2, rrx
 8005bd2:	ebb6 0e02 	subs.w	lr, r6, r2
 8005bd6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005bda:	bf22      	ittt	cs
 8005bdc:	1ab6      	subcs	r6, r6, r2
 8005bde:	4675      	movcs	r5, lr
 8005be0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005be4:	ea55 0e06 	orrs.w	lr, r5, r6
 8005be8:	d018      	beq.n	8005c1c <__aeabi_ddiv+0x114>
 8005bea:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005bee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005bf2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005bf6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005bfa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005bfe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005c02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005c06:	d1c0      	bne.n	8005b8a <__aeabi_ddiv+0x82>
 8005c08:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005c0c:	d10b      	bne.n	8005c26 <__aeabi_ddiv+0x11e>
 8005c0e:	ea41 0100 	orr.w	r1, r1, r0
 8005c12:	f04f 0000 	mov.w	r0, #0
 8005c16:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005c1a:	e7b6      	b.n	8005b8a <__aeabi_ddiv+0x82>
 8005c1c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005c20:	bf04      	itt	eq
 8005c22:	4301      	orreq	r1, r0
 8005c24:	2000      	moveq	r0, #0
 8005c26:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8005c2a:	bf88      	it	hi
 8005c2c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8005c30:	f63f aeaf 	bhi.w	8005992 <__aeabi_dmul+0xde>
 8005c34:	ebb5 0c03 	subs.w	ip, r5, r3
 8005c38:	bf04      	itt	eq
 8005c3a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005c3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005c42:	f150 0000 	adcs.w	r0, r0, #0
 8005c46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005c4a:	bd70      	pop	{r4, r5, r6, pc}
 8005c4c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8005c50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005c54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005c58:	bfc2      	ittt	gt
 8005c5a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005c5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005c62:	bd70      	popgt	{r4, r5, r6, pc}
 8005c64:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8005c68:	f04f 0e00 	mov.w	lr, #0
 8005c6c:	3c01      	subs	r4, #1
 8005c6e:	e690      	b.n	8005992 <__aeabi_dmul+0xde>
 8005c70:	ea45 0e06 	orr.w	lr, r5, r6
 8005c74:	e68d      	b.n	8005992 <__aeabi_dmul+0xde>
 8005c76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005c7a:	ea94 0f0c 	teq	r4, ip
 8005c7e:	bf08      	it	eq
 8005c80:	ea95 0f0c 	teqeq	r5, ip
 8005c84:	f43f af3b 	beq.w	8005afe <__aeabi_dmul+0x24a>
 8005c88:	ea94 0f0c 	teq	r4, ip
 8005c8c:	d10a      	bne.n	8005ca4 <__aeabi_ddiv+0x19c>
 8005c8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005c92:	f47f af34 	bne.w	8005afe <__aeabi_dmul+0x24a>
 8005c96:	ea95 0f0c 	teq	r5, ip
 8005c9a:	f47f af25 	bne.w	8005ae8 <__aeabi_dmul+0x234>
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	e72c      	b.n	8005afe <__aeabi_dmul+0x24a>
 8005ca4:	ea95 0f0c 	teq	r5, ip
 8005ca8:	d106      	bne.n	8005cb8 <__aeabi_ddiv+0x1b0>
 8005caa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005cae:	f43f aefd 	beq.w	8005aac <__aeabi_dmul+0x1f8>
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	e722      	b.n	8005afe <__aeabi_dmul+0x24a>
 8005cb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005cbc:	bf18      	it	ne
 8005cbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005cc2:	f47f aec5 	bne.w	8005a50 <__aeabi_dmul+0x19c>
 8005cc6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005cca:	f47f af0d 	bne.w	8005ae8 <__aeabi_dmul+0x234>
 8005cce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8005cd2:	f47f aeeb 	bne.w	8005aac <__aeabi_dmul+0x1f8>
 8005cd6:	e712      	b.n	8005afe <__aeabi_dmul+0x24a>

08005cd8 <__gedf2>:
 8005cd8:	f04f 3cff 	mov.w	ip, #4294967295
 8005cdc:	e006      	b.n	8005cec <__cmpdf2+0x4>
 8005cde:	bf00      	nop

08005ce0 <__ledf2>:
 8005ce0:	f04f 0c01 	mov.w	ip, #1
 8005ce4:	e002      	b.n	8005cec <__cmpdf2+0x4>
 8005ce6:	bf00      	nop

08005ce8 <__cmpdf2>:
 8005ce8:	f04f 0c01 	mov.w	ip, #1
 8005cec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005cf0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005cf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005cf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005cfc:	bf18      	it	ne
 8005cfe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8005d02:	d01b      	beq.n	8005d3c <__cmpdf2+0x54>
 8005d04:	b001      	add	sp, #4
 8005d06:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8005d0a:	bf0c      	ite	eq
 8005d0c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005d10:	ea91 0f03 	teqne	r1, r3
 8005d14:	bf02      	ittt	eq
 8005d16:	ea90 0f02 	teqeq	r0, r2
 8005d1a:	2000      	moveq	r0, #0
 8005d1c:	4770      	bxeq	lr
 8005d1e:	f110 0f00 	cmn.w	r0, #0
 8005d22:	ea91 0f03 	teq	r1, r3
 8005d26:	bf58      	it	pl
 8005d28:	4299      	cmppl	r1, r3
 8005d2a:	bf08      	it	eq
 8005d2c:	4290      	cmpeq	r0, r2
 8005d2e:	bf2c      	ite	cs
 8005d30:	17d8      	asrcs	r0, r3, #31
 8005d32:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8005d36:	f040 0001 	orr.w	r0, r0, #1
 8005d3a:	4770      	bx	lr
 8005d3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005d40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005d44:	d102      	bne.n	8005d4c <__cmpdf2+0x64>
 8005d46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005d4a:	d107      	bne.n	8005d5c <__cmpdf2+0x74>
 8005d4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005d50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005d54:	d1d6      	bne.n	8005d04 <__cmpdf2+0x1c>
 8005d56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005d5a:	d0d3      	beq.n	8005d04 <__cmpdf2+0x1c>
 8005d5c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop

08005d64 <__aeabi_cdrcmple>:
 8005d64:	4684      	mov	ip, r0
 8005d66:	4610      	mov	r0, r2
 8005d68:	4662      	mov	r2, ip
 8005d6a:	468c      	mov	ip, r1
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4663      	mov	r3, ip
 8005d70:	e000      	b.n	8005d74 <__aeabi_cdcmpeq>
 8005d72:	bf00      	nop

08005d74 <__aeabi_cdcmpeq>:
 8005d74:	b501      	push	{r0, lr}
 8005d76:	f7ff ffb7 	bl	8005ce8 <__cmpdf2>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	bf48      	it	mi
 8005d7e:	f110 0f00 	cmnmi.w	r0, #0
 8005d82:	bd01      	pop	{r0, pc}

08005d84 <__aeabi_dcmpeq>:
 8005d84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005d88:	f7ff fff4 	bl	8005d74 <__aeabi_cdcmpeq>
 8005d8c:	bf0c      	ite	eq
 8005d8e:	2001      	moveq	r0, #1
 8005d90:	2000      	movne	r0, #0
 8005d92:	f85d fb08 	ldr.w	pc, [sp], #8
 8005d96:	bf00      	nop

08005d98 <__aeabi_dcmplt>:
 8005d98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005d9c:	f7ff ffea 	bl	8005d74 <__aeabi_cdcmpeq>
 8005da0:	bf34      	ite	cc
 8005da2:	2001      	movcc	r0, #1
 8005da4:	2000      	movcs	r0, #0
 8005da6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005daa:	bf00      	nop

08005dac <__aeabi_dcmple>:
 8005dac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005db0:	f7ff ffe0 	bl	8005d74 <__aeabi_cdcmpeq>
 8005db4:	bf94      	ite	ls
 8005db6:	2001      	movls	r0, #1
 8005db8:	2000      	movhi	r0, #0
 8005dba:	f85d fb08 	ldr.w	pc, [sp], #8
 8005dbe:	bf00      	nop

08005dc0 <__aeabi_dcmpge>:
 8005dc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005dc4:	f7ff ffce 	bl	8005d64 <__aeabi_cdrcmple>
 8005dc8:	bf94      	ite	ls
 8005dca:	2001      	movls	r0, #1
 8005dcc:	2000      	movhi	r0, #0
 8005dce:	f85d fb08 	ldr.w	pc, [sp], #8
 8005dd2:	bf00      	nop

08005dd4 <__aeabi_dcmpgt>:
 8005dd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005dd8:	f7ff ffc4 	bl	8005d64 <__aeabi_cdrcmple>
 8005ddc:	bf34      	ite	cc
 8005dde:	2001      	movcc	r0, #1
 8005de0:	2000      	movcs	r0, #0
 8005de2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005de6:	bf00      	nop

08005de8 <__aeabi_dcmpun>:
 8005de8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005dec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005df0:	d102      	bne.n	8005df8 <__aeabi_dcmpun+0x10>
 8005df2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005df6:	d10a      	bne.n	8005e0e <__aeabi_dcmpun+0x26>
 8005df8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005dfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005e00:	d102      	bne.n	8005e08 <__aeabi_dcmpun+0x20>
 8005e02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005e06:	d102      	bne.n	8005e0e <__aeabi_dcmpun+0x26>
 8005e08:	f04f 0000 	mov.w	r0, #0
 8005e0c:	4770      	bx	lr
 8005e0e:	f04f 0001 	mov.w	r0, #1
 8005e12:	4770      	bx	lr

08005e14 <__aeabi_d2iz>:
 8005e14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005e18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8005e1c:	d215      	bcs.n	8005e4a <__aeabi_d2iz+0x36>
 8005e1e:	d511      	bpl.n	8005e44 <__aeabi_d2iz+0x30>
 8005e20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8005e24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005e28:	d912      	bls.n	8005e50 <__aeabi_d2iz+0x3c>
 8005e2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005e2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005e36:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8005e3a:	fa23 f002 	lsr.w	r0, r3, r2
 8005e3e:	bf18      	it	ne
 8005e40:	4240      	negne	r0, r0
 8005e42:	4770      	bx	lr
 8005e44:	f04f 0000 	mov.w	r0, #0
 8005e48:	4770      	bx	lr
 8005e4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005e4e:	d105      	bne.n	8005e5c <__aeabi_d2iz+0x48>
 8005e50:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8005e54:	bf08      	it	eq
 8005e56:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8005e5a:	4770      	bx	lr
 8005e5c:	f04f 0000 	mov.w	r0, #0
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop

08005e64 <__aeabi_d2f>:
 8005e64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005e68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8005e6c:	bf24      	itt	cs
 8005e6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8005e72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8005e76:	d90d      	bls.n	8005e94 <__aeabi_d2f+0x30>
 8005e78:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8005e7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005e80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005e84:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8005e88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005e8c:	bf08      	it	eq
 8005e8e:	f020 0001 	biceq.w	r0, r0, #1
 8005e92:	4770      	bx	lr
 8005e94:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8005e98:	d121      	bne.n	8005ede <__aeabi_d2f+0x7a>
 8005e9a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8005e9e:	bfbc      	itt	lt
 8005ea0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8005ea4:	4770      	bxlt	lr
 8005ea6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8005eaa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005eae:	f1c2 0218 	rsb	r2, r2, #24
 8005eb2:	f1c2 0c20 	rsb	ip, r2, #32
 8005eb6:	fa10 f30c 	lsls.w	r3, r0, ip
 8005eba:	fa20 f002 	lsr.w	r0, r0, r2
 8005ebe:	bf18      	it	ne
 8005ec0:	f040 0001 	orrne.w	r0, r0, #1
 8005ec4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005ec8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005ecc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005ed0:	ea40 000c 	orr.w	r0, r0, ip
 8005ed4:	fa23 f302 	lsr.w	r3, r3, r2
 8005ed8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005edc:	e7cc      	b.n	8005e78 <__aeabi_d2f+0x14>
 8005ede:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005ee2:	d107      	bne.n	8005ef4 <__aeabi_d2f+0x90>
 8005ee4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005ee8:	bf1e      	ittt	ne
 8005eea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8005eee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8005ef2:	4770      	bxne	lr
 8005ef4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8005ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8005efc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop

08005f04 <__aeabi_uldivmod>:
 8005f04:	b953      	cbnz	r3, 8005f1c <__aeabi_uldivmod+0x18>
 8005f06:	b94a      	cbnz	r2, 8005f1c <__aeabi_uldivmod+0x18>
 8005f08:	2900      	cmp	r1, #0
 8005f0a:	bf08      	it	eq
 8005f0c:	2800      	cmpeq	r0, #0
 8005f0e:	bf1c      	itt	ne
 8005f10:	f04f 31ff 	movne.w	r1, #4294967295
 8005f14:	f04f 30ff 	movne.w	r0, #4294967295
 8005f18:	f000 b96a 	b.w	80061f0 <__aeabi_idiv0>
 8005f1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8005f20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8005f24:	f000 f806 	bl	8005f34 <__udivmoddi4>
 8005f28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f30:	b004      	add	sp, #16
 8005f32:	4770      	bx	lr

08005f34 <__udivmoddi4>:
 8005f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f38:	9d08      	ldr	r5, [sp, #32]
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d14e      	bne.n	8005fde <__udivmoddi4+0xaa>
 8005f40:	4694      	mov	ip, r2
 8005f42:	458c      	cmp	ip, r1
 8005f44:	4686      	mov	lr, r0
 8005f46:	fab2 f282 	clz	r2, r2
 8005f4a:	d962      	bls.n	8006012 <__udivmoddi4+0xde>
 8005f4c:	b14a      	cbz	r2, 8005f62 <__udivmoddi4+0x2e>
 8005f4e:	f1c2 0320 	rsb	r3, r2, #32
 8005f52:	4091      	lsls	r1, r2
 8005f54:	fa20 f303 	lsr.w	r3, r0, r3
 8005f58:	fa0c fc02 	lsl.w	ip, ip, r2
 8005f5c:	4319      	orrs	r1, r3
 8005f5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8005f62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8005f66:	fa1f f68c 	uxth.w	r6, ip
 8005f6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8005f6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8005f72:	fb07 1114 	mls	r1, r7, r4, r1
 8005f76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005f7a:	fb04 f106 	mul.w	r1, r4, r6
 8005f7e:	4299      	cmp	r1, r3
 8005f80:	d90a      	bls.n	8005f98 <__udivmoddi4+0x64>
 8005f82:	eb1c 0303 	adds.w	r3, ip, r3
 8005f86:	f104 30ff 	add.w	r0, r4, #4294967295
 8005f8a:	f080 8112 	bcs.w	80061b2 <__udivmoddi4+0x27e>
 8005f8e:	4299      	cmp	r1, r3
 8005f90:	f240 810f 	bls.w	80061b2 <__udivmoddi4+0x27e>
 8005f94:	3c02      	subs	r4, #2
 8005f96:	4463      	add	r3, ip
 8005f98:	1a59      	subs	r1, r3, r1
 8005f9a:	fa1f f38e 	uxth.w	r3, lr
 8005f9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8005fa2:	fb07 1110 	mls	r1, r7, r0, r1
 8005fa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005faa:	fb00 f606 	mul.w	r6, r0, r6
 8005fae:	429e      	cmp	r6, r3
 8005fb0:	d90a      	bls.n	8005fc8 <__udivmoddi4+0x94>
 8005fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8005fb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8005fba:	f080 80fc 	bcs.w	80061b6 <__udivmoddi4+0x282>
 8005fbe:	429e      	cmp	r6, r3
 8005fc0:	f240 80f9 	bls.w	80061b6 <__udivmoddi4+0x282>
 8005fc4:	4463      	add	r3, ip
 8005fc6:	3802      	subs	r0, #2
 8005fc8:	1b9b      	subs	r3, r3, r6
 8005fca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8005fce:	2100      	movs	r1, #0
 8005fd0:	b11d      	cbz	r5, 8005fda <__udivmoddi4+0xa6>
 8005fd2:	40d3      	lsrs	r3, r2
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	e9c5 3200 	strd	r3, r2, [r5]
 8005fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fde:	428b      	cmp	r3, r1
 8005fe0:	d905      	bls.n	8005fee <__udivmoddi4+0xba>
 8005fe2:	b10d      	cbz	r5, 8005fe8 <__udivmoddi4+0xb4>
 8005fe4:	e9c5 0100 	strd	r0, r1, [r5]
 8005fe8:	2100      	movs	r1, #0
 8005fea:	4608      	mov	r0, r1
 8005fec:	e7f5      	b.n	8005fda <__udivmoddi4+0xa6>
 8005fee:	fab3 f183 	clz	r1, r3
 8005ff2:	2900      	cmp	r1, #0
 8005ff4:	d146      	bne.n	8006084 <__udivmoddi4+0x150>
 8005ff6:	42a3      	cmp	r3, r4
 8005ff8:	d302      	bcc.n	8006000 <__udivmoddi4+0xcc>
 8005ffa:	4290      	cmp	r0, r2
 8005ffc:	f0c0 80f0 	bcc.w	80061e0 <__udivmoddi4+0x2ac>
 8006000:	1a86      	subs	r6, r0, r2
 8006002:	eb64 0303 	sbc.w	r3, r4, r3
 8006006:	2001      	movs	r0, #1
 8006008:	2d00      	cmp	r5, #0
 800600a:	d0e6      	beq.n	8005fda <__udivmoddi4+0xa6>
 800600c:	e9c5 6300 	strd	r6, r3, [r5]
 8006010:	e7e3      	b.n	8005fda <__udivmoddi4+0xa6>
 8006012:	2a00      	cmp	r2, #0
 8006014:	f040 8090 	bne.w	8006138 <__udivmoddi4+0x204>
 8006018:	eba1 040c 	sub.w	r4, r1, ip
 800601c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8006020:	fa1f f78c 	uxth.w	r7, ip
 8006024:	2101      	movs	r1, #1
 8006026:	fbb4 f6f8 	udiv	r6, r4, r8
 800602a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800602e:	fb08 4416 	mls	r4, r8, r6, r4
 8006032:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006036:	fb07 f006 	mul.w	r0, r7, r6
 800603a:	4298      	cmp	r0, r3
 800603c:	d908      	bls.n	8006050 <__udivmoddi4+0x11c>
 800603e:	eb1c 0303 	adds.w	r3, ip, r3
 8006042:	f106 34ff 	add.w	r4, r6, #4294967295
 8006046:	d202      	bcs.n	800604e <__udivmoddi4+0x11a>
 8006048:	4298      	cmp	r0, r3
 800604a:	f200 80cd 	bhi.w	80061e8 <__udivmoddi4+0x2b4>
 800604e:	4626      	mov	r6, r4
 8006050:	1a1c      	subs	r4, r3, r0
 8006052:	fa1f f38e 	uxth.w	r3, lr
 8006056:	fbb4 f0f8 	udiv	r0, r4, r8
 800605a:	fb08 4410 	mls	r4, r8, r0, r4
 800605e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006062:	fb00 f707 	mul.w	r7, r0, r7
 8006066:	429f      	cmp	r7, r3
 8006068:	d908      	bls.n	800607c <__udivmoddi4+0x148>
 800606a:	eb1c 0303 	adds.w	r3, ip, r3
 800606e:	f100 34ff 	add.w	r4, r0, #4294967295
 8006072:	d202      	bcs.n	800607a <__udivmoddi4+0x146>
 8006074:	429f      	cmp	r7, r3
 8006076:	f200 80b0 	bhi.w	80061da <__udivmoddi4+0x2a6>
 800607a:	4620      	mov	r0, r4
 800607c:	1bdb      	subs	r3, r3, r7
 800607e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8006082:	e7a5      	b.n	8005fd0 <__udivmoddi4+0x9c>
 8006084:	f1c1 0620 	rsb	r6, r1, #32
 8006088:	408b      	lsls	r3, r1
 800608a:	fa22 f706 	lsr.w	r7, r2, r6
 800608e:	431f      	orrs	r7, r3
 8006090:	fa20 fc06 	lsr.w	ip, r0, r6
 8006094:	fa04 f301 	lsl.w	r3, r4, r1
 8006098:	ea43 030c 	orr.w	r3, r3, ip
 800609c:	40f4      	lsrs	r4, r6
 800609e:	fa00 f801 	lsl.w	r8, r0, r1
 80060a2:	0c38      	lsrs	r0, r7, #16
 80060a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80060a8:	fbb4 fef0 	udiv	lr, r4, r0
 80060ac:	fa1f fc87 	uxth.w	ip, r7
 80060b0:	fb00 441e 	mls	r4, r0, lr, r4
 80060b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80060b8:	fb0e f90c 	mul.w	r9, lr, ip
 80060bc:	45a1      	cmp	r9, r4
 80060be:	fa02 f201 	lsl.w	r2, r2, r1
 80060c2:	d90a      	bls.n	80060da <__udivmoddi4+0x1a6>
 80060c4:	193c      	adds	r4, r7, r4
 80060c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80060ca:	f080 8084 	bcs.w	80061d6 <__udivmoddi4+0x2a2>
 80060ce:	45a1      	cmp	r9, r4
 80060d0:	f240 8081 	bls.w	80061d6 <__udivmoddi4+0x2a2>
 80060d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80060d8:	443c      	add	r4, r7
 80060da:	eba4 0409 	sub.w	r4, r4, r9
 80060de:	fa1f f983 	uxth.w	r9, r3
 80060e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80060e6:	fb00 4413 	mls	r4, r0, r3, r4
 80060ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80060ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80060f2:	45a4      	cmp	ip, r4
 80060f4:	d907      	bls.n	8006106 <__udivmoddi4+0x1d2>
 80060f6:	193c      	adds	r4, r7, r4
 80060f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80060fc:	d267      	bcs.n	80061ce <__udivmoddi4+0x29a>
 80060fe:	45a4      	cmp	ip, r4
 8006100:	d965      	bls.n	80061ce <__udivmoddi4+0x29a>
 8006102:	3b02      	subs	r3, #2
 8006104:	443c      	add	r4, r7
 8006106:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800610a:	fba0 9302 	umull	r9, r3, r0, r2
 800610e:	eba4 040c 	sub.w	r4, r4, ip
 8006112:	429c      	cmp	r4, r3
 8006114:	46ce      	mov	lr, r9
 8006116:	469c      	mov	ip, r3
 8006118:	d351      	bcc.n	80061be <__udivmoddi4+0x28a>
 800611a:	d04e      	beq.n	80061ba <__udivmoddi4+0x286>
 800611c:	b155      	cbz	r5, 8006134 <__udivmoddi4+0x200>
 800611e:	ebb8 030e 	subs.w	r3, r8, lr
 8006122:	eb64 040c 	sbc.w	r4, r4, ip
 8006126:	fa04 f606 	lsl.w	r6, r4, r6
 800612a:	40cb      	lsrs	r3, r1
 800612c:	431e      	orrs	r6, r3
 800612e:	40cc      	lsrs	r4, r1
 8006130:	e9c5 6400 	strd	r6, r4, [r5]
 8006134:	2100      	movs	r1, #0
 8006136:	e750      	b.n	8005fda <__udivmoddi4+0xa6>
 8006138:	f1c2 0320 	rsb	r3, r2, #32
 800613c:	fa20 f103 	lsr.w	r1, r0, r3
 8006140:	fa0c fc02 	lsl.w	ip, ip, r2
 8006144:	fa24 f303 	lsr.w	r3, r4, r3
 8006148:	4094      	lsls	r4, r2
 800614a:	430c      	orrs	r4, r1
 800614c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8006150:	fa00 fe02 	lsl.w	lr, r0, r2
 8006154:	fa1f f78c 	uxth.w	r7, ip
 8006158:	fbb3 f0f8 	udiv	r0, r3, r8
 800615c:	fb08 3110 	mls	r1, r8, r0, r3
 8006160:	0c23      	lsrs	r3, r4, #16
 8006162:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006166:	fb00 f107 	mul.w	r1, r0, r7
 800616a:	4299      	cmp	r1, r3
 800616c:	d908      	bls.n	8006180 <__udivmoddi4+0x24c>
 800616e:	eb1c 0303 	adds.w	r3, ip, r3
 8006172:	f100 36ff 	add.w	r6, r0, #4294967295
 8006176:	d22c      	bcs.n	80061d2 <__udivmoddi4+0x29e>
 8006178:	4299      	cmp	r1, r3
 800617a:	d92a      	bls.n	80061d2 <__udivmoddi4+0x29e>
 800617c:	3802      	subs	r0, #2
 800617e:	4463      	add	r3, ip
 8006180:	1a5b      	subs	r3, r3, r1
 8006182:	b2a4      	uxth	r4, r4
 8006184:	fbb3 f1f8 	udiv	r1, r3, r8
 8006188:	fb08 3311 	mls	r3, r8, r1, r3
 800618c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006190:	fb01 f307 	mul.w	r3, r1, r7
 8006194:	42a3      	cmp	r3, r4
 8006196:	d908      	bls.n	80061aa <__udivmoddi4+0x276>
 8006198:	eb1c 0404 	adds.w	r4, ip, r4
 800619c:	f101 36ff 	add.w	r6, r1, #4294967295
 80061a0:	d213      	bcs.n	80061ca <__udivmoddi4+0x296>
 80061a2:	42a3      	cmp	r3, r4
 80061a4:	d911      	bls.n	80061ca <__udivmoddi4+0x296>
 80061a6:	3902      	subs	r1, #2
 80061a8:	4464      	add	r4, ip
 80061aa:	1ae4      	subs	r4, r4, r3
 80061ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80061b0:	e739      	b.n	8006026 <__udivmoddi4+0xf2>
 80061b2:	4604      	mov	r4, r0
 80061b4:	e6f0      	b.n	8005f98 <__udivmoddi4+0x64>
 80061b6:	4608      	mov	r0, r1
 80061b8:	e706      	b.n	8005fc8 <__udivmoddi4+0x94>
 80061ba:	45c8      	cmp	r8, r9
 80061bc:	d2ae      	bcs.n	800611c <__udivmoddi4+0x1e8>
 80061be:	ebb9 0e02 	subs.w	lr, r9, r2
 80061c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80061c6:	3801      	subs	r0, #1
 80061c8:	e7a8      	b.n	800611c <__udivmoddi4+0x1e8>
 80061ca:	4631      	mov	r1, r6
 80061cc:	e7ed      	b.n	80061aa <__udivmoddi4+0x276>
 80061ce:	4603      	mov	r3, r0
 80061d0:	e799      	b.n	8006106 <__udivmoddi4+0x1d2>
 80061d2:	4630      	mov	r0, r6
 80061d4:	e7d4      	b.n	8006180 <__udivmoddi4+0x24c>
 80061d6:	46d6      	mov	lr, sl
 80061d8:	e77f      	b.n	80060da <__udivmoddi4+0x1a6>
 80061da:	4463      	add	r3, ip
 80061dc:	3802      	subs	r0, #2
 80061de:	e74d      	b.n	800607c <__udivmoddi4+0x148>
 80061e0:	4606      	mov	r6, r0
 80061e2:	4623      	mov	r3, r4
 80061e4:	4608      	mov	r0, r1
 80061e6:	e70f      	b.n	8006008 <__udivmoddi4+0xd4>
 80061e8:	3e02      	subs	r6, #2
 80061ea:	4463      	add	r3, ip
 80061ec:	e730      	b.n	8006050 <__udivmoddi4+0x11c>
 80061ee:	bf00      	nop

080061f0 <__aeabi_idiv0>:
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop

080061f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08c      	sub	sp, #48	@ 0x30
 80061f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80061fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	605a      	str	r2, [r3, #4]
 8006204:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006206:	1d3b      	adds	r3, r7, #4
 8006208:	2220      	movs	r2, #32
 800620a:	2100      	movs	r1, #0
 800620c:	4618      	mov	r0, r3
 800620e:	f012 fc1d 	bl	8018a4c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8006212:	4b32      	ldr	r3, [pc, #200]	@ (80062dc <MX_ADC1_Init+0xe8>)
 8006214:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006218:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800621a:	4b30      	ldr	r3, [pc, #192]	@ (80062dc <MX_ADC1_Init+0xe8>)
 800621c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006220:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006222:	4b2e      	ldr	r3, [pc, #184]	@ (80062dc <MX_ADC1_Init+0xe8>)
 8006224:	2200      	movs	r2, #0
 8006226:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006228:	4b2c      	ldr	r3, [pc, #176]	@ (80062dc <MX_ADC1_Init+0xe8>)
 800622a:	2200      	movs	r2, #0
 800622c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800622e:	4b2b      	ldr	r3, [pc, #172]	@ (80062dc <MX_ADC1_Init+0xe8>)
 8006230:	2200      	movs	r2, #0
 8006232:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006234:	4b29      	ldr	r3, [pc, #164]	@ (80062dc <MX_ADC1_Init+0xe8>)
 8006236:	2200      	movs	r2, #0
 8006238:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800623a:	4b28      	ldr	r3, [pc, #160]	@ (80062dc <MX_ADC1_Init+0xe8>)
 800623c:	2204      	movs	r2, #4
 800623e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006240:	4b26      	ldr	r3, [pc, #152]	@ (80062dc <MX_ADC1_Init+0xe8>)
 8006242:	2200      	movs	r2, #0
 8006244:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006246:	4b25      	ldr	r3, [pc, #148]	@ (80062dc <MX_ADC1_Init+0xe8>)
 8006248:	2200      	movs	r2, #0
 800624a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800624c:	4b23      	ldr	r3, [pc, #140]	@ (80062dc <MX_ADC1_Init+0xe8>)
 800624e:	2201      	movs	r2, #1
 8006250:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006252:	4b22      	ldr	r3, [pc, #136]	@ (80062dc <MX_ADC1_Init+0xe8>)
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800625a:	4b20      	ldr	r3, [pc, #128]	@ (80062dc <MX_ADC1_Init+0xe8>)
 800625c:	2200      	movs	r2, #0
 800625e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006260:	4b1e      	ldr	r3, [pc, #120]	@ (80062dc <MX_ADC1_Init+0xe8>)
 8006262:	2200      	movs	r2, #0
 8006264:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006266:	4b1d      	ldr	r3, [pc, #116]	@ (80062dc <MX_ADC1_Init+0xe8>)
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800626e:	4b1b      	ldr	r3, [pc, #108]	@ (80062dc <MX_ADC1_Init+0xe8>)
 8006270:	2200      	movs	r2, #0
 8006272:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006274:	4b19      	ldr	r3, [pc, #100]	@ (80062dc <MX_ADC1_Init+0xe8>)
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800627c:	4817      	ldr	r0, [pc, #92]	@ (80062dc <MX_ADC1_Init+0xe8>)
 800627e:	f002 fcb9 	bl	8008bf4 <HAL_ADC_Init>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8006288:	f001 f892 	bl	80073b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800628c:	2300      	movs	r3, #0
 800628e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006294:	4619      	mov	r1, r3
 8006296:	4811      	ldr	r0, [pc, #68]	@ (80062dc <MX_ADC1_Init+0xe8>)
 8006298:	f003 fcbe 	bl	8009c18 <HAL_ADCEx_MultiModeConfigChannel>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80062a2:	f001 f885 	bl	80073b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80062a6:	4b0e      	ldr	r3, [pc, #56]	@ (80062e0 <MX_ADC1_Init+0xec>)
 80062a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80062aa:	2306      	movs	r3, #6
 80062ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80062ae:	2300      	movs	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80062b2:	237f      	movs	r3, #127	@ 0x7f
 80062b4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80062b6:	2304      	movs	r3, #4
 80062b8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80062be:	1d3b      	adds	r3, r7, #4
 80062c0:	4619      	mov	r1, r3
 80062c2:	4806      	ldr	r0, [pc, #24]	@ (80062dc <MX_ADC1_Init+0xe8>)
 80062c4:	f002 ff2c 	bl	8009120 <HAL_ADC_ConfigChannel>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80062ce:	f001 f86f 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80062d2:	bf00      	nop
 80062d4:	3730      	adds	r7, #48	@ 0x30
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000290 	.word	0x20000290
 80062e0:	0c900008 	.word	0x0c900008

080062e4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80062ea:	463b      	mov	r3, r7
 80062ec:	2220      	movs	r2, #32
 80062ee:	2100      	movs	r1, #0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f012 fbab 	bl	8018a4c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80062f6:	4b2b      	ldr	r3, [pc, #172]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 80062f8:	4a2b      	ldr	r2, [pc, #172]	@ (80063a8 <MX_ADC2_Init+0xc4>)
 80062fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80062fc:	4b29      	ldr	r3, [pc, #164]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 80062fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006302:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006304:	4b27      	ldr	r3, [pc, #156]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 8006306:	2200      	movs	r2, #0
 8006308:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800630a:	4b26      	ldr	r3, [pc, #152]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 800630c:	2200      	movs	r2, #0
 800630e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8006310:	4b24      	ldr	r3, [pc, #144]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 8006312:	2200      	movs	r2, #0
 8006314:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006316:	4b23      	ldr	r3, [pc, #140]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 8006318:	2200      	movs	r2, #0
 800631a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800631c:	4b21      	ldr	r3, [pc, #132]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 800631e:	2204      	movs	r2, #4
 8006320:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8006322:	4b20      	ldr	r3, [pc, #128]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 8006324:	2200      	movs	r2, #0
 8006326:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8006328:	4b1e      	ldr	r3, [pc, #120]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 800632a:	2200      	movs	r2, #0
 800632c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800632e:	4b1d      	ldr	r3, [pc, #116]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 8006330:	2201      	movs	r2, #1
 8006332:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006334:	4b1b      	ldr	r3, [pc, #108]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800633c:	4b19      	ldr	r3, [pc, #100]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 800633e:	2200      	movs	r2, #0
 8006340:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006342:	4b18      	ldr	r3, [pc, #96]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 8006344:	2200      	movs	r2, #0
 8006346:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8006348:	4b16      	ldr	r3, [pc, #88]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006350:	4b14      	ldr	r3, [pc, #80]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 8006352:	2200      	movs	r2, #0
 8006354:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8006356:	4b13      	ldr	r3, [pc, #76]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800635e:	4811      	ldr	r0, [pc, #68]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 8006360:	f002 fc48 	bl	8008bf4 <HAL_ADC_Init>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800636a:	f001 f821 	bl	80073b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800636e:	4b0f      	ldr	r3, [pc, #60]	@ (80063ac <MX_ADC2_Init+0xc8>)
 8006370:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006372:	2306      	movs	r3, #6
 8006374:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006376:	2300      	movs	r3, #0
 8006378:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800637a:	237f      	movs	r3, #127	@ 0x7f
 800637c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800637e:	2304      	movs	r3, #4
 8006380:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8006382:	2300      	movs	r3, #0
 8006384:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006386:	463b      	mov	r3, r7
 8006388:	4619      	mov	r1, r3
 800638a:	4806      	ldr	r0, [pc, #24]	@ (80063a4 <MX_ADC2_Init+0xc0>)
 800638c:	f002 fec8 	bl	8009120 <HAL_ADC_ConfigChannel>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8006396:	f001 f80b 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800639a:	bf00      	nop
 800639c:	3720      	adds	r7, #32
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	200002fc 	.word	0x200002fc
 80063a8:	50000100 	.word	0x50000100
 80063ac:	2a000400 	.word	0x2a000400

080063b0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b0a0      	sub	sp, #128	@ 0x80
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	605a      	str	r2, [r3, #4]
 80063c2:	609a      	str	r2, [r3, #8]
 80063c4:	60da      	str	r2, [r3, #12]
 80063c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80063c8:	f107 031c 	add.w	r3, r7, #28
 80063cc:	2250      	movs	r2, #80	@ 0x50
 80063ce:	2100      	movs	r1, #0
 80063d0:	4618      	mov	r0, r3
 80063d2:	f012 fb3b 	bl	8018a4c <memset>
  if(adcHandle->Instance==ADC1)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063de:	d13e      	bne.n	800645e <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80063e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80063e6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80063ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80063ec:	f107 031c 	add.w	r3, r7, #28
 80063f0:	4618      	mov	r0, r3
 80063f2:	f007 fb4d 	bl	800da90 <HAL_RCCEx_PeriphCLKConfig>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80063fc:	f000 ffd8 	bl	80073b0 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006400:	4b3a      	ldr	r3, [pc, #232]	@ (80064ec <HAL_ADC_MspInit+0x13c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	4a39      	ldr	r2, [pc, #228]	@ (80064ec <HAL_ADC_MspInit+0x13c>)
 8006408:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800640a:	4b38      	ldr	r3, [pc, #224]	@ (80064ec <HAL_ADC_MspInit+0x13c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d10b      	bne.n	800642a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006412:	4b37      	ldr	r3, [pc, #220]	@ (80064f0 <HAL_ADC_MspInit+0x140>)
 8006414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006416:	4a36      	ldr	r2, [pc, #216]	@ (80064f0 <HAL_ADC_MspInit+0x140>)
 8006418:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800641c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800641e:	4b34      	ldr	r3, [pc, #208]	@ (80064f0 <HAL_ADC_MspInit+0x140>)
 8006420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006422:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006426:	61bb      	str	r3, [r7, #24]
 8006428:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800642a:	4b31      	ldr	r3, [pc, #196]	@ (80064f0 <HAL_ADC_MspInit+0x140>)
 800642c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800642e:	4a30      	ldr	r2, [pc, #192]	@ (80064f0 <HAL_ADC_MspInit+0x140>)
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006436:	4b2e      	ldr	r3, [pc, #184]	@ (80064f0 <HAL_ADC_MspInit+0x140>)
 8006438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = pot_volume_Pin;
 8006442:	2304      	movs	r3, #4
 8006444:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006446:	2303      	movs	r3, #3
 8006448:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800644a:	2300      	movs	r3, #0
 800644c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(pot_volume_GPIO_Port, &GPIO_InitStruct);
 800644e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006452:	4619      	mov	r1, r3
 8006454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006458:	f004 f848 	bl	800a4ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800645c:	e041      	b.n	80064e2 <HAL_ADC_MspInit+0x132>
  else if(adcHandle->Instance==ADC2)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a24      	ldr	r2, [pc, #144]	@ (80064f4 <HAL_ADC_MspInit+0x144>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d13c      	bne.n	80064e2 <HAL_ADC_MspInit+0x132>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8006468:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800646c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800646e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006472:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006474:	f107 031c 	add.w	r3, r7, #28
 8006478:	4618      	mov	r0, r3
 800647a:	f007 fb09 	bl	800da90 <HAL_RCCEx_PeriphCLKConfig>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8006484:	f000 ff94 	bl	80073b0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006488:	4b18      	ldr	r3, [pc, #96]	@ (80064ec <HAL_ADC_MspInit+0x13c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3301      	adds	r3, #1
 800648e:	4a17      	ldr	r2, [pc, #92]	@ (80064ec <HAL_ADC_MspInit+0x13c>)
 8006490:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006492:	4b16      	ldr	r3, [pc, #88]	@ (80064ec <HAL_ADC_MspInit+0x13c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d10b      	bne.n	80064b2 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800649a:	4b15      	ldr	r3, [pc, #84]	@ (80064f0 <HAL_ADC_MspInit+0x140>)
 800649c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649e:	4a14      	ldr	r2, [pc, #80]	@ (80064f0 <HAL_ADC_MspInit+0x140>)
 80064a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80064a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064a6:	4b12      	ldr	r3, [pc, #72]	@ (80064f0 <HAL_ADC_MspInit+0x140>)
 80064a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80064b2:	4b0f      	ldr	r3, [pc, #60]	@ (80064f0 <HAL_ADC_MspInit+0x140>)
 80064b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b6:	4a0e      	ldr	r2, [pc, #56]	@ (80064f0 <HAL_ADC_MspInit+0x140>)
 80064b8:	f043 0320 	orr.w	r3, r3, #32
 80064bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064be:	4b0c      	ldr	r3, [pc, #48]	@ (80064f0 <HAL_ADC_MspInit+0x140>)
 80064c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_sense_Pin;
 80064ca:	2302      	movs	r3, #2
 80064cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064ce:	2303      	movs	r3, #3
 80064d0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(V_sense_GPIO_Port, &GPIO_InitStruct);
 80064d6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80064da:	4619      	mov	r1, r3
 80064dc:	4806      	ldr	r0, [pc, #24]	@ (80064f8 <HAL_ADC_MspInit+0x148>)
 80064de:	f004 f805 	bl	800a4ec <HAL_GPIO_Init>
}
 80064e2:	bf00      	nop
 80064e4:	3780      	adds	r7, #128	@ 0x80
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20000368 	.word	0x20000368
 80064f0:	40021000 	.word	0x40021000
 80064f4:	50000100 	.word	0x50000100
 80064f8:	48001400 	.word	0x48001400

080064fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006500:	4b04      	ldr	r3, [pc, #16]	@ (8006514 <__NVIC_GetPriorityGrouping+0x18>)
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	0a1b      	lsrs	r3, r3, #8
 8006506:	f003 0307 	and.w	r3, r3, #7
}
 800650a:	4618      	mov	r0, r3
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	e000ed00 	.word	0xe000ed00

08006518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	4603      	mov	r3, r0
 8006520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006526:	2b00      	cmp	r3, #0
 8006528:	db0b      	blt.n	8006542 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	f003 021f 	and.w	r2, r3, #31
 8006530:	4907      	ldr	r1, [pc, #28]	@ (8006550 <__NVIC_EnableIRQ+0x38>)
 8006532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006536:	095b      	lsrs	r3, r3, #5
 8006538:	2001      	movs	r0, #1
 800653a:	fa00 f202 	lsl.w	r2, r0, r2
 800653e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006542:	bf00      	nop
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	e000e100 	.word	0xe000e100

08006554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	4603      	mov	r3, r0
 800655c:	6039      	str	r1, [r7, #0]
 800655e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006564:	2b00      	cmp	r3, #0
 8006566:	db0a      	blt.n	800657e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	b2da      	uxtb	r2, r3
 800656c:	490c      	ldr	r1, [pc, #48]	@ (80065a0 <__NVIC_SetPriority+0x4c>)
 800656e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006572:	0112      	lsls	r2, r2, #4
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	440b      	add	r3, r1
 8006578:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800657c:	e00a      	b.n	8006594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	b2da      	uxtb	r2, r3
 8006582:	4908      	ldr	r1, [pc, #32]	@ (80065a4 <__NVIC_SetPriority+0x50>)
 8006584:	79fb      	ldrb	r3, [r7, #7]
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	3b04      	subs	r3, #4
 800658c:	0112      	lsls	r2, r2, #4
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	440b      	add	r3, r1
 8006592:	761a      	strb	r2, [r3, #24]
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	e000e100 	.word	0xe000e100
 80065a4:	e000ed00 	.word	0xe000ed00

080065a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b089      	sub	sp, #36	@ 0x24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f003 0307 	and.w	r3, r3, #7
 80065ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	f1c3 0307 	rsb	r3, r3, #7
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	bf28      	it	cs
 80065c6:	2304      	movcs	r3, #4
 80065c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	3304      	adds	r3, #4
 80065ce:	2b06      	cmp	r3, #6
 80065d0:	d902      	bls.n	80065d8 <NVIC_EncodePriority+0x30>
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	3b03      	subs	r3, #3
 80065d6:	e000      	b.n	80065da <NVIC_EncodePriority+0x32>
 80065d8:	2300      	movs	r3, #0
 80065da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065dc:	f04f 32ff 	mov.w	r2, #4294967295
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	fa02 f303 	lsl.w	r3, r2, r3
 80065e6:	43da      	mvns	r2, r3
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	401a      	ands	r2, r3
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065f0:	f04f 31ff 	mov.w	r1, #4294967295
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	fa01 f303 	lsl.w	r3, r1, r3
 80065fa:	43d9      	mvns	r1, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006600:	4313      	orrs	r3, r2
         );
}
 8006602:	4618      	mov	r0, r3
 8006604:	3724      	adds	r7, #36	@ 0x24
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
	...

08006610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006616:	4b2c      	ldr	r3, [pc, #176]	@ (80066c8 <MX_DMA_Init+0xb8>)
 8006618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800661a:	4a2b      	ldr	r2, [pc, #172]	@ (80066c8 <MX_DMA_Init+0xb8>)
 800661c:	f043 0304 	orr.w	r3, r3, #4
 8006620:	6493      	str	r3, [r2, #72]	@ 0x48
 8006622:	4b29      	ldr	r3, [pc, #164]	@ (80066c8 <MX_DMA_Init+0xb8>)
 8006624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800662e:	4b26      	ldr	r3, [pc, #152]	@ (80066c8 <MX_DMA_Init+0xb8>)
 8006630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006632:	4a25      	ldr	r2, [pc, #148]	@ (80066c8 <MX_DMA_Init+0xb8>)
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	6493      	str	r3, [r2, #72]	@ 0x48
 800663a:	4b23      	ldr	r3, [pc, #140]	@ (80066c8 <MX_DMA_Init+0xb8>)
 800663c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	60bb      	str	r3, [r7, #8]
 8006644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006646:	4b20      	ldr	r3, [pc, #128]	@ (80066c8 <MX_DMA_Init+0xb8>)
 8006648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800664a:	4a1f      	ldr	r2, [pc, #124]	@ (80066c8 <MX_DMA_Init+0xb8>)
 800664c:	f043 0302 	orr.w	r3, r3, #2
 8006650:	6493      	str	r3, [r2, #72]	@ 0x48
 8006652:	4b1d      	ldr	r3, [pc, #116]	@ (80066c8 <MX_DMA_Init+0xb8>)
 8006654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	607b      	str	r3, [r7, #4]
 800665c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800665e:	f7ff ff4d 	bl	80064fc <__NVIC_GetPriorityGrouping>
 8006662:	4603      	mov	r3, r0
 8006664:	2200      	movs	r2, #0
 8006666:	2100      	movs	r1, #0
 8006668:	4618      	mov	r0, r3
 800666a:	f7ff ff9d 	bl	80065a8 <NVIC_EncodePriority>
 800666e:	4603      	mov	r3, r0
 8006670:	4619      	mov	r1, r3
 8006672:	200b      	movs	r0, #11
 8006674:	f7ff ff6e 	bl	8006554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006678:	200b      	movs	r0, #11
 800667a:	f7ff ff4d 	bl	8006518 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800667e:	f7ff ff3d 	bl	80064fc <__NVIC_GetPriorityGrouping>
 8006682:	4603      	mov	r3, r0
 8006684:	2200      	movs	r2, #0
 8006686:	2100      	movs	r1, #0
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff ff8d 	bl	80065a8 <NVIC_EncodePriority>
 800668e:	4603      	mov	r3, r0
 8006690:	4619      	mov	r1, r3
 8006692:	200c      	movs	r0, #12
 8006694:	f7ff ff5e 	bl	8006554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006698:	200c      	movs	r0, #12
 800669a:	f7ff ff3d 	bl	8006518 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800669e:	2200      	movs	r2, #0
 80066a0:	2100      	movs	r1, #0
 80066a2:	200d      	movs	r0, #13
 80066a4:	f003 fc7b 	bl	8009f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80066a8:	200d      	movs	r0, #13
 80066aa:	f003 fc92 	bl	8009fd2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80066ae:	2200      	movs	r2, #0
 80066b0:	2100      	movs	r1, #0
 80066b2:	2038      	movs	r0, #56	@ 0x38
 80066b4:	f003 fc73 	bl	8009f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80066b8:	2038      	movs	r0, #56	@ 0x38
 80066ba:	f003 fc8a 	bl	8009fd2 <HAL_NVIC_EnableIRQ>

}
 80066be:	bf00      	nop
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40021000 	.word	0x40021000
 80066cc:	00000000 	.word	0x00000000

080066d0 <calc_eq_coefs>:
#include <math.h>
#include "main.h"
#include <filter.h>


void calc_eq_coefs(int freq, float gain_dB, int * coef){
 80066d0:	b590      	push	{r4, r7, lr}
 80066d2:	b08f      	sub	sp, #60	@ 0x3c
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80066dc:	6079      	str	r1, [r7, #4]

	float Q = 1.5 ;
 80066de:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80066e2:	637b      	str	r3, [r7, #52]	@ 0x34
	float omega = (float) 2*M_PI*freq/SAMPLE_RATE;
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff f87b 	bl	80057e0 <__aeabi_i2d>
 80066ea:	a39c      	add	r3, pc, #624	@ (adr r3, 800695c <calc_eq_coefs+0x28c>)
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	f7ff f8e0 	bl	80058b4 <__aeabi_dmul>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4610      	mov	r0, r2
 80066fa:	4619      	mov	r1, r3
 80066fc:	a399      	add	r3, pc, #612	@ (adr r3, 8006964 <calc_eq_coefs+0x294>)
 80066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006702:	f7ff fa01 	bl	8005b08 <__aeabi_ddiv>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	4610      	mov	r0, r2
 800670c:	4619      	mov	r1, r3
 800670e:	f7ff fba9 	bl	8005e64 <__aeabi_d2f>
 8006712:	4603      	mov	r3, r0
 8006714:	633b      	str	r3, [r7, #48]	@ 0x30
	float alpha =(float) sin(omega)/(2*Q);
 8006716:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006718:	f7ff f874 	bl	8005804 <__aeabi_f2d>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	ec43 2b10 	vmov	d0, r2, r3
 8006724:	f012 fab0 	bl	8018c88 <sin>
 8006728:	ec53 2b10 	vmov	r2, r3, d0
 800672c:	4610      	mov	r0, r2
 800672e:	4619      	mov	r1, r3
 8006730:	f7ff fb98 	bl	8005e64 <__aeabi_d2f>
 8006734:	ee06 0a90 	vmov	s13, r0
 8006738:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800673c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006744:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float A = pow(10,gain_dB/40);
 8006748:	edd7 7a02 	vldr	s15, [r7, #8]
 800674c:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8006958 <calc_eq_coefs+0x288>
 8006750:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006754:	ee16 0a90 	vmov	r0, s13
 8006758:	f7ff f854 	bl	8005804 <__aeabi_f2d>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	ec43 2b11 	vmov	d1, r2, r3
 8006764:	ed9f 0b78 	vldr	d0, [pc, #480]	@ 8006948 <calc_eq_coefs+0x278>
 8006768:	f012 f9c8 	bl	8018afc <pow>
 800676c:	ec53 2b10 	vmov	r2, r3, d0
 8006770:	4610      	mov	r0, r2
 8006772:	4619      	mov	r1, r3
 8006774:	f7ff fb76 	bl	8005e64 <__aeabi_d2f>
 8006778:	4603      	mov	r3, r0
 800677a:	62bb      	str	r3, [r7, #40]	@ 0x28

	float b_0 = 1 + alpha * A;
 800677c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8006780:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006788:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800678c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006790:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float b_1 = -2 * cos(omega);
 8006794:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006796:	f7ff f835 	bl	8005804 <__aeabi_f2d>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	ec43 2b10 	vmov	d0, r2, r3
 80067a2:	f012 fa1d 	bl	8018be0 <cos>
 80067a6:	ec51 0b10 	vmov	r0, r1, d0
 80067aa:	f04f 0200 	mov.w	r2, #0
 80067ae:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80067b2:	f7ff f87f 	bl	80058b4 <__aeabi_dmul>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	4610      	mov	r0, r2
 80067bc:	4619      	mov	r1, r3
 80067be:	f7ff fb51 	bl	8005e64 <__aeabi_d2f>
 80067c2:	4603      	mov	r3, r0
 80067c4:	623b      	str	r3, [r7, #32]
	float b_2 = 1 - alpha * A;
 80067c6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80067ca:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80067ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067da:	edc7 7a07 	vstr	s15, [r7, #28]
	float a_0 = 1 + (alpha / A);
 80067de:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80067e2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80067e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067f2:	edc7 7a06 	vstr	s15, [r7, #24]
	float a_1 = -2 * cos(omega);
 80067f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067f8:	f7ff f804 	bl	8005804 <__aeabi_f2d>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	ec43 2b10 	vmov	d0, r2, r3
 8006804:	f012 f9ec 	bl	8018be0 <cos>
 8006808:	ec51 0b10 	vmov	r0, r1, d0
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8006814:	f7ff f84e 	bl	80058b4 <__aeabi_dmul>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4610      	mov	r0, r2
 800681e:	4619      	mov	r1, r3
 8006820:	f7ff fb20 	bl	8005e64 <__aeabi_d2f>
 8006824:	4603      	mov	r3, r0
 8006826:	617b      	str	r3, [r7, #20]
	float a_2 = 1 - (alpha / A);
 8006828:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800682c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8006830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006834:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800683c:	edc7 7a04 	vstr	s15, [r7, #16]


	coef[0] = (int) (b_0/a_0 + 0.499);
 8006840:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006844:	edd7 7a06 	vldr	s15, [r7, #24]
 8006848:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800684c:	ee16 0a90 	vmov	r0, s13
 8006850:	f7fe ffd8 	bl	8005804 <__aeabi_f2d>
 8006854:	a33e      	add	r3, pc, #248	@ (adr r3, 8006950 <calc_eq_coefs+0x280>)
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	f7fe fe75 	bl	8005548 <__adddf3>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4610      	mov	r0, r2
 8006864:	4619      	mov	r1, r3
 8006866:	f7ff fad5 	bl	8005e14 <__aeabi_d2iz>
 800686a:	4602      	mov	r2, r0
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	601a      	str	r2, [r3, #0]
	coef[1] = (int) (b_1/a_0 + 0.499);
 8006870:	ed97 7a08 	vldr	s14, [r7, #32]
 8006874:	edd7 7a06 	vldr	s15, [r7, #24]
 8006878:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800687c:	ee16 0a90 	vmov	r0, s13
 8006880:	f7fe ffc0 	bl	8005804 <__aeabi_f2d>
 8006884:	a332      	add	r3, pc, #200	@ (adr r3, 8006950 <calc_eq_coefs+0x280>)
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	f7fe fe5d 	bl	8005548 <__adddf3>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4610      	mov	r0, r2
 8006894:	4619      	mov	r1, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	1d1c      	adds	r4, r3, #4
 800689a:	f7ff fabb 	bl	8005e14 <__aeabi_d2iz>
 800689e:	4603      	mov	r3, r0
 80068a0:	6023      	str	r3, [r4, #0]
	coef[2] = (int) (b_2/a_0 + 0.499);
 80068a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80068a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80068aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80068ae:	ee16 0a90 	vmov	r0, s13
 80068b2:	f7fe ffa7 	bl	8005804 <__aeabi_f2d>
 80068b6:	a326      	add	r3, pc, #152	@ (adr r3, 8006950 <calc_eq_coefs+0x280>)
 80068b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068bc:	f7fe fe44 	bl	8005548 <__adddf3>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4610      	mov	r0, r2
 80068c6:	4619      	mov	r1, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f103 0408 	add.w	r4, r3, #8
 80068ce:	f7ff faa1 	bl	8005e14 <__aeabi_d2iz>
 80068d2:	4603      	mov	r3, r0
 80068d4:	6023      	str	r3, [r4, #0]
	coef[3] = (int) (a_1/a_0 + 0.499);
 80068d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80068da:	edd7 7a06 	vldr	s15, [r7, #24]
 80068de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80068e2:	ee16 0a90 	vmov	r0, s13
 80068e6:	f7fe ff8d 	bl	8005804 <__aeabi_f2d>
 80068ea:	a319      	add	r3, pc, #100	@ (adr r3, 8006950 <calc_eq_coefs+0x280>)
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f7fe fe2a 	bl	8005548 <__adddf3>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4610      	mov	r0, r2
 80068fa:	4619      	mov	r1, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f103 040c 	add.w	r4, r3, #12
 8006902:	f7ff fa87 	bl	8005e14 <__aeabi_d2iz>
 8006906:	4603      	mov	r3, r0
 8006908:	6023      	str	r3, [r4, #0]
	coef[4] = (int) (a_2/a_0 + 0.499);
 800690a:	ed97 7a04 	vldr	s14, [r7, #16]
 800690e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006912:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006916:	ee16 0a90 	vmov	r0, s13
 800691a:	f7fe ff73 	bl	8005804 <__aeabi_f2d>
 800691e:	a30c      	add	r3, pc, #48	@ (adr r3, 8006950 <calc_eq_coefs+0x280>)
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	f7fe fe10 	bl	8005548 <__adddf3>
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	4610      	mov	r0, r2
 800692e:	4619      	mov	r1, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f103 0410 	add.w	r4, r3, #16
 8006936:	f7ff fa6d 	bl	8005e14 <__aeabi_d2iz>
 800693a:	4603      	mov	r3, r0
 800693c:	6023      	str	r3, [r4, #0]

}
 800693e:	bf00      	nop
 8006940:	373c      	adds	r7, #60	@ 0x3c
 8006942:	46bd      	mov	sp, r7
 8006944:	bd90      	pop	{r4, r7, pc}
 8006946:	bf00      	nop
 8006948:	00000000 	.word	0x00000000
 800694c:	40240000 	.word	0x40240000
 8006950:	b22d0e56 	.word	0xb22d0e56
 8006954:	3fdfef9d 	.word	0x3fdfef9d
 8006958:	42200000 	.word	0x42200000
 800695c:	54442d18 	.word	0x54442d18
 8006960:	401921fb 	.word	0x401921fb
 8006964:	00000000 	.word	0x00000000
 8006968:	40e77000 	.word	0x40e77000

0800696c <volume>:


void volume(param_sgtl_t * param_son, h_sgtl5000_t  * sgtl, uint16_t in12bits){
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	4613      	mov	r3, r2
 8006978:	80fb      	strh	r3, [r7, #6]
	int nombrevaleurs=(int)(0.6*4096/128);
 800697a:	2313      	movs	r3, #19
 800697c:	613b      	str	r3, [r7, #16]
	for(int multiple=0; multiple<128; multiple++){
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	e015      	b.n	80069b0 <volume+0x44>
		if(in12bits>nombrevaleurs*multiple-1 && in12bits < nombrevaleurs * multiple + nombrevaleurs){
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	fb03 f202 	mul.w	r2, r3, r2
 800698c:	88fb      	ldrh	r3, [r7, #6]
 800698e:	429a      	cmp	r2, r3
 8006990:	dc0b      	bgt.n	80069aa <volume+0x3e>
 8006992:	88fa      	ldrh	r2, [r7, #6]
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	6979      	ldr	r1, [r7, #20]
 8006998:	fb03 f101 	mul.w	r1, r3, r1
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	440b      	add	r3, r1
 80069a0:	429a      	cmp	r2, r3
 80069a2:	da02      	bge.n	80069aa <volume+0x3e>
			param_son->volume=multiple;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	601a      	str	r2, [r3, #0]
	for(int multiple=0; multiple<128; multiple++){
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	3301      	adds	r3, #1
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80069b4:	dde6      	ble.n	8006984 <volume+0x18>
		}
	}
	sgtl5000_i2c_write_register(sgtl,SGTL5000_DAP_MAIN_CHAN,(uint32_t) param_son->volume);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	461a      	mov	r2, r3
 80069be:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80069c2:	68b8      	ldr	r0, [r7, #8]
 80069c4:	f000 ffbc 	bl	8007940 <sgtl5000_i2c_write_register>
}
 80069c8:	bf00      	nop
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <set_filter>:

void set_filter(h_sgtl5000_t * sgtl,int freq, float gain_dB){
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08a      	sub	sp, #40	@ 0x28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	ed87 0a01 	vstr	s0, [r7, #4]
	int coefs[5];
	calc_eq_coefs(freq,gain_dB,coefs);
 80069de:	f107 0314 	add.w	r3, r7, #20
 80069e2:	4619      	mov	r1, r3
 80069e4:	ed97 0a01 	vldr	s0, [r7, #4]
 80069e8:	68b8      	ldr	r0, [r7, #8]
 80069ea:	f7ff fe71 	bl	80066d0 <calc_eq_coefs>
	//set b0
	sgtl5000_i2c_write_register(sgtl,SGTL5000_DAP_COEF_WR_B0_LSB, coefs[0] & 0xF);//Recupération des 4 derniers bits sur 20 du coefficient
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	461a      	mov	r2, r3
 80069fa:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 ff9e 	bl	8007940 <sgtl5000_i2c_write_register>
	sgtl5000_i2c_write_register(sgtl,SGTL5000_DAP_COEF_WR_B0_MSB, ((coefs[0] &0xFFFF0)>>2));//Recupération des 16 premiers bits sur 20 du coefficient
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	109b      	asrs	r3, r3, #2
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	f023 0303 	bic.w	r3, r3, #3
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 ff92 	bl	8007940 <sgtl5000_i2c_write_register>
	//set b1
	sgtl5000_i2c_write_register(sgtl,SGTL5000_DAP_COEF_WR_B1_LSB, coefs[1] & 0xF);//Recupération des 4 derniers bits sur 20 du coefficient
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f003 030f 	and.w	r3, r3, #15
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	461a      	mov	r2, r3
 8006a28:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 ff87 	bl	8007940 <sgtl5000_i2c_write_register>
	sgtl5000_i2c_write_register(sgtl,SGTL5000_DAP_COEF_WR_B1_MSB, ((coefs[1] &0xFFFF0)>>2));//Recupération des 16 premiers bits sur 20 du coefficient
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	109b      	asrs	r3, r3, #2
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f023 0303 	bic.w	r3, r3, #3
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 ff7b 	bl	8007940 <sgtl5000_i2c_write_register>
	//set b2
	sgtl5000_i2c_write_register(sgtl,SGTL5000_DAP_COEF_WR_B2_LSB, coefs[2] & 0xF);//Recupération des 4 derniers bits sur 20 du coefficient
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 ff70 	bl	8007940 <sgtl5000_i2c_write_register>
	sgtl5000_i2c_write_register(sgtl,SGTL5000_DAP_COEF_WR_B2_MSB, ((coefs[2] &0xFFFF0)>>2));//Recupération des 16 premiers bits sur 20 du coefficient
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	109b      	asrs	r3, r3, #2
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	f023 0303 	bic.w	r3, r3, #3
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 ff64 	bl	8007940 <sgtl5000_i2c_write_register>
	//set a1
	sgtl5000_i2c_write_register(sgtl,SGTL5000_DAP_COEF_WR_A1_LSB, coefs[3] & 0xF);//Recupération des 4 derniers bits sur 20 du coefficient
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f003 030f 	and.w	r3, r3, #15
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 ff59 	bl	8007940 <sgtl5000_i2c_write_register>
	sgtl5000_i2c_write_register(sgtl,SGTL5000_DAP_COEF_WR_A1_MSB, ((coefs[3] &0xFFFF0)>>2));//Recupération des 16 premiers bits sur 20 du coefficient
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	109b      	asrs	r3, r3, #2
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	f023 0303 	bic.w	r3, r3, #3
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 ff4d 	bl	8007940 <sgtl5000_i2c_write_register>
	//set A2
	sgtl5000_i2c_write_register(sgtl,SGTL5000_DAP_COEF_WR_A2_LSB, coefs[4] & 0xF);//Recupération des 4 derniers bits sur 20 du coefficient
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 ff42 	bl	8007940 <sgtl5000_i2c_write_register>
	sgtl5000_i2c_write_register(sgtl,SGTL5000_DAP_COEF_WR_A2_MSB, ((coefs[4] &0xFFFF0)>>2));//Recupération des 16 premiers bits sur 20 du coefficient
 8006abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abe:	109b      	asrs	r3, r3, #2
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f023 0303 	bic.w	r3, r3, #3
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	461a      	mov	r2, r3
 8006aca:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 ff36 	bl	8007940 <sgtl5000_i2c_write_register>
}
 8006ad4:	bf00      	nop
 8006ad6:	3728      	adds	r7, #40	@ 0x28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <init_valeur_default>:


void init_valeur_default(param_sgtl_t* param_son){
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
	param_son->band0_freq=450;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8006aea:	609a      	str	r2, [r3, #8]
	param_son->band1_freq=1900;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f240 726c 	movw	r2, #1900	@ 0x76c
 8006af2:	611a      	str	r2, [r3, #16]
	param_son->band2_freq=5500;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f241 527c 	movw	r2, #5500	@ 0x157c
 8006afa:	619a      	str	r2, [r3, #24]
	param_son->band3_freq=12000;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8006b02:	621a      	str	r2, [r3, #32]
	param_son->band0_gain=0;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f04f 0200 	mov.w	r2, #0
 8006b0a:	60da      	str	r2, [r3, #12]
	param_son->band1_gain=0;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f04f 0200 	mov.w	r2, #0
 8006b12:	615a      	str	r2, [r3, #20]
	param_son->band2_gain=0;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f04f 0200 	mov.w	r2, #0
 8006b1a:	61da      	str	r2, [r3, #28]
	param_son->band3_gain=0;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f04f 0200 	mov.w	r2, #0
 8006b22:	625a      	str	r2, [r3, #36]	@ 0x24
	param_son->volume=0;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	601a      	str	r2, [r3, #0]
	param_son->bandmod=0;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	605a      	str	r2, [r3, #4]
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <modif_freq>:

void modif_freq(param_sgtl_t * param_son, int signalA, int signalB){
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]

	int difffrequence=0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	617b      	str	r3, [r7, #20]

	switch(param_son->bandmod){
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d05c      	beq.n	8006c0e <modif_freq+0xd2>
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	f300 8084 	bgt.w	8006c62 <modif_freq+0x126>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <modif_freq+0x28>
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d02b      	beq.n	8006bba <modif_freq+0x7e>
 8006b62:	e07e      	b.n	8006c62 <modif_freq+0x126>

	case 0 :
		difffrequence=700/50;
 8006b64:	230e      	movs	r3, #14
 8006b66:	617b      	str	r3, [r7, #20]
		if((param_son->band0_freq>=FREQ_MIN) & (param_son->band0_freq<=FREQ_MAX)){
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	2b27      	cmp	r3, #39	@ 0x27
 8006b6e:	bfcc      	ite	gt
 8006b70:	2301      	movgt	r3, #1
 8006b72:	2300      	movle	r3, #0
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f644 2138 	movw	r1, #19000	@ 0x4a38
 8006b7e:	428b      	cmp	r3, r1
 8006b80:	bfd4      	ite	le
 8006b82:	2301      	movle	r3, #1
 8006b84:	2300      	movgt	r3, #0
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	4013      	ands	r3, r2
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d014      	beq.n	8006bba <modif_freq+0x7e>
			if(signalA==1){ //on suppose que si B est en retard, on tourne ds le sens horaire
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	f040 808f 	bne.w	8006cb6 <modif_freq+0x17a>
				if(signalB==0){
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <modif_freq+0x70>
					param_son->band0_freq += difffrequence;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	689a      	ldr	r2, [r3, #8]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	609a      	str	r2, [r3, #8]
				}
				else {
					param_son->band0_freq -= difffrequence;
				}
			}
			break;
 8006baa:	e084      	b.n	8006cb6 <modif_freq+0x17a>
					param_son->band0_freq -= difffrequence;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	1ad2      	subs	r2, r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	609a      	str	r2, [r3, #8]
			break;
 8006bb8:	e07d      	b.n	8006cb6 <modif_freq+0x17a>
		}
	case 1 :
		if((param_son->band1_freq>=FREQ_MIN) & (param_son->band1_freq<=FREQ_MAX)){
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	2b27      	cmp	r3, #39	@ 0x27
 8006bc0:	bfcc      	ite	gt
 8006bc2:	2301      	movgt	r3, #1
 8006bc4:	2300      	movle	r3, #0
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	f644 2138 	movw	r1, #19000	@ 0x4a38
 8006bd0:	428b      	cmp	r3, r1
 8006bd2:	bfd4      	ite	le
 8006bd4:	2301      	movle	r3, #1
 8006bd6:	2300      	movgt	r3, #0
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	4013      	ands	r3, r2
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d015      	beq.n	8006c0e <modif_freq+0xd2>
			difffrequence=2200/50;
 8006be2:	232c      	movs	r3, #44	@ 0x2c
 8006be4:	617b      	str	r3, [r7, #20]
			if(signalA==1){ //on suppose que si B est en retard, on tourne ds le sens horaire
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d166      	bne.n	8006cba <modif_freq+0x17e>
				if(signalB==0){
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <modif_freq+0xc4>
					param_son->band1_freq += difffrequence;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	691a      	ldr	r2, [r3, #16]
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	441a      	add	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	611a      	str	r2, [r3, #16]
				}
				else {
					param_son->band1_freq -= difffrequence;
				}
			}
			break;
 8006bfe:	e05c      	b.n	8006cba <modif_freq+0x17e>
					param_son->band1_freq -= difffrequence;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	691a      	ldr	r2, [r3, #16]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	1ad2      	subs	r2, r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	611a      	str	r2, [r3, #16]
			break;
 8006c0c:	e055      	b.n	8006cba <modif_freq+0x17e>
		}
	case 2 :
		if((param_son->band2_freq>=FREQ_MIN) & (param_son->band2_freq<=FREQ_MAX)){
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	2b27      	cmp	r3, #39	@ 0x27
 8006c14:	bfcc      	ite	gt
 8006c16:	2301      	movgt	r3, #1
 8006c18:	2300      	movle	r3, #0
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	f644 2138 	movw	r1, #19000	@ 0x4a38
 8006c24:	428b      	cmp	r3, r1
 8006c26:	bfd4      	ite	le
 8006c28:	2301      	movle	r3, #1
 8006c2a:	2300      	movgt	r3, #0
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	4013      	ands	r3, r2
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d015      	beq.n	8006c62 <modif_freq+0x126>
			difffrequence=5000/50;
 8006c36:	2364      	movs	r3, #100	@ 0x64
 8006c38:	617b      	str	r3, [r7, #20]
			if(signalA==1){ //on suppose que si B est en retard, on tourne ds le sens horaire
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d13e      	bne.n	8006cbe <modif_freq+0x182>
				if(signalB==0){
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <modif_freq+0x118>
					param_son->band2_freq += difffrequence;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	441a      	add	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	619a      	str	r2, [r3, #24]
				}
				else {
					param_son->band2_freq -= difffrequence;
				}
			}
			break;
 8006c52:	e034      	b.n	8006cbe <modif_freq+0x182>
					param_son->band2_freq -= difffrequence;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	699a      	ldr	r2, [r3, #24]
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	1ad2      	subs	r2, r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	619a      	str	r2, [r3, #24]
			break;
 8006c60:	e02d      	b.n	8006cbe <modif_freq+0x182>
		}
	default :
		if((param_son->band3_freq>=FREQ_MIN) & (param_son->band3_freq<=FREQ_MAX)){
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	2b27      	cmp	r3, #39	@ 0x27
 8006c68:	bfcc      	ite	gt
 8006c6a:	2301      	movgt	r3, #1
 8006c6c:	2300      	movle	r3, #0
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f644 2138 	movw	r1, #19000	@ 0x4a38
 8006c78:	428b      	cmp	r3, r1
 8006c7a:	bfd4      	ite	le
 8006c7c:	2301      	movle	r3, #1
 8006c7e:	2300      	movgt	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	4013      	ands	r3, r2
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01c      	beq.n	8006cc4 <modif_freq+0x188>
			difffrequence=8000/50;
 8006c8a:	23a0      	movs	r3, #160	@ 0xa0
 8006c8c:	617b      	str	r3, [r7, #20]
			if(signalA==1){ //on suppose que si B est en retard, on tourne ds le sens horaire
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d116      	bne.n	8006cc2 <modif_freq+0x186>
				if(signalB==0){
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <modif_freq+0x16c>
					param_son->band3_freq += difffrequence;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a1a      	ldr	r2, [r3, #32]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	441a      	add	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	621a      	str	r2, [r3, #32]
				}
				else {
					param_son->band3_freq -= difffrequence;
				}
			}
			break;
 8006ca6:	e00c      	b.n	8006cc2 <modif_freq+0x186>
					param_son->band3_freq -= difffrequence;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a1a      	ldr	r2, [r3, #32]
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	1ad2      	subs	r2, r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	621a      	str	r2, [r3, #32]
			break;
 8006cb4:	e005      	b.n	8006cc2 <modif_freq+0x186>
			break;
 8006cb6:	bf00      	nop
 8006cb8:	e004      	b.n	8006cc4 <modif_freq+0x188>
			break;
 8006cba:	bf00      	nop
 8006cbc:	e002      	b.n	8006cc4 <modif_freq+0x188>
			break;
 8006cbe:	bf00      	nop
 8006cc0:	e000      	b.n	8006cc4 <modif_freq+0x188>
			break;
 8006cc2:	bf00      	nop
		}
	}
}
 8006cc4:	bf00      	nop
 8006cc6:	371c      	adds	r7, #28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <modif_gain>:

void modif_gain(param_sgtl_t * param_son, int signalA, int signalB){
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]

	switch(param_son->bandmod){
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d07d      	beq.n	8006de0 <modif_gain+0x110>
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	f300 80b5 	bgt.w	8006e54 <modif_gain+0x184>
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <modif_gain+0x24>
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d03b      	beq.n	8006d6a <modif_gain+0x9a>
 8006cf2:	e0af      	b.n	8006e54 <modif_gain+0x184>

	case 0 :
		if((param_son->band0_gain>=-ABS_GAIN_MAX) & (param_son->band0_gain<=ABS_GAIN_MAX)){
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	edd3 7a03 	vldr	s15, [r3, #12]
 8006cfa:	eeba 7a08 	vmov.f32	s14, #168	@ 0xc1400000 -12.0
 8006cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d06:	bfac      	ite	ge
 8006d08:	2301      	movge	r3, #1
 8006d0a:	2300      	movlt	r3, #0
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	edd3 7a03 	vldr	s15, [r3, #12]
 8006d14:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8006d18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d20:	bf94      	ite	ls
 8006d22:	2301      	movls	r3, #1
 8006d24:	2300      	movhi	r3, #0
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	4013      	ands	r3, r2
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01c      	beq.n	8006d6a <modif_gain+0x9a>
			if(signalA==1){ //on suppose que si B est en retard, on tourne ds le sens horaire
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	f040 80c8 	bne.w	8006ec8 <modif_gain+0x1f8>
				if(signalB==0){
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10a      	bne.n	8006d54 <modif_gain+0x84>
					param_son->band0_gain += GAIN_INCREMENT;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	edd3 7a03 	vldr	s15, [r3, #12]
 8006d44:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006d48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	edc3 7a03 	vstr	s15, [r3, #12]
				}
				else {
					param_son->band0_gain -= GAIN_INCREMENT;
				}
			}
			break;
 8006d52:	e0b9      	b.n	8006ec8 <modif_gain+0x1f8>
					param_son->band0_gain -= GAIN_INCREMENT;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	edd3 7a03 	vldr	s15, [r3, #12]
 8006d5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006d5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
 8006d68:	e0ae      	b.n	8006ec8 <modif_gain+0x1f8>
		}
	case 1 :
		if((param_son->band1_gain>=-ABS_GAIN_MAX) & (param_son->band1_gain<=ABS_GAIN_MAX)){
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	edd3 7a05 	vldr	s15, [r3, #20]
 8006d70:	eeba 7a08 	vmov.f32	s14, #168	@ 0xc1400000 -12.0
 8006d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d7c:	bfac      	ite	ge
 8006d7e:	2301      	movge	r3, #1
 8006d80:	2300      	movlt	r3, #0
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	edd3 7a05 	vldr	s15, [r3, #20]
 8006d8a:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8006d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d96:	bf94      	ite	ls
 8006d98:	2301      	movls	r3, #1
 8006d9a:	2300      	movhi	r3, #0
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	4013      	ands	r3, r2
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d01c      	beq.n	8006de0 <modif_gain+0x110>
			if(signalA==1){ //on suppose que si B est en retard, on tourne ds le sens horaire
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	f040 808f 	bne.w	8006ecc <modif_gain+0x1fc>
				if(signalB==0){
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10a      	bne.n	8006dca <modif_gain+0xfa>
					param_son->band1_gain += GAIN_INCREMENT;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	edd3 7a05 	vldr	s15, [r3, #20]
 8006dba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006dbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	edc3 7a05 	vstr	s15, [r3, #20]
				}
				else {
					param_son->band1_gain -= GAIN_INCREMENT;
				}
			}
			break;
 8006dc8:	e080      	b.n	8006ecc <modif_gain+0x1fc>
					param_son->band1_gain -= GAIN_INCREMENT;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	edd3 7a05 	vldr	s15, [r3, #20]
 8006dd0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006dd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	edc3 7a05 	vstr	s15, [r3, #20]
			break;
 8006dde:	e075      	b.n	8006ecc <modif_gain+0x1fc>
		}
	case 2 :
		if((param_son->band2_gain>=-ABS_GAIN_MAX) & (param_son->band2_gain<=ABS_GAIN_MAX)){
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	edd3 7a07 	vldr	s15, [r3, #28]
 8006de6:	eeba 7a08 	vmov.f32	s14, #168	@ 0xc1400000 -12.0
 8006dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df2:	bfac      	ite	ge
 8006df4:	2301      	movge	r3, #1
 8006df6:	2300      	movlt	r3, #0
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	edd3 7a07 	vldr	s15, [r3, #28]
 8006e00:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8006e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e0c:	bf94      	ite	ls
 8006e0e:	2301      	movls	r3, #1
 8006e10:	2300      	movhi	r3, #0
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	4013      	ands	r3, r2
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d01b      	beq.n	8006e54 <modif_gain+0x184>
			if(signalA==1){ //on suppose que si B est en retard, on tourne ds le sens horaire
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d156      	bne.n	8006ed0 <modif_gain+0x200>
				if(signalB==0){
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10a      	bne.n	8006e3e <modif_gain+0x16e>
					param_son->band2_gain += GAIN_INCREMENT;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	edd3 7a07 	vldr	s15, [r3, #28]
 8006e2e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006e32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	edc3 7a07 	vstr	s15, [r3, #28]
				}
				else {
					param_son->band2_gain -= GAIN_INCREMENT;
				}
			}
			break;
 8006e3c:	e048      	b.n	8006ed0 <modif_gain+0x200>
					param_son->band2_gain -= GAIN_INCREMENT;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	edd3 7a07 	vldr	s15, [r3, #28]
 8006e44:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006e48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	edc3 7a07 	vstr	s15, [r3, #28]
			break;
 8006e52:	e03d      	b.n	8006ed0 <modif_gain+0x200>
		}
	default :
		if((param_son->band3_gain>=-ABS_GAIN_MAX) & (param_son->band3_gain<=ABS_GAIN_MAX)){
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006e5a:	eeba 7a08 	vmov.f32	s14, #168	@ 0xc1400000 -12.0
 8006e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e66:	bfac      	ite	ge
 8006e68:	2301      	movge	r3, #1
 8006e6a:	2300      	movlt	r3, #0
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006e74:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8006e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e80:	bf94      	ite	ls
 8006e82:	2301      	movls	r3, #1
 8006e84:	2300      	movhi	r3, #0
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	4013      	ands	r3, r2
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d022      	beq.n	8006ed6 <modif_gain+0x206>
			if(signalA==1){ //on suppose que si B est en retard, on tourne ds le sens horaire
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d11e      	bne.n	8006ed4 <modif_gain+0x204>
				if(signalB==0){
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10a      	bne.n	8006eb2 <modif_gain+0x1e2>
					param_son->band3_gain += GAIN_INCREMENT;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006ea2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006ea6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				}
				else {
					param_son->band3_gain -= GAIN_INCREMENT;
				}
			}
			break;
 8006eb0:	e010      	b.n	8006ed4 <modif_gain+0x204>
					param_son->band3_gain -= GAIN_INCREMENT;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006eb8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006ebc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
			break;
 8006ec6:	e005      	b.n	8006ed4 <modif_gain+0x204>
			break;
 8006ec8:	bf00      	nop
 8006eca:	e004      	b.n	8006ed6 <modif_gain+0x206>
			break;
 8006ecc:	bf00      	nop
 8006ece:	e002      	b.n	8006ed6 <modif_gain+0x206>
			break;
 8006ed0:	bf00      	nop
 8006ed2:	e000      	b.n	8006ed6 <modif_gain+0x206>
			break;
 8006ed4:	bf00      	nop
		}
	}
}
 8006ed6:	bf00      	nop
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <ChangementEtat>:

void ChangementEtat(param_sgtl_t * param_son,h_sgtl5000_t * sgtl){
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
	switch(param_son->bandmod)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d014      	beq.n	8006f1e <ChangementEtat+0x3c>
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	dc19      	bgt.n	8006f2c <ChangementEtat+0x4a>
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <ChangementEtat+0x20>
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d007      	beq.n	8006f10 <ChangementEtat+0x2e>
 8006f00:	e014      	b.n	8006f2c <ChangementEtat+0x4a>
	{
	case 0:
		sgtl5000_i2c_write_register(sgtl,SGTL5000_DAP_FILTER_COEF_ACCESS,(uint32_t) 0x1 );
 8006f02:	2201      	movs	r2, #1
 8006f04:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8006f08:	6838      	ldr	r0, [r7, #0]
 8006f0a:	f000 fd19 	bl	8007940 <sgtl5000_i2c_write_register>
		break;
 8006f0e:	e014      	b.n	8006f3a <ChangementEtat+0x58>
	case 1:
		sgtl5000_i2c_write_register(sgtl,SGTL5000_DAP_FILTER_COEF_ACCESS,(uint32_t) 0x2 );
 8006f10:	2202      	movs	r2, #2
 8006f12:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8006f16:	6838      	ldr	r0, [r7, #0]
 8006f18:	f000 fd12 	bl	8007940 <sgtl5000_i2c_write_register>
		break;
 8006f1c:	e00d      	b.n	8006f3a <ChangementEtat+0x58>
	case 2 :
		sgtl5000_i2c_write_register(sgtl,SGTL5000_DAP_FILTER_COEF_ACCESS,(uint32_t) 0x3 );
 8006f1e:	2203      	movs	r2, #3
 8006f20:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8006f24:	6838      	ldr	r0, [r7, #0]
 8006f26:	f000 fd0b 	bl	8007940 <sgtl5000_i2c_write_register>
		break;
 8006f2a:	e006      	b.n	8006f3a <ChangementEtat+0x58>
	default:
		sgtl5000_i2c_write_register(sgtl,SGTL5000_DAP_FILTER_COEF_ACCESS,(uint32_t) 0x0 );
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8006f32:	6838      	ldr	r0, [r7, #0]
 8006f34:	f000 fd04 	bl	8007940 <sgtl5000_i2c_write_register>
		break;
 8006f38:	bf00      	nop
	}

}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08a      	sub	sp, #40	@ 0x28
 8006f48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f4a:	f107 0314 	add.w	r3, r7, #20
 8006f4e:	2200      	movs	r2, #0
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	605a      	str	r2, [r3, #4]
 8006f54:	609a      	str	r2, [r3, #8]
 8006f56:	60da      	str	r2, [r3, #12]
 8006f58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f5a:	4b43      	ldr	r3, [pc, #268]	@ (8007068 <MX_GPIO_Init+0x124>)
 8006f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f5e:	4a42      	ldr	r2, [pc, #264]	@ (8007068 <MX_GPIO_Init+0x124>)
 8006f60:	f043 0304 	orr.w	r3, r3, #4
 8006f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f66:	4b40      	ldr	r3, [pc, #256]	@ (8007068 <MX_GPIO_Init+0x124>)
 8006f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	613b      	str	r3, [r7, #16]
 8006f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006f72:	4b3d      	ldr	r3, [pc, #244]	@ (8007068 <MX_GPIO_Init+0x124>)
 8006f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f76:	4a3c      	ldr	r2, [pc, #240]	@ (8007068 <MX_GPIO_Init+0x124>)
 8006f78:	f043 0320 	orr.w	r3, r3, #32
 8006f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8007068 <MX_GPIO_Init+0x124>)
 8006f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f8a:	4b37      	ldr	r3, [pc, #220]	@ (8007068 <MX_GPIO_Init+0x124>)
 8006f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f8e:	4a36      	ldr	r2, [pc, #216]	@ (8007068 <MX_GPIO_Init+0x124>)
 8006f90:	f043 0301 	orr.w	r3, r3, #1
 8006f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f96:	4b34      	ldr	r3, [pc, #208]	@ (8007068 <MX_GPIO_Init+0x124>)
 8006f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	60bb      	str	r3, [r7, #8]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fa2:	4b31      	ldr	r3, [pc, #196]	@ (8007068 <MX_GPIO_Init+0x124>)
 8006fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fa6:	4a30      	ldr	r2, [pc, #192]	@ (8007068 <MX_GPIO_Init+0x124>)
 8006fa8:	f043 0302 	orr.w	r3, r3, #2
 8006fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006fae:	4b2e      	ldr	r3, [pc, #184]	@ (8007068 <MX_GPIO_Init+0x124>)
 8006fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	607b      	str	r3, [r7, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(light_GPIO_Port, light_Pin, GPIO_PIN_RESET);
 8006fba:	2200      	movs	r2, #0
 8006fbc:	2110      	movs	r1, #16
 8006fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006fc2:	f003 fc15 	bl	800a7f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, band3_Pin|band2_Pin|band1_Pin|band0_Pin, GPIO_PIN_RESET);
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8006fcc:	4827      	ldr	r0, [pc, #156]	@ (800706c <MX_GPIO_Init+0x128>)
 8006fce:	f003 fc0f 	bl	800a7f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = A1_Pin|A2_Pin|B1_Pin;
 8006fd2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8006fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006fd8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fe2:	f107 0314 	add.w	r3, r7, #20
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	4821      	ldr	r0, [pc, #132]	@ (8007070 <MX_GPIO_Init+0x12c>)
 8006fea:	f003 fa7f 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B2_Pin;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006ff2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8006ffc:	f107 0314 	add.w	r3, r7, #20
 8007000:	4619      	mov	r1, r3
 8007002:	481c      	ldr	r0, [pc, #112]	@ (8007074 <MX_GPIO_Init+0x130>)
 8007004:	f003 fa72 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = light_Pin;
 8007008:	2310      	movs	r3, #16
 800700a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800700c:	2301      	movs	r3, #1
 800700e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007010:	2300      	movs	r3, #0
 8007012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007014:	2300      	movs	r3, #0
 8007016:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(light_GPIO_Port, &GPIO_InitStruct);
 8007018:	f107 0314 	add.w	r3, r7, #20
 800701c:	4619      	mov	r1, r3
 800701e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007022:	f003 fa63 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = eq_band_btn_Pin;
 8007026:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800702a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800702c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8007030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007032:	2300      	movs	r3, #0
 8007034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(eq_band_btn_GPIO_Port, &GPIO_InitStruct);
 8007036:	f107 0314 	add.w	r3, r7, #20
 800703a:	4619      	mov	r1, r3
 800703c:	480b      	ldr	r0, [pc, #44]	@ (800706c <MX_GPIO_Init+0x128>)
 800703e:	f003 fa55 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = band3_Pin|band2_Pin|band1_Pin|band0_Pin;
 8007042:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8007046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007048:	2301      	movs	r3, #1
 800704a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800704c:	2300      	movs	r3, #0
 800704e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007050:	2300      	movs	r3, #0
 8007052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007054:	f107 0314 	add.w	r3, r7, #20
 8007058:	4619      	mov	r1, r3
 800705a:	4804      	ldr	r0, [pc, #16]	@ (800706c <MX_GPIO_Init+0x128>)
 800705c:	f003 fa46 	bl	800a4ec <HAL_GPIO_Init>

}
 8007060:	bf00      	nop
 8007062:	3728      	adds	r7, #40	@ 0x28
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40021000 	.word	0x40021000
 800706c:	48000400 	.word	0x48000400
 8007070:	48000800 	.word	0x48000800
 8007074:	48001400 	.word	0x48001400

08007078 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800707c:	4b1b      	ldr	r3, [pc, #108]	@ (80070ec <MX_I2C1_Init+0x74>)
 800707e:	4a1c      	ldr	r2, [pc, #112]	@ (80070f0 <MX_I2C1_Init+0x78>)
 8007080:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8007082:	4b1a      	ldr	r3, [pc, #104]	@ (80070ec <MX_I2C1_Init+0x74>)
 8007084:	4a1b      	ldr	r2, [pc, #108]	@ (80070f4 <MX_I2C1_Init+0x7c>)
 8007086:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007088:	4b18      	ldr	r3, [pc, #96]	@ (80070ec <MX_I2C1_Init+0x74>)
 800708a:	2200      	movs	r2, #0
 800708c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800708e:	4b17      	ldr	r3, [pc, #92]	@ (80070ec <MX_I2C1_Init+0x74>)
 8007090:	2201      	movs	r2, #1
 8007092:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007094:	4b15      	ldr	r3, [pc, #84]	@ (80070ec <MX_I2C1_Init+0x74>)
 8007096:	2200      	movs	r2, #0
 8007098:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800709a:	4b14      	ldr	r3, [pc, #80]	@ (80070ec <MX_I2C1_Init+0x74>)
 800709c:	2200      	movs	r2, #0
 800709e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80070a0:	4b12      	ldr	r3, [pc, #72]	@ (80070ec <MX_I2C1_Init+0x74>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80070a6:	4b11      	ldr	r3, [pc, #68]	@ (80070ec <MX_I2C1_Init+0x74>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80070ac:	4b0f      	ldr	r3, [pc, #60]	@ (80070ec <MX_I2C1_Init+0x74>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80070b2:	480e      	ldr	r0, [pc, #56]	@ (80070ec <MX_I2C1_Init+0x74>)
 80070b4:	f003 fbb4 	bl	800a820 <HAL_I2C_Init>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80070be:	f000 f977 	bl	80073b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80070c2:	2100      	movs	r1, #0
 80070c4:	4809      	ldr	r0, [pc, #36]	@ (80070ec <MX_I2C1_Init+0x74>)
 80070c6:	f004 f937 	bl	800b338 <HAL_I2CEx_ConfigAnalogFilter>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80070d0:	f000 f96e 	bl	80073b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80070d4:	2100      	movs	r1, #0
 80070d6:	4805      	ldr	r0, [pc, #20]	@ (80070ec <MX_I2C1_Init+0x74>)
 80070d8:	f004 f979 	bl	800b3ce <HAL_I2CEx_ConfigDigitalFilter>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80070e2:	f000 f965 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80070e6:	bf00      	nop
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	2000036c 	.word	0x2000036c
 80070f0:	40005400 	.word	0x40005400
 80070f4:	00303d5b 	.word	0x00303d5b

080070f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b09e      	sub	sp, #120	@ 0x78
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007100:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	605a      	str	r2, [r3, #4]
 800710a:	609a      	str	r2, [r3, #8]
 800710c:	60da      	str	r2, [r3, #12]
 800710e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007110:	f107 0314 	add.w	r3, r7, #20
 8007114:	2250      	movs	r2, #80	@ 0x50
 8007116:	2100      	movs	r1, #0
 8007118:	4618      	mov	r0, r3
 800711a:	f011 fc97 	bl	8018a4c <memset>
  if(i2cHandle->Instance==I2C1)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a2d      	ldr	r2, [pc, #180]	@ (80071d8 <HAL_I2C_MspInit+0xe0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d153      	bne.n	80071d0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007128:	2340      	movs	r3, #64	@ 0x40
 800712a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800712c:	2300      	movs	r3, #0
 800712e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007130:	f107 0314 	add.w	r3, r7, #20
 8007134:	4618      	mov	r0, r3
 8007136:	f006 fcab 	bl	800da90 <HAL_RCCEx_PeriphCLKConfig>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8007140:	f000 f936 	bl	80073b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007144:	4b25      	ldr	r3, [pc, #148]	@ (80071dc <HAL_I2C_MspInit+0xe4>)
 8007146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007148:	4a24      	ldr	r2, [pc, #144]	@ (80071dc <HAL_I2C_MspInit+0xe4>)
 800714a:	f043 0301 	orr.w	r3, r3, #1
 800714e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007150:	4b22      	ldr	r3, [pc, #136]	@ (80071dc <HAL_I2C_MspInit+0xe4>)
 8007152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800715c:	4b1f      	ldr	r3, [pc, #124]	@ (80071dc <HAL_I2C_MspInit+0xe4>)
 800715e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007160:	4a1e      	ldr	r2, [pc, #120]	@ (80071dc <HAL_I2C_MspInit+0xe4>)
 8007162:	f043 0302 	orr.w	r3, r3, #2
 8007166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007168:	4b1c      	ldr	r3, [pc, #112]	@ (80071dc <HAL_I2C_MspInit+0xe4>)
 800716a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007174:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007178:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800717a:	2312      	movs	r3, #18
 800717c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800717e:	2300      	movs	r3, #0
 8007180:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007182:	2300      	movs	r3, #0
 8007184:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007186:	2304      	movs	r3, #4
 8007188:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800718a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800718e:	4619      	mov	r1, r3
 8007190:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007194:	f003 f9aa 	bl	800a4ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007198:	2380      	movs	r3, #128	@ 0x80
 800719a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800719c:	2312      	movs	r3, #18
 800719e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a0:	2300      	movs	r3, #0
 80071a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071a4:	2300      	movs	r3, #0
 80071a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80071a8:	2304      	movs	r3, #4
 80071aa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80071b0:	4619      	mov	r1, r3
 80071b2:	480b      	ldr	r0, [pc, #44]	@ (80071e0 <HAL_I2C_MspInit+0xe8>)
 80071b4:	f003 f99a 	bl	800a4ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80071b8:	4b08      	ldr	r3, [pc, #32]	@ (80071dc <HAL_I2C_MspInit+0xe4>)
 80071ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071bc:	4a07      	ldr	r2, [pc, #28]	@ (80071dc <HAL_I2C_MspInit+0xe4>)
 80071be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80071c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80071c4:	4b05      	ldr	r3, [pc, #20]	@ (80071dc <HAL_I2C_MspInit+0xe4>)
 80071c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071cc:	60bb      	str	r3, [r7, #8]
 80071ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80071d0:	bf00      	nop
 80071d2:	3778      	adds	r7, #120	@ 0x78
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	40005400 	.word	0x40005400
 80071dc:	40021000 	.word	0x40021000
 80071e0:	48000400 	.word	0x48000400

080071e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b092      	sub	sp, #72	@ 0x48
 80071e8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80071ea:	f001 fa52 	bl	8008692 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80071ee:	f000 f89d 	bl	800732c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80071f2:	f7ff fea7 	bl	8006f44 <MX_GPIO_Init>
	MX_DMA_Init();
 80071f6:	f7ff fa0b 	bl	8006610 <MX_DMA_Init>
	MX_ADC1_Init();
 80071fa:	f7fe fffb 	bl	80061f4 <MX_ADC1_Init>
	MX_SAI1_Init();
 80071fe:	f000 f923 	bl	8007448 <MX_SAI1_Init>
	MX_UCPD1_Init();
 8007202:	f001 f8e7 	bl	80083d4 <MX_UCPD1_Init>
	MX_ADC2_Init();
 8007206:	f7ff f86d 	bl	80062e4 <MX_ADC2_Init>
	MX_I2C1_Init();
 800720a:	f7ff ff35 	bl	8007078 <MX_I2C1_Init>
	MX_TIM2_Init();
 800720e:	f000 fd67 	bl	8007ce0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8007212:	f000 fdc9 	bl	8007da8 <MX_TIM3_Init>
	MX_USART3_UART_Init();
 8007216:	f001 f96d 	bl	80084f4 <MX_USART3_UART_Init>
	MX_USB_Device_Init();
 800721a:	f010 fe7d 	bl	8017f18 <MX_USB_Device_Init>
	param_sgtl_t param_son;

	int freq;
	float gain;

	uint16_t sgtl_address = 0x14;
 800721e:	2314      	movs	r3, #20
 8007220:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	uint16_t data;

	h_sgtl5000_t h_sgtl5000;
	h_sgtl5000.hi2c = &hi2c1;
 8007224:	4b3c      	ldr	r3, [pc, #240]	@ (8007318 <main+0x134>)
 8007226:	607b      	str	r3, [r7, #4]
	h_sgtl5000.dev_address = sgtl_address;
 8007228:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800722c:	813b      	strh	r3, [r7, #8]

	sgtl5000_init(&h_sgtl5000);
 800722e:	1d3b      	adds	r3, r7, #4
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fc01 	bl	8007a38 <sgtl5000_init>

	HAL_StatusTypeDef ret;
	ret = sgtl5000_i2c_read_register(&h_sgtl5000, SGTL5000_CHIP_ID, &data);
 8007236:	f107 020e 	add.w	r2, r7, #14
 800723a:	1d3b      	adds	r3, r7, #4
 800723c:	2100      	movs	r1, #0
 800723e:	4618      	mov	r0, r3
 8007240:	f000 fb56 	bl	80078f0 <sgtl5000_i2c_read_register>
 8007244:	4603      	mov	r3, r0
 8007246:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45


	if (ret != HAL_OK)
 800724a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <main+0x72>
	{
		//printf("HAL_I2C_Mem_Read error\r\n");
		Error_Handler();
 8007252:	f000 f8ad 	bl	80073b0 <Error_Handler>
	}

	init_valeur_default(&param_son);
 8007256:	f107 0318 	add.w	r3, r7, #24
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff fc3e 	bl	8006adc <init_valeur_default>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&value_pot,100);
 8007260:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8007264:	2264      	movs	r2, #100	@ 0x64
 8007266:	4619      	mov	r1, r3
 8007268:	482c      	ldr	r0, [pc, #176]	@ (800731c <main+0x138>)
 800726a:	f001 fe71 	bl	8008f50 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Init(&htim3);
 800726e:	482c      	ldr	r0, [pc, #176]	@ (8007320 <main+0x13c>)
 8007270:	f007 fe98 	bl	800efa4 <HAL_TIM_PWM_Init>

	/* USER CODE END 2 */

	/* USBPD initialisation ---------------------------------*/
	MX_USBPD_Init();
 8007274:	f010 faa3 	bl	80177be <MX_USBPD_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		USBPD_DPM_Run();
 8007278:	f010 fb74 	bl	8017964 <USBPD_DPM_Run>

		/* USER CODE BEGIN 3 */
		modif_freq(&param_son,Encoder_AB[0],Encoder_AB[1]);
 800727c:	4b29      	ldr	r3, [pc, #164]	@ (8007324 <main+0x140>)
 800727e:	6819      	ldr	r1, [r3, #0]
 8007280:	4b28      	ldr	r3, [pc, #160]	@ (8007324 <main+0x140>)
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	f107 0318 	add.w	r3, r7, #24
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff fc57 	bl	8006b3c <modif_freq>
		modif_gain(&param_son,Encoder_AB[2],Encoder_AB[3]);
 800728e:	4b25      	ldr	r3, [pc, #148]	@ (8007324 <main+0x140>)
 8007290:	6899      	ldr	r1, [r3, #8]
 8007292:	4b24      	ldr	r3, [pc, #144]	@ (8007324 <main+0x140>)
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	f107 0318 	add.w	r3, r7, #24
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff fd18 	bl	8006cd0 <modif_gain>

		volume(&param_son,&h_sgtl5000,value_pot);
 80072a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80072a4:	1d39      	adds	r1, r7, #4
 80072a6:	f107 0318 	add.w	r3, r7, #24
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff fb5e 	bl	800696c <volume>

		eq_band(&param_son,&freq,&gain);
 80072b0:	f107 0210 	add.w	r2, r7, #16
 80072b4:	f107 0114 	add.w	r1, r7, #20
 80072b8:	f107 0318 	add.w	r3, r7, #24
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 fa65 	bl	800778c <eq_band>

		colormotion(&htim3,freq,gain);
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80072c8:	eeb0 0a67 	vmov.f32	s0, s15
 80072cc:	4619      	mov	r1, r3
 80072ce:	4814      	ldr	r0, [pc, #80]	@ (8007320 <main+0x13c>)
 80072d0:	f000 fad0 	bl	8007874 <colormotion>

		if(band_change == 1){
 80072d4:	4b14      	ldr	r3, [pc, #80]	@ (8007328 <main+0x144>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d112      	bne.n	8007302 <main+0x11e>
			ChangementEtat(&param_son,&h_sgtl5000);
 80072dc:	1d3a      	adds	r2, r7, #4
 80072de:	f107 0318 	add.w	r3, r7, #24
 80072e2:	4611      	mov	r1, r2
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7ff fdfc 	bl	8006ee2 <ChangementEtat>
			band_change = 0;
 80072ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007328 <main+0x144>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	601a      	str	r2, [r3, #0]
			(param_son.bandmod==3)?(param_son.bandmod=0):(param_son.bandmod++);
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d102      	bne.n	80072fc <main+0x118>
 80072f6:	2300      	movs	r3, #0
 80072f8:	61fb      	str	r3, [r7, #28]
 80072fa:	e002      	b.n	8007302 <main+0x11e>
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	3301      	adds	r3, #1
 8007300:	61fb      	str	r3, [r7, #28]
		}

		set_filter(&h_sgtl5000,freq,gain);
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	edd7 7a04 	vldr	s15, [r7, #16]
 8007308:	1d3b      	adds	r3, r7, #4
 800730a:	eeb0 0a67 	vmov.f32	s0, s15
 800730e:	4611      	mov	r1, r2
 8007310:	4618      	mov	r0, r3
 8007312:	f7ff fb5d 	bl	80069d0 <set_filter>
		USBPD_DPM_Run();
 8007316:	e7af      	b.n	8007278 <main+0x94>
 8007318:	2000036c 	.word	0x2000036c
 800731c:	20000290 	.word	0x20000290
 8007320:	20000618 	.word	0x20000618
 8007324:	200003c0 	.word	0x200003c0
 8007328:	200003d0 	.word	0x200003d0

0800732c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b094      	sub	sp, #80	@ 0x50
 8007330:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007332:	f107 0318 	add.w	r3, r7, #24
 8007336:	2238      	movs	r2, #56	@ 0x38
 8007338:	2100      	movs	r1, #0
 800733a:	4618      	mov	r0, r3
 800733c:	f011 fb86 	bl	8018a4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007340:	1d3b      	adds	r3, r7, #4
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
 8007346:	605a      	str	r2, [r3, #4]
 8007348:	609a      	str	r2, [r3, #8]
 800734a:	60da      	str	r2, [r3, #12]
 800734c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800734e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007352:	f005 fdbb 	bl	800cecc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007356:	2322      	movs	r3, #34	@ 0x22
 8007358:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800735a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800735e:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007360:	2340      	movs	r3, #64	@ 0x40
 8007362:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007364:	2301      	movs	r3, #1
 8007366:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007368:	2300      	movs	r3, #0
 800736a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800736c:	f107 0318 	add.w	r3, r7, #24
 8007370:	4618      	mov	r0, r3
 8007372:	f005 fe5f 	bl	800d034 <HAL_RCC_OscConfig>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <SystemClock_Config+0x54>
	{
		Error_Handler();
 800737c:	f000 f818 	bl	80073b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007380:	230f      	movs	r3, #15
 8007382:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007384:	2301      	movs	r3, #1
 8007386:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800738c:	2300      	movs	r3, #0
 800738e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007390:	2300      	movs	r3, #0
 8007392:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007394:	1d3b      	adds	r3, r7, #4
 8007396:	2100      	movs	r1, #0
 8007398:	4618      	mov	r0, r3
 800739a:	f006 f95d 	bl	800d658 <HAL_RCC_ClockConfig>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <SystemClock_Config+0x7c>
	{
		Error_Handler();
 80073a4:	f000 f804 	bl	80073b0 <Error_Handler>
	}
}
 80073a8:	bf00      	nop
 80073aa:	3750      	adds	r7, #80	@ 0x50
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80073b4:	b672      	cpsid	i
}
 80073b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_WritePin(band0_GPIO_Port,band0_Pin,0);
 80073b8:	2200      	movs	r2, #0
 80073ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80073be:	4821      	ldr	r0, [pc, #132]	@ (8007444 <Error_Handler+0x94>)
 80073c0:	f003 fa16 	bl	800a7f0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80073c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80073c8:	f001 f9d4 	bl	8008774 <HAL_Delay>
		HAL_GPIO_WritePin(band1_GPIO_Port,band1_Pin,0);
 80073cc:	2200      	movs	r2, #0
 80073ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80073d2:	481c      	ldr	r0, [pc, #112]	@ (8007444 <Error_Handler+0x94>)
 80073d4:	f003 fa0c 	bl	800a7f0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80073d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80073dc:	f001 f9ca 	bl	8008774 <HAL_Delay>
		HAL_GPIO_WritePin(band2_GPIO_Port,band2_Pin,0);
 80073e0:	2200      	movs	r2, #0
 80073e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80073e6:	4817      	ldr	r0, [pc, #92]	@ (8007444 <Error_Handler+0x94>)
 80073e8:	f003 fa02 	bl	800a7f0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80073ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80073f0:	f001 f9c0 	bl	8008774 <HAL_Delay>
		HAL_GPIO_WritePin(band3_GPIO_Port,band3_Pin,0);
 80073f4:	2200      	movs	r2, #0
 80073f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80073fa:	4812      	ldr	r0, [pc, #72]	@ (8007444 <Error_Handler+0x94>)
 80073fc:	f003 f9f8 	bl	800a7f0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8007400:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007404:	f001 f9b6 	bl	8008774 <HAL_Delay>
		HAL_GPIO_WritePin(band0_GPIO_Port,band0_Pin,1);
 8007408:	2201      	movs	r2, #1
 800740a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800740e:	480d      	ldr	r0, [pc, #52]	@ (8007444 <Error_Handler+0x94>)
 8007410:	f003 f9ee 	bl	800a7f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(band1_GPIO_Port,band1_Pin,1);
 8007414:	2201      	movs	r2, #1
 8007416:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800741a:	480a      	ldr	r0, [pc, #40]	@ (8007444 <Error_Handler+0x94>)
 800741c:	f003 f9e8 	bl	800a7f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(band2_GPIO_Port,band2_Pin,1);
 8007420:	2201      	movs	r2, #1
 8007422:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007426:	4807      	ldr	r0, [pc, #28]	@ (8007444 <Error_Handler+0x94>)
 8007428:	f003 f9e2 	bl	800a7f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(band3_GPIO_Port,band3_Pin,1);
 800742c:	2201      	movs	r2, #1
 800742e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007432:	4804      	ldr	r0, [pc, #16]	@ (8007444 <Error_Handler+0x94>)
 8007434:	f003 f9dc 	bl	800a7f0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8007438:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800743c:	f001 f99a 	bl	8008774 <HAL_Delay>
		HAL_GPIO_WritePin(band0_GPIO_Port,band0_Pin,0);
 8007440:	bf00      	nop
 8007442:	e7b9      	b.n	80073b8 <Error_Handler+0x8>
 8007444:	48000400 	.word	0x48000400

08007448 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockB1.Instance = SAI1_Block_B;
 800744c:	4b45      	ldr	r3, [pc, #276]	@ (8007564 <MX_SAI1_Init+0x11c>)
 800744e:	4a46      	ldr	r2, [pc, #280]	@ (8007568 <MX_SAI1_Init+0x120>)
 8007450:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8007452:	4b44      	ldr	r3, [pc, #272]	@ (8007564 <MX_SAI1_Init+0x11c>)
 8007454:	2200      	movs	r2, #0
 8007456:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8007458:	4b42      	ldr	r3, [pc, #264]	@ (8007564 <MX_SAI1_Init+0x11c>)
 800745a:	2203      	movs	r2, #3
 800745c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800745e:	4b41      	ldr	r3, [pc, #260]	@ (8007564 <MX_SAI1_Init+0x11c>)
 8007460:	2240      	movs	r2, #64	@ 0x40
 8007462:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8007464:	4b3f      	ldr	r3, [pc, #252]	@ (8007564 <MX_SAI1_Init+0x11c>)
 8007466:	2200      	movs	r2, #0
 8007468:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800746a:	4b3e      	ldr	r3, [pc, #248]	@ (8007564 <MX_SAI1_Init+0x11c>)
 800746c:	2200      	movs	r2, #0
 800746e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8007470:	4b3c      	ldr	r3, [pc, #240]	@ (8007564 <MX_SAI1_Init+0x11c>)
 8007472:	2201      	movs	r2, #1
 8007474:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8007476:	4b3b      	ldr	r3, [pc, #236]	@ (8007564 <MX_SAI1_Init+0x11c>)
 8007478:	2200      	movs	r2, #0
 800747a:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800747c:	4b39      	ldr	r3, [pc, #228]	@ (8007564 <MX_SAI1_Init+0x11c>)
 800747e:	2200      	movs	r2, #0
 8007480:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8007482:	4b38      	ldr	r3, [pc, #224]	@ (8007564 <MX_SAI1_Init+0x11c>)
 8007484:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007488:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800748a:	4b36      	ldr	r3, [pc, #216]	@ (8007564 <MX_SAI1_Init+0x11c>)
 800748c:	2200      	movs	r2, #0
 800748e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8007490:	4b34      	ldr	r3, [pc, #208]	@ (8007564 <MX_SAI1_Init+0x11c>)
 8007492:	2200      	movs	r2, #0
 8007494:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8007496:	4b33      	ldr	r3, [pc, #204]	@ (8007564 <MX_SAI1_Init+0x11c>)
 8007498:	2200      	movs	r2, #0
 800749a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800749c:	4b31      	ldr	r3, [pc, #196]	@ (8007564 <MX_SAI1_Init+0x11c>)
 800749e:	2200      	movs	r2, #0
 80074a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 80074a2:	4b30      	ldr	r3, [pc, #192]	@ (8007564 <MX_SAI1_Init+0x11c>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 80074aa:	4b2e      	ldr	r3, [pc, #184]	@ (8007564 <MX_SAI1_Init+0x11c>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80074b0:	4b2c      	ldr	r3, [pc, #176]	@ (8007564 <MX_SAI1_Init+0x11c>)
 80074b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80074b8:	4b2a      	ldr	r3, [pc, #168]	@ (8007564 <MX_SAI1_Init+0x11c>)
 80074ba:	2208      	movs	r2, #8
 80074bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80074be:	4b29      	ldr	r3, [pc, #164]	@ (8007564 <MX_SAI1_Init+0x11c>)
 80074c0:	2201      	movs	r2, #1
 80074c2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80074c4:	4b27      	ldr	r3, [pc, #156]	@ (8007564 <MX_SAI1_Init+0x11c>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80074ca:	4b26      	ldr	r3, [pc, #152]	@ (8007564 <MX_SAI1_Init+0x11c>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80074d0:	4b24      	ldr	r3, [pc, #144]	@ (8007564 <MX_SAI1_Init+0x11c>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80074d6:	4b23      	ldr	r3, [pc, #140]	@ (8007564 <MX_SAI1_Init+0x11c>)
 80074d8:	2200      	movs	r2, #0
 80074da:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80074dc:	4b21      	ldr	r3, [pc, #132]	@ (8007564 <MX_SAI1_Init+0x11c>)
 80074de:	2200      	movs	r2, #0
 80074e0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80074e2:	4b20      	ldr	r3, [pc, #128]	@ (8007564 <MX_SAI1_Init+0x11c>)
 80074e4:	2201      	movs	r2, #1
 80074e6:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80074e8:	4b1e      	ldr	r3, [pc, #120]	@ (8007564 <MX_SAI1_Init+0x11c>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80074ee:	481d      	ldr	r0, [pc, #116]	@ (8007564 <MX_SAI1_Init+0x11c>)
 80074f0:	f007 fa4e 	bl	800e990 <HAL_SAI_Init>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <MX_SAI1_Init+0xb6>
  {
    Error_Handler();
 80074fa:	f7ff ff59 	bl	80073b0 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 80074fe:	4b1b      	ldr	r3, [pc, #108]	@ (800756c <MX_SAI1_Init+0x124>)
 8007500:	4a1b      	ldr	r2, [pc, #108]	@ (8007570 <MX_SAI1_Init+0x128>)
 8007502:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8007504:	4b19      	ldr	r3, [pc, #100]	@ (800756c <MX_SAI1_Init+0x124>)
 8007506:	2200      	movs	r2, #0
 8007508:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800750a:	4b18      	ldr	r3, [pc, #96]	@ (800756c <MX_SAI1_Init+0x124>)
 800750c:	2200      	movs	r2, #0
 800750e:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8007510:	4b16      	ldr	r3, [pc, #88]	@ (800756c <MX_SAI1_Init+0x124>)
 8007512:	2200      	movs	r2, #0
 8007514:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8007516:	4b15      	ldr	r3, [pc, #84]	@ (800756c <MX_SAI1_Init+0x124>)
 8007518:	2200      	movs	r2, #0
 800751a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800751c:	4b13      	ldr	r3, [pc, #76]	@ (800756c <MX_SAI1_Init+0x124>)
 800751e:	2200      	movs	r2, #0
 8007520:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8007522:	4b12      	ldr	r3, [pc, #72]	@ (800756c <MX_SAI1_Init+0x124>)
 8007524:	2200      	movs	r2, #0
 8007526:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8007528:	4b10      	ldr	r3, [pc, #64]	@ (800756c <MX_SAI1_Init+0x124>)
 800752a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800752e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8007530:	4b0e      	ldr	r3, [pc, #56]	@ (800756c <MX_SAI1_Init+0x124>)
 8007532:	2200      	movs	r2, #0
 8007534:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8007536:	4b0d      	ldr	r3, [pc, #52]	@ (800756c <MX_SAI1_Init+0x124>)
 8007538:	2200      	movs	r2, #0
 800753a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800753c:	4b0b      	ldr	r3, [pc, #44]	@ (800756c <MX_SAI1_Init+0x124>)
 800753e:	2200      	movs	r2, #0
 8007540:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8007542:	4b0a      	ldr	r3, [pc, #40]	@ (800756c <MX_SAI1_Init+0x124>)
 8007544:	2200      	movs	r2, #0
 8007546:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8007548:	2302      	movs	r3, #2
 800754a:	2200      	movs	r2, #0
 800754c:	2100      	movs	r1, #0
 800754e:	4807      	ldr	r0, [pc, #28]	@ (800756c <MX_SAI1_Init+0x124>)
 8007550:	f007 f9ec 	bl	800e92c <HAL_SAI_InitProtocol>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <MX_SAI1_Init+0x116>
  {
    Error_Handler();
 800755a:	f7ff ff29 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800755e:	bf00      	nop
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	200003d4 	.word	0x200003d4
 8007568:	40015424 	.word	0x40015424
 800756c:	2000046c 	.word	0x2000046c
 8007570:	40015404 	.word	0x40015404

08007574 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b09e      	sub	sp, #120	@ 0x78
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800757c:	f107 0314 	add.w	r3, r7, #20
 8007580:	2250      	movs	r2, #80	@ 0x50
 8007582:	2100      	movs	r1, #0
 8007584:	4618      	mov	r0, r3
 8007586:	f011 fa61 	bl	8018a4c <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a76      	ldr	r2, [pc, #472]	@ (8007768 <HAL_SAI_MspInit+0x1f4>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d179      	bne.n	8007688 <HAL_SAI_MspInit+0x114>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8007594:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007598:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_SYSCLK;
 800759a:	2300      	movs	r3, #0
 800759c:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800759e:	f107 0314 	add.w	r3, r7, #20
 80075a2:	4618      	mov	r0, r3
 80075a4:	f006 fa74 	bl	800da90 <HAL_RCCEx_PeriphCLKConfig>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <HAL_SAI_MspInit+0x3e>
    {
      Error_Handler();
 80075ae:	f7ff feff 	bl	80073b0 <Error_Handler>
    }

    if (SAI1_client == 0)
 80075b2:	4b6e      	ldr	r3, [pc, #440]	@ (800776c <HAL_SAI_MspInit+0x1f8>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10b      	bne.n	80075d2 <HAL_SAI_MspInit+0x5e>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80075ba:	4b6d      	ldr	r3, [pc, #436]	@ (8007770 <HAL_SAI_MspInit+0x1fc>)
 80075bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075be:	4a6c      	ldr	r2, [pc, #432]	@ (8007770 <HAL_SAI_MspInit+0x1fc>)
 80075c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80075c6:	4b6a      	ldr	r3, [pc, #424]	@ (8007770 <HAL_SAI_MspInit+0x1fc>)
 80075c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075ce:	613b      	str	r3, [r7, #16]
 80075d0:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80075d2:	4b66      	ldr	r3, [pc, #408]	@ (800776c <HAL_SAI_MspInit+0x1f8>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3301      	adds	r3, #1
 80075d8:	4a64      	ldr	r2, [pc, #400]	@ (800776c <HAL_SAI_MspInit+0x1f8>)
 80075da:	6013      	str	r3, [r2, #0]
    PA3     ------> SAI1_MCLK_A
    PA8     ------> SAI1_SCK_A
    PA9     ------> SAI1_FS_A
    PA10     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80075dc:	2308      	movs	r3, #8
 80075de:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075e0:	2302      	movs	r3, #2
 80075e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075e4:	2300      	movs	r3, #0
 80075e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075e8:	2300      	movs	r3, #0
 80075ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80075ec:	230d      	movs	r3, #13
 80075ee:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80075f4:	4619      	mov	r1, r3
 80075f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80075fa:	f002 ff77 	bl	800a4ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80075fe:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8007602:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007604:	2302      	movs	r3, #2
 8007606:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007608:	2300      	movs	r3, #0
 800760a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800760c:	2300      	movs	r3, #0
 800760e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_SAI1;
 8007610:	230e      	movs	r3, #14
 8007612:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007614:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007618:	4619      	mov	r1, r3
 800761a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800761e:	f002 ff65 	bl	800a4ec <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Channel3;
 8007622:	4b54      	ldr	r3, [pc, #336]	@ (8007774 <HAL_SAI_MspInit+0x200>)
 8007624:	4a54      	ldr	r2, [pc, #336]	@ (8007778 <HAL_SAI_MspInit+0x204>)
 8007626:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8007628:	4b52      	ldr	r3, [pc, #328]	@ (8007774 <HAL_SAI_MspInit+0x200>)
 800762a:	226c      	movs	r2, #108	@ 0x6c
 800762c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800762e:	4b51      	ldr	r3, [pc, #324]	@ (8007774 <HAL_SAI_MspInit+0x200>)
 8007630:	2210      	movs	r2, #16
 8007632:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8007634:	4b4f      	ldr	r3, [pc, #316]	@ (8007774 <HAL_SAI_MspInit+0x200>)
 8007636:	2200      	movs	r2, #0
 8007638:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800763a:	4b4e      	ldr	r3, [pc, #312]	@ (8007774 <HAL_SAI_MspInit+0x200>)
 800763c:	2280      	movs	r2, #128	@ 0x80
 800763e:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007640:	4b4c      	ldr	r3, [pc, #304]	@ (8007774 <HAL_SAI_MspInit+0x200>)
 8007642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007646:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007648:	4b4a      	ldr	r3, [pc, #296]	@ (8007774 <HAL_SAI_MspInit+0x200>)
 800764a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800764e:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 8007650:	4b48      	ldr	r3, [pc, #288]	@ (8007774 <HAL_SAI_MspInit+0x200>)
 8007652:	2200      	movs	r2, #0
 8007654:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8007656:	4b47      	ldr	r3, [pc, #284]	@ (8007774 <HAL_SAI_MspInit+0x200>)
 8007658:	2200      	movs	r2, #0
 800765a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800765c:	4845      	ldr	r0, [pc, #276]	@ (8007774 <HAL_SAI_MspInit+0x200>)
 800765e:	f002 fcd3 	bl	800a008 <HAL_DMA_Init>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <HAL_SAI_MspInit+0xf8>
    {
      Error_Handler();
 8007668:	f7ff fea2 	bl	80073b0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a41      	ldr	r2, [pc, #260]	@ (8007774 <HAL_SAI_MspInit+0x200>)
 8007670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8007674:	4a3f      	ldr	r2, [pc, #252]	@ (8007774 <HAL_SAI_MspInit+0x200>)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a3d      	ldr	r2, [pc, #244]	@ (8007774 <HAL_SAI_MspInit+0x200>)
 800767e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8007682:	4a3c      	ldr	r2, [pc, #240]	@ (8007774 <HAL_SAI_MspInit+0x200>)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a3b      	ldr	r2, [pc, #236]	@ (800777c <HAL_SAI_MspInit+0x208>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d166      	bne.n	8007760 <HAL_SAI_MspInit+0x1ec>
    {
      /* SAI1 clock enable */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8007692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007696:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_SYSCLK;
 8007698:	2300      	movs	r3, #0
 800769a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800769c:	f107 0314 	add.w	r3, r7, #20
 80076a0:	4618      	mov	r0, r3
 80076a2:	f006 f9f5 	bl	800da90 <HAL_RCCEx_PeriphCLKConfig>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <HAL_SAI_MspInit+0x13c>
    {
      Error_Handler();
 80076ac:	f7ff fe80 	bl	80073b0 <Error_Handler>
    }

      if (SAI1_client == 0)
 80076b0:	4b2e      	ldr	r3, [pc, #184]	@ (800776c <HAL_SAI_MspInit+0x1f8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10b      	bne.n	80076d0 <HAL_SAI_MspInit+0x15c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80076b8:	4b2d      	ldr	r3, [pc, #180]	@ (8007770 <HAL_SAI_MspInit+0x1fc>)
 80076ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076bc:	4a2c      	ldr	r2, [pc, #176]	@ (8007770 <HAL_SAI_MspInit+0x1fc>)
 80076be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80076c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80076c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007770 <HAL_SAI_MspInit+0x1fc>)
 80076c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076cc:	60fb      	str	r3, [r7, #12]
 80076ce:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80076d0:	4b26      	ldr	r3, [pc, #152]	@ (800776c <HAL_SAI_MspInit+0x1f8>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3301      	adds	r3, #1
 80076d6:	4a25      	ldr	r2, [pc, #148]	@ (800776c <HAL_SAI_MspInit+0x1f8>)
 80076d8:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PB5     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80076da:	2320      	movs	r3, #32
 80076dc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076de:	2302      	movs	r3, #2
 80076e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076e6:	2300      	movs	r3, #0
 80076e8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_SAI1;
 80076ea:	230c      	movs	r3, #12
 80076ec:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076ee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80076f2:	4619      	mov	r1, r3
 80076f4:	4822      	ldr	r0, [pc, #136]	@ (8007780 <HAL_SAI_MspInit+0x20c>)
 80076f6:	f002 fef9 	bl	800a4ec <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Channel1;
 80076fa:	4b22      	ldr	r3, [pc, #136]	@ (8007784 <HAL_SAI_MspInit+0x210>)
 80076fc:	4a22      	ldr	r2, [pc, #136]	@ (8007788 <HAL_SAI_MspInit+0x214>)
 80076fe:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8007700:	4b20      	ldr	r3, [pc, #128]	@ (8007784 <HAL_SAI_MspInit+0x210>)
 8007702:	226d      	movs	r2, #109	@ 0x6d
 8007704:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007706:	4b1f      	ldr	r3, [pc, #124]	@ (8007784 <HAL_SAI_MspInit+0x210>)
 8007708:	2200      	movs	r2, #0
 800770a:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800770c:	4b1d      	ldr	r3, [pc, #116]	@ (8007784 <HAL_SAI_MspInit+0x210>)
 800770e:	2200      	movs	r2, #0
 8007710:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8007712:	4b1c      	ldr	r3, [pc, #112]	@ (8007784 <HAL_SAI_MspInit+0x210>)
 8007714:	2280      	movs	r2, #128	@ 0x80
 8007716:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007718:	4b1a      	ldr	r3, [pc, #104]	@ (8007784 <HAL_SAI_MspInit+0x210>)
 800771a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800771e:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007720:	4b18      	ldr	r3, [pc, #96]	@ (8007784 <HAL_SAI_MspInit+0x210>)
 8007722:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007726:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_NORMAL;
 8007728:	4b16      	ldr	r3, [pc, #88]	@ (8007784 <HAL_SAI_MspInit+0x210>)
 800772a:	2200      	movs	r2, #0
 800772c:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 800772e:	4b15      	ldr	r3, [pc, #84]	@ (8007784 <HAL_SAI_MspInit+0x210>)
 8007730:	2200      	movs	r2, #0
 8007732:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8007734:	4813      	ldr	r0, [pc, #76]	@ (8007784 <HAL_SAI_MspInit+0x210>)
 8007736:	f002 fc67 	bl	800a008 <HAL_DMA_Init>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <HAL_SAI_MspInit+0x1d0>
    {
      Error_Handler();
 8007740:	f7ff fe36 	bl	80073b0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a0f      	ldr	r2, [pc, #60]	@ (8007784 <HAL_SAI_MspInit+0x210>)
 8007748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800774c:	4a0d      	ldr	r2, [pc, #52]	@ (8007784 <HAL_SAI_MspInit+0x210>)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a0b      	ldr	r2, [pc, #44]	@ (8007784 <HAL_SAI_MspInit+0x210>)
 8007756:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800775a:	4a0a      	ldr	r2, [pc, #40]	@ (8007784 <HAL_SAI_MspInit+0x210>)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8007760:	bf00      	nop
 8007762:	3778      	adds	r7, #120	@ 0x78
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	40015404 	.word	0x40015404
 800776c:	200005c4 	.word	0x200005c4
 8007770:	40021000 	.word	0x40021000
 8007774:	20000504 	.word	0x20000504
 8007778:	40020030 	.word	0x40020030
 800777c:	40015424 	.word	0x40015424
 8007780:	48000400 	.word	0x48000400
 8007784:	20000564 	.word	0x20000564
 8007788:	40020408 	.word	0x40020408

0800778c <eq_band>:
 */
#include "main.h"
#include "secboard.h"
#include "tim.h"

void eq_band(param_sgtl_t* param_son, int* freq, float* gain){
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(band0_GPIO_Port,band0_Pin,1);
 8007798:	2201      	movs	r2, #1
 800779a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800779e:	4834      	ldr	r0, [pc, #208]	@ (8007870 <eq_band+0xe4>)
 80077a0:	f003 f826 	bl	800a7f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(band1_GPIO_Port,band1_Pin,1);
 80077a4:	2201      	movs	r2, #1
 80077a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80077aa:	4831      	ldr	r0, [pc, #196]	@ (8007870 <eq_band+0xe4>)
 80077ac:	f003 f820 	bl	800a7f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(band2_GPIO_Port,band2_Pin,1);
 80077b0:	2201      	movs	r2, #1
 80077b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80077b6:	482e      	ldr	r0, [pc, #184]	@ (8007870 <eq_band+0xe4>)
 80077b8:	f003 f81a 	bl	800a7f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(band3_GPIO_Port,band3_Pin,1);
 80077bc:	2201      	movs	r2, #1
 80077be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80077c2:	482b      	ldr	r0, [pc, #172]	@ (8007870 <eq_band+0xe4>)
 80077c4:	f003 f814 	bl	800a7f0 <HAL_GPIO_WritePin>
	switch(param_son->bandmod){
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	2b03      	cmp	r3, #3
 80077ce:	d847      	bhi.n	8007860 <eq_band+0xd4>
 80077d0:	a201      	add	r2, pc, #4	@ (adr r2, 80077d8 <eq_band+0x4c>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	080077e9 	.word	0x080077e9
 80077dc:	08007807 	.word	0x08007807
 80077e0:	08007825 	.word	0x08007825
 80077e4:	08007843 	.word	0x08007843
	case 0 :
		HAL_GPIO_WritePin(band0_GPIO_Port,band0_Pin,0);
 80077e8:	2200      	movs	r2, #0
 80077ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80077ee:	4820      	ldr	r0, [pc, #128]	@ (8007870 <eq_band+0xe4>)
 80077f0:	f002 fffe 	bl	800a7f0 <HAL_GPIO_WritePin>
		*freq = param_son->band0_freq ;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	601a      	str	r2, [r3, #0]
		*gain = param_son->band0_gain;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	601a      	str	r2, [r3, #0]
		break;
 8007804:	e02f      	b.n	8007866 <eq_band+0xda>
	case 1 :
		HAL_GPIO_WritePin(band1_GPIO_Port,band1_Pin,0);
 8007806:	2200      	movs	r2, #0
 8007808:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800780c:	4818      	ldr	r0, [pc, #96]	@ (8007870 <eq_band+0xe4>)
 800780e:	f002 ffef 	bl	800a7f0 <HAL_GPIO_WritePin>
		*freq = param_son->band1_freq ;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	691a      	ldr	r2, [r3, #16]
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	601a      	str	r2, [r3, #0]
		*gain = param_son->band1_gain;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	695a      	ldr	r2, [r3, #20]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	601a      	str	r2, [r3, #0]
		break;
 8007822:	e020      	b.n	8007866 <eq_band+0xda>

	case 2:
		HAL_GPIO_WritePin(band2_GPIO_Port,band2_Pin,0);
 8007824:	2200      	movs	r2, #0
 8007826:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800782a:	4811      	ldr	r0, [pc, #68]	@ (8007870 <eq_band+0xe4>)
 800782c:	f002 ffe0 	bl	800a7f0 <HAL_GPIO_WritePin>
		*freq = param_son->band2_freq ;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	699a      	ldr	r2, [r3, #24]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	601a      	str	r2, [r3, #0]
		*gain = param_son->band2_gain;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	69da      	ldr	r2, [r3, #28]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	601a      	str	r2, [r3, #0]
		break;
 8007840:	e011      	b.n	8007866 <eq_band+0xda>

	case 3:
		HAL_GPIO_WritePin(band3_GPIO_Port,band3_Pin,0);
 8007842:	2200      	movs	r2, #0
 8007844:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007848:	4809      	ldr	r0, [pc, #36]	@ (8007870 <eq_band+0xe4>)
 800784a:	f002 ffd1 	bl	800a7f0 <HAL_GPIO_WritePin>
		*freq = param_son->band3_freq ;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6a1a      	ldr	r2, [r3, #32]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	601a      	str	r2, [r3, #0]
		*gain = param_son->band3_gain;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	601a      	str	r2, [r3, #0]
		break;
 800785e:	e002      	b.n	8007866 <eq_band+0xda>

	default :
		Error_Handler();
 8007860:	f7ff fda6 	bl	80073b0 <Error_Handler>
		break;
 8007864:	bf00      	nop
	}
}
 8007866:	bf00      	nop
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	48000400 	.word	0x48000400

08007874 <colormotion>:

void colormotion(TIM_HandleTypeDef* htim3,int freq,float gain){
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	ed87 0a01 	vstr	s0, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_1, 1-(1/20000*(freq - 19000)));
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2201      	movs	r2, #1
 8007888:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_2, (1/20000)*(freq - 19000));
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2200      	movs	r2, #0
 8007890:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_3, 1 - (1/24*(gain + 12)));
 8007892:	edd7 7a01 	vldr	s15, [r7, #4]
 8007896:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 800789a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800789e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80078ec <colormotion+0x78>
 80078a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80078a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078b6:	ee17 2a90 	vmov	r2, s15
 80078ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim3, TIM_CHANNEL_4, 1/24*(gain + 12));
 80078bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80078c0:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80078c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078c8:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80078ec <colormotion+0x78>
 80078cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078d8:	ee17 2a90 	vmov	r2, s15
 80078dc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80078de:	bf00      	nop
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	00000000 	.word	0x00000000

080078f0 <sgtl5000_i2c_read_register>:
		SGTL5000_DAP_COEF_WR_A2_LSB

};

HAL_StatusTypeDef sgtl5000_i2c_read_register(h_sgtl5000_t * h_sgtl5000, sgtl5000_registers_t reg_address, uint16_t * p_data)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08a      	sub	sp, #40	@ 0x28
 80078f4:	af04      	add	r7, sp, #16
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	460b      	mov	r3, r1
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	uint8_t buffer[2];

	ret = HAL_I2C_Mem_Read (
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6818      	ldr	r0, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8899      	ldrh	r1, [r3, #4]
 8007906:	897a      	ldrh	r2, [r7, #10]
 8007908:	f04f 33ff 	mov.w	r3, #4294967295
 800790c:	9302      	str	r3, [sp, #8]
 800790e:	2302      	movs	r3, #2
 8007910:	9301      	str	r3, [sp, #4]
 8007912:	f107 0314 	add.w	r3, r7, #20
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	2302      	movs	r3, #2
 800791a:	f003 f931 	bl	800ab80 <HAL_I2C_Mem_Read>
 800791e:	4603      	mov	r3, r0
 8007920:	75fb      	strb	r3, [r7, #23]
			buffer,
			2,
			HAL_MAX_DELAY		// Problems if I put other than HAL_MAX_DELAY WTF
	);

	*p_data = (buffer[0] << 8) | buffer[1];
 8007922:	7d3b      	ldrb	r3, [r7, #20]
 8007924:	021b      	lsls	r3, r3, #8
 8007926:	b21a      	sxth	r2, r3
 8007928:	7d7b      	ldrb	r3, [r7, #21]
 800792a:	b21b      	sxth	r3, r3
 800792c:	4313      	orrs	r3, r2
 800792e:	b21b      	sxth	r3, r3
 8007930:	b29a      	uxth	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	801a      	strh	r2, [r3, #0]

	return ret;
 8007936:	7dfb      	ldrb	r3, [r7, #23]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3718      	adds	r7, #24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <sgtl5000_i2c_write_register>:

HAL_StatusTypeDef sgtl5000_i2c_write_register(h_sgtl5000_t * h_sgtl5000, sgtl5000_registers_t reg_address, uint16_t data)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af04      	add	r7, sp, #16
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	807b      	strh	r3, [r7, #2]
 800794c:	4613      	mov	r3, r2
 800794e:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef ret;
	uint8_t buffer[2];

	buffer[0] = (data >> 8) & 0xFF;
 8007950:	883b      	ldrh	r3, [r7, #0]
 8007952:	0a1b      	lsrs	r3, r3, #8
 8007954:	b29b      	uxth	r3, r3
 8007956:	b2db      	uxtb	r3, r3
 8007958:	733b      	strb	r3, [r7, #12]
	buffer[1] = data & 0xFF;
 800795a:	883b      	ldrh	r3, [r7, #0]
 800795c:	b2db      	uxtb	r3, r3
 800795e:	737b      	strb	r3, [r7, #13]

	ret = HAL_I2C_Mem_Write(
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6818      	ldr	r0, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	8899      	ldrh	r1, [r3, #4]
 8007968:	887a      	ldrh	r2, [r7, #2]
 800796a:	f04f 33ff 	mov.w	r3, #4294967295
 800796e:	9302      	str	r3, [sp, #8]
 8007970:	2302      	movs	r3, #2
 8007972:	9301      	str	r3, [sp, #4]
 8007974:	f107 030c 	add.w	r3, r7, #12
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	2302      	movs	r3, #2
 800797c:	f002 ffec 	bl	800a958 <HAL_I2C_Mem_Write>
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]
			buffer,
			2,
			HAL_MAX_DELAY		// WTF
	);

	return ret;
 8007984:	7bfb      	ldrb	r3, [r7, #15]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <sgtl5000_i2c_set_bit>:

HAL_StatusTypeDef sgtl5000_i2c_set_bit(h_sgtl5000_t * h_sgtl5000, sgtl5000_registers_t reg_address, uint16_t mask)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	460b      	mov	r3, r1
 8007998:	807b      	strh	r3, [r7, #2]
 800799a:	4613      	mov	r3, r2
 800799c:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef ret;
	uint16_t data;
	ret = sgtl5000_i2c_read_register(h_sgtl5000, reg_address, &data);
 800799e:	f107 020c 	add.w	r2, r7, #12
 80079a2:	887b      	ldrh	r3, [r7, #2]
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff ffa2 	bl	80078f0 <sgtl5000_i2c_read_register>
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK)
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <sgtl5000_i2c_set_bit+0x2c>
	{
		return ret;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
 80079b8:	e00d      	b.n	80079d6 <sgtl5000_i2c_set_bit+0x48>
	}

	data |= mask;
 80079ba:	89ba      	ldrh	r2, [r7, #12]
 80079bc:	883b      	ldrh	r3, [r7, #0]
 80079be:	4313      	orrs	r3, r2
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	81bb      	strh	r3, [r7, #12]

	ret = sgtl5000_i2c_write_register(h_sgtl5000, reg_address, data);
 80079c4:	89ba      	ldrh	r2, [r7, #12]
 80079c6:	887b      	ldrh	r3, [r7, #2]
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7ff ffb8 	bl	8007940 <sgtl5000_i2c_write_register>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73fb      	strb	r3, [r7, #15]
	return ret;
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <sgtl5000_i2c_clear_bit>:

HAL_StatusTypeDef sgtl5000_i2c_clear_bit(h_sgtl5000_t * h_sgtl5000, sgtl5000_registers_t reg_address, uint16_t mask)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	460b      	mov	r3, r1
 80079e8:	807b      	strh	r3, [r7, #2]
 80079ea:	4613      	mov	r3, r2
 80079ec:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef ret;
	uint16_t data;
	ret = sgtl5000_i2c_read_register(h_sgtl5000, reg_address, &data);
 80079ee:	f107 020c 	add.w	r2, r7, #12
 80079f2:	887b      	ldrh	r3, [r7, #2]
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff ff7a 	bl	80078f0 <sgtl5000_i2c_read_register>
 80079fc:	4603      	mov	r3, r0
 80079fe:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK)
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <sgtl5000_i2c_clear_bit+0x2c>
	{
		return ret;
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	e012      	b.n	8007a30 <sgtl5000_i2c_clear_bit+0x52>
	}

	data &= (~mask);
 8007a0a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007a0e:	43db      	mvns	r3, r3
 8007a10:	b21a      	sxth	r2, r3
 8007a12:	89bb      	ldrh	r3, [r7, #12]
 8007a14:	b21b      	sxth	r3, r3
 8007a16:	4013      	ands	r3, r2
 8007a18:	b21b      	sxth	r3, r3
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	81bb      	strh	r3, [r7, #12]

	ret = sgtl5000_i2c_write_register(h_sgtl5000, reg_address, data);
 8007a1e:	89ba      	ldrh	r2, [r7, #12]
 8007a20:	887b      	ldrh	r3, [r7, #2]
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff ff8b 	bl	8007940 <sgtl5000_i2c_write_register>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73fb      	strb	r3, [r7, #15]
	return ret;
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <sgtl5000_init>:

HAL_StatusTypeDef sgtl5000_init(h_sgtl5000_t * h_sgtl5000)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	73fb      	strb	r3, [r7, #15]

	// NOTE: This next Write call is needed ONLY if VDDD is
	// externally driven
	// Turn off startup power supplies to save power (Clear bit 12 and 13)
	// Write CHIP_ANA_POWER 0x4260
	mask = (1 << 12) | (1 << 13);
 8007a44:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8007a48:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_clear_bit(h_sgtl5000, SGTL5000_CHIP_ANA_POWER, mask);
 8007a4a:	89bb      	ldrh	r3, [r7, #12]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	2130      	movs	r1, #48	@ 0x30
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff ffc4 	bl	80079de <sgtl5000_i2c_clear_bit>
	// NOTE: The next modify call is only needed if both VDDA and
	// VDDIO are greater than 3.1 V
	// Configure the charge pump to use the VDDIO rail (set bit 5 and bit 6)
	// Write CHIP_LINREG_CTRL 0x006C
	// VDDA and VDDIO = 3.3V so it IS necessary
	mask = (1 << 5) | (1 << 6);
 8007a56:	2360      	movs	r3, #96	@ 0x60
 8007a58:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_set_bit(h_sgtl5000, SGTL5000_CHIP_LINREG_CTRL, mask);
 8007a5a:	89bb      	ldrh	r3, [r7, #12]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	2126      	movs	r1, #38	@ 0x26
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff ff94 	bl	800798e <sgtl5000_i2c_set_bit>
	// on the VDDA voltage value.
	// Set ground, ADC, DAC reference voltage (bits 8:4). The value should
	// be set to VDDA/2. This example assumes VDDA = 1.8 V. VDDA/2 = 0.9 V.
	// The bias current should be set to 50% of the nominal value (bits 3:1)
	// Write CHIP_REF_CTRL 0x004E
	mask = 0x01FF;	// VAG_VAL = 1.575V, BIAS_CTRL = -50%, SMALL_POP = 1
 8007a66:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8007a6a:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_REF_CTRL, mask);
 8007a6c:	89bb      	ldrh	r3, [r7, #12]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	2128      	movs	r1, #40	@ 0x28
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff ff64 	bl	8007940 <sgtl5000_i2c_write_register>
	// Set LINEOUT reference voltage to VDDIO/2 (1.65 V) (bits 5:0)
	// and bias current (bits 11:8) to the recommended value of 0.36 mA
	// for 10 kOhm load with 1.0 nF capacitance
	// Write CHIP_LINE_OUT_CTRL 0x0322
//	mask = 0x0322;	// LO_VAGCNTRL = 1.65V, OUT_CURRENT = 0.36mA (?)
	mask = 0x031E;
 8007a78:	f240 331e 	movw	r3, #798	@ 0x31e
 8007a7c:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_LINE_OUT_CTRL, mask);
 8007a7e:	89bb      	ldrh	r3, [r7, #12]
 8007a80:	461a      	mov	r2, r3
 8007a82:	212c      	movs	r1, #44	@ 0x2c
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7ff ff5b 	bl	8007940 <sgtl5000_i2c_write_register>

	// Enable short detect mode for headphone left/right
	// and center channel and set short detect current trip level
	// to 75 mA
	// Write CHIP_SHORT_CTRL 0x1106
	mask = 0x1106;	// MODE_CM = 2, MODE_LR = 1, LVLADJC = 200mA, LVLADJL = 75mA, LVLADJR = 50mA
 8007a8a:	f241 1306 	movw	r3, #4358	@ 0x1106
 8007a8e:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_SHORT_CTRL, mask);
 8007a90:	89bb      	ldrh	r3, [r7, #12]
 8007a92:	461a      	mov	r2, r3
 8007a94:	213c      	movs	r1, #60	@ 0x3c
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff ff52 	bl	8007940 <sgtl5000_i2c_write_register>

	// Enable Zero-cross detect if needed for HP_OUT (bit 5) and ADC (bit 1)
	// Write CHIP_ANA_CTRL 0x0133
	mask = 0x0004;	// Unmute all + SELECT_ADC = LINEIN
 8007a9c:	2304      	movs	r3, #4
 8007a9e:	81bb      	strh	r3, [r7, #12]
//	mask = 0x0000;	// Unmute all + SELECT_ADC = MIC
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_ANA_CTRL, mask);
 8007aa0:	89bb      	ldrh	r3, [r7, #12]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	2124      	movs	r1, #36	@ 0x24
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7ff ff4a 	bl	8007940 <sgtl5000_i2c_write_register>

	//------------Power up Inputs/Outputs/Digital Blocks---------
	// Power up LINEOUT, HP, ADC, DAC
	// Write CHIP_ANA_POWER 0x6AFF
	mask = 0x6AFF;	// LINEOUT_POWERUP, ADC_POWERUP, CAPLESS_HEADPHONE_POWERUP, DAC_POWERUP, HEADPHONE_POWERUP, REFTOP_POWERUP, ADC_MONO = stereo
 8007aac:	f646 23ff 	movw	r3, #27391	@ 0x6aff
 8007ab0:	81bb      	strh	r3, [r7, #12]
	// VAG_POWERUP, VCOAMP_POWERUP = 0, LINREG_D_POWERUP, PLL_POWERUP = 0, VDDC_CHRGPMP_POWERUP, STARTUP_POWERUP = 0, LINREG_SIMPLE_POWERUP,
	// DAC_MONO = stereo
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_ANA_POWER, mask);
 8007ab2:	89bb      	ldrh	r3, [r7, #12]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	2130      	movs	r1, #48	@ 0x30
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff ff41 	bl	8007940 <sgtl5000_i2c_write_register>
	// Power up desired digital blocks
	// I2S_IN (bit 0), I2S_OUT (bit 1), DAP (bit 4), DAC (bit 5),
	// ADC (bit 6) are powered on
	// Write CHIP_DIG_POWER 0x0073
	mask = 0x0073;	// I2S_IN_POWERUP, I2S_OUT_POWERUP, DAP_POWERUP, DAC_POWERUP, ADC_POWERUP
 8007abe:	2373      	movs	r3, #115	@ 0x73
 8007ac0:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_DIG_POWER, mask);
 8007ac2:	89bb      	ldrh	r3, [r7, #12]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	2102      	movs	r1, #2
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7ff ff39 	bl	8007940 <sgtl5000_i2c_write_register>
	// Value = (int)(40*log(VAG_VAL/LO_VAGCNTRL) + 15)
	// Assuming VAG_VAL and LO_VAGCNTRL is set to 0.9 V and
	// 1.65 V respectively, the // left LO vol (bits 12:8) and right LO
	// volume (bits 4:0) value should be set // to 5
	// Write CHIP_LINE_OUT_VOL 0x0505
	mask = 0x1111;	// TODO recalculer
 8007ace:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007ad2:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_LINE_OUT_VOL, mask);
 8007ad4:	89bb      	ldrh	r3, [r7, #12]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	212e      	movs	r1, #46	@ 0x2e
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7ff ff30 	bl	8007940 <sgtl5000_i2c_write_register>

	// Configure SYS_FS clock to 48 kHz
	// Configure MCLK_FREQ to 256*Fs
	// Modify CHIP_CLK_CTRL->SYS_FS 0x0002 // bits 3:2
	// Modify CHIP_CLK_CTRL->MCLK_FREQ 0x0000 // bits 1:0
	mask = 0x0004;	// SYS_FS = 48kHz
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_CLK_CTRL, mask);
 8007ae4:	89bb      	ldrh	r3, [r7, #12]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	2104      	movs	r1, #4
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff ff28 	bl	8007940 <sgtl5000_i2c_write_register>
	// Configure the I2S clocks in master mode
	// NOTE: I2S LRCLK is same as the system sample clock
	// Modify CHIP_I2S_CTRL->MS 0x0001 // bit 7
	// Non, on reste en slave!
	mask = 0x0130;	// DLEN = 16 bits
 8007af0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8007af4:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_I2S_CTRL, mask);
 8007af6:	89bb      	ldrh	r3, [r7, #12]
 8007af8:	461a      	mov	r2, r3
 8007afa:	2106      	movs	r1, #6
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f7ff ff1f 	bl	8007940 <sgtl5000_i2c_write_register>
	// Laissons tout par défaut pour l'instant
//	mask = 0x0000;	// ADC -> DAC
//	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_SSS_CTRL, mask);

	/* Le reste */
	mask = 0x0000;	// Unmute
 8007b02:	2300      	movs	r3, #0
 8007b04:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_ADCDAC_CTRL, mask);
 8007b06:	89bb      	ldrh	r3, [r7, #12]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	210e      	movs	r1, #14
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7ff ff17 	bl	8007940 <sgtl5000_i2c_write_register>

	mask = 0x3C3C;
 8007b12:	f643 433c 	movw	r3, #15420	@ 0x3c3c
 8007b16:	81bb      	strh	r3, [r7, #12]
//	mask = 0x4747;
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_DAC_VOL, mask);
 8007b18:	89bb      	ldrh	r3, [r7, #12]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	2110      	movs	r1, #16
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff ff0e 	bl	8007940 <sgtl5000_i2c_write_register>

	mask = 0x0251;	// BIAS_RESISTOR = 2, BIAS_VOLT = 5, GAIN = 1
 8007b24:	f240 2351 	movw	r3, #593	@ 0x251
 8007b28:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_MIC_CTRL, mask);
 8007b2a:	89bb      	ldrh	r3, [r7, #12]
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	212a      	movs	r1, #42	@ 0x2a
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff ff05 	bl	8007940 <sgtl5000_i2c_write_register>
//		uint16_t reg = 0;
//		sgtl5000_i2c_read_register(h_sgtl5000, register_map[i], &reg);
//		printf("%02d: [0x%04x] = 0x%04x\r\n", i, register_map[i], reg);
//	}

	return ret;
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b46:	4b0f      	ldr	r3, [pc, #60]	@ (8007b84 <HAL_MspInit+0x44>)
 8007b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8007b84 <HAL_MspInit+0x44>)
 8007b4c:	f043 0301 	orr.w	r3, r3, #1
 8007b50:	6613      	str	r3, [r2, #96]	@ 0x60
 8007b52:	4b0c      	ldr	r3, [pc, #48]	@ (8007b84 <HAL_MspInit+0x44>)
 8007b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	607b      	str	r3, [r7, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b5e:	4b09      	ldr	r3, [pc, #36]	@ (8007b84 <HAL_MspInit+0x44>)
 8007b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b62:	4a08      	ldr	r2, [pc, #32]	@ (8007b84 <HAL_MspInit+0x44>)
 8007b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b6a:	4b06      	ldr	r3, [pc, #24]	@ (8007b84 <HAL_MspInit+0x44>)
 8007b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b72:	603b      	str	r3, [r7, #0]
 8007b74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8007b76:	f005 fa4d 	bl	800d014 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b7a:	bf00      	nop
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	40021000 	.word	0x40021000

08007b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007b8c:	bf00      	nop
 8007b8e:	e7fd      	b.n	8007b8c <NMI_Handler+0x4>

08007b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007b90:	b480      	push	{r7}
 8007b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007b94:	bf00      	nop
 8007b96:	e7fd      	b.n	8007b94 <HardFault_Handler+0x4>

08007b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007b9c:	bf00      	nop
 8007b9e:	e7fd      	b.n	8007b9c <MemManage_Handler+0x4>

08007ba0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007ba4:	bf00      	nop
 8007ba6:	e7fd      	b.n	8007ba4 <BusFault_Handler+0x4>

08007ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007bac:	bf00      	nop
 8007bae:	e7fd      	b.n	8007bac <UsageFault_Handler+0x4>

08007bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007bb4:	bf00      	nop
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007bc2:	bf00      	nop
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007bd0:	bf00      	nop
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007bde:	f000 fdab 	bl	8008738 <HAL_IncTick>
  USBPD_DPM_TimerCounter();
 8007be2:	f00f ff09 	bl	80179f8 <USBPD_DPM_TimerCounter>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007be6:	bf00      	nop
 8007be8:	bd80      	pop	{r7, pc}

08007bea <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007bea:	b480      	push	{r7}
 8007bec:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007bee:	bf00      	nop
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007bfc:	bf00      	nop
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
	...

08007c08 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8007c0c:	4802      	ldr	r0, [pc, #8]	@ (8007c18 <DMA1_Channel3_IRQHandler+0x10>)
 8007c0e:	f002 fb1e 	bl	800a24e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007c12:	bf00      	nop
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20000504 	.word	0x20000504

08007c1c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007c20:	4802      	ldr	r0, [pc, #8]	@ (8007c2c <USB_LP_IRQHandler+0x10>)
 8007c22:	f003 fd10 	bl	800b646 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8007c26:	bf00      	nop
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20001c38 	.word	0x20001c38

08007c30 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8007c34:	4802      	ldr	r0, [pc, #8]	@ (8007c40 <DMA2_Channel1_IRQHandler+0x10>)
 8007c36:	f002 fb0a 	bl	800a24e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8007c3a:	bf00      	nop
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	20000564 	.word	0x20000564

08007c44 <UCPD1_IRQHandler>:

/**
  * @brief This function handles UCPD1 interrupt / UCPD1 wake-up interrupt through EXTI line 43.
  */
void UCPD1_IRQHandler(void)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_IRQn 0 */

  /* USER CODE END UCPD1_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 8007c48:	f00c fb4d 	bl	80142e6 <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN UCPD1_IRQn 1 */

  /* USER CODE END UCPD1_IRQn 1 */
}
 8007c4c:	bf00      	nop
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007c58:	4a14      	ldr	r2, [pc, #80]	@ (8007cac <_sbrk+0x5c>)
 8007c5a:	4b15      	ldr	r3, [pc, #84]	@ (8007cb0 <_sbrk+0x60>)
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007c64:	4b13      	ldr	r3, [pc, #76]	@ (8007cb4 <_sbrk+0x64>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d102      	bne.n	8007c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007c6c:	4b11      	ldr	r3, [pc, #68]	@ (8007cb4 <_sbrk+0x64>)
 8007c6e:	4a12      	ldr	r2, [pc, #72]	@ (8007cb8 <_sbrk+0x68>)
 8007c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007c72:	4b10      	ldr	r3, [pc, #64]	@ (8007cb4 <_sbrk+0x64>)
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4413      	add	r3, r2
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d207      	bcs.n	8007c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007c80:	f010 fefc 	bl	8018a7c <__errno>
 8007c84:	4603      	mov	r3, r0
 8007c86:	220c      	movs	r2, #12
 8007c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8e:	e009      	b.n	8007ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007c90:	4b08      	ldr	r3, [pc, #32]	@ (8007cb4 <_sbrk+0x64>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007c96:	4b07      	ldr	r3, [pc, #28]	@ (8007cb4 <_sbrk+0x64>)
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	4a05      	ldr	r2, [pc, #20]	@ (8007cb4 <_sbrk+0x64>)
 8007ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3718      	adds	r7, #24
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	2001c000 	.word	0x2001c000
 8007cb0:	00000400 	.word	0x00000400
 8007cb4:	200005c8 	.word	0x200005c8
 8007cb8:	20002280 	.word	0x20002280

08007cbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007cc0:	4b06      	ldr	r3, [pc, #24]	@ (8007cdc <SystemInit+0x20>)
 8007cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cc6:	4a05      	ldr	r2, [pc, #20]	@ (8007cdc <SystemInit+0x20>)
 8007cc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ccc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007cd0:	bf00      	nop
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	e000ed00 	.word	0xe000ed00

08007ce0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08a      	sub	sp, #40	@ 0x28
 8007ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ce6:	f107 031c 	add.w	r3, r7, #28
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	605a      	str	r2, [r3, #4]
 8007cf0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007cf2:	463b      	mov	r3, r7
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	601a      	str	r2, [r3, #0]
 8007cf8:	605a      	str	r2, [r3, #4]
 8007cfa:	609a      	str	r2, [r3, #8]
 8007cfc:	60da      	str	r2, [r3, #12]
 8007cfe:	611a      	str	r2, [r3, #16]
 8007d00:	615a      	str	r2, [r3, #20]
 8007d02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007d04:	4b27      	ldr	r3, [pc, #156]	@ (8007da4 <MX_TIM2_Init+0xc4>)
 8007d06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007d0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007d0c:	4b25      	ldr	r3, [pc, #148]	@ (8007da4 <MX_TIM2_Init+0xc4>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d12:	4b24      	ldr	r3, [pc, #144]	@ (8007da4 <MX_TIM2_Init+0xc4>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8007d18:	4b22      	ldr	r3, [pc, #136]	@ (8007da4 <MX_TIM2_Init+0xc4>)
 8007d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d20:	4b20      	ldr	r3, [pc, #128]	@ (8007da4 <MX_TIM2_Init+0xc4>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d26:	4b1f      	ldr	r3, [pc, #124]	@ (8007da4 <MX_TIM2_Init+0xc4>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007d2c:	481d      	ldr	r0, [pc, #116]	@ (8007da4 <MX_TIM2_Init+0xc4>)
 8007d2e:	f007 f939 	bl	800efa4 <HAL_TIM_PWM_Init>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8007d38:	f7ff fb3a 	bl	80073b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d40:	2300      	movs	r3, #0
 8007d42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007d44:	f107 031c 	add.w	r3, r7, #28
 8007d48:	4619      	mov	r1, r3
 8007d4a:	4816      	ldr	r0, [pc, #88]	@ (8007da4 <MX_TIM2_Init+0xc4>)
 8007d4c:	f007 fe6a 	bl	800fa24 <HAL_TIMEx_MasterConfigSynchronization>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8007d56:	f7ff fb2b 	bl	80073b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007d5a:	2360      	movs	r3, #96	@ 0x60
 8007d5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007d62:	2300      	movs	r3, #0
 8007d64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007d66:	2300      	movs	r3, #0
 8007d68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007d6a:	463b      	mov	r3, r7
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	4619      	mov	r1, r3
 8007d70:	480c      	ldr	r0, [pc, #48]	@ (8007da4 <MX_TIM2_Init+0xc4>)
 8007d72:	f007 f96f 	bl	800f054 <HAL_TIM_PWM_ConfigChannel>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8007d7c:	f7ff fb18 	bl	80073b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007d80:	463b      	mov	r3, r7
 8007d82:	2204      	movs	r2, #4
 8007d84:	4619      	mov	r1, r3
 8007d86:	4807      	ldr	r0, [pc, #28]	@ (8007da4 <MX_TIM2_Init+0xc4>)
 8007d88:	f007 f964 	bl	800f054 <HAL_TIM_PWM_ConfigChannel>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8007d92:	f7ff fb0d 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007d96:	4803      	ldr	r0, [pc, #12]	@ (8007da4 <MX_TIM2_Init+0xc4>)
 8007d98:	f000 f8b4 	bl	8007f04 <HAL_TIM_MspPostInit>

}
 8007d9c:	bf00      	nop
 8007d9e:	3728      	adds	r7, #40	@ 0x28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	200005cc 	.word	0x200005cc

08007da8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08a      	sub	sp, #40	@ 0x28
 8007dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007dae:	f107 031c 	add.w	r3, r7, #28
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	605a      	str	r2, [r3, #4]
 8007db8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007dba:	463b      	mov	r3, r7
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	605a      	str	r2, [r3, #4]
 8007dc2:	609a      	str	r2, [r3, #8]
 8007dc4:	60da      	str	r2, [r3, #12]
 8007dc6:	611a      	str	r2, [r3, #16]
 8007dc8:	615a      	str	r2, [r3, #20]
 8007dca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007dcc:	4b32      	ldr	r3, [pc, #200]	@ (8007e98 <MX_TIM3_Init+0xf0>)
 8007dce:	4a33      	ldr	r2, [pc, #204]	@ (8007e9c <MX_TIM3_Init+0xf4>)
 8007dd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007dd2:	4b31      	ldr	r3, [pc, #196]	@ (8007e98 <MX_TIM3_Init+0xf0>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8007e98 <MX_TIM3_Init+0xf0>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8007dde:	4b2e      	ldr	r3, [pc, #184]	@ (8007e98 <MX_TIM3_Init+0xf0>)
 8007de0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007de4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007de6:	4b2c      	ldr	r3, [pc, #176]	@ (8007e98 <MX_TIM3_Init+0xf0>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007dec:	4b2a      	ldr	r3, [pc, #168]	@ (8007e98 <MX_TIM3_Init+0xf0>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007df2:	4829      	ldr	r0, [pc, #164]	@ (8007e98 <MX_TIM3_Init+0xf0>)
 8007df4:	f007 f8d6 	bl	800efa4 <HAL_TIM_PWM_Init>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8007dfe:	f7ff fad7 	bl	80073b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e02:	2300      	movs	r3, #0
 8007e04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e06:	2300      	movs	r3, #0
 8007e08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007e0a:	f107 031c 	add.w	r3, r7, #28
 8007e0e:	4619      	mov	r1, r3
 8007e10:	4821      	ldr	r0, [pc, #132]	@ (8007e98 <MX_TIM3_Init+0xf0>)
 8007e12:	f007 fe07 	bl	800fa24 <HAL_TIMEx_MasterConfigSynchronization>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8007e1c:	f7ff fac8 	bl	80073b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007e20:	2360      	movs	r3, #96	@ 0x60
 8007e22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007e24:	2300      	movs	r3, #0
 8007e26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007e30:	463b      	mov	r3, r7
 8007e32:	2200      	movs	r2, #0
 8007e34:	4619      	mov	r1, r3
 8007e36:	4818      	ldr	r0, [pc, #96]	@ (8007e98 <MX_TIM3_Init+0xf0>)
 8007e38:	f007 f90c 	bl	800f054 <HAL_TIM_PWM_ConfigChannel>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8007e42:	f7ff fab5 	bl	80073b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007e46:	463b      	mov	r3, r7
 8007e48:	2204      	movs	r2, #4
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	4812      	ldr	r0, [pc, #72]	@ (8007e98 <MX_TIM3_Init+0xf0>)
 8007e4e:	f007 f901 	bl	800f054 <HAL_TIM_PWM_ConfigChannel>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8007e58:	f7ff faaa 	bl	80073b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007e5c:	463b      	mov	r3, r7
 8007e5e:	2208      	movs	r2, #8
 8007e60:	4619      	mov	r1, r3
 8007e62:	480d      	ldr	r0, [pc, #52]	@ (8007e98 <MX_TIM3_Init+0xf0>)
 8007e64:	f007 f8f6 	bl	800f054 <HAL_TIM_PWM_ConfigChannel>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8007e6e:	f7ff fa9f 	bl	80073b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007e72:	463b      	mov	r3, r7
 8007e74:	220c      	movs	r2, #12
 8007e76:	4619      	mov	r1, r3
 8007e78:	4807      	ldr	r0, [pc, #28]	@ (8007e98 <MX_TIM3_Init+0xf0>)
 8007e7a:	f007 f8eb 	bl	800f054 <HAL_TIM_PWM_ConfigChannel>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8007e84:	f7ff fa94 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007e88:	4803      	ldr	r0, [pc, #12]	@ (8007e98 <MX_TIM3_Init+0xf0>)
 8007e8a:	f000 f83b 	bl	8007f04 <HAL_TIM_MspPostInit>

}
 8007e8e:	bf00      	nop
 8007e90:	3728      	adds	r7, #40	@ 0x28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	20000618 	.word	0x20000618
 8007e9c:	40000400 	.word	0x40000400

08007ea0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb0:	d10c      	bne.n	8007ecc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007eb2:	4b12      	ldr	r3, [pc, #72]	@ (8007efc <HAL_TIM_PWM_MspInit+0x5c>)
 8007eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eb6:	4a11      	ldr	r2, [pc, #68]	@ (8007efc <HAL_TIM_PWM_MspInit+0x5c>)
 8007eb8:	f043 0301 	orr.w	r3, r3, #1
 8007ebc:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8007efc <HAL_TIM_PWM_MspInit+0x5c>)
 8007ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007eca:	e010      	b.n	8007eee <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8007f00 <HAL_TIM_PWM_MspInit+0x60>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d10b      	bne.n	8007eee <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007ed6:	4b09      	ldr	r3, [pc, #36]	@ (8007efc <HAL_TIM_PWM_MspInit+0x5c>)
 8007ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eda:	4a08      	ldr	r2, [pc, #32]	@ (8007efc <HAL_TIM_PWM_MspInit+0x5c>)
 8007edc:	f043 0302 	orr.w	r3, r3, #2
 8007ee0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ee2:	4b06      	ldr	r3, [pc, #24]	@ (8007efc <HAL_TIM_PWM_MspInit+0x5c>)
 8007ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	60bb      	str	r3, [r7, #8]
 8007eec:	68bb      	ldr	r3, [r7, #8]
}
 8007eee:	bf00      	nop
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	40021000 	.word	0x40021000
 8007f00:	40000400 	.word	0x40000400

08007f04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08a      	sub	sp, #40	@ 0x28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f0c:	f107 0314 	add.w	r3, r7, #20
 8007f10:	2200      	movs	r2, #0
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	605a      	str	r2, [r3, #4]
 8007f16:	609a      	str	r2, [r3, #8]
 8007f18:	60da      	str	r2, [r3, #12]
 8007f1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f24:	d11d      	bne.n	8007f62 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f26:	4b30      	ldr	r3, [pc, #192]	@ (8007fe8 <HAL_TIM_MspPostInit+0xe4>)
 8007f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f2a:	4a2f      	ldr	r2, [pc, #188]	@ (8007fe8 <HAL_TIM_MspPostInit+0xe4>)
 8007f2c:	f043 0301 	orr.w	r3, r3, #1
 8007f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f32:	4b2d      	ldr	r3, [pc, #180]	@ (8007fe8 <HAL_TIM_MspPostInit+0xe4>)
 8007f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	613b      	str	r3, [r7, #16]
 8007f3c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Out_L_Pin|Out_R_Pin;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f42:	2302      	movs	r3, #2
 8007f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f52:	f107 0314 	add.w	r3, r7, #20
 8007f56:	4619      	mov	r1, r3
 8007f58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007f5c:	f002 fac6 	bl	800a4ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007f60:	e03d      	b.n	8007fde <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM3)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a21      	ldr	r2, [pc, #132]	@ (8007fec <HAL_TIM_MspPostInit+0xe8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d138      	bne.n	8007fde <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8007fe8 <HAL_TIM_MspPostInit+0xe4>)
 8007f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f70:	4a1d      	ldr	r2, [pc, #116]	@ (8007fe8 <HAL_TIM_MspPostInit+0xe4>)
 8007f72:	f043 0301 	orr.w	r3, r3, #1
 8007f76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f78:	4b1b      	ldr	r3, [pc, #108]	@ (8007fe8 <HAL_TIM_MspPostInit+0xe4>)
 8007f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f84:	4b18      	ldr	r3, [pc, #96]	@ (8007fe8 <HAL_TIM_MspPostInit+0xe4>)
 8007f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f88:	4a17      	ldr	r2, [pc, #92]	@ (8007fe8 <HAL_TIM_MspPostInit+0xe4>)
 8007f8a:	f043 0302 	orr.w	r3, r3, #2
 8007f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f90:	4b15      	ldr	r3, [pc, #84]	@ (8007fe8 <HAL_TIM_MspPostInit+0xe4>)
 8007f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	60bb      	str	r3, [r7, #8]
 8007f9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007f9c:	23c0      	movs	r3, #192	@ 0xc0
 8007f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007fac:	2302      	movs	r3, #2
 8007fae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fb0:	f107 0314 	add.w	r3, r7, #20
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007fba:	f002 fa97 	bl	800a4ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007fce:	2302      	movs	r3, #2
 8007fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fd2:	f107 0314 	add.w	r3, r7, #20
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4805      	ldr	r0, [pc, #20]	@ (8007ff0 <HAL_TIM_MspPostInit+0xec>)
 8007fda:	f002 fa87 	bl	800a4ec <HAL_GPIO_Init>
}
 8007fde:	bf00      	nop
 8007fe0:	3728      	adds	r7, #40	@ 0x28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	40021000 	.word	0x40021000
 8007fec:	40000400 	.word	0x40000400
 8007ff0:	48000400 	.word	0x48000400

08007ff4 <__NVIC_GetPriorityGrouping>:
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ff8:	4b04      	ldr	r3, [pc, #16]	@ (800800c <__NVIC_GetPriorityGrouping+0x18>)
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	0a1b      	lsrs	r3, r3, #8
 8007ffe:	f003 0307 	and.w	r3, r3, #7
}
 8008002:	4618      	mov	r0, r3
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	e000ed00 	.word	0xe000ed00

08008010 <__NVIC_EnableIRQ>:
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	4603      	mov	r3, r0
 8008018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800801a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800801e:	2b00      	cmp	r3, #0
 8008020:	db0b      	blt.n	800803a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008022:	79fb      	ldrb	r3, [r7, #7]
 8008024:	f003 021f 	and.w	r2, r3, #31
 8008028:	4907      	ldr	r1, [pc, #28]	@ (8008048 <__NVIC_EnableIRQ+0x38>)
 800802a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800802e:	095b      	lsrs	r3, r3, #5
 8008030:	2001      	movs	r0, #1
 8008032:	fa00 f202 	lsl.w	r2, r0, r2
 8008036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800803a:	bf00      	nop
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	e000e100 	.word	0xe000e100

0800804c <__NVIC_SetPriority>:
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	4603      	mov	r3, r0
 8008054:	6039      	str	r1, [r7, #0]
 8008056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800805c:	2b00      	cmp	r3, #0
 800805e:	db0a      	blt.n	8008076 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	b2da      	uxtb	r2, r3
 8008064:	490c      	ldr	r1, [pc, #48]	@ (8008098 <__NVIC_SetPriority+0x4c>)
 8008066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800806a:	0112      	lsls	r2, r2, #4
 800806c:	b2d2      	uxtb	r2, r2
 800806e:	440b      	add	r3, r1
 8008070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008074:	e00a      	b.n	800808c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	b2da      	uxtb	r2, r3
 800807a:	4908      	ldr	r1, [pc, #32]	@ (800809c <__NVIC_SetPriority+0x50>)
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	f003 030f 	and.w	r3, r3, #15
 8008082:	3b04      	subs	r3, #4
 8008084:	0112      	lsls	r2, r2, #4
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	440b      	add	r3, r1
 800808a:	761a      	strb	r2, [r3, #24]
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr
 8008098:	e000e100 	.word	0xe000e100
 800809c:	e000ed00 	.word	0xe000ed00

080080a0 <NVIC_EncodePriority>:
{
 80080a0:	b480      	push	{r7}
 80080a2:	b089      	sub	sp, #36	@ 0x24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f003 0307 	and.w	r3, r3, #7
 80080b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	f1c3 0307 	rsb	r3, r3, #7
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	bf28      	it	cs
 80080be:	2304      	movcs	r3, #4
 80080c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	3304      	adds	r3, #4
 80080c6:	2b06      	cmp	r3, #6
 80080c8:	d902      	bls.n	80080d0 <NVIC_EncodePriority+0x30>
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	3b03      	subs	r3, #3
 80080ce:	e000      	b.n	80080d2 <NVIC_EncodePriority+0x32>
 80080d0:	2300      	movs	r3, #0
 80080d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080d4:	f04f 32ff 	mov.w	r2, #4294967295
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	fa02 f303 	lsl.w	r3, r2, r3
 80080de:	43da      	mvns	r2, r3
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	401a      	ands	r2, r3
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80080e8:	f04f 31ff 	mov.w	r1, #4294967295
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	fa01 f303 	lsl.w	r3, r1, r3
 80080f2:	43d9      	mvns	r1, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080f8:	4313      	orrs	r3, r2
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3724      	adds	r7, #36	@ 0x24
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
	...

08008108 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008110:	4b08      	ldr	r3, [pc, #32]	@ (8008134 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008112:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008114:	4907      	ldr	r1, [pc, #28]	@ (8008134 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4313      	orrs	r3, r2
 800811a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800811c:	4b05      	ldr	r3, [pc, #20]	@ (8008134 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800811e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4013      	ands	r3, r2
 8008124:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008126:	68fb      	ldr	r3, [r7, #12]
}
 8008128:	bf00      	nop
 800812a:	3714      	adds	r7, #20
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	40021000 	.word	0x40021000

08008138 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8008140:	4b08      	ldr	r3, [pc, #32]	@ (8008164 <LL_APB1_GRP2_EnableClock+0x2c>)
 8008142:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008144:	4907      	ldr	r1, [pc, #28]	@ (8008164 <LL_APB1_GRP2_EnableClock+0x2c>)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4313      	orrs	r3, r2
 800814a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800814c:	4b05      	ldr	r3, [pc, #20]	@ (8008164 <LL_APB1_GRP2_EnableClock+0x2c>)
 800814e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4013      	ands	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008156:	68fb      	ldr	r3, [r7, #12]
}
 8008158:	bf00      	nop
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	40021000 	.word	0x40021000

08008168 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8008168:	b480      	push	{r7}
 800816a:	b087      	sub	sp, #28
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8008178:	4a0e      	ldr	r2, [pc, #56]	@ (80081b4 <LL_DMA_SetDataTransferDirection+0x4c>)
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	4413      	add	r3, r2
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	461a      	mov	r2, r3
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	4413      	add	r3, r2
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800818c:	f023 0310 	bic.w	r3, r3, #16
 8008190:	4908      	ldr	r1, [pc, #32]	@ (80081b4 <LL_DMA_SetDataTransferDirection+0x4c>)
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	440a      	add	r2, r1
 8008196:	7812      	ldrb	r2, [r2, #0]
 8008198:	4611      	mov	r1, r2
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	440a      	add	r2, r1
 800819e:	4611      	mov	r1, r2
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80081a6:	bf00      	nop
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	0801aa84 	.word	0x0801aa84

080081b8 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 80081c8:	4a0d      	ldr	r2, [pc, #52]	@ (8008200 <LL_DMA_SetMode+0x48>)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	4413      	add	r3, r2
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	461a      	mov	r2, r3
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	4413      	add	r3, r2
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f023 0220 	bic.w	r2, r3, #32
 80081dc:	4908      	ldr	r1, [pc, #32]	@ (8008200 <LL_DMA_SetMode+0x48>)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	440b      	add	r3, r1
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	4619      	mov	r1, r3
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	440b      	add	r3, r1
 80081ea:	4619      	mov	r1, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	600b      	str	r3, [r1, #0]
             Mode);
}
 80081f2:	bf00      	nop
 80081f4:	371c      	adds	r7, #28
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	0801aa84 	.word	0x0801aa84

08008204 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8008204:	b480      	push	{r7}
 8008206:	b087      	sub	sp, #28
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8008214:	4a0d      	ldr	r2, [pc, #52]	@ (800824c <LL_DMA_SetPeriphIncMode+0x48>)
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	4413      	add	r3, r2
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	461a      	mov	r2, r3
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	4413      	add	r3, r2
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8008228:	4908      	ldr	r1, [pc, #32]	@ (800824c <LL_DMA_SetPeriphIncMode+0x48>)
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	440b      	add	r3, r1
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	4619      	mov	r1, r3
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	440b      	add	r3, r1
 8008236:	4619      	mov	r1, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4313      	orrs	r3, r2
 800823c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800823e:	bf00      	nop
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	0801aa84 	.word	0x0801aa84

08008250 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8008260:	4a0d      	ldr	r2, [pc, #52]	@ (8008298 <LL_DMA_SetMemoryIncMode+0x48>)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	4413      	add	r3, r2
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	4413      	add	r3, r2
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008274:	4908      	ldr	r1, [pc, #32]	@ (8008298 <LL_DMA_SetMemoryIncMode+0x48>)
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	440b      	add	r3, r1
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	4619      	mov	r1, r3
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	440b      	add	r3, r1
 8008282:	4619      	mov	r1, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4313      	orrs	r3, r2
 8008288:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800828a:	bf00      	nop
 800828c:	371c      	adds	r7, #28
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	0801aa84 	.word	0x0801aa84

0800829c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 80082ac:	4a0d      	ldr	r2, [pc, #52]	@ (80082e4 <LL_DMA_SetPeriphSize+0x48>)
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	4413      	add	r3, r2
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	4413      	add	r3, r2
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082c0:	4908      	ldr	r1, [pc, #32]	@ (80082e4 <LL_DMA_SetPeriphSize+0x48>)
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	440b      	add	r3, r1
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	4619      	mov	r1, r3
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	440b      	add	r3, r1
 80082ce:	4619      	mov	r1, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80082d6:	bf00      	nop
 80082d8:	371c      	adds	r7, #28
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	0801aa84 	.word	0x0801aa84

080082e8 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 80082f8:	4a0d      	ldr	r2, [pc, #52]	@ (8008330 <LL_DMA_SetMemorySize+0x48>)
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	4413      	add	r3, r2
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	4413      	add	r3, r2
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800830c:	4908      	ldr	r1, [pc, #32]	@ (8008330 <LL_DMA_SetMemorySize+0x48>)
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	440b      	add	r3, r1
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	4619      	mov	r1, r3
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	440b      	add	r3, r1
 800831a:	4619      	mov	r1, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4313      	orrs	r3, r2
 8008320:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8008322:	bf00      	nop
 8008324:	371c      	adds	r7, #28
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	0801aa84 	.word	0x0801aa84

08008334 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8008344:	4a0d      	ldr	r2, [pc, #52]	@ (800837c <LL_DMA_SetChannelPriorityLevel+0x48>)
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	4413      	add	r3, r2
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	461a      	mov	r2, r3
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	4413      	add	r3, r2
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008358:	4908      	ldr	r1, [pc, #32]	@ (800837c <LL_DMA_SetChannelPriorityLevel+0x48>)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	440b      	add	r3, r1
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	4619      	mov	r1, r3
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	440b      	add	r3, r1
 8008366:	4619      	mov	r1, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4313      	orrs	r3, r2
 800836c:	600b      	str	r3, [r1, #0]
             Priority);
}
 800836e:	bf00      	nop
 8008370:	371c      	adds	r7, #28
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	0801aa84 	.word	0x0801aa84

08008380 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	0a9b      	lsrs	r3, r3, #10
 8008390:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8008394:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	4413      	add	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80083a8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	4413      	add	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80083be:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	430a      	orrs	r2, r1
 80083c6:	601a      	str	r2, [r3, #0]
}
 80083c8:	bf00      	nop
 80083ca:	371c      	adds	r7, #28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083da:	463b      	mov	r3, r7
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	605a      	str	r2, [r3, #4]
 80083e2:	609a      	str	r2, [r3, #8]
 80083e4:	60da      	str	r2, [r3, #12]
 80083e6:	611a      	str	r2, [r3, #16]
 80083e8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80083ea:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80083ee:	f7ff fea3 	bl	8008138 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80083f2:	2002      	movs	r0, #2
 80083f4:	f7ff fe88 	bl	8008108 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80083f8:	2310      	movs	r3, #16
 80083fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80083fc:	2303      	movs	r3, #3
 80083fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008400:	2300      	movs	r3, #0
 8008402:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008404:	463b      	mov	r3, r7
 8008406:	4619      	mov	r1, r3
 8008408:	4838      	ldr	r0, [pc, #224]	@ (80084ec <MX_UCPD1_Init+0x118>)
 800840a:	f008 fc69 	bl	8010ce0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800840e:	2340      	movs	r3, #64	@ 0x40
 8008410:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008412:	2303      	movs	r3, #3
 8008414:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008416:	2300      	movs	r3, #0
 8008418:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800841a:	463b      	mov	r3, r7
 800841c:	4619      	mov	r1, r3
 800841e:	4833      	ldr	r0, [pc, #204]	@ (80084ec <MX_UCPD1_Init+0x118>)
 8008420:	f008 fc5e 	bl	8010ce0 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 8008424:	2272      	movs	r2, #114	@ 0x72
 8008426:	2100      	movs	r1, #0
 8008428:	4831      	ldr	r0, [pc, #196]	@ (80084f0 <MX_UCPD1_Init+0x11c>)
 800842a:	f7ff ffa9 	bl	8008380 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800842e:	2200      	movs	r2, #0
 8008430:	2100      	movs	r1, #0
 8008432:	482f      	ldr	r0, [pc, #188]	@ (80084f0 <MX_UCPD1_Init+0x11c>)
 8008434:	f7ff fe98 	bl	8008168 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8008438:	2200      	movs	r2, #0
 800843a:	2100      	movs	r1, #0
 800843c:	482c      	ldr	r0, [pc, #176]	@ (80084f0 <MX_UCPD1_Init+0x11c>)
 800843e:	f7ff ff79 	bl	8008334 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8008442:	2200      	movs	r2, #0
 8008444:	2100      	movs	r1, #0
 8008446:	482a      	ldr	r0, [pc, #168]	@ (80084f0 <MX_UCPD1_Init+0x11c>)
 8008448:	f7ff feb6 	bl	80081b8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800844c:	2200      	movs	r2, #0
 800844e:	2100      	movs	r1, #0
 8008450:	4827      	ldr	r0, [pc, #156]	@ (80084f0 <MX_UCPD1_Init+0x11c>)
 8008452:	f7ff fed7 	bl	8008204 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8008456:	2280      	movs	r2, #128	@ 0x80
 8008458:	2100      	movs	r1, #0
 800845a:	4825      	ldr	r0, [pc, #148]	@ (80084f0 <MX_UCPD1_Init+0x11c>)
 800845c:	f7ff fef8 	bl	8008250 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8008460:	2200      	movs	r2, #0
 8008462:	2100      	movs	r1, #0
 8008464:	4822      	ldr	r0, [pc, #136]	@ (80084f0 <MX_UCPD1_Init+0x11c>)
 8008466:	f7ff ff19 	bl	800829c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 800846a:	2200      	movs	r2, #0
 800846c:	2100      	movs	r1, #0
 800846e:	4820      	ldr	r0, [pc, #128]	@ (80084f0 <MX_UCPD1_Init+0x11c>)
 8008470:	f7ff ff3a 	bl	80082e8 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 8008474:	2273      	movs	r2, #115	@ 0x73
 8008476:	2101      	movs	r1, #1
 8008478:	481d      	ldr	r0, [pc, #116]	@ (80084f0 <MX_UCPD1_Init+0x11c>)
 800847a:	f7ff ff81 	bl	8008380 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800847e:	2210      	movs	r2, #16
 8008480:	2101      	movs	r1, #1
 8008482:	481b      	ldr	r0, [pc, #108]	@ (80084f0 <MX_UCPD1_Init+0x11c>)
 8008484:	f7ff fe70 	bl	8008168 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8008488:	2200      	movs	r2, #0
 800848a:	2101      	movs	r1, #1
 800848c:	4818      	ldr	r0, [pc, #96]	@ (80084f0 <MX_UCPD1_Init+0x11c>)
 800848e:	f7ff ff51 	bl	8008334 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8008492:	2200      	movs	r2, #0
 8008494:	2101      	movs	r1, #1
 8008496:	4816      	ldr	r0, [pc, #88]	@ (80084f0 <MX_UCPD1_Init+0x11c>)
 8008498:	f7ff fe8e 	bl	80081b8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 800849c:	2200      	movs	r2, #0
 800849e:	2101      	movs	r1, #1
 80084a0:	4813      	ldr	r0, [pc, #76]	@ (80084f0 <MX_UCPD1_Init+0x11c>)
 80084a2:	f7ff feaf 	bl	8008204 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 80084a6:	2280      	movs	r2, #128	@ 0x80
 80084a8:	2101      	movs	r1, #1
 80084aa:	4811      	ldr	r0, [pc, #68]	@ (80084f0 <MX_UCPD1_Init+0x11c>)
 80084ac:	f7ff fed0 	bl	8008250 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 80084b0:	2200      	movs	r2, #0
 80084b2:	2101      	movs	r1, #1
 80084b4:	480e      	ldr	r0, [pc, #56]	@ (80084f0 <MX_UCPD1_Init+0x11c>)
 80084b6:	f7ff fef1 	bl	800829c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 80084ba:	2200      	movs	r2, #0
 80084bc:	2101      	movs	r1, #1
 80084be:	480c      	ldr	r0, [pc, #48]	@ (80084f0 <MX_UCPD1_Init+0x11c>)
 80084c0:	f7ff ff12 	bl	80082e8 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(UCPD1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80084c4:	f7ff fd96 	bl	8007ff4 <__NVIC_GetPriorityGrouping>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2200      	movs	r2, #0
 80084cc:	2100      	movs	r1, #0
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7ff fde6 	bl	80080a0 <NVIC_EncodePriority>
 80084d4:	4603      	mov	r3, r0
 80084d6:	4619      	mov	r1, r3
 80084d8:	203f      	movs	r0, #63	@ 0x3f
 80084da:	f7ff fdb7 	bl	800804c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UCPD1_IRQn);
 80084de:	203f      	movs	r0, #63	@ 0x3f
 80084e0:	f7ff fd96 	bl	8008010 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80084e4:	bf00      	nop
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	48000400 	.word	0x48000400
 80084f0:	40020000 	.word	0x40020000

080084f4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80084f8:	4b22      	ldr	r3, [pc, #136]	@ (8008584 <MX_USART3_UART_Init+0x90>)
 80084fa:	4a23      	ldr	r2, [pc, #140]	@ (8008588 <MX_USART3_UART_Init+0x94>)
 80084fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80084fe:	4b21      	ldr	r3, [pc, #132]	@ (8008584 <MX_USART3_UART_Init+0x90>)
 8008500:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008504:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008506:	4b1f      	ldr	r3, [pc, #124]	@ (8008584 <MX_USART3_UART_Init+0x90>)
 8008508:	2200      	movs	r2, #0
 800850a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800850c:	4b1d      	ldr	r3, [pc, #116]	@ (8008584 <MX_USART3_UART_Init+0x90>)
 800850e:	2200      	movs	r2, #0
 8008510:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008512:	4b1c      	ldr	r3, [pc, #112]	@ (8008584 <MX_USART3_UART_Init+0x90>)
 8008514:	2200      	movs	r2, #0
 8008516:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008518:	4b1a      	ldr	r3, [pc, #104]	@ (8008584 <MX_USART3_UART_Init+0x90>)
 800851a:	220c      	movs	r2, #12
 800851c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800851e:	4b19      	ldr	r3, [pc, #100]	@ (8008584 <MX_USART3_UART_Init+0x90>)
 8008520:	2200      	movs	r2, #0
 8008522:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008524:	4b17      	ldr	r3, [pc, #92]	@ (8008584 <MX_USART3_UART_Init+0x90>)
 8008526:	2200      	movs	r2, #0
 8008528:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800852a:	4b16      	ldr	r3, [pc, #88]	@ (8008584 <MX_USART3_UART_Init+0x90>)
 800852c:	2200      	movs	r2, #0
 800852e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008530:	4b14      	ldr	r3, [pc, #80]	@ (8008584 <MX_USART3_UART_Init+0x90>)
 8008532:	2200      	movs	r2, #0
 8008534:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008536:	4b13      	ldr	r3, [pc, #76]	@ (8008584 <MX_USART3_UART_Init+0x90>)
 8008538:	2200      	movs	r2, #0
 800853a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800853c:	4811      	ldr	r0, [pc, #68]	@ (8008584 <MX_USART3_UART_Init+0x90>)
 800853e:	f007 faff 	bl	800fb40 <HAL_UART_Init>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8008548:	f7fe ff32 	bl	80073b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800854c:	2100      	movs	r1, #0
 800854e:	480d      	ldr	r0, [pc, #52]	@ (8008584 <MX_USART3_UART_Init+0x90>)
 8008550:	f008 f89a 	bl	8010688 <HAL_UARTEx_SetTxFifoThreshold>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800855a:	f7fe ff29 	bl	80073b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800855e:	2100      	movs	r1, #0
 8008560:	4808      	ldr	r0, [pc, #32]	@ (8008584 <MX_USART3_UART_Init+0x90>)
 8008562:	f008 f8cf 	bl	8010704 <HAL_UARTEx_SetRxFifoThreshold>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800856c:	f7fe ff20 	bl	80073b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8008570:	4804      	ldr	r0, [pc, #16]	@ (8008584 <MX_USART3_UART_Init+0x90>)
 8008572:	f008 f850 	bl	8010616 <HAL_UARTEx_DisableFifoMode>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800857c:	f7fe ff18 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008580:	bf00      	nop
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20000664 	.word	0x20000664
 8008588:	40004800 	.word	0x40004800

0800858c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b09e      	sub	sp, #120	@ 0x78
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008594:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	605a      	str	r2, [r3, #4]
 800859e:	609a      	str	r2, [r3, #8]
 80085a0:	60da      	str	r2, [r3, #12]
 80085a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80085a4:	f107 0314 	add.w	r3, r7, #20
 80085a8:	2250      	movs	r2, #80	@ 0x50
 80085aa:	2100      	movs	r1, #0
 80085ac:	4618      	mov	r0, r3
 80085ae:	f010 fa4d 	bl	8018a4c <memset>
  if(uartHandle->Instance==USART3)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008634 <HAL_UART_MspInit+0xa8>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d136      	bne.n	800862a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80085bc:	2304      	movs	r3, #4
 80085be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80085c0:	2300      	movs	r3, #0
 80085c2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80085c4:	f107 0314 	add.w	r3, r7, #20
 80085c8:	4618      	mov	r0, r3
 80085ca:	f005 fa61 	bl	800da90 <HAL_RCCEx_PeriphCLKConfig>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80085d4:	f7fe feec 	bl	80073b0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80085d8:	4b17      	ldr	r3, [pc, #92]	@ (8008638 <HAL_UART_MspInit+0xac>)
 80085da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085dc:	4a16      	ldr	r2, [pc, #88]	@ (8008638 <HAL_UART_MspInit+0xac>)
 80085de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80085e4:	4b14      	ldr	r3, [pc, #80]	@ (8008638 <HAL_UART_MspInit+0xac>)
 80085e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085ec:	613b      	str	r3, [r7, #16]
 80085ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085f0:	4b11      	ldr	r3, [pc, #68]	@ (8008638 <HAL_UART_MspInit+0xac>)
 80085f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085f4:	4a10      	ldr	r2, [pc, #64]	@ (8008638 <HAL_UART_MspInit+0xac>)
 80085f6:	f043 0302 	orr.w	r3, r3, #2
 80085fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80085fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008638 <HAL_UART_MspInit+0xac>)
 80085fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008600:	f003 0302 	and.w	r3, r3, #2
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB8-BOOT0     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8;
 8008608:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800860c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800860e:	2302      	movs	r3, #2
 8008610:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008612:	2300      	movs	r3, #0
 8008614:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008616:	2300      	movs	r3, #0
 8008618:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800861a:	2307      	movs	r3, #7
 800861c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800861e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8008622:	4619      	mov	r1, r3
 8008624:	4805      	ldr	r0, [pc, #20]	@ (800863c <HAL_UART_MspInit+0xb0>)
 8008626:	f001 ff61 	bl	800a4ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800862a:	bf00      	nop
 800862c:	3778      	adds	r7, #120	@ 0x78
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	40004800 	.word	0x40004800
 8008638:	40021000 	.word	0x40021000
 800863c:	48000400 	.word	0x48000400

08008640 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008640:	480d      	ldr	r0, [pc, #52]	@ (8008678 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008642:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8008644:	f7ff fb3a 	bl	8007cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008648:	480c      	ldr	r0, [pc, #48]	@ (800867c <LoopForever+0x6>)
  ldr r1, =_edata
 800864a:	490d      	ldr	r1, [pc, #52]	@ (8008680 <LoopForever+0xa>)
  ldr r2, =_sidata
 800864c:	4a0d      	ldr	r2, [pc, #52]	@ (8008684 <LoopForever+0xe>)
  movs r3, #0
 800864e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008650:	e002      	b.n	8008658 <LoopCopyDataInit>

08008652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008656:	3304      	adds	r3, #4

08008658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800865a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800865c:	d3f9      	bcc.n	8008652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800865e:	4a0a      	ldr	r2, [pc, #40]	@ (8008688 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008660:	4c0a      	ldr	r4, [pc, #40]	@ (800868c <LoopForever+0x16>)
  movs r3, #0
 8008662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008664:	e001      	b.n	800866a <LoopFillZerobss>

08008666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008668:	3204      	adds	r2, #4

0800866a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800866a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800866c:	d3fb      	bcc.n	8008666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800866e:	f010 fa0b 	bl	8018a88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008672:	f7fe fdb7 	bl	80071e4 <main>

08008676 <LoopForever>:

LoopForever:
    b LoopForever
 8008676:	e7fe      	b.n	8008676 <LoopForever>
  ldr   r0, =_estack
 8008678:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800867c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008680:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8008684:	0801ad40 	.word	0x0801ad40
  ldr r2, =_sbss
 8008688:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 800868c:	2000227c 	.word	0x2000227c

08008690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008690:	e7fe      	b.n	8008690 <ADC1_2_IRQHandler>

08008692 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b082      	sub	sp, #8
 8008696:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800869c:	2003      	movs	r0, #3
 800869e:	f001 fc73 	bl	8009f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80086a2:	200f      	movs	r0, #15
 80086a4:	f000 f80e 	bl	80086c4 <HAL_InitTick>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	71fb      	strb	r3, [r7, #7]
 80086b2:	e001      	b.n	80086b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80086b4:	f7ff fa44 	bl	8007b40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80086b8:	79fb      	ldrb	r3, [r7, #7]

}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80086d0:	4b16      	ldr	r3, [pc, #88]	@ (800872c <HAL_InitTick+0x68>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d022      	beq.n	800871e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80086d8:	4b15      	ldr	r3, [pc, #84]	@ (8008730 <HAL_InitTick+0x6c>)
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	4b13      	ldr	r3, [pc, #76]	@ (800872c <HAL_InitTick+0x68>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80086e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80086e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ec:	4618      	mov	r0, r3
 80086ee:	f001 fc7e 	bl	8009fee <HAL_SYSTICK_Config>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10f      	bne.n	8008718 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b0f      	cmp	r3, #15
 80086fc:	d809      	bhi.n	8008712 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80086fe:	2200      	movs	r2, #0
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	f04f 30ff 	mov.w	r0, #4294967295
 8008706:	f001 fc4a 	bl	8009f9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800870a:	4a0a      	ldr	r2, [pc, #40]	@ (8008734 <HAL_InitTick+0x70>)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	e007      	b.n	8008722 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	73fb      	strb	r3, [r7, #15]
 8008716:	e004      	b.n	8008722 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	73fb      	strb	r3, [r7, #15]
 800871c:	e001      	b.n	8008722 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008722:	7bfb      	ldrb	r3, [r7, #15]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	2000000c 	.word	0x2000000c
 8008730:	20000004 	.word	0x20000004
 8008734:	20000008 	.word	0x20000008

08008738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008738:	b480      	push	{r7}
 800873a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800873c:	4b05      	ldr	r3, [pc, #20]	@ (8008754 <HAL_IncTick+0x1c>)
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	4b05      	ldr	r3, [pc, #20]	@ (8008758 <HAL_IncTick+0x20>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4413      	add	r3, r2
 8008746:	4a03      	ldr	r2, [pc, #12]	@ (8008754 <HAL_IncTick+0x1c>)
 8008748:	6013      	str	r3, [r2, #0]
}
 800874a:	bf00      	nop
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	200006f8 	.word	0x200006f8
 8008758:	2000000c 	.word	0x2000000c

0800875c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800875c:	b480      	push	{r7}
 800875e:	af00      	add	r7, sp, #0
  return uwTick;
 8008760:	4b03      	ldr	r3, [pc, #12]	@ (8008770 <HAL_GetTick+0x14>)
 8008762:	681b      	ldr	r3, [r3, #0]
}
 8008764:	4618      	mov	r0, r3
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	200006f8 	.word	0x200006f8

08008774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800877c:	f7ff ffee 	bl	800875c <HAL_GetTick>
 8008780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878c:	d004      	beq.n	8008798 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800878e:	4b09      	ldr	r3, [pc, #36]	@ (80087b4 <HAL_Delay+0x40>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	4413      	add	r3, r2
 8008796:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008798:	bf00      	nop
 800879a:	f7ff ffdf 	bl	800875c <HAL_GetTick>
 800879e:	4602      	mov	r2, r0
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d8f7      	bhi.n	800879a <HAL_Delay+0x26>
  {
  }
}
 80087aa:	bf00      	nop
 80087ac:	bf00      	nop
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	2000000c 	.word	0x2000000c

080087b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	431a      	orrs	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	609a      	str	r2, [r3, #8]
}
 80087d2:	bf00      	nop
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	431a      	orrs	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	609a      	str	r2, [r3, #8]
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8008814:	4618      	mov	r0, r3
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008820:	b480      	push	{r7}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
 800882c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3360      	adds	r3, #96	@ 0x60
 8008832:	461a      	mov	r2, r3
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	4b08      	ldr	r3, [pc, #32]	@ (8008864 <LL_ADC_SetOffset+0x44>)
 8008842:	4013      	ands	r3, r2
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	430a      	orrs	r2, r1
 800884e:	4313      	orrs	r3, r2
 8008850:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008858:	bf00      	nop
 800885a:	371c      	adds	r7, #28
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	03fff000 	.word	0x03fff000

08008868 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	3360      	adds	r3, #96	@ 0x60
 8008876:	461a      	mov	r2, r3
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8008888:	4618      	mov	r0, r3
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	3360      	adds	r3, #96	@ 0x60
 80088a4:	461a      	mov	r2, r3
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	431a      	orrs	r2, r3
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80088be:	bf00      	nop
 80088c0:	371c      	adds	r7, #28
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b087      	sub	sp, #28
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3360      	adds	r3, #96	@ 0x60
 80088da:	461a      	mov	r2, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4413      	add	r3, r2
 80088e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	431a      	orrs	r2, r3
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80088f4:	bf00      	nop
 80088f6:	371c      	adds	r7, #28
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3360      	adds	r3, #96	@ 0x60
 8008910:	461a      	mov	r2, r3
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	431a      	orrs	r2, r3
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800892a:	bf00      	nop
 800892c:	371c      	adds	r7, #28
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	695b      	ldr	r3, [r3, #20]
 8008944:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	431a      	orrs	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	615a      	str	r2, [r3, #20]
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008970:	2301      	movs	r3, #1
 8008972:	e000      	b.n	8008976 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008982:	b480      	push	{r7}
 8008984:	b087      	sub	sp, #28
 8008986:	af00      	add	r7, sp, #0
 8008988:	60f8      	str	r0, [r7, #12]
 800898a:	60b9      	str	r1, [r7, #8]
 800898c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3330      	adds	r3, #48	@ 0x30
 8008992:	461a      	mov	r2, r3
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	0a1b      	lsrs	r3, r3, #8
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	f003 030c 	and.w	r3, r3, #12
 800899e:	4413      	add	r3, r2
 80089a0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f003 031f 	and.w	r3, r3, #31
 80089ac:	211f      	movs	r1, #31
 80089ae:	fa01 f303 	lsl.w	r3, r1, r3
 80089b2:	43db      	mvns	r3, r3
 80089b4:	401a      	ands	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	0e9b      	lsrs	r3, r3, #26
 80089ba:	f003 011f 	and.w	r1, r3, #31
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	f003 031f 	and.w	r3, r3, #31
 80089c4:	fa01 f303 	lsl.w	r3, r1, r3
 80089c8:	431a      	orrs	r2, r3
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80089ce:	bf00      	nop
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80089da:	b480      	push	{r7}
 80089dc:	b087      	sub	sp, #28
 80089de:	af00      	add	r7, sp, #0
 80089e0:	60f8      	str	r0, [r7, #12]
 80089e2:	60b9      	str	r1, [r7, #8]
 80089e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3314      	adds	r3, #20
 80089ea:	461a      	mov	r2, r3
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	0e5b      	lsrs	r3, r3, #25
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	f003 0304 	and.w	r3, r3, #4
 80089f6:	4413      	add	r3, r2
 80089f8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	0d1b      	lsrs	r3, r3, #20
 8008a02:	f003 031f 	and.w	r3, r3, #31
 8008a06:	2107      	movs	r1, #7
 8008a08:	fa01 f303 	lsl.w	r3, r1, r3
 8008a0c:	43db      	mvns	r3, r3
 8008a0e:	401a      	ands	r2, r3
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	0d1b      	lsrs	r3, r3, #20
 8008a14:	f003 031f 	and.w	r3, r3, #31
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008a24:	bf00      	nop
 8008a26:	371c      	adds	r7, #28
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a48:	43db      	mvns	r3, r3
 8008a4a:	401a      	ands	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f003 0318 	and.w	r3, r3, #24
 8008a52:	4908      	ldr	r1, [pc, #32]	@ (8008a74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008a54:	40d9      	lsrs	r1, r3
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	400b      	ands	r3, r1
 8008a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008a66:	bf00      	nop
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	0007ffff 	.word	0x0007ffff

08008a78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f003 031f 	and.w	r3, r3, #31
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8008aa4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	6093      	str	r3, [r2, #8]
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ac8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008acc:	d101      	bne.n	8008ad2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e000      	b.n	8008ad4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8008af0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008af4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b1c:	d101      	bne.n	8008b22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e000      	b.n	8008b24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008b44:	f043 0201 	orr.w	r2, r3, #1
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d101      	bne.n	8008b70 <LL_ADC_IsEnabled+0x18>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e000      	b.n	8008b72 <LL_ADC_IsEnabled+0x1a>
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b083      	sub	sp, #12
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b8e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008b92:	f043 0204 	orr.w	r2, r3, #4
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008b9a:	bf00      	nop
 8008b9c:	370c      	adds	r7, #12
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b083      	sub	sp, #12
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f003 0304 	and.w	r3, r3, #4
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	d101      	bne.n	8008bbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e000      	b.n	8008bc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f003 0308 	and.w	r3, r3, #8
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d101      	bne.n	8008be4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008be0:	2301      	movs	r3, #1
 8008be2:	e000      	b.n	8008be6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
	...

08008bf4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008bf4:	b590      	push	{r4, r7, lr}
 8008bf6:	b089      	sub	sp, #36	@ 0x24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8008c00:	2300      	movs	r3, #0
 8008c02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e19b      	b.n	8008f46 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d109      	bne.n	8008c30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7fd fbc7 	bl	80063b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7ff ff3f 	bl	8008ab8 <LL_ADC_IsDeepPowerDownEnabled>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d004      	beq.n	8008c4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7ff ff25 	bl	8008a94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7ff ff5a 	bl	8008b08 <LL_ADC_IsInternalRegulatorEnabled>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d115      	bne.n	8008c86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff ff3e 	bl	8008ae0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008c64:	4b97      	ldr	r3, [pc, #604]	@ (8008ec4 <HAL_ADC_Init+0x2d0>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	099b      	lsrs	r3, r3, #6
 8008c6a:	4a97      	ldr	r2, [pc, #604]	@ (8008ec8 <HAL_ADC_Init+0x2d4>)
 8008c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c70:	099b      	lsrs	r3, r3, #6
 8008c72:	3301      	adds	r3, #1
 8008c74:	005b      	lsls	r3, r3, #1
 8008c76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008c78:	e002      	b.n	8008c80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1f9      	bne.n	8008c7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff ff3c 	bl	8008b08 <LL_ADC_IsInternalRegulatorEnabled>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10d      	bne.n	8008cb2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c9a:	f043 0210 	orr.w	r2, r3, #16
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ca6:	f043 0201 	orr.w	r2, r3, #1
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff ff75 	bl	8008ba6 <LL_ADC_REG_IsConversionOngoing>
 8008cbc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cc2:	f003 0310 	and.w	r3, r3, #16
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f040 8134 	bne.w	8008f34 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f040 8130 	bne.w	8008f34 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cd8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8008cdc:	f043 0202 	orr.w	r2, r3, #2
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7ff ff35 	bl	8008b58 <LL_ADC_IsEnabled>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d137      	bne.n	8008d64 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cfc:	d004      	beq.n	8008d08 <HAL_ADC_Init+0x114>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a72      	ldr	r2, [pc, #456]	@ (8008ecc <HAL_ADC_Init+0x2d8>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d10f      	bne.n	8008d28 <HAL_ADC_Init+0x134>
 8008d08:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8008d0c:	f7ff ff24 	bl	8008b58 <LL_ADC_IsEnabled>
 8008d10:	4604      	mov	r4, r0
 8008d12:	486e      	ldr	r0, [pc, #440]	@ (8008ecc <HAL_ADC_Init+0x2d8>)
 8008d14:	f7ff ff20 	bl	8008b58 <LL_ADC_IsEnabled>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	4323      	orrs	r3, r4
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	bf0c      	ite	eq
 8008d20:	2301      	moveq	r3, #1
 8008d22:	2300      	movne	r3, #0
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	e008      	b.n	8008d3a <HAL_ADC_Init+0x146>
 8008d28:	4869      	ldr	r0, [pc, #420]	@ (8008ed0 <HAL_ADC_Init+0x2dc>)
 8008d2a:	f7ff ff15 	bl	8008b58 <LL_ADC_IsEnabled>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	bf0c      	ite	eq
 8008d34:	2301      	moveq	r3, #1
 8008d36:	2300      	movne	r3, #0
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d012      	beq.n	8008d64 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d46:	d004      	beq.n	8008d52 <HAL_ADC_Init+0x15e>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a5f      	ldr	r2, [pc, #380]	@ (8008ecc <HAL_ADC_Init+0x2d8>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d101      	bne.n	8008d56 <HAL_ADC_Init+0x162>
 8008d52:	4a60      	ldr	r2, [pc, #384]	@ (8008ed4 <HAL_ADC_Init+0x2e0>)
 8008d54:	e000      	b.n	8008d58 <HAL_ADC_Init+0x164>
 8008d56:	4a60      	ldr	r2, [pc, #384]	@ (8008ed8 <HAL_ADC_Init+0x2e4>)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4610      	mov	r0, r2
 8008d60:	f7ff fd2a 	bl	80087b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	7f5b      	ldrb	r3, [r3, #29]
 8008d68:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d6e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8008d74:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8008d7a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008d82:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d84:	4313      	orrs	r3, r2
 8008d86:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d106      	bne.n	8008da0 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d96:	3b01      	subs	r3, #1
 8008d98:	045b      	lsls	r3, r3, #17
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d009      	beq.n	8008dbc <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dac:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008db6:	69ba      	ldr	r2, [r7, #24]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68da      	ldr	r2, [r3, #12]
 8008dc2:	4b46      	ldr	r3, [pc, #280]	@ (8008edc <HAL_ADC_Init+0x2e8>)
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	6812      	ldr	r2, [r2, #0]
 8008dca:	69b9      	ldr	r1, [r7, #24]
 8008dcc:	430b      	orrs	r3, r1
 8008dce:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	430a      	orrs	r2, r1
 8008de4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7ff feee 	bl	8008bcc <LL_ADC_INJ_IsConversionOngoing>
 8008df0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d17b      	bne.n	8008ef0 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d178      	bne.n	8008ef0 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8008e02:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008e0a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e1a:	f023 0302 	bic.w	r3, r3, #2
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	6812      	ldr	r2, [r2, #0]
 8008e22:	69b9      	ldr	r1, [r7, #24]
 8008e24:	430b      	orrs	r3, r1
 8008e26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d017      	beq.n	8008e60 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	691a      	ldr	r2, [r3, #16]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008e3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008e48:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8008e4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	6911      	ldr	r1, [r2, #16]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	6812      	ldr	r2, [r2, #0]
 8008e58:	430b      	orrs	r3, r1
 8008e5a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8008e5e:	e013      	b.n	8008e88 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	691a      	ldr	r2, [r3, #16]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008e6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	6812      	ldr	r2, [r2, #0]
 8008e7c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8008e80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008e84:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d126      	bne.n	8008ee0 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008e9c:	f023 0304 	bic.w	r3, r3, #4
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008ea8:	4311      	orrs	r1, r2
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008eae:	4311      	orrs	r1, r2
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	431a      	orrs	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f042 0201 	orr.w	r2, r2, #1
 8008ec0:	611a      	str	r2, [r3, #16]
 8008ec2:	e015      	b.n	8008ef0 <HAL_ADC_Init+0x2fc>
 8008ec4:	20000004 	.word	0x20000004
 8008ec8:	053e2d63 	.word	0x053e2d63
 8008ecc:	50000100 	.word	0x50000100
 8008ed0:	50000400 	.word	0x50000400
 8008ed4:	50000300 	.word	0x50000300
 8008ed8:	50000700 	.word	0x50000700
 8008edc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	691a      	ldr	r2, [r3, #16]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 0201 	bic.w	r2, r2, #1
 8008eee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	695b      	ldr	r3, [r3, #20]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d10c      	bne.n	8008f12 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008efe:	f023 010f 	bic.w	r1, r3, #15
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	1e5a      	subs	r2, r3, #1
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f10:	e007      	b.n	8008f22 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f022 020f 	bic.w	r2, r2, #15
 8008f20:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f26:	f023 0303 	bic.w	r3, r3, #3
 8008f2a:	f043 0201 	orr.w	r2, r3, #1
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008f32:	e007      	b.n	8008f44 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f38:	f043 0210 	orr.w	r2, r3, #16
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008f44:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3724      	adds	r7, #36	@ 0x24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd90      	pop	{r4, r7, pc}
 8008f4e:	bf00      	nop

08008f50 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f64:	d004      	beq.n	8008f70 <HAL_ADC_Start_DMA+0x20>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a57      	ldr	r2, [pc, #348]	@ (80090c8 <HAL_ADC_Start_DMA+0x178>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d101      	bne.n	8008f74 <HAL_ADC_Start_DMA+0x24>
 8008f70:	4b56      	ldr	r3, [pc, #344]	@ (80090cc <HAL_ADC_Start_DMA+0x17c>)
 8008f72:	e000      	b.n	8008f76 <HAL_ADC_Start_DMA+0x26>
 8008f74:	4b56      	ldr	r3, [pc, #344]	@ (80090d0 <HAL_ADC_Start_DMA+0x180>)
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7ff fd7e 	bl	8008a78 <LL_ADC_GetMultimode>
 8008f7c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7ff fe0f 	bl	8008ba6 <LL_ADC_REG_IsConversionOngoing>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f040 8094 	bne.w	80090b8 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d101      	bne.n	8008f9e <HAL_ADC_Start_DMA+0x4e>
 8008f9a:	2302      	movs	r3, #2
 8008f9c:	e08f      	b.n	80090be <HAL_ADC_Start_DMA+0x16e>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a4a      	ldr	r2, [pc, #296]	@ (80090d4 <HAL_ADC_Start_DMA+0x184>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d008      	beq.n	8008fc2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d005      	beq.n	8008fc2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2b05      	cmp	r3, #5
 8008fba:	d002      	beq.n	8008fc2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	2b09      	cmp	r3, #9
 8008fc0:	d173      	bne.n	80090aa <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f000 fcd8 	bl	8009978 <ADC_Enable>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008fcc:	7dfb      	ldrb	r3, [r7, #23]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d166      	bne.n	80090a0 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fd6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008fda:	f023 0301 	bic.w	r3, r3, #1
 8008fde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a37      	ldr	r2, [pc, #220]	@ (80090c8 <HAL_ADC_Start_DMA+0x178>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d002      	beq.n	8008ff6 <HAL_ADC_Start_DMA+0xa6>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	e001      	b.n	8008ffa <HAL_ADC_Start_DMA+0xaa>
 8008ff6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	6812      	ldr	r2, [r2, #0]
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d002      	beq.n	8009008 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d105      	bne.n	8009014 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800900c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009018:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800901c:	2b00      	cmp	r3, #0
 800901e:	d006      	beq.n	800902e <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009024:	f023 0206 	bic.w	r2, r3, #6
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	661a      	str	r2, [r3, #96]	@ 0x60
 800902c:	e002      	b.n	8009034 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009038:	4a27      	ldr	r2, [pc, #156]	@ (80090d8 <HAL_ADC_Start_DMA+0x188>)
 800903a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009040:	4a26      	ldr	r2, [pc, #152]	@ (80090dc <HAL_ADC_Start_DMA+0x18c>)
 8009042:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009048:	4a25      	ldr	r2, [pc, #148]	@ (80090e0 <HAL_ADC_Start_DMA+0x190>)
 800904a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	221c      	movs	r2, #28
 8009052:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f042 0210 	orr.w	r2, r2, #16
 800906a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68da      	ldr	r2, [r3, #12]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f042 0201 	orr.w	r2, r2, #1
 800907a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3340      	adds	r3, #64	@ 0x40
 8009086:	4619      	mov	r1, r3
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f001 f864 	bl	800a158 <HAL_DMA_Start_IT>
 8009090:	4603      	mov	r3, r0
 8009092:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4618      	mov	r0, r3
 800909a:	f7ff fd70 	bl	8008b7e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800909e:	e00d      	b.n	80090bc <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80090a8:	e008      	b.n	80090bc <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80090b6:	e001      	b.n	80090bc <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80090b8:	2302      	movs	r3, #2
 80090ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3718      	adds	r7, #24
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	50000100 	.word	0x50000100
 80090cc:	50000300 	.word	0x50000300
 80090d0:	50000700 	.word	0x50000700
 80090d4:	50000400 	.word	0x50000400
 80090d8:	08009aa5 	.word	0x08009aa5
 80090dc:	08009b7d 	.word	0x08009b7d
 80090e0:	08009b99 	.word	0x08009b99

080090e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b0b6      	sub	sp, #216	@ 0xd8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8009130:	2300      	movs	r3, #0
 8009132:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800913a:	2b01      	cmp	r3, #1
 800913c:	d102      	bne.n	8009144 <HAL_ADC_ConfigChannel+0x24>
 800913e:	2302      	movs	r3, #2
 8009140:	f000 bc04 	b.w	800994c <HAL_ADC_ConfigChannel+0x82c>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4618      	mov	r0, r3
 8009152:	f7ff fd28 	bl	8008ba6 <LL_ADC_REG_IsConversionOngoing>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	f040 83e8 	bne.w	800992e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6818      	ldr	r0, [r3, #0]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	6859      	ldr	r1, [r3, #4]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	f7ff fc09 	bl	8008982 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4618      	mov	r0, r3
 8009176:	f7ff fd16 	bl	8008ba6 <LL_ADC_REG_IsConversionOngoing>
 800917a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4618      	mov	r0, r3
 8009184:	f7ff fd22 	bl	8008bcc <LL_ADC_INJ_IsConversionOngoing>
 8009188:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800918c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009190:	2b00      	cmp	r3, #0
 8009192:	f040 81d9 	bne.w	8009548 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009196:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800919a:	2b00      	cmp	r3, #0
 800919c:	f040 81d4 	bne.w	8009548 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091a8:	d10f      	bne.n	80091ca <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6818      	ldr	r0, [r3, #0]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2200      	movs	r2, #0
 80091b4:	4619      	mov	r1, r3
 80091b6:	f7ff fc10 	bl	80089da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7ff fbb7 	bl	8008936 <LL_ADC_SetSamplingTimeCommonConfig>
 80091c8:	e00e      	b.n	80091e8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6818      	ldr	r0, [r3, #0]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	6819      	ldr	r1, [r3, #0]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	461a      	mov	r2, r3
 80091d8:	f7ff fbff 	bl	80089da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2100      	movs	r1, #0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff fba7 	bl	8008936 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	695a      	ldr	r2, [r3, #20]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	08db      	lsrs	r3, r3, #3
 80091f4:	f003 0303 	and.w	r3, r3, #3
 80091f8:	005b      	lsls	r3, r3, #1
 80091fa:	fa02 f303 	lsl.w	r3, r2, r3
 80091fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	2b04      	cmp	r3, #4
 8009208:	d022      	beq.n	8009250 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6818      	ldr	r0, [r3, #0]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	6919      	ldr	r1, [r3, #16]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800921a:	f7ff fb01 	bl	8008820 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6818      	ldr	r0, [r3, #0]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	6919      	ldr	r1, [r3, #16]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	461a      	mov	r2, r3
 800922c:	f7ff fb4d 	bl	80088ca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6818      	ldr	r0, [r3, #0]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800923c:	2b01      	cmp	r3, #1
 800923e:	d102      	bne.n	8009246 <HAL_ADC_ConfigChannel+0x126>
 8009240:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009244:	e000      	b.n	8009248 <HAL_ADC_ConfigChannel+0x128>
 8009246:	2300      	movs	r3, #0
 8009248:	461a      	mov	r2, r3
 800924a:	f7ff fb59 	bl	8008900 <LL_ADC_SetOffsetSaturation>
 800924e:	e17b      	b.n	8009548 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2100      	movs	r1, #0
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff fb06 	bl	8008868 <LL_ADC_GetOffsetChannel>
 800925c:	4603      	mov	r3, r0
 800925e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10a      	bne.n	800927c <HAL_ADC_ConfigChannel+0x15c>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2100      	movs	r1, #0
 800926c:	4618      	mov	r0, r3
 800926e:	f7ff fafb 	bl	8008868 <LL_ADC_GetOffsetChannel>
 8009272:	4603      	mov	r3, r0
 8009274:	0e9b      	lsrs	r3, r3, #26
 8009276:	f003 021f 	and.w	r2, r3, #31
 800927a:	e01e      	b.n	80092ba <HAL_ADC_ConfigChannel+0x19a>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2100      	movs	r1, #0
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff faf0 	bl	8008868 <LL_ADC_GetOffsetChannel>
 8009288:	4603      	mov	r3, r0
 800928a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800928e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009292:	fa93 f3a3 	rbit	r3, r3
 8009296:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800929a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800929e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80092a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80092aa:	2320      	movs	r3, #32
 80092ac:	e004      	b.n	80092b8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80092ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80092b2:	fab3 f383 	clz	r3, r3
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d105      	bne.n	80092d2 <HAL_ADC_ConfigChannel+0x1b2>
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	0e9b      	lsrs	r3, r3, #26
 80092cc:	f003 031f 	and.w	r3, r3, #31
 80092d0:	e018      	b.n	8009304 <HAL_ADC_ConfigChannel+0x1e4>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80092de:	fa93 f3a3 	rbit	r3, r3
 80092e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80092e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80092ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d101      	bne.n	80092fa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80092f6:	2320      	movs	r3, #32
 80092f8:	e004      	b.n	8009304 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80092fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80092fe:	fab3 f383 	clz	r3, r3
 8009302:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009304:	429a      	cmp	r2, r3
 8009306:	d106      	bne.n	8009316 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2200      	movs	r2, #0
 800930e:	2100      	movs	r1, #0
 8009310:	4618      	mov	r0, r3
 8009312:	f7ff fabf 	bl	8008894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2101      	movs	r1, #1
 800931c:	4618      	mov	r0, r3
 800931e:	f7ff faa3 	bl	8008868 <LL_ADC_GetOffsetChannel>
 8009322:	4603      	mov	r3, r0
 8009324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10a      	bne.n	8009342 <HAL_ADC_ConfigChannel+0x222>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2101      	movs	r1, #1
 8009332:	4618      	mov	r0, r3
 8009334:	f7ff fa98 	bl	8008868 <LL_ADC_GetOffsetChannel>
 8009338:	4603      	mov	r3, r0
 800933a:	0e9b      	lsrs	r3, r3, #26
 800933c:	f003 021f 	and.w	r2, r3, #31
 8009340:	e01e      	b.n	8009380 <HAL_ADC_ConfigChannel+0x260>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2101      	movs	r1, #1
 8009348:	4618      	mov	r0, r3
 800934a:	f7ff fa8d 	bl	8008868 <LL_ADC_GetOffsetChannel>
 800934e:	4603      	mov	r3, r0
 8009350:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009354:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009358:	fa93 f3a3 	rbit	r3, r3
 800935c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8009360:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009364:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8009368:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8009370:	2320      	movs	r3, #32
 8009372:	e004      	b.n	800937e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8009374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009378:	fab3 f383 	clz	r3, r3
 800937c:	b2db      	uxtb	r3, r3
 800937e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009388:	2b00      	cmp	r3, #0
 800938a:	d105      	bne.n	8009398 <HAL_ADC_ConfigChannel+0x278>
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	0e9b      	lsrs	r3, r3, #26
 8009392:	f003 031f 	and.w	r3, r3, #31
 8009396:	e018      	b.n	80093ca <HAL_ADC_ConfigChannel+0x2aa>
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093a4:	fa93 f3a3 	rbit	r3, r3
 80093a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80093ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80093b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80093b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d101      	bne.n	80093c0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80093bc:	2320      	movs	r3, #32
 80093be:	e004      	b.n	80093ca <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80093c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093c4:	fab3 f383 	clz	r3, r3
 80093c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d106      	bne.n	80093dc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2200      	movs	r2, #0
 80093d4:	2101      	movs	r1, #1
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7ff fa5c 	bl	8008894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2102      	movs	r1, #2
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff fa40 	bl	8008868 <LL_ADC_GetOffsetChannel>
 80093e8:	4603      	mov	r3, r0
 80093ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10a      	bne.n	8009408 <HAL_ADC_ConfigChannel+0x2e8>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2102      	movs	r1, #2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7ff fa35 	bl	8008868 <LL_ADC_GetOffsetChannel>
 80093fe:	4603      	mov	r3, r0
 8009400:	0e9b      	lsrs	r3, r3, #26
 8009402:	f003 021f 	and.w	r2, r3, #31
 8009406:	e01e      	b.n	8009446 <HAL_ADC_ConfigChannel+0x326>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2102      	movs	r1, #2
 800940e:	4618      	mov	r0, r3
 8009410:	f7ff fa2a 	bl	8008868 <LL_ADC_GetOffsetChannel>
 8009414:	4603      	mov	r3, r0
 8009416:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800941a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800941e:	fa93 f3a3 	rbit	r3, r3
 8009422:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8009426:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800942a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800942e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8009436:	2320      	movs	r3, #32
 8009438:	e004      	b.n	8009444 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800943a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800943e:	fab3 f383 	clz	r3, r3
 8009442:	b2db      	uxtb	r3, r3
 8009444:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800944e:	2b00      	cmp	r3, #0
 8009450:	d105      	bne.n	800945e <HAL_ADC_ConfigChannel+0x33e>
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	0e9b      	lsrs	r3, r3, #26
 8009458:	f003 031f 	and.w	r3, r3, #31
 800945c:	e016      	b.n	800948c <HAL_ADC_ConfigChannel+0x36c>
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009466:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800946a:	fa93 f3a3 	rbit	r3, r3
 800946e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8009470:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009472:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8009476:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800947a:	2b00      	cmp	r3, #0
 800947c:	d101      	bne.n	8009482 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800947e:	2320      	movs	r3, #32
 8009480:	e004      	b.n	800948c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8009482:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009486:	fab3 f383 	clz	r3, r3
 800948a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800948c:	429a      	cmp	r2, r3
 800948e:	d106      	bne.n	800949e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2200      	movs	r2, #0
 8009496:	2102      	movs	r1, #2
 8009498:	4618      	mov	r0, r3
 800949a:	f7ff f9fb 	bl	8008894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2103      	movs	r1, #3
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7ff f9df 	bl	8008868 <LL_ADC_GetOffsetChannel>
 80094aa:	4603      	mov	r3, r0
 80094ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10a      	bne.n	80094ca <HAL_ADC_ConfigChannel+0x3aa>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2103      	movs	r1, #3
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff f9d4 	bl	8008868 <LL_ADC_GetOffsetChannel>
 80094c0:	4603      	mov	r3, r0
 80094c2:	0e9b      	lsrs	r3, r3, #26
 80094c4:	f003 021f 	and.w	r2, r3, #31
 80094c8:	e017      	b.n	80094fa <HAL_ADC_ConfigChannel+0x3da>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2103      	movs	r1, #3
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7ff f9c9 	bl	8008868 <LL_ADC_GetOffsetChannel>
 80094d6:	4603      	mov	r3, r0
 80094d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094dc:	fa93 f3a3 	rbit	r3, r3
 80094e0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80094e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80094e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80094ec:	2320      	movs	r3, #32
 80094ee:	e003      	b.n	80094f8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80094f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094f2:	fab3 f383 	clz	r3, r3
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009502:	2b00      	cmp	r3, #0
 8009504:	d105      	bne.n	8009512 <HAL_ADC_ConfigChannel+0x3f2>
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	0e9b      	lsrs	r3, r3, #26
 800950c:	f003 031f 	and.w	r3, r3, #31
 8009510:	e011      	b.n	8009536 <HAL_ADC_ConfigChannel+0x416>
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009518:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800951a:	fa93 f3a3 	rbit	r3, r3
 800951e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8009520:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009522:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8009524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800952a:	2320      	movs	r3, #32
 800952c:	e003      	b.n	8009536 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800952e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009530:	fab3 f383 	clz	r3, r3
 8009534:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009536:	429a      	cmp	r2, r3
 8009538:	d106      	bne.n	8009548 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2200      	movs	r2, #0
 8009540:	2103      	movs	r1, #3
 8009542:	4618      	mov	r0, r3
 8009544:	f7ff f9a6 	bl	8008894 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4618      	mov	r0, r3
 800954e:	f7ff fb03 	bl	8008b58 <LL_ADC_IsEnabled>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	f040 813d 	bne.w	80097d4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6818      	ldr	r0, [r3, #0]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	6819      	ldr	r1, [r3, #0]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	461a      	mov	r2, r3
 8009568:	f7ff fa62 	bl	8008a30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	4aa2      	ldr	r2, [pc, #648]	@ (80097fc <HAL_ADC_ConfigChannel+0x6dc>)
 8009572:	4293      	cmp	r3, r2
 8009574:	f040 812e 	bne.w	80097d4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10b      	bne.n	80095a0 <HAL_ADC_ConfigChannel+0x480>
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	0e9b      	lsrs	r3, r3, #26
 800958e:	3301      	adds	r3, #1
 8009590:	f003 031f 	and.w	r3, r3, #31
 8009594:	2b09      	cmp	r3, #9
 8009596:	bf94      	ite	ls
 8009598:	2301      	movls	r3, #1
 800959a:	2300      	movhi	r3, #0
 800959c:	b2db      	uxtb	r3, r3
 800959e:	e019      	b.n	80095d4 <HAL_ADC_ConfigChannel+0x4b4>
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095a8:	fa93 f3a3 	rbit	r3, r3
 80095ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80095ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095b0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80095b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d101      	bne.n	80095bc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80095b8:	2320      	movs	r3, #32
 80095ba:	e003      	b.n	80095c4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80095bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095be:	fab3 f383 	clz	r3, r3
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	3301      	adds	r3, #1
 80095c6:	f003 031f 	and.w	r3, r3, #31
 80095ca:	2b09      	cmp	r3, #9
 80095cc:	bf94      	ite	ls
 80095ce:	2301      	movls	r3, #1
 80095d0:	2300      	movhi	r3, #0
 80095d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d079      	beq.n	80096cc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d107      	bne.n	80095f4 <HAL_ADC_ConfigChannel+0x4d4>
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	0e9b      	lsrs	r3, r3, #26
 80095ea:	3301      	adds	r3, #1
 80095ec:	069b      	lsls	r3, r3, #26
 80095ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80095f2:	e015      	b.n	8009620 <HAL_ADC_ConfigChannel+0x500>
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095fc:	fa93 f3a3 	rbit	r3, r3
 8009600:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8009602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009604:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8009606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009608:	2b00      	cmp	r3, #0
 800960a:	d101      	bne.n	8009610 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800960c:	2320      	movs	r3, #32
 800960e:	e003      	b.n	8009618 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8009610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009612:	fab3 f383 	clz	r3, r3
 8009616:	b2db      	uxtb	r3, r3
 8009618:	3301      	adds	r3, #1
 800961a:	069b      	lsls	r3, r3, #26
 800961c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009628:	2b00      	cmp	r3, #0
 800962a:	d109      	bne.n	8009640 <HAL_ADC_ConfigChannel+0x520>
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	0e9b      	lsrs	r3, r3, #26
 8009632:	3301      	adds	r3, #1
 8009634:	f003 031f 	and.w	r3, r3, #31
 8009638:	2101      	movs	r1, #1
 800963a:	fa01 f303 	lsl.w	r3, r1, r3
 800963e:	e017      	b.n	8009670 <HAL_ADC_ConfigChannel+0x550>
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009648:	fa93 f3a3 	rbit	r3, r3
 800964c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800964e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009650:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8009652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8009658:	2320      	movs	r3, #32
 800965a:	e003      	b.n	8009664 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800965c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800965e:	fab3 f383 	clz	r3, r3
 8009662:	b2db      	uxtb	r3, r3
 8009664:	3301      	adds	r3, #1
 8009666:	f003 031f 	and.w	r3, r3, #31
 800966a:	2101      	movs	r1, #1
 800966c:	fa01 f303 	lsl.w	r3, r1, r3
 8009670:	ea42 0103 	orr.w	r1, r2, r3
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10a      	bne.n	8009696 <HAL_ADC_ConfigChannel+0x576>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	0e9b      	lsrs	r3, r3, #26
 8009686:	3301      	adds	r3, #1
 8009688:	f003 021f 	and.w	r2, r3, #31
 800968c:	4613      	mov	r3, r2
 800968e:	005b      	lsls	r3, r3, #1
 8009690:	4413      	add	r3, r2
 8009692:	051b      	lsls	r3, r3, #20
 8009694:	e018      	b.n	80096c8 <HAL_ADC_ConfigChannel+0x5a8>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800969c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969e:	fa93 f3a3 	rbit	r3, r3
 80096a2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80096a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80096a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80096ae:	2320      	movs	r3, #32
 80096b0:	e003      	b.n	80096ba <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80096b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096b4:	fab3 f383 	clz	r3, r3
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	3301      	adds	r3, #1
 80096bc:	f003 021f 	and.w	r2, r3, #31
 80096c0:	4613      	mov	r3, r2
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	4413      	add	r3, r2
 80096c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80096c8:	430b      	orrs	r3, r1
 80096ca:	e07e      	b.n	80097ca <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d107      	bne.n	80096e8 <HAL_ADC_ConfigChannel+0x5c8>
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	0e9b      	lsrs	r3, r3, #26
 80096de:	3301      	adds	r3, #1
 80096e0:	069b      	lsls	r3, r3, #26
 80096e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80096e6:	e015      	b.n	8009714 <HAL_ADC_ConfigChannel+0x5f4>
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f0:	fa93 f3a3 	rbit	r3, r3
 80096f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80096f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80096fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8009700:	2320      	movs	r3, #32
 8009702:	e003      	b.n	800970c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8009704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009706:	fab3 f383 	clz	r3, r3
 800970a:	b2db      	uxtb	r3, r3
 800970c:	3301      	adds	r3, #1
 800970e:	069b      	lsls	r3, r3, #26
 8009710:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800971c:	2b00      	cmp	r3, #0
 800971e:	d109      	bne.n	8009734 <HAL_ADC_ConfigChannel+0x614>
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	0e9b      	lsrs	r3, r3, #26
 8009726:	3301      	adds	r3, #1
 8009728:	f003 031f 	and.w	r3, r3, #31
 800972c:	2101      	movs	r1, #1
 800972e:	fa01 f303 	lsl.w	r3, r1, r3
 8009732:	e017      	b.n	8009764 <HAL_ADC_ConfigChannel+0x644>
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	fa93 f3a3 	rbit	r3, r3
 8009740:	61fb      	str	r3, [r7, #28]
  return result;
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009748:	2b00      	cmp	r3, #0
 800974a:	d101      	bne.n	8009750 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800974c:	2320      	movs	r3, #32
 800974e:	e003      	b.n	8009758 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8009750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009752:	fab3 f383 	clz	r3, r3
 8009756:	b2db      	uxtb	r3, r3
 8009758:	3301      	adds	r3, #1
 800975a:	f003 031f 	and.w	r3, r3, #31
 800975e:	2101      	movs	r1, #1
 8009760:	fa01 f303 	lsl.w	r3, r1, r3
 8009764:	ea42 0103 	orr.w	r1, r2, r3
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10d      	bne.n	8009790 <HAL_ADC_ConfigChannel+0x670>
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	0e9b      	lsrs	r3, r3, #26
 800977a:	3301      	adds	r3, #1
 800977c:	f003 021f 	and.w	r2, r3, #31
 8009780:	4613      	mov	r3, r2
 8009782:	005b      	lsls	r3, r3, #1
 8009784:	4413      	add	r3, r2
 8009786:	3b1e      	subs	r3, #30
 8009788:	051b      	lsls	r3, r3, #20
 800978a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800978e:	e01b      	b.n	80097c8 <HAL_ADC_ConfigChannel+0x6a8>
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	fa93 f3a3 	rbit	r3, r3
 800979c:	613b      	str	r3, [r7, #16]
  return result;
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d101      	bne.n	80097ac <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80097a8:	2320      	movs	r3, #32
 80097aa:	e003      	b.n	80097b4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	fab3 f383 	clz	r3, r3
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	3301      	adds	r3, #1
 80097b6:	f003 021f 	and.w	r2, r3, #31
 80097ba:	4613      	mov	r3, r2
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	4413      	add	r3, r2
 80097c0:	3b1e      	subs	r3, #30
 80097c2:	051b      	lsls	r3, r3, #20
 80097c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80097c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80097ce:	4619      	mov	r1, r3
 80097d0:	f7ff f903 	bl	80089da <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	4b09      	ldr	r3, [pc, #36]	@ (8009800 <HAL_ADC_ConfigChannel+0x6e0>)
 80097da:	4013      	ands	r3, r2
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f000 80af 	beq.w	8009940 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097ea:	d004      	beq.n	80097f6 <HAL_ADC_ConfigChannel+0x6d6>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a04      	ldr	r2, [pc, #16]	@ (8009804 <HAL_ADC_ConfigChannel+0x6e4>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d10a      	bne.n	800980c <HAL_ADC_ConfigChannel+0x6ec>
 80097f6:	4b04      	ldr	r3, [pc, #16]	@ (8009808 <HAL_ADC_ConfigChannel+0x6e8>)
 80097f8:	e009      	b.n	800980e <HAL_ADC_ConfigChannel+0x6ee>
 80097fa:	bf00      	nop
 80097fc:	407f0000 	.word	0x407f0000
 8009800:	80080000 	.word	0x80080000
 8009804:	50000100 	.word	0x50000100
 8009808:	50000300 	.word	0x50000300
 800980c:	4b51      	ldr	r3, [pc, #324]	@ (8009954 <HAL_ADC_ConfigChannel+0x834>)
 800980e:	4618      	mov	r0, r3
 8009810:	f7fe fff8 	bl	8008804 <LL_ADC_GetCommonPathInternalCh>
 8009814:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a4e      	ldr	r2, [pc, #312]	@ (8009958 <HAL_ADC_ConfigChannel+0x838>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d004      	beq.n	800982c <HAL_ADC_ConfigChannel+0x70c>
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a4d      	ldr	r2, [pc, #308]	@ (800995c <HAL_ADC_ConfigChannel+0x83c>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d134      	bne.n	8009896 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800982c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009830:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d12e      	bne.n	8009896 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009840:	d17e      	bne.n	8009940 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800984a:	d004      	beq.n	8009856 <HAL_ADC_ConfigChannel+0x736>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a43      	ldr	r2, [pc, #268]	@ (8009960 <HAL_ADC_ConfigChannel+0x840>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d101      	bne.n	800985a <HAL_ADC_ConfigChannel+0x73a>
 8009856:	4a43      	ldr	r2, [pc, #268]	@ (8009964 <HAL_ADC_ConfigChannel+0x844>)
 8009858:	e000      	b.n	800985c <HAL_ADC_ConfigChannel+0x73c>
 800985a:	4a3e      	ldr	r2, [pc, #248]	@ (8009954 <HAL_ADC_ConfigChannel+0x834>)
 800985c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009860:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009864:	4619      	mov	r1, r3
 8009866:	4610      	mov	r0, r2
 8009868:	f7fe ffb9 	bl	80087de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800986c:	4b3e      	ldr	r3, [pc, #248]	@ (8009968 <HAL_ADC_ConfigChannel+0x848>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	099b      	lsrs	r3, r3, #6
 8009872:	4a3e      	ldr	r2, [pc, #248]	@ (800996c <HAL_ADC_ConfigChannel+0x84c>)
 8009874:	fba2 2303 	umull	r2, r3, r2, r3
 8009878:	099b      	lsrs	r3, r3, #6
 800987a:	1c5a      	adds	r2, r3, #1
 800987c:	4613      	mov	r3, r2
 800987e:	005b      	lsls	r3, r3, #1
 8009880:	4413      	add	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009886:	e002      	b.n	800988e <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	3b01      	subs	r3, #1
 800988c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1f9      	bne.n	8009888 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009894:	e054      	b.n	8009940 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a35      	ldr	r2, [pc, #212]	@ (8009970 <HAL_ADC_ConfigChannel+0x850>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d120      	bne.n	80098e2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80098a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80098a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d11a      	bne.n	80098e2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098b4:	d144      	bne.n	8009940 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098be:	d004      	beq.n	80098ca <HAL_ADC_ConfigChannel+0x7aa>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a26      	ldr	r2, [pc, #152]	@ (8009960 <HAL_ADC_ConfigChannel+0x840>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d101      	bne.n	80098ce <HAL_ADC_ConfigChannel+0x7ae>
 80098ca:	4a26      	ldr	r2, [pc, #152]	@ (8009964 <HAL_ADC_ConfigChannel+0x844>)
 80098cc:	e000      	b.n	80098d0 <HAL_ADC_ConfigChannel+0x7b0>
 80098ce:	4a21      	ldr	r2, [pc, #132]	@ (8009954 <HAL_ADC_ConfigChannel+0x834>)
 80098d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80098d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80098d8:	4619      	mov	r1, r3
 80098da:	4610      	mov	r0, r2
 80098dc:	f7fe ff7f 	bl	80087de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80098e0:	e02e      	b.n	8009940 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a23      	ldr	r2, [pc, #140]	@ (8009974 <HAL_ADC_ConfigChannel+0x854>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d129      	bne.n	8009940 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80098ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80098f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d123      	bne.n	8009940 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a18      	ldr	r2, [pc, #96]	@ (8009960 <HAL_ADC_ConfigChannel+0x840>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d01e      	beq.n	8009940 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800990a:	d004      	beq.n	8009916 <HAL_ADC_ConfigChannel+0x7f6>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a13      	ldr	r2, [pc, #76]	@ (8009960 <HAL_ADC_ConfigChannel+0x840>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d101      	bne.n	800991a <HAL_ADC_ConfigChannel+0x7fa>
 8009916:	4a13      	ldr	r2, [pc, #76]	@ (8009964 <HAL_ADC_ConfigChannel+0x844>)
 8009918:	e000      	b.n	800991c <HAL_ADC_ConfigChannel+0x7fc>
 800991a:	4a0e      	ldr	r2, [pc, #56]	@ (8009954 <HAL_ADC_ConfigChannel+0x834>)
 800991c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009920:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009924:	4619      	mov	r1, r3
 8009926:	4610      	mov	r0, r2
 8009928:	f7fe ff59 	bl	80087de <LL_ADC_SetCommonPathInternalCh>
 800992c:	e008      	b.n	8009940 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009932:	f043 0220 	orr.w	r2, r3, #32
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8009948:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800994c:	4618      	mov	r0, r3
 800994e:	37d8      	adds	r7, #216	@ 0xd8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	50000700 	.word	0x50000700
 8009958:	c3210000 	.word	0xc3210000
 800995c:	90c00010 	.word	0x90c00010
 8009960:	50000100 	.word	0x50000100
 8009964:	50000300 	.word	0x50000300
 8009968:	20000004 	.word	0x20000004
 800996c:	053e2d63 	.word	0x053e2d63
 8009970:	c7520000 	.word	0xc7520000
 8009974:	cb840000 	.word	0xcb840000

08009978 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8009980:	2300      	movs	r3, #0
 8009982:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4618      	mov	r0, r3
 800998a:	f7ff f8e5 	bl	8008b58 <LL_ADC_IsEnabled>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d176      	bne.n	8009a82 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	689a      	ldr	r2, [r3, #8]
 800999a:	4b3c      	ldr	r3, [pc, #240]	@ (8009a8c <ADC_Enable+0x114>)
 800999c:	4013      	ands	r3, r2
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00d      	beq.n	80099be <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099a6:	f043 0210 	orr.w	r2, r3, #16
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099b2:	f043 0201 	orr.w	r2, r3, #1
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	e062      	b.n	8009a84 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff f8b4 	bl	8008b30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099d0:	d004      	beq.n	80099dc <ADC_Enable+0x64>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a2e      	ldr	r2, [pc, #184]	@ (8009a90 <ADC_Enable+0x118>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d101      	bne.n	80099e0 <ADC_Enable+0x68>
 80099dc:	4b2d      	ldr	r3, [pc, #180]	@ (8009a94 <ADC_Enable+0x11c>)
 80099de:	e000      	b.n	80099e2 <ADC_Enable+0x6a>
 80099e0:	4b2d      	ldr	r3, [pc, #180]	@ (8009a98 <ADC_Enable+0x120>)
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fe ff0e 	bl	8008804 <LL_ADC_GetCommonPathInternalCh>
 80099e8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80099ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d013      	beq.n	8009a1a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80099f2:	4b2a      	ldr	r3, [pc, #168]	@ (8009a9c <ADC_Enable+0x124>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	099b      	lsrs	r3, r3, #6
 80099f8:	4a29      	ldr	r2, [pc, #164]	@ (8009aa0 <ADC_Enable+0x128>)
 80099fa:	fba2 2303 	umull	r2, r3, r2, r3
 80099fe:	099b      	lsrs	r3, r3, #6
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	4613      	mov	r3, r2
 8009a04:	005b      	lsls	r3, r3, #1
 8009a06:	4413      	add	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009a0c:	e002      	b.n	8009a14 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	3b01      	subs	r3, #1
 8009a12:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1f9      	bne.n	8009a0e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009a1a:	f7fe fe9f 	bl	800875c <HAL_GetTick>
 8009a1e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009a20:	e028      	b.n	8009a74 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7ff f896 	bl	8008b58 <LL_ADC_IsEnabled>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d104      	bne.n	8009a3c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7ff f87a 	bl	8008b30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009a3c:	f7fe fe8e 	bl	800875c <HAL_GetTick>
 8009a40:	4602      	mov	r2, r0
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d914      	bls.n	8009a74 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 0301 	and.w	r3, r3, #1
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d00d      	beq.n	8009a74 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a5c:	f043 0210 	orr.w	r2, r3, #16
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a68:	f043 0201 	orr.w	r2, r3, #1
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e007      	b.n	8009a84 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d1cf      	bne.n	8009a22 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	8000003f 	.word	0x8000003f
 8009a90:	50000100 	.word	0x50000100
 8009a94:	50000300 	.word	0x50000300
 8009a98:	50000700 	.word	0x50000700
 8009a9c:	20000004 	.word	0x20000004
 8009aa0:	053e2d63 	.word	0x053e2d63

08009aa4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ab6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d14b      	bne.n	8009b56 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ac2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 0308 	and.w	r3, r3, #8
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d021      	beq.n	8009b1c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fe ff3d 	bl	800895c <LL_ADC_REG_IsTriggerSourceSWStart>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d032      	beq.n	8009b4e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d12b      	bne.n	8009b4e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009afa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d11f      	bne.n	8009b4e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b12:	f043 0201 	orr.w	r2, r3, #1
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009b1a:	e018      	b.n	8009b4e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	f003 0302 	and.w	r3, r3, #2
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d111      	bne.n	8009b4e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b2e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d105      	bne.n	8009b4e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b46:	f043 0201 	orr.w	r2, r3, #1
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f7ff fac8 	bl	80090e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009b54:	e00e      	b.n	8009b74 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b5a:	f003 0310 	and.w	r3, r3, #16
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d003      	beq.n	8009b6a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f7ff fad2 	bl	800910c <HAL_ADC_ErrorCallback>
}
 8009b68:	e004      	b.n	8009b74 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	4798      	blx	r3
}
 8009b74:	bf00      	nop
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b88:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f7ff fab4 	bl	80090f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009b90:	bf00      	nop
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009baa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bb6:	f043 0204 	orr.w	r2, r3, #4
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f7ff faa4 	bl	800910c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009bc4:	bf00      	nop
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <LL_ADC_IsEnabled>:
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f003 0301 	and.w	r3, r3, #1
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d101      	bne.n	8009be4 <LL_ADC_IsEnabled+0x18>
 8009be0:	2301      	movs	r3, #1
 8009be2:	e000      	b.n	8009be6 <LL_ADC_IsEnabled+0x1a>
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <LL_ADC_REG_IsConversionOngoing>:
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f003 0304 	and.w	r3, r3, #4
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d101      	bne.n	8009c0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8009c06:	2301      	movs	r3, #1
 8009c08:	e000      	b.n	8009c0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8009c18:	b590      	push	{r4, r7, lr}
 8009c1a:	b0a1      	sub	sp, #132	@ 0x84
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009c22:	2300      	movs	r3, #0
 8009c24:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d101      	bne.n	8009c36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009c32:	2302      	movs	r3, #2
 8009c34:	e0cb      	b.n	8009dce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8009c3e:	2300      	movs	r3, #0
 8009c40:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8009c42:	2300      	movs	r3, #0
 8009c44:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c4e:	d102      	bne.n	8009c56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009c50:	4b61      	ldr	r3, [pc, #388]	@ (8009dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8009c52:	60bb      	str	r3, [r7, #8]
 8009c54:	e001      	b.n	8009c5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8009c56:	2300      	movs	r3, #0
 8009c58:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10b      	bne.n	8009c78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c64:	f043 0220 	orr.w	r2, r3, #32
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e0aa      	b.n	8009dce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7ff ffb9 	bl	8009bf2 <LL_ADC_REG_IsConversionOngoing>
 8009c80:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7ff ffb3 	bl	8009bf2 <LL_ADC_REG_IsConversionOngoing>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f040 808c 	bne.w	8009dac <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8009c94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f040 8088 	bne.w	8009dac <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ca4:	d004      	beq.n	8009cb0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a4b      	ldr	r2, [pc, #300]	@ (8009dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d101      	bne.n	8009cb4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8009cb0:	4b4a      	ldr	r3, [pc, #296]	@ (8009ddc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8009cb2:	e000      	b.n	8009cb6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8009cb4:	4b4a      	ldr	r3, [pc, #296]	@ (8009de0 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8009cb6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d041      	beq.n	8009d44 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009cc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	6859      	ldr	r1, [r3, #4]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009cd2:	035b      	lsls	r3, r3, #13
 8009cd4:	430b      	orrs	r3, r1
 8009cd6:	431a      	orrs	r2, r3
 8009cd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cda:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ce4:	d004      	beq.n	8009cf0 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a3b      	ldr	r2, [pc, #236]	@ (8009dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d10f      	bne.n	8009d10 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8009cf0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8009cf4:	f7ff ff6a 	bl	8009bcc <LL_ADC_IsEnabled>
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	4837      	ldr	r0, [pc, #220]	@ (8009dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8009cfc:	f7ff ff66 	bl	8009bcc <LL_ADC_IsEnabled>
 8009d00:	4603      	mov	r3, r0
 8009d02:	4323      	orrs	r3, r4
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	bf0c      	ite	eq
 8009d08:	2301      	moveq	r3, #1
 8009d0a:	2300      	movne	r3, #0
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	e008      	b.n	8009d22 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8009d10:	4834      	ldr	r0, [pc, #208]	@ (8009de4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8009d12:	f7ff ff5b 	bl	8009bcc <LL_ADC_IsEnabled>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	bf0c      	ite	eq
 8009d1c:	2301      	moveq	r3, #1
 8009d1e:	2300      	movne	r3, #0
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d04c      	beq.n	8009dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009d26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8009d2e:	f023 030f 	bic.w	r3, r3, #15
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	6811      	ldr	r1, [r2, #0]
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	6892      	ldr	r2, [r2, #8]
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	431a      	orrs	r2, r3
 8009d3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d40:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009d42:	e03d      	b.n	8009dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009d44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009d4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d4e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d58:	d004      	beq.n	8009d64 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8009dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d10f      	bne.n	8009d84 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8009d64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8009d68:	f7ff ff30 	bl	8009bcc <LL_ADC_IsEnabled>
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	481a      	ldr	r0, [pc, #104]	@ (8009dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8009d70:	f7ff ff2c 	bl	8009bcc <LL_ADC_IsEnabled>
 8009d74:	4603      	mov	r3, r0
 8009d76:	4323      	orrs	r3, r4
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	bf0c      	ite	eq
 8009d7c:	2301      	moveq	r3, #1
 8009d7e:	2300      	movne	r3, #0
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	e008      	b.n	8009d96 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8009d84:	4817      	ldr	r0, [pc, #92]	@ (8009de4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8009d86:	f7ff ff21 	bl	8009bcc <LL_ADC_IsEnabled>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	bf0c      	ite	eq
 8009d90:	2301      	moveq	r3, #1
 8009d92:	2300      	movne	r3, #0
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d012      	beq.n	8009dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009d9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8009da2:	f023 030f 	bic.w	r3, r3, #15
 8009da6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009da8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009daa:	e009      	b.n	8009dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009db0:	f043 0220 	orr.w	r2, r3, #32
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8009dbe:	e000      	b.n	8009dc2 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009dc0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8009dca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3784      	adds	r7, #132	@ 0x84
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd90      	pop	{r4, r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	50000100 	.word	0x50000100
 8009ddc:	50000300 	.word	0x50000300
 8009de0:	50000700 	.word	0x50000700
 8009de4:	50000400 	.word	0x50000400

08009de8 <__NVIC_SetPriorityGrouping>:
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f003 0307 	and.w	r3, r3, #7
 8009df6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009df8:	4b0c      	ldr	r3, [pc, #48]	@ (8009e2c <__NVIC_SetPriorityGrouping+0x44>)
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009e04:	4013      	ands	r3, r2
 8009e06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009e1a:	4a04      	ldr	r2, [pc, #16]	@ (8009e2c <__NVIC_SetPriorityGrouping+0x44>)
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	60d3      	str	r3, [r2, #12]
}
 8009e20:	bf00      	nop
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	e000ed00 	.word	0xe000ed00

08009e30 <__NVIC_GetPriorityGrouping>:
{
 8009e30:	b480      	push	{r7}
 8009e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009e34:	4b04      	ldr	r3, [pc, #16]	@ (8009e48 <__NVIC_GetPriorityGrouping+0x18>)
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	0a1b      	lsrs	r3, r3, #8
 8009e3a:	f003 0307 	and.w	r3, r3, #7
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	e000ed00 	.word	0xe000ed00

08009e4c <__NVIC_EnableIRQ>:
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	4603      	mov	r3, r0
 8009e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	db0b      	blt.n	8009e76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e5e:	79fb      	ldrb	r3, [r7, #7]
 8009e60:	f003 021f 	and.w	r2, r3, #31
 8009e64:	4907      	ldr	r1, [pc, #28]	@ (8009e84 <__NVIC_EnableIRQ+0x38>)
 8009e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e6a:	095b      	lsrs	r3, r3, #5
 8009e6c:	2001      	movs	r0, #1
 8009e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8009e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009e76:	bf00      	nop
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	e000e100 	.word	0xe000e100

08009e88 <__NVIC_SetPriority>:
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	4603      	mov	r3, r0
 8009e90:	6039      	str	r1, [r7, #0]
 8009e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	db0a      	blt.n	8009eb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	490c      	ldr	r1, [pc, #48]	@ (8009ed4 <__NVIC_SetPriority+0x4c>)
 8009ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ea6:	0112      	lsls	r2, r2, #4
 8009ea8:	b2d2      	uxtb	r2, r2
 8009eaa:	440b      	add	r3, r1
 8009eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009eb0:	e00a      	b.n	8009ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	4908      	ldr	r1, [pc, #32]	@ (8009ed8 <__NVIC_SetPriority+0x50>)
 8009eb8:	79fb      	ldrb	r3, [r7, #7]
 8009eba:	f003 030f 	and.w	r3, r3, #15
 8009ebe:	3b04      	subs	r3, #4
 8009ec0:	0112      	lsls	r2, r2, #4
 8009ec2:	b2d2      	uxtb	r2, r2
 8009ec4:	440b      	add	r3, r1
 8009ec6:	761a      	strb	r2, [r3, #24]
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	e000e100 	.word	0xe000e100
 8009ed8:	e000ed00 	.word	0xe000ed00

08009edc <NVIC_EncodePriority>:
{
 8009edc:	b480      	push	{r7}
 8009ede:	b089      	sub	sp, #36	@ 0x24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f003 0307 	and.w	r3, r3, #7
 8009eee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	f1c3 0307 	rsb	r3, r3, #7
 8009ef6:	2b04      	cmp	r3, #4
 8009ef8:	bf28      	it	cs
 8009efa:	2304      	movcs	r3, #4
 8009efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	3304      	adds	r3, #4
 8009f02:	2b06      	cmp	r3, #6
 8009f04:	d902      	bls.n	8009f0c <NVIC_EncodePriority+0x30>
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	3b03      	subs	r3, #3
 8009f0a:	e000      	b.n	8009f0e <NVIC_EncodePriority+0x32>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f10:	f04f 32ff 	mov.w	r2, #4294967295
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	fa02 f303 	lsl.w	r3, r2, r3
 8009f1a:	43da      	mvns	r2, r3
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	401a      	ands	r2, r3
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009f24:	f04f 31ff 	mov.w	r1, #4294967295
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f2e:	43d9      	mvns	r1, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f34:	4313      	orrs	r3, r2
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3724      	adds	r7, #36	@ 0x24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
	...

08009f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f54:	d301      	bcc.n	8009f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009f56:	2301      	movs	r3, #1
 8009f58:	e00f      	b.n	8009f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8009f84 <SysTick_Config+0x40>)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009f62:	210f      	movs	r1, #15
 8009f64:	f04f 30ff 	mov.w	r0, #4294967295
 8009f68:	f7ff ff8e 	bl	8009e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009f6c:	4b05      	ldr	r3, [pc, #20]	@ (8009f84 <SysTick_Config+0x40>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009f72:	4b04      	ldr	r3, [pc, #16]	@ (8009f84 <SysTick_Config+0x40>)
 8009f74:	2207      	movs	r2, #7
 8009f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	e000e010 	.word	0xe000e010

08009f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7ff ff29 	bl	8009de8 <__NVIC_SetPriorityGrouping>
}
 8009f96:	bf00      	nop
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b086      	sub	sp, #24
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	60b9      	str	r1, [r7, #8]
 8009fa8:	607a      	str	r2, [r7, #4]
 8009faa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009fac:	f7ff ff40 	bl	8009e30 <__NVIC_GetPriorityGrouping>
 8009fb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	68b9      	ldr	r1, [r7, #8]
 8009fb6:	6978      	ldr	r0, [r7, #20]
 8009fb8:	f7ff ff90 	bl	8009edc <NVIC_EncodePriority>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7ff ff5f 	bl	8009e88 <__NVIC_SetPriority>
}
 8009fca:	bf00      	nop
 8009fcc:	3718      	adds	r7, #24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b082      	sub	sp, #8
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	4603      	mov	r3, r0
 8009fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7ff ff33 	bl	8009e4c <__NVIC_EnableIRQ>
}
 8009fe6:	bf00      	nop
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b082      	sub	sp, #8
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f7ff ffa4 	bl	8009f44 <SysTick_Config>
 8009ffc:	4603      	mov	r3, r0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
	...

0800a008 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e08d      	b.n	800a136 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	461a      	mov	r2, r3
 800a020:	4b47      	ldr	r3, [pc, #284]	@ (800a140 <HAL_DMA_Init+0x138>)
 800a022:	429a      	cmp	r2, r3
 800a024:	d80f      	bhi.n	800a046 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	461a      	mov	r2, r3
 800a02c:	4b45      	ldr	r3, [pc, #276]	@ (800a144 <HAL_DMA_Init+0x13c>)
 800a02e:	4413      	add	r3, r2
 800a030:	4a45      	ldr	r2, [pc, #276]	@ (800a148 <HAL_DMA_Init+0x140>)
 800a032:	fba2 2303 	umull	r2, r3, r2, r3
 800a036:	091b      	lsrs	r3, r3, #4
 800a038:	009a      	lsls	r2, r3, #2
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a42      	ldr	r2, [pc, #264]	@ (800a14c <HAL_DMA_Init+0x144>)
 800a042:	641a      	str	r2, [r3, #64]	@ 0x40
 800a044:	e00e      	b.n	800a064 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	4b40      	ldr	r3, [pc, #256]	@ (800a150 <HAL_DMA_Init+0x148>)
 800a04e:	4413      	add	r3, r2
 800a050:	4a3d      	ldr	r2, [pc, #244]	@ (800a148 <HAL_DMA_Init+0x140>)
 800a052:	fba2 2303 	umull	r2, r3, r2, r3
 800a056:	091b      	lsrs	r3, r3, #4
 800a058:	009a      	lsls	r2, r3, #2
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a3c      	ldr	r2, [pc, #240]	@ (800a154 <HAL_DMA_Init+0x14c>)
 800a062:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2202      	movs	r2, #2
 800a068:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a07a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a07e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a0a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f9b6 	bl	800a428 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0c4:	d102      	bne.n	800a0cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0d4:	b2d2      	uxtb	r2, r2
 800a0d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a0e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d010      	beq.n	800a10c <HAL_DMA_Init+0x104>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	2b04      	cmp	r3, #4
 800a0f0:	d80c      	bhi.n	800a10c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f9d6 	bl	800a4a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a108:	605a      	str	r2, [r3, #4]
 800a10a:	e008      	b.n	800a11e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	40020407 	.word	0x40020407
 800a144:	bffdfff8 	.word	0xbffdfff8
 800a148:	cccccccd 	.word	0xcccccccd
 800a14c:	40020000 	.word	0x40020000
 800a150:	bffdfbf8 	.word	0xbffdfbf8
 800a154:	40020400 	.word	0x40020400

0800a158 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
 800a164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a170:	2b01      	cmp	r3, #1
 800a172:	d101      	bne.n	800a178 <HAL_DMA_Start_IT+0x20>
 800a174:	2302      	movs	r3, #2
 800a176:	e066      	b.n	800a246 <HAL_DMA_Start_IT+0xee>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a186:	b2db      	uxtb	r3, r3
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d155      	bne.n	800a238 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2202      	movs	r2, #2
 800a190:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f022 0201 	bic.w	r2, r2, #1
 800a1a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	68b9      	ldr	r1, [r7, #8]
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f000 f8fb 	bl	800a3ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d008      	beq.n	800a1d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f042 020e 	orr.w	r2, r2, #14
 800a1cc:	601a      	str	r2, [r3, #0]
 800a1ce:	e00f      	b.n	800a1f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f022 0204 	bic.w	r2, r2, #4
 800a1de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f042 020a 	orr.w	r2, r2, #10
 800a1ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d007      	beq.n	800a20e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a208:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a20c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a212:	2b00      	cmp	r3, #0
 800a214:	d007      	beq.n	800a226 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a220:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a224:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f042 0201 	orr.w	r2, r2, #1
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	e005      	b.n	800a244 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a240:	2302      	movs	r3, #2
 800a242:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a244:	7dfb      	ldrb	r3, [r7, #23]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a26a:	f003 031f 	and.w	r3, r3, #31
 800a26e:	2204      	movs	r2, #4
 800a270:	409a      	lsls	r2, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	4013      	ands	r3, r2
 800a276:	2b00      	cmp	r3, #0
 800a278:	d026      	beq.n	800a2c8 <HAL_DMA_IRQHandler+0x7a>
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	f003 0304 	and.w	r3, r3, #4
 800a280:	2b00      	cmp	r3, #0
 800a282:	d021      	beq.n	800a2c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f003 0320 	and.w	r3, r3, #32
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d107      	bne.n	800a2a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f022 0204 	bic.w	r2, r2, #4
 800a2a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2a6:	f003 021f 	and.w	r2, r3, #31
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2ae:	2104      	movs	r1, #4
 800a2b0:	fa01 f202 	lsl.w	r2, r1, r2
 800a2b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d071      	beq.n	800a3a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a2c6:	e06c      	b.n	800a3a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2cc:	f003 031f 	and.w	r3, r3, #31
 800a2d0:	2202      	movs	r2, #2
 800a2d2:	409a      	lsls	r2, r3
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d02e      	beq.n	800a33a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	f003 0302 	and.w	r3, r3, #2
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d029      	beq.n	800a33a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 0320 	and.w	r3, r3, #32
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10b      	bne.n	800a30c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f022 020a 	bic.w	r2, r2, #10
 800a302:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a310:	f003 021f 	and.w	r2, r3, #31
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a318:	2102      	movs	r1, #2
 800a31a:	fa01 f202 	lsl.w	r2, r1, r2
 800a31e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d038      	beq.n	800a3a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a338:	e033      	b.n	800a3a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a33e:	f003 031f 	and.w	r3, r3, #31
 800a342:	2208      	movs	r2, #8
 800a344:	409a      	lsls	r2, r3
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	4013      	ands	r3, r2
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d02a      	beq.n	800a3a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	f003 0308 	and.w	r3, r3, #8
 800a354:	2b00      	cmp	r3, #0
 800a356:	d025      	beq.n	800a3a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f022 020e 	bic.w	r2, r2, #14
 800a366:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a36c:	f003 021f 	and.w	r2, r3, #31
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a374:	2101      	movs	r1, #1
 800a376:	fa01 f202 	lsl.w	r2, r1, r2
 800a37a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a396:	2b00      	cmp	r3, #0
 800a398:	d004      	beq.n	800a3a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a3a2:	bf00      	nop
 800a3a4:	bf00      	nop
}
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
 800a3b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a3c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d004      	beq.n	800a3d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a3d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3da:	f003 021f 	and.w	r2, r3, #31
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	fa01 f202 	lsl.w	r2, r1, r2
 800a3e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	2b10      	cmp	r3, #16
 800a3f8:	d108      	bne.n	800a40c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a40a:	e007      	b.n	800a41c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	60da      	str	r2, [r3, #12]
}
 800a41c:	bf00      	nop
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a428:	b480      	push	{r7}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	461a      	mov	r2, r3
 800a436:	4b16      	ldr	r3, [pc, #88]	@ (800a490 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a438:	429a      	cmp	r2, r3
 800a43a:	d802      	bhi.n	800a442 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a43c:	4b15      	ldr	r3, [pc, #84]	@ (800a494 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a43e:	617b      	str	r3, [r7, #20]
 800a440:	e001      	b.n	800a446 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a442:	4b15      	ldr	r3, [pc, #84]	@ (800a498 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a444:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	3b08      	subs	r3, #8
 800a452:	4a12      	ldr	r2, [pc, #72]	@ (800a49c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a454:	fba2 2303 	umull	r2, r3, r2, r3
 800a458:	091b      	lsrs	r3, r3, #4
 800a45a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a460:	089b      	lsrs	r3, r3, #2
 800a462:	009a      	lsls	r2, r3, #2
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	4413      	add	r3, r2
 800a468:	461a      	mov	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a0b      	ldr	r2, [pc, #44]	@ (800a4a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a472:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f003 031f 	and.w	r3, r3, #31
 800a47a:	2201      	movs	r2, #1
 800a47c:	409a      	lsls	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a482:	bf00      	nop
 800a484:	371c      	adds	r7, #28
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	40020407 	.word	0x40020407
 800a494:	40020800 	.word	0x40020800
 800a498:	40020820 	.word	0x40020820
 800a49c:	cccccccd 	.word	0xcccccccd
 800a4a0:	40020880 	.word	0x40020880

0800a4a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a4e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a4b8:	4413      	add	r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	461a      	mov	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a08      	ldr	r2, [pc, #32]	@ (800a4e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a4c6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	f003 031f 	and.w	r3, r3, #31
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	409a      	lsls	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800a4d8:	bf00      	nop
 800a4da:	3714      	adds	r7, #20
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr
 800a4e4:	1000823f 	.word	0x1000823f
 800a4e8:	40020940 	.word	0x40020940

0800a4ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a4fa:	e15a      	b.n	800a7b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	2101      	movs	r1, #1
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	fa01 f303 	lsl.w	r3, r1, r3
 800a508:	4013      	ands	r3, r2
 800a50a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f000 814c 	beq.w	800a7ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	f003 0303 	and.w	r3, r3, #3
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d005      	beq.n	800a52c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d130      	bne.n	800a58e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	005b      	lsls	r3, r3, #1
 800a536:	2203      	movs	r2, #3
 800a538:	fa02 f303 	lsl.w	r3, r2, r3
 800a53c:	43db      	mvns	r3, r3
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	4013      	ands	r3, r2
 800a542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	68da      	ldr	r2, [r3, #12]
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	005b      	lsls	r3, r3, #1
 800a54c:	fa02 f303 	lsl.w	r3, r2, r3
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	4313      	orrs	r3, r2
 800a554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a562:	2201      	movs	r2, #1
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	fa02 f303 	lsl.w	r3, r2, r3
 800a56a:	43db      	mvns	r3, r3
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	4013      	ands	r3, r2
 800a570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	091b      	lsrs	r3, r3, #4
 800a578:	f003 0201 	and.w	r2, r3, #1
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	fa02 f303 	lsl.w	r3, r2, r3
 800a582:	693a      	ldr	r2, [r7, #16]
 800a584:	4313      	orrs	r3, r2
 800a586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	693a      	ldr	r2, [r7, #16]
 800a58c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	f003 0303 	and.w	r3, r3, #3
 800a596:	2b03      	cmp	r3, #3
 800a598:	d017      	beq.n	800a5ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	005b      	lsls	r3, r3, #1
 800a5a4:	2203      	movs	r2, #3
 800a5a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a5aa:	43db      	mvns	r3, r3
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	005b      	lsls	r3, r3, #1
 800a5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	f003 0303 	and.w	r3, r3, #3
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d123      	bne.n	800a61e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	08da      	lsrs	r2, r3, #3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	3208      	adds	r2, #8
 800a5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	f003 0307 	and.w	r3, r3, #7
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	220f      	movs	r2, #15
 800a5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f2:	43db      	mvns	r3, r3
 800a5f4:	693a      	ldr	r2, [r7, #16]
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	691a      	ldr	r2, [r3, #16]
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f003 0307 	and.w	r3, r3, #7
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	fa02 f303 	lsl.w	r3, r2, r3
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	08da      	lsrs	r2, r3, #3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	3208      	adds	r2, #8
 800a618:	6939      	ldr	r1, [r7, #16]
 800a61a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	005b      	lsls	r3, r3, #1
 800a628:	2203      	movs	r2, #3
 800a62a:	fa02 f303 	lsl.w	r3, r2, r3
 800a62e:	43db      	mvns	r3, r3
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	4013      	ands	r3, r2
 800a634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	f003 0203 	and.w	r2, r3, #3
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	fa02 f303 	lsl.w	r3, r2, r3
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	4313      	orrs	r3, r2
 800a64a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f000 80a6 	beq.w	800a7ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a660:	4b5b      	ldr	r3, [pc, #364]	@ (800a7d0 <HAL_GPIO_Init+0x2e4>)
 800a662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a664:	4a5a      	ldr	r2, [pc, #360]	@ (800a7d0 <HAL_GPIO_Init+0x2e4>)
 800a666:	f043 0301 	orr.w	r3, r3, #1
 800a66a:	6613      	str	r3, [r2, #96]	@ 0x60
 800a66c:	4b58      	ldr	r3, [pc, #352]	@ (800a7d0 <HAL_GPIO_Init+0x2e4>)
 800a66e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a670:	f003 0301 	and.w	r3, r3, #1
 800a674:	60bb      	str	r3, [r7, #8]
 800a676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a678:	4a56      	ldr	r2, [pc, #344]	@ (800a7d4 <HAL_GPIO_Init+0x2e8>)
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	089b      	lsrs	r3, r3, #2
 800a67e:	3302      	adds	r3, #2
 800a680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	f003 0303 	and.w	r3, r3, #3
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	220f      	movs	r2, #15
 800a690:	fa02 f303 	lsl.w	r3, r2, r3
 800a694:	43db      	mvns	r3, r3
 800a696:	693a      	ldr	r2, [r7, #16]
 800a698:	4013      	ands	r3, r2
 800a69a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a6a2:	d01f      	beq.n	800a6e4 <HAL_GPIO_Init+0x1f8>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a4c      	ldr	r2, [pc, #304]	@ (800a7d8 <HAL_GPIO_Init+0x2ec>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d019      	beq.n	800a6e0 <HAL_GPIO_Init+0x1f4>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a4b      	ldr	r2, [pc, #300]	@ (800a7dc <HAL_GPIO_Init+0x2f0>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d013      	beq.n	800a6dc <HAL_GPIO_Init+0x1f0>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a4a      	ldr	r2, [pc, #296]	@ (800a7e0 <HAL_GPIO_Init+0x2f4>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d00d      	beq.n	800a6d8 <HAL_GPIO_Init+0x1ec>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a49      	ldr	r2, [pc, #292]	@ (800a7e4 <HAL_GPIO_Init+0x2f8>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d007      	beq.n	800a6d4 <HAL_GPIO_Init+0x1e8>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a48      	ldr	r2, [pc, #288]	@ (800a7e8 <HAL_GPIO_Init+0x2fc>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d101      	bne.n	800a6d0 <HAL_GPIO_Init+0x1e4>
 800a6cc:	2305      	movs	r3, #5
 800a6ce:	e00a      	b.n	800a6e6 <HAL_GPIO_Init+0x1fa>
 800a6d0:	2306      	movs	r3, #6
 800a6d2:	e008      	b.n	800a6e6 <HAL_GPIO_Init+0x1fa>
 800a6d4:	2304      	movs	r3, #4
 800a6d6:	e006      	b.n	800a6e6 <HAL_GPIO_Init+0x1fa>
 800a6d8:	2303      	movs	r3, #3
 800a6da:	e004      	b.n	800a6e6 <HAL_GPIO_Init+0x1fa>
 800a6dc:	2302      	movs	r3, #2
 800a6de:	e002      	b.n	800a6e6 <HAL_GPIO_Init+0x1fa>
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e000      	b.n	800a6e6 <HAL_GPIO_Init+0x1fa>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	f002 0203 	and.w	r2, r2, #3
 800a6ec:	0092      	lsls	r2, r2, #2
 800a6ee:	4093      	lsls	r3, r2
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a6f6:	4937      	ldr	r1, [pc, #220]	@ (800a7d4 <HAL_GPIO_Init+0x2e8>)
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	089b      	lsrs	r3, r3, #2
 800a6fc:	3302      	adds	r3, #2
 800a6fe:	693a      	ldr	r2, [r7, #16]
 800a700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a704:	4b39      	ldr	r3, [pc, #228]	@ (800a7ec <HAL_GPIO_Init+0x300>)
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	43db      	mvns	r3, r3
 800a70e:	693a      	ldr	r2, [r7, #16]
 800a710:	4013      	ands	r3, r2
 800a712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d003      	beq.n	800a728 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a720:	693a      	ldr	r2, [r7, #16]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	4313      	orrs	r3, r2
 800a726:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a728:	4a30      	ldr	r2, [pc, #192]	@ (800a7ec <HAL_GPIO_Init+0x300>)
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a72e:	4b2f      	ldr	r3, [pc, #188]	@ (800a7ec <HAL_GPIO_Init+0x300>)
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	43db      	mvns	r3, r3
 800a738:	693a      	ldr	r2, [r7, #16]
 800a73a:	4013      	ands	r3, r2
 800a73c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a746:	2b00      	cmp	r3, #0
 800a748:	d003      	beq.n	800a752 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a74a:	693a      	ldr	r2, [r7, #16]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	4313      	orrs	r3, r2
 800a750:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a752:	4a26      	ldr	r2, [pc, #152]	@ (800a7ec <HAL_GPIO_Init+0x300>)
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a758:	4b24      	ldr	r3, [pc, #144]	@ (800a7ec <HAL_GPIO_Init+0x300>)
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	43db      	mvns	r3, r3
 800a762:	693a      	ldr	r2, [r7, #16]
 800a764:	4013      	ands	r3, r2
 800a766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a770:	2b00      	cmp	r3, #0
 800a772:	d003      	beq.n	800a77c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	4313      	orrs	r3, r2
 800a77a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a77c:	4a1b      	ldr	r2, [pc, #108]	@ (800a7ec <HAL_GPIO_Init+0x300>)
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a782:	4b1a      	ldr	r3, [pc, #104]	@ (800a7ec <HAL_GPIO_Init+0x300>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	43db      	mvns	r3, r3
 800a78c:	693a      	ldr	r2, [r7, #16]
 800a78e:	4013      	ands	r3, r2
 800a790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d003      	beq.n	800a7a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a7a6:	4a11      	ldr	r2, [pc, #68]	@ (800a7ec <HAL_GPIO_Init+0x300>)
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f47f ae9d 	bne.w	800a4fc <HAL_GPIO_Init+0x10>
  }
}
 800a7c2:	bf00      	nop
 800a7c4:	bf00      	nop
 800a7c6:	371c      	adds	r7, #28
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	40021000 	.word	0x40021000
 800a7d4:	40010000 	.word	0x40010000
 800a7d8:	48000400 	.word	0x48000400
 800a7dc:	48000800 	.word	0x48000800
 800a7e0:	48000c00 	.word	0x48000c00
 800a7e4:	48001000 	.word	0x48001000
 800a7e8:	48001400 	.word	0x48001400
 800a7ec:	40010400 	.word	0x40010400

0800a7f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	807b      	strh	r3, [r7, #2]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a800:	787b      	ldrb	r3, [r7, #1]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d003      	beq.n	800a80e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a806:	887a      	ldrh	r2, [r7, #2]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a80c:	e002      	b.n	800a814 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a80e:	887a      	ldrh	r2, [r7, #2]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d101      	bne.n	800a832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	e08d      	b.n	800a94e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d106      	bne.n	800a84c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7fc fc56 	bl	80070f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2224      	movs	r2, #36	@ 0x24
 800a850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f022 0201 	bic.w	r2, r2, #1
 800a862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a870:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	689a      	ldr	r2, [r3, #8]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a880:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d107      	bne.n	800a89a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	689a      	ldr	r2, [r3, #8]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a896:	609a      	str	r2, [r3, #8]
 800a898:	e006      	b.n	800a8a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	689a      	ldr	r2, [r3, #8]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a8a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d108      	bne.n	800a8c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	685a      	ldr	r2, [r3, #4]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a8be:	605a      	str	r2, [r3, #4]
 800a8c0:	e007      	b.n	800a8d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	685a      	ldr	r2, [r3, #4]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a8d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	6812      	ldr	r2, [r2, #0]
 800a8dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a8e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	68da      	ldr	r2, [r3, #12]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a8f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	691a      	ldr	r2, [r3, #16]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	695b      	ldr	r3, [r3, #20]
 800a8fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	430a      	orrs	r2, r1
 800a90e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	69d9      	ldr	r1, [r3, #28]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a1a      	ldr	r2, [r3, #32]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	430a      	orrs	r2, r1
 800a91e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f042 0201 	orr.w	r2, r2, #1
 800a92e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2220      	movs	r2, #32
 800a93a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
	...

0800a958 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b088      	sub	sp, #32
 800a95c:	af02      	add	r7, sp, #8
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	4608      	mov	r0, r1
 800a962:	4611      	mov	r1, r2
 800a964:	461a      	mov	r2, r3
 800a966:	4603      	mov	r3, r0
 800a968:	817b      	strh	r3, [r7, #10]
 800a96a:	460b      	mov	r3, r1
 800a96c:	813b      	strh	r3, [r7, #8]
 800a96e:	4613      	mov	r3, r2
 800a970:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	2b20      	cmp	r3, #32
 800a97c:	f040 80f9 	bne.w	800ab72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <HAL_I2C_Mem_Write+0x34>
 800a986:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d105      	bne.n	800a998 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a992:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	e0ed      	b.n	800ab74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d101      	bne.n	800a9a6 <HAL_I2C_Mem_Write+0x4e>
 800a9a2:	2302      	movs	r3, #2
 800a9a4:	e0e6      	b.n	800ab74 <HAL_I2C_Mem_Write+0x21c>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a9ae:	f7fd fed5 	bl	800875c <HAL_GetTick>
 800a9b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	9300      	str	r3, [sp, #0]
 800a9b8:	2319      	movs	r3, #25
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f000 fac3 	bl	800af4c <I2C_WaitOnFlagUntilTimeout>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e0d1      	b.n	800ab74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2221      	movs	r2, #33	@ 0x21
 800a9d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2240      	movs	r2, #64	@ 0x40
 800a9dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6a3a      	ldr	r2, [r7, #32]
 800a9ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a9f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a9f8:	88f8      	ldrh	r0, [r7, #6]
 800a9fa:	893a      	ldrh	r2, [r7, #8]
 800a9fc:	8979      	ldrh	r1, [r7, #10]
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	9301      	str	r3, [sp, #4]
 800aa02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	4603      	mov	r3, r0
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f000 f9d3 	bl	800adb4 <I2C_RequestMemoryWrite>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d005      	beq.n	800aa20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e0a9      	b.n	800ab74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	2bff      	cmp	r3, #255	@ 0xff
 800aa28:	d90e      	bls.n	800aa48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	22ff      	movs	r2, #255	@ 0xff
 800aa2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	8979      	ldrh	r1, [r7, #10]
 800aa38:	2300      	movs	r3, #0
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f000 fc47 	bl	800b2d4 <I2C_TransferConfig>
 800aa46:	e00f      	b.n	800aa68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa4c:	b29a      	uxth	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	8979      	ldrh	r1, [r7, #10]
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	9300      	str	r3, [sp, #0]
 800aa5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f000 fc36 	bl	800b2d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f000 fac6 	bl	800affe <I2C_WaitOnTXISFlagUntilTimeout>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d001      	beq.n	800aa7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e07b      	b.n	800ab74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa80:	781a      	ldrb	r2, [r3, #0]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa8c:	1c5a      	adds	r2, r3, #1
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	b29a      	uxth	r2, r3
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d034      	beq.n	800ab20 <HAL_I2C_Mem_Write+0x1c8>
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d130      	bne.n	800ab20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac4:	2200      	movs	r2, #0
 800aac6:	2180      	movs	r1, #128	@ 0x80
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f000 fa3f 	bl	800af4c <I2C_WaitOnFlagUntilTimeout>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800aad4:	2301      	movs	r3, #1
 800aad6:	e04d      	b.n	800ab74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aadc:	b29b      	uxth	r3, r3
 800aade:	2bff      	cmp	r3, #255	@ 0xff
 800aae0:	d90e      	bls.n	800ab00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	22ff      	movs	r2, #255	@ 0xff
 800aae6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaec:	b2da      	uxtb	r2, r3
 800aaee:	8979      	ldrh	r1, [r7, #10]
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f000 fbeb 	bl	800b2d4 <I2C_TransferConfig>
 800aafe:	e00f      	b.n	800ab20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab04:	b29a      	uxth	r2, r3
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	8979      	ldrh	r1, [r7, #10]
 800ab12:	2300      	movs	r3, #0
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f000 fbda 	bl	800b2d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d19e      	bne.n	800aa68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab2a:	697a      	ldr	r2, [r7, #20]
 800ab2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f000 faac 	bl	800b08c <I2C_WaitOnSTOPFlagUntilTimeout>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d001      	beq.n	800ab3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e01a      	b.n	800ab74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2220      	movs	r2, #32
 800ab44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	6859      	ldr	r1, [r3, #4]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	4b0a      	ldr	r3, [pc, #40]	@ (800ab7c <HAL_I2C_Mem_Write+0x224>)
 800ab52:	400b      	ands	r3, r1
 800ab54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2220      	movs	r2, #32
 800ab5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	e000      	b.n	800ab74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ab72:	2302      	movs	r3, #2
  }
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3718      	adds	r7, #24
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	fe00e800 	.word	0xfe00e800

0800ab80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b088      	sub	sp, #32
 800ab84:	af02      	add	r7, sp, #8
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	4608      	mov	r0, r1
 800ab8a:	4611      	mov	r1, r2
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	4603      	mov	r3, r0
 800ab90:	817b      	strh	r3, [r7, #10]
 800ab92:	460b      	mov	r3, r1
 800ab94:	813b      	strh	r3, [r7, #8]
 800ab96:	4613      	mov	r3, r2
 800ab98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b20      	cmp	r3, #32
 800aba4:	f040 80fd 	bne.w	800ada2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800aba8:	6a3b      	ldr	r3, [r7, #32]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d002      	beq.n	800abb4 <HAL_I2C_Mem_Read+0x34>
 800abae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d105      	bne.n	800abc0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800abba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800abbc:	2301      	movs	r3, #1
 800abbe:	e0f1      	b.n	800ada4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d101      	bne.n	800abce <HAL_I2C_Mem_Read+0x4e>
 800abca:	2302      	movs	r3, #2
 800abcc:	e0ea      	b.n	800ada4 <HAL_I2C_Mem_Read+0x224>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2201      	movs	r2, #1
 800abd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800abd6:	f7fd fdc1 	bl	800875c <HAL_GetTick>
 800abda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	9300      	str	r3, [sp, #0]
 800abe0:	2319      	movs	r3, #25
 800abe2:	2201      	movs	r2, #1
 800abe4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f000 f9af 	bl	800af4c <I2C_WaitOnFlagUntilTimeout>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d001      	beq.n	800abf8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	e0d5      	b.n	800ada4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2222      	movs	r2, #34	@ 0x22
 800abfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2240      	movs	r2, #64	@ 0x40
 800ac04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6a3a      	ldr	r2, [r7, #32]
 800ac12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ac18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ac20:	88f8      	ldrh	r0, [r7, #6]
 800ac22:	893a      	ldrh	r2, [r7, #8]
 800ac24:	8979      	ldrh	r1, [r7, #10]
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	9301      	str	r3, [sp, #4]
 800ac2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2c:	9300      	str	r3, [sp, #0]
 800ac2e:	4603      	mov	r3, r0
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f000 f913 	bl	800ae5c <I2C_RequestMemoryRead>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d005      	beq.n	800ac48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e0ad      	b.n	800ada4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	2bff      	cmp	r3, #255	@ 0xff
 800ac50:	d90e      	bls.n	800ac70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	22ff      	movs	r2, #255	@ 0xff
 800ac56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac5c:	b2da      	uxtb	r2, r3
 800ac5e:	8979      	ldrh	r1, [r7, #10]
 800ac60:	4b52      	ldr	r3, [pc, #328]	@ (800adac <HAL_I2C_Mem_Read+0x22c>)
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f000 fb33 	bl	800b2d4 <I2C_TransferConfig>
 800ac6e:	e00f      	b.n	800ac90 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac74:	b29a      	uxth	r2, r3
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac7e:	b2da      	uxtb	r2, r3
 800ac80:	8979      	ldrh	r1, [r7, #10]
 800ac82:	4b4a      	ldr	r3, [pc, #296]	@ (800adac <HAL_I2C_Mem_Read+0x22c>)
 800ac84:	9300      	str	r3, [sp, #0]
 800ac86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f000 fb22 	bl	800b2d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac96:	2200      	movs	r2, #0
 800ac98:	2104      	movs	r1, #4
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f000 f956 	bl	800af4c <I2C_WaitOnFlagUntilTimeout>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e07c      	b.n	800ada4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb4:	b2d2      	uxtb	r2, r2
 800acb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acbc:	1c5a      	adds	r2, r3, #1
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acc6:	3b01      	subs	r3, #1
 800acc8:	b29a      	uxth	r2, r3
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	3b01      	subs	r3, #1
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d034      	beq.n	800ad50 <HAL_I2C_Mem_Read+0x1d0>
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acea:	2b00      	cmp	r3, #0
 800acec:	d130      	bne.n	800ad50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	9300      	str	r3, [sp, #0]
 800acf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf4:	2200      	movs	r2, #0
 800acf6:	2180      	movs	r1, #128	@ 0x80
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f000 f927 	bl	800af4c <I2C_WaitOnFlagUntilTimeout>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d001      	beq.n	800ad08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	e04d      	b.n	800ada4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	2bff      	cmp	r3, #255	@ 0xff
 800ad10:	d90e      	bls.n	800ad30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	22ff      	movs	r2, #255	@ 0xff
 800ad16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	8979      	ldrh	r1, [r7, #10]
 800ad20:	2300      	movs	r3, #0
 800ad22:	9300      	str	r3, [sp, #0]
 800ad24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f000 fad3 	bl	800b2d4 <I2C_TransferConfig>
 800ad2e:	e00f      	b.n	800ad50 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad34:	b29a      	uxth	r2, r3
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	8979      	ldrh	r1, [r7, #10]
 800ad42:	2300      	movs	r3, #0
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 fac2 	bl	800b2d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d19a      	bne.n	800ac90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	f000 f994 	bl	800b08c <I2C_WaitOnSTOPFlagUntilTimeout>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d001      	beq.n	800ad6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e01a      	b.n	800ada4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2220      	movs	r2, #32
 800ad74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	6859      	ldr	r1, [r3, #4]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	4b0b      	ldr	r3, [pc, #44]	@ (800adb0 <HAL_I2C_Mem_Read+0x230>)
 800ad82:	400b      	ands	r3, r1
 800ad84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2220      	movs	r2, #32
 800ad8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	e000      	b.n	800ada4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ada2:	2302      	movs	r3, #2
  }
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3718      	adds	r7, #24
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	80002400 	.word	0x80002400
 800adb0:	fe00e800 	.word	0xfe00e800

0800adb4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af02      	add	r7, sp, #8
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	4608      	mov	r0, r1
 800adbe:	4611      	mov	r1, r2
 800adc0:	461a      	mov	r2, r3
 800adc2:	4603      	mov	r3, r0
 800adc4:	817b      	strh	r3, [r7, #10]
 800adc6:	460b      	mov	r3, r1
 800adc8:	813b      	strh	r3, [r7, #8]
 800adca:	4613      	mov	r3, r2
 800adcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800adce:	88fb      	ldrh	r3, [r7, #6]
 800add0:	b2da      	uxtb	r2, r3
 800add2:	8979      	ldrh	r1, [r7, #10]
 800add4:	4b20      	ldr	r3, [pc, #128]	@ (800ae58 <I2C_RequestMemoryWrite+0xa4>)
 800add6:	9300      	str	r3, [sp, #0]
 800add8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f000 fa79 	bl	800b2d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ade2:	69fa      	ldr	r2, [r7, #28]
 800ade4:	69b9      	ldr	r1, [r7, #24]
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f000 f909 	bl	800affe <I2C_WaitOnTXISFlagUntilTimeout>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d001      	beq.n	800adf6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	e02c      	b.n	800ae50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800adf6:	88fb      	ldrh	r3, [r7, #6]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d105      	bne.n	800ae08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800adfc:	893b      	ldrh	r3, [r7, #8]
 800adfe:	b2da      	uxtb	r2, r3
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	629a      	str	r2, [r3, #40]	@ 0x28
 800ae06:	e015      	b.n	800ae34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ae08:	893b      	ldrh	r3, [r7, #8]
 800ae0a:	0a1b      	lsrs	r3, r3, #8
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	b2da      	uxtb	r2, r3
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae16:	69fa      	ldr	r2, [r7, #28]
 800ae18:	69b9      	ldr	r1, [r7, #24]
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f000 f8ef 	bl	800affe <I2C_WaitOnTXISFlagUntilTimeout>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d001      	beq.n	800ae2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	e012      	b.n	800ae50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae2a:	893b      	ldrh	r3, [r7, #8]
 800ae2c:	b2da      	uxtb	r2, r3
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	9300      	str	r3, [sp, #0]
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	2180      	movs	r1, #128	@ 0x80
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f000 f884 	bl	800af4c <I2C_WaitOnFlagUntilTimeout>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e000      	b.n	800ae50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ae4e:	2300      	movs	r3, #0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	80002000 	.word	0x80002000

0800ae5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b086      	sub	sp, #24
 800ae60:	af02      	add	r7, sp, #8
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	4608      	mov	r0, r1
 800ae66:	4611      	mov	r1, r2
 800ae68:	461a      	mov	r2, r3
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	817b      	strh	r3, [r7, #10]
 800ae6e:	460b      	mov	r3, r1
 800ae70:	813b      	strh	r3, [r7, #8]
 800ae72:	4613      	mov	r3, r2
 800ae74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ae76:	88fb      	ldrh	r3, [r7, #6]
 800ae78:	b2da      	uxtb	r2, r3
 800ae7a:	8979      	ldrh	r1, [r7, #10]
 800ae7c:	4b20      	ldr	r3, [pc, #128]	@ (800af00 <I2C_RequestMemoryRead+0xa4>)
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	2300      	movs	r3, #0
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f000 fa26 	bl	800b2d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae88:	69fa      	ldr	r2, [r7, #28]
 800ae8a:	69b9      	ldr	r1, [r7, #24]
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f000 f8b6 	bl	800affe <I2C_WaitOnTXISFlagUntilTimeout>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d001      	beq.n	800ae9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e02c      	b.n	800aef6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae9c:	88fb      	ldrh	r3, [r7, #6]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d105      	bne.n	800aeae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aea2:	893b      	ldrh	r3, [r7, #8]
 800aea4:	b2da      	uxtb	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	629a      	str	r2, [r3, #40]	@ 0x28
 800aeac:	e015      	b.n	800aeda <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aeae:	893b      	ldrh	r3, [r7, #8]
 800aeb0:	0a1b      	lsrs	r3, r3, #8
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	b2da      	uxtb	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aebc:	69fa      	ldr	r2, [r7, #28]
 800aebe:	69b9      	ldr	r1, [r7, #24]
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f000 f89c 	bl	800affe <I2C_WaitOnTXISFlagUntilTimeout>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d001      	beq.n	800aed0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e012      	b.n	800aef6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aed0:	893b      	ldrh	r3, [r7, #8]
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	2200      	movs	r2, #0
 800aee2:	2140      	movs	r1, #64	@ 0x40
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f000 f831 	bl	800af4c <I2C_WaitOnFlagUntilTimeout>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d001      	beq.n	800aef4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	e000      	b.n	800aef6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	80002000 	.word	0x80002000

0800af04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	f003 0302 	and.w	r3, r3, #2
 800af16:	2b02      	cmp	r3, #2
 800af18:	d103      	bne.n	800af22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2200      	movs	r2, #0
 800af20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	699b      	ldr	r3, [r3, #24]
 800af28:	f003 0301 	and.w	r3, r3, #1
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d007      	beq.n	800af40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	699a      	ldr	r2, [r3, #24]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f042 0201 	orr.w	r2, r2, #1
 800af3e:	619a      	str	r2, [r3, #24]
  }
}
 800af40:	bf00      	nop
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	603b      	str	r3, [r7, #0]
 800af58:	4613      	mov	r3, r2
 800af5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af5c:	e03b      	b.n	800afd6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800af5e:	69ba      	ldr	r2, [r7, #24]
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f000 f8d6 	bl	800b114 <I2C_IsErrorOccurred>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e041      	b.n	800aff6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af78:	d02d      	beq.n	800afd6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af7a:	f7fd fbef 	bl	800875c <HAL_GetTick>
 800af7e:	4602      	mov	r2, r0
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	1ad3      	subs	r3, r2, r3
 800af84:	683a      	ldr	r2, [r7, #0]
 800af86:	429a      	cmp	r2, r3
 800af88:	d302      	bcc.n	800af90 <I2C_WaitOnFlagUntilTimeout+0x44>
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d122      	bne.n	800afd6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	699a      	ldr	r2, [r3, #24]
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	4013      	ands	r3, r2
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	bf0c      	ite	eq
 800afa0:	2301      	moveq	r3, #1
 800afa2:	2300      	movne	r3, #0
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	461a      	mov	r2, r3
 800afa8:	79fb      	ldrb	r3, [r7, #7]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d113      	bne.n	800afd6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afb2:	f043 0220 	orr.w	r2, r3, #32
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2220      	movs	r2, #32
 800afbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	e00f      	b.n	800aff6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	699a      	ldr	r2, [r3, #24]
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	4013      	ands	r3, r2
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	bf0c      	ite	eq
 800afe6:	2301      	moveq	r3, #1
 800afe8:	2300      	movne	r3, #0
 800afea:	b2db      	uxtb	r3, r3
 800afec:	461a      	mov	r2, r3
 800afee:	79fb      	ldrb	r3, [r7, #7]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d0b4      	beq.n	800af5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b084      	sub	sp, #16
 800b002:	af00      	add	r7, sp, #0
 800b004:	60f8      	str	r0, [r7, #12]
 800b006:	60b9      	str	r1, [r7, #8]
 800b008:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b00a:	e033      	b.n	800b074 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	68b9      	ldr	r1, [r7, #8]
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f000 f87f 	bl	800b114 <I2C_IsErrorOccurred>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d001      	beq.n	800b020 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	e031      	b.n	800b084 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b026:	d025      	beq.n	800b074 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b028:	f7fd fb98 	bl	800875c <HAL_GetTick>
 800b02c:	4602      	mov	r2, r0
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	68ba      	ldr	r2, [r7, #8]
 800b034:	429a      	cmp	r2, r3
 800b036:	d302      	bcc.n	800b03e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d11a      	bne.n	800b074 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	699b      	ldr	r3, [r3, #24]
 800b044:	f003 0302 	and.w	r3, r3, #2
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d013      	beq.n	800b074 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b050:	f043 0220 	orr.w	r2, r3, #32
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2220      	movs	r2, #32
 800b05c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	e007      	b.n	800b084 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	699b      	ldr	r3, [r3, #24]
 800b07a:	f003 0302 	and.w	r3, r3, #2
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d1c4      	bne.n	800b00c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b098:	e02f      	b.n	800b0fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	68b9      	ldr	r1, [r7, #8]
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f000 f838 	bl	800b114 <I2C_IsErrorOccurred>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d001      	beq.n	800b0ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e02d      	b.n	800b10a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ae:	f7fd fb55 	bl	800875c <HAL_GetTick>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d302      	bcc.n	800b0c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d11a      	bne.n	800b0fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	f003 0320 	and.w	r3, r3, #32
 800b0ce:	2b20      	cmp	r3, #32
 800b0d0:	d013      	beq.n	800b0fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0d6:	f043 0220 	orr.w	r2, r3, #32
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2220      	movs	r2, #32
 800b0e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e007      	b.n	800b10a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	699b      	ldr	r3, [r3, #24]
 800b100:	f003 0320 	and.w	r3, r3, #32
 800b104:	2b20      	cmp	r3, #32
 800b106:	d1c8      	bne.n	800b09a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
	...

0800b114 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b08a      	sub	sp, #40	@ 0x28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b120:	2300      	movs	r3, #0
 800b122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b12e:	2300      	movs	r3, #0
 800b130:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	f003 0310 	and.w	r3, r3, #16
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d068      	beq.n	800b212 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2210      	movs	r2, #16
 800b146:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b148:	e049      	b.n	800b1de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b150:	d045      	beq.n	800b1de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b152:	f7fd fb03 	bl	800875c <HAL_GetTick>
 800b156:	4602      	mov	r2, r0
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	68ba      	ldr	r2, [r7, #8]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d302      	bcc.n	800b168 <I2C_IsErrorOccurred+0x54>
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d13a      	bne.n	800b1de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b172:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b17a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	699b      	ldr	r3, [r3, #24]
 800b182:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b186:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b18a:	d121      	bne.n	800b1d0 <I2C_IsErrorOccurred+0xbc>
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b192:	d01d      	beq.n	800b1d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b194:	7cfb      	ldrb	r3, [r7, #19]
 800b196:	2b20      	cmp	r3, #32
 800b198:	d01a      	beq.n	800b1d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	685a      	ldr	r2, [r3, #4]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b1a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b1aa:	f7fd fad7 	bl	800875c <HAL_GetTick>
 800b1ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1b0:	e00e      	b.n	800b1d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b1b2:	f7fd fad3 	bl	800875c <HAL_GetTick>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	2b19      	cmp	r3, #25
 800b1be:	d907      	bls.n	800b1d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b1c0:	6a3b      	ldr	r3, [r7, #32]
 800b1c2:	f043 0320 	orr.w	r3, r3, #32
 800b1c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b1ce:	e006      	b.n	800b1de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	f003 0320 	and.w	r3, r3, #32
 800b1da:	2b20      	cmp	r3, #32
 800b1dc:	d1e9      	bne.n	800b1b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	699b      	ldr	r3, [r3, #24]
 800b1e4:	f003 0320 	and.w	r3, r3, #32
 800b1e8:	2b20      	cmp	r3, #32
 800b1ea:	d003      	beq.n	800b1f4 <I2C_IsErrorOccurred+0xe0>
 800b1ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d0aa      	beq.n	800b14a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d103      	bne.n	800b204 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2220      	movs	r2, #32
 800b202:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b204:	6a3b      	ldr	r3, [r7, #32]
 800b206:	f043 0304 	orr.w	r3, r3, #4
 800b20a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b220:	2b00      	cmp	r3, #0
 800b222:	d00b      	beq.n	800b23c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	f043 0301 	orr.w	r3, r3, #1
 800b22a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b234:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00b      	beq.n	800b25e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b246:	6a3b      	ldr	r3, [r7, #32]
 800b248:	f043 0308 	orr.w	r3, r3, #8
 800b24c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b256:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00b      	beq.n	800b280 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b268:	6a3b      	ldr	r3, [r7, #32]
 800b26a:	f043 0302 	orr.w	r3, r3, #2
 800b26e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b278:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800b280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b284:	2b00      	cmp	r3, #0
 800b286:	d01c      	beq.n	800b2c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f7ff fe3b 	bl	800af04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	6859      	ldr	r1, [r3, #4]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	4b0d      	ldr	r3, [pc, #52]	@ (800b2d0 <I2C_IsErrorOccurred+0x1bc>)
 800b29a:	400b      	ands	r3, r1
 800b29c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2a2:	6a3b      	ldr	r3, [r7, #32]
 800b2a4:	431a      	orrs	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2220      	movs	r2, #32
 800b2ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800b2c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3728      	adds	r7, #40	@ 0x28
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	fe00e800 	.word	0xfe00e800

0800b2d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b087      	sub	sp, #28
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	607b      	str	r3, [r7, #4]
 800b2de:	460b      	mov	r3, r1
 800b2e0:	817b      	strh	r3, [r7, #10]
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b2e6:	897b      	ldrh	r3, [r7, #10]
 800b2e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b2ec:	7a7b      	ldrb	r3, [r7, #9]
 800b2ee:	041b      	lsls	r3, r3, #16
 800b2f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b2f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b2fa:	6a3b      	ldr	r3, [r7, #32]
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b302:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	685a      	ldr	r2, [r3, #4]
 800b30a:	6a3b      	ldr	r3, [r7, #32]
 800b30c:	0d5b      	lsrs	r3, r3, #21
 800b30e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b312:	4b08      	ldr	r3, [pc, #32]	@ (800b334 <I2C_TransferConfig+0x60>)
 800b314:	430b      	orrs	r3, r1
 800b316:	43db      	mvns	r3, r3
 800b318:	ea02 0103 	and.w	r1, r2, r3
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	697a      	ldr	r2, [r7, #20]
 800b322:	430a      	orrs	r2, r1
 800b324:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b326:	bf00      	nop
 800b328:	371c      	adds	r7, #28
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	03ff63ff 	.word	0x03ff63ff

0800b338 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	2b20      	cmp	r3, #32
 800b34c:	d138      	bne.n	800b3c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b354:	2b01      	cmp	r3, #1
 800b356:	d101      	bne.n	800b35c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b358:	2302      	movs	r3, #2
 800b35a:	e032      	b.n	800b3c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2224      	movs	r2, #36	@ 0x24
 800b368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f022 0201 	bic.w	r2, r2, #1
 800b37a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b38a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6819      	ldr	r1, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	430a      	orrs	r2, r1
 800b39a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f042 0201 	orr.w	r2, r2, #1
 800b3aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2220      	movs	r2, #32
 800b3b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	e000      	b.n	800b3c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b3c0:	2302      	movs	r3, #2
  }
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	370c      	adds	r7, #12
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr

0800b3ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b3ce:	b480      	push	{r7}
 800b3d0:	b085      	sub	sp, #20
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
 800b3d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	2b20      	cmp	r3, #32
 800b3e2:	d139      	bne.n	800b458 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d101      	bne.n	800b3f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b3ee:	2302      	movs	r3, #2
 800b3f0:	e033      	b.n	800b45a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2224      	movs	r2, #36	@ 0x24
 800b3fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f022 0201 	bic.w	r2, r2, #1
 800b410:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b420:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	021b      	lsls	r3, r3, #8
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	4313      	orrs	r3, r2
 800b42a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f042 0201 	orr.w	r2, r2, #1
 800b442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2220      	movs	r2, #32
 800b448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b454:	2300      	movs	r3, #0
 800b456:	e000      	b.n	800b45a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b458:	2302      	movs	r3, #2
  }
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b466:	b580      	push	{r7, lr}
 800b468:	b084      	sub	sp, #16
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d101      	bne.n	800b478 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	e0c0      	b.n	800b5fa <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	2b00      	cmp	r3, #0
 800b482:	d106      	bne.n	800b492 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f00c ff23 	bl	80182d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2203      	movs	r2, #3
 800b496:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f005 fd10 	bl	8010ec4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	73fb      	strb	r3, [r7, #15]
 800b4a8:	e03e      	b.n	800b528 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b4aa:	7bfa      	ldrb	r2, [r7, #15]
 800b4ac:	6879      	ldr	r1, [r7, #4]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	4413      	add	r3, r2
 800b4b4:	00db      	lsls	r3, r3, #3
 800b4b6:	440b      	add	r3, r1
 800b4b8:	3311      	adds	r3, #17
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b4be:	7bfa      	ldrb	r2, [r7, #15]
 800b4c0:	6879      	ldr	r1, [r7, #4]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	00db      	lsls	r3, r3, #3
 800b4ca:	440b      	add	r3, r1
 800b4cc:	3310      	adds	r3, #16
 800b4ce:	7bfa      	ldrb	r2, [r7, #15]
 800b4d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b4d2:	7bfa      	ldrb	r2, [r7, #15]
 800b4d4:	6879      	ldr	r1, [r7, #4]
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	4413      	add	r3, r2
 800b4dc:	00db      	lsls	r3, r3, #3
 800b4de:	440b      	add	r3, r1
 800b4e0:	3313      	adds	r3, #19
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b4e6:	7bfa      	ldrb	r2, [r7, #15]
 800b4e8:	6879      	ldr	r1, [r7, #4]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	00db      	lsls	r3, r3, #3
 800b4f2:	440b      	add	r3, r1
 800b4f4:	3320      	adds	r3, #32
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b4fa:	7bfa      	ldrb	r2, [r7, #15]
 800b4fc:	6879      	ldr	r1, [r7, #4]
 800b4fe:	4613      	mov	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4413      	add	r3, r2
 800b504:	00db      	lsls	r3, r3, #3
 800b506:	440b      	add	r3, r1
 800b508:	3324      	adds	r3, #36	@ 0x24
 800b50a:	2200      	movs	r2, #0
 800b50c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b50e:	7bfb      	ldrb	r3, [r7, #15]
 800b510:	6879      	ldr	r1, [r7, #4]
 800b512:	1c5a      	adds	r2, r3, #1
 800b514:	4613      	mov	r3, r2
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	4413      	add	r3, r2
 800b51a:	00db      	lsls	r3, r3, #3
 800b51c:	440b      	add	r3, r1
 800b51e:	2200      	movs	r2, #0
 800b520:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b522:	7bfb      	ldrb	r3, [r7, #15]
 800b524:	3301      	adds	r3, #1
 800b526:	73fb      	strb	r3, [r7, #15]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	791b      	ldrb	r3, [r3, #4]
 800b52c:	7bfa      	ldrb	r2, [r7, #15]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d3bb      	bcc.n	800b4aa <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b532:	2300      	movs	r3, #0
 800b534:	73fb      	strb	r3, [r7, #15]
 800b536:	e044      	b.n	800b5c2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b538:	7bfa      	ldrb	r2, [r7, #15]
 800b53a:	6879      	ldr	r1, [r7, #4]
 800b53c:	4613      	mov	r3, r2
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	4413      	add	r3, r2
 800b542:	00db      	lsls	r3, r3, #3
 800b544:	440b      	add	r3, r1
 800b546:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800b54a:	2200      	movs	r2, #0
 800b54c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b54e:	7bfa      	ldrb	r2, [r7, #15]
 800b550:	6879      	ldr	r1, [r7, #4]
 800b552:	4613      	mov	r3, r2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	4413      	add	r3, r2
 800b558:	00db      	lsls	r3, r3, #3
 800b55a:	440b      	add	r3, r1
 800b55c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b560:	7bfa      	ldrb	r2, [r7, #15]
 800b562:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b564:	7bfa      	ldrb	r2, [r7, #15]
 800b566:	6879      	ldr	r1, [r7, #4]
 800b568:	4613      	mov	r3, r2
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	4413      	add	r3, r2
 800b56e:	00db      	lsls	r3, r3, #3
 800b570:	440b      	add	r3, r1
 800b572:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800b576:	2200      	movs	r2, #0
 800b578:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b57a:	7bfa      	ldrb	r2, [r7, #15]
 800b57c:	6879      	ldr	r1, [r7, #4]
 800b57e:	4613      	mov	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	4413      	add	r3, r2
 800b584:	00db      	lsls	r3, r3, #3
 800b586:	440b      	add	r3, r1
 800b588:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800b58c:	2200      	movs	r2, #0
 800b58e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b590:	7bfa      	ldrb	r2, [r7, #15]
 800b592:	6879      	ldr	r1, [r7, #4]
 800b594:	4613      	mov	r3, r2
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	4413      	add	r3, r2
 800b59a:	00db      	lsls	r3, r3, #3
 800b59c:	440b      	add	r3, r1
 800b59e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b5a6:	7bfa      	ldrb	r2, [r7, #15]
 800b5a8:	6879      	ldr	r1, [r7, #4]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	4413      	add	r3, r2
 800b5b0:	00db      	lsls	r3, r3, #3
 800b5b2:	440b      	add	r3, r1
 800b5b4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b5bc:	7bfb      	ldrb	r3, [r7, #15]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	73fb      	strb	r3, [r7, #15]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	791b      	ldrb	r3, [r3, #4]
 800b5c6:	7bfa      	ldrb	r2, [r7, #15]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d3b5      	bcc.n	800b538 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6818      	ldr	r0, [r3, #0]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b5d8:	f005 fc8f 	bl	8010efa <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	7a9b      	ldrb	r3, [r3, #10]
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d102      	bne.n	800b5f8 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f001 fc40 	bl	800ce78 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b082      	sub	sp, #8
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b610:	2b01      	cmp	r3, #1
 800b612:	d101      	bne.n	800b618 <HAL_PCD_Start+0x16>
 800b614:	2302      	movs	r3, #2
 800b616:	e012      	b.n	800b63e <HAL_PCD_Start+0x3c>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4618      	mov	r0, r3
 800b626:	f005 fc36 	bl	8010e96 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4618      	mov	r0, r3
 800b630:	f007 fef7 	bl	8013422 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b084      	sub	sp, #16
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4618      	mov	r0, r3
 800b654:	f007 fefc 	bl	8013450 <USB_ReadInterrupts>
 800b658:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b660:	2b00      	cmp	r3, #0
 800b662:	d003      	beq.n	800b66c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fb04 	bl	800bc72 <PCD_EP_ISR_Handler>

    return;
 800b66a:	e110      	b.n	800b88e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b672:	2b00      	cmp	r3, #0
 800b674:	d013      	beq.n	800b69e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b67e:	b29a      	uxth	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b688:	b292      	uxth	r2, r2
 800b68a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f00c feb3 	bl	80183fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800b694:	2100      	movs	r1, #0
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f8fc 	bl	800b894 <HAL_PCD_SetAddress>

    return;
 800b69c:	e0f7      	b.n	800b88e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00c      	beq.n	800b6c2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b6ba:	b292      	uxth	r2, r2
 800b6bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800b6c0:	e0e5      	b.n	800b88e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00c      	beq.n	800b6e6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b6de:	b292      	uxth	r2, r2
 800b6e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800b6e4:	e0d3      	b.n	800b88e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d034      	beq.n	800b75a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f022 0204 	bic.w	r2, r2, #4
 800b702:	b292      	uxth	r2, r2
 800b704:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b710:	b29a      	uxth	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f022 0208 	bic.w	r2, r2, #8
 800b71a:	b292      	uxth	r2, r2
 800b71c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800b726:	2b01      	cmp	r3, #1
 800b728:	d107      	bne.n	800b73a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b732:	2100      	movs	r1, #0
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f00d f853 	bl	80187e0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f00c fe96 	bl	801846c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b748:	b29a      	uxth	r2, r3
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b752:	b292      	uxth	r2, r2
 800b754:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800b758:	e099      	b.n	800b88e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b760:	2b00      	cmp	r3, #0
 800b762:	d027      	beq.n	800b7b4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b76c:	b29a      	uxth	r2, r3
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f042 0208 	orr.w	r2, r2, #8
 800b776:	b292      	uxth	r2, r2
 800b778:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b784:	b29a      	uxth	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b78e:	b292      	uxth	r2, r2
 800b790:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f042 0204 	orr.w	r2, r2, #4
 800b7a6:	b292      	uxth	r2, r2
 800b7a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f00c fe43 	bl	8018438 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b7b2:	e06c      	b.n	800b88e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d040      	beq.n	800b840 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b7d0:	b292      	uxth	r2, r2
 800b7d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d12b      	bne.n	800b838 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f042 0204 	orr.w	r2, r2, #4
 800b7f2:	b292      	uxth	r2, r2
 800b7f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b800:	b29a      	uxth	r2, r3
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f042 0208 	orr.w	r2, r2, #8
 800b80a:	b292      	uxth	r2, r2
 800b80c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b820:	b29b      	uxth	r3, r3
 800b822:	089b      	lsrs	r3, r3, #2
 800b824:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b82e:	2101      	movs	r1, #1
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f00c ffd5 	bl	80187e0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800b836:	e02a      	b.n	800b88e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f00c fdfd 	bl	8018438 <HAL_PCD_SuspendCallback>
    return;
 800b83e:	e026      	b.n	800b88e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00f      	beq.n	800b86a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b852:	b29a      	uxth	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b85c:	b292      	uxth	r2, r2
 800b85e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f00c fdbb 	bl	80183de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b868:	e011      	b.n	800b88e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00c      	beq.n	800b88e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b87c:	b29a      	uxth	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b886:	b292      	uxth	r2, r2
 800b888:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800b88c:	bf00      	nop
  }
}
 800b88e:	3710      	adds	r7, #16
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	460b      	mov	r3, r1
 800b89e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d101      	bne.n	800b8ae <HAL_PCD_SetAddress+0x1a>
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	e012      	b.n	800b8d4 <HAL_PCD_SetAddress+0x40>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	78fa      	ldrb	r2, [r7, #3]
 800b8ba:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	78fa      	ldrb	r2, [r7, #3]
 800b8c2:	4611      	mov	r1, r2
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f007 fd98 	bl	80133fa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3708      	adds	r7, #8
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	4608      	mov	r0, r1
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	70fb      	strb	r3, [r7, #3]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	803b      	strh	r3, [r7, #0]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b8fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	da0e      	bge.n	800b920 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b902:	78fb      	ldrb	r3, [r7, #3]
 800b904:	f003 0207 	and.w	r2, r3, #7
 800b908:	4613      	mov	r3, r2
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	4413      	add	r3, r2
 800b90e:	00db      	lsls	r3, r3, #3
 800b910:	3310      	adds	r3, #16
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	4413      	add	r3, r2
 800b916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2201      	movs	r2, #1
 800b91c:	705a      	strb	r2, [r3, #1]
 800b91e:	e00e      	b.n	800b93e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b920:	78fb      	ldrb	r3, [r7, #3]
 800b922:	f003 0207 	and.w	r2, r3, #7
 800b926:	4613      	mov	r3, r2
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	4413      	add	r3, r2
 800b92c:	00db      	lsls	r3, r3, #3
 800b92e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	4413      	add	r3, r2
 800b936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2200      	movs	r2, #0
 800b93c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b93e:	78fb      	ldrb	r3, [r7, #3]
 800b940:	f003 0307 	and.w	r3, r3, #7
 800b944:	b2da      	uxtb	r2, r3
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b94a:	883a      	ldrh	r2, [r7, #0]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	78ba      	ldrb	r2, [r7, #2]
 800b954:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b956:	78bb      	ldrb	r3, [r7, #2]
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d102      	bne.n	800b962 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2200      	movs	r2, #0
 800b960:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d101      	bne.n	800b970 <HAL_PCD_EP_Open+0x94>
 800b96c:	2302      	movs	r3, #2
 800b96e:	e00e      	b.n	800b98e <HAL_PCD_EP_Open+0xb2>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68f9      	ldr	r1, [r7, #12]
 800b97e:	4618      	mov	r0, r3
 800b980:	f005 fada 	bl	8010f38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800b98c:	7afb      	ldrb	r3, [r7, #11]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}

0800b996 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b084      	sub	sp, #16
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
 800b99e:	460b      	mov	r3, r1
 800b9a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b9a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	da0e      	bge.n	800b9c8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9aa:	78fb      	ldrb	r3, [r7, #3]
 800b9ac:	f003 0207 	and.w	r2, r3, #7
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4413      	add	r3, r2
 800b9b6:	00db      	lsls	r3, r3, #3
 800b9b8:	3310      	adds	r3, #16
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	4413      	add	r3, r2
 800b9be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	705a      	strb	r2, [r3, #1]
 800b9c6:	e00e      	b.n	800b9e6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b9c8:	78fb      	ldrb	r3, [r7, #3]
 800b9ca:	f003 0207 	and.w	r2, r3, #7
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	4413      	add	r3, r2
 800b9d4:	00db      	lsls	r3, r3, #3
 800b9d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	4413      	add	r3, r2
 800b9de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b9e6:	78fb      	ldrb	r3, [r7, #3]
 800b9e8:	f003 0307 	and.w	r3, r3, #7
 800b9ec:	b2da      	uxtb	r2, r3
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d101      	bne.n	800ba00 <HAL_PCD_EP_Close+0x6a>
 800b9fc:	2302      	movs	r3, #2
 800b9fe:	e00e      	b.n	800ba1e <HAL_PCD_EP_Close+0x88>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	68f9      	ldr	r1, [r7, #12]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f005 fe56 	bl	80116c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b086      	sub	sp, #24
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	60f8      	str	r0, [r7, #12]
 800ba2e:	607a      	str	r2, [r7, #4]
 800ba30:	603b      	str	r3, [r7, #0]
 800ba32:	460b      	mov	r3, r1
 800ba34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ba36:	7afb      	ldrb	r3, [r7, #11]
 800ba38:	f003 0207 	and.w	r2, r3, #7
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	4413      	add	r3, r2
 800ba42:	00db      	lsls	r3, r3, #3
 800ba44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	4413      	add	r3, r2
 800ba4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	683a      	ldr	r2, [r7, #0]
 800ba58:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	2200      	movs	r2, #0
 800ba64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba66:	7afb      	ldrb	r3, [r7, #11]
 800ba68:	f003 0307 	and.w	r3, r3, #7
 800ba6c:	b2da      	uxtb	r2, r3
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	6979      	ldr	r1, [r7, #20]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f006 f80e 	bl	8011a9a <USB_EPStartXfer>

  return HAL_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3718      	adds	r7, #24
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	460b      	mov	r3, r1
 800ba92:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ba94:	78fb      	ldrb	r3, [r7, #3]
 800ba96:	f003 0207 	and.w	r2, r3, #7
 800ba9a:	6879      	ldr	r1, [r7, #4]
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	00db      	lsls	r3, r3, #3
 800baa4:	440b      	add	r3, r1
 800baa6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800baaa:	681b      	ldr	r3, [r3, #0]
}
 800baac:	4618      	mov	r0, r3
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b086      	sub	sp, #24
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	607a      	str	r2, [r7, #4]
 800bac2:	603b      	str	r3, [r7, #0]
 800bac4:	460b      	mov	r3, r1
 800bac6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bac8:	7afb      	ldrb	r3, [r7, #11]
 800baca:	f003 0207 	and.w	r2, r3, #7
 800bace:	4613      	mov	r3, r2
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	4413      	add	r3, r2
 800bad4:	00db      	lsls	r3, r3, #3
 800bad6:	3310      	adds	r3, #16
 800bad8:	68fa      	ldr	r2, [r7, #12]
 800bada:	4413      	add	r3, r2
 800badc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	683a      	ldr	r2, [r7, #0]
 800bae8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	2201      	movs	r2, #1
 800baee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	683a      	ldr	r2, [r7, #0]
 800baf6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	2200      	movs	r2, #0
 800bafc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	2201      	movs	r2, #1
 800bb02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bb04:	7afb      	ldrb	r3, [r7, #11]
 800bb06:	f003 0307 	and.w	r3, r3, #7
 800bb0a:	b2da      	uxtb	r2, r3
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	6979      	ldr	r1, [r7, #20]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f005 ffbf 	bl	8011a9a <USB_EPStartXfer>

  return HAL_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b084      	sub	sp, #16
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	460b      	mov	r3, r1
 800bb30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800bb32:	78fb      	ldrb	r3, [r7, #3]
 800bb34:	f003 0307 	and.w	r3, r3, #7
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	7912      	ldrb	r2, [r2, #4]
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d901      	bls.n	800bb44 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800bb40:	2301      	movs	r3, #1
 800bb42:	e03e      	b.n	800bbc2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bb44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	da0e      	bge.n	800bb6a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb4c:	78fb      	ldrb	r3, [r7, #3]
 800bb4e:	f003 0207 	and.w	r2, r3, #7
 800bb52:	4613      	mov	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	4413      	add	r3, r2
 800bb58:	00db      	lsls	r3, r3, #3
 800bb5a:	3310      	adds	r3, #16
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	4413      	add	r3, r2
 800bb60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2201      	movs	r2, #1
 800bb66:	705a      	strb	r2, [r3, #1]
 800bb68:	e00c      	b.n	800bb84 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bb6a:	78fa      	ldrb	r2, [r7, #3]
 800bb6c:	4613      	mov	r3, r2
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	4413      	add	r3, r2
 800bb72:	00db      	lsls	r3, r3, #3
 800bb74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2200      	movs	r2, #0
 800bb82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2201      	movs	r2, #1
 800bb88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bb8a:	78fb      	ldrb	r3, [r7, #3]
 800bb8c:	f003 0307 	and.w	r3, r3, #7
 800bb90:	b2da      	uxtb	r2, r3
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d101      	bne.n	800bba4 <HAL_PCD_EP_SetStall+0x7e>
 800bba0:	2302      	movs	r3, #2
 800bba2:	e00e      	b.n	800bbc2 <HAL_PCD_EP_SetStall+0x9c>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68f9      	ldr	r1, [r7, #12]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f007 fb22 	bl	80131fc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b084      	sub	sp, #16
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bbd6:	78fb      	ldrb	r3, [r7, #3]
 800bbd8:	f003 030f 	and.w	r3, r3, #15
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	7912      	ldrb	r2, [r2, #4]
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d901      	bls.n	800bbe8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e040      	b.n	800bc6a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bbe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	da0e      	bge.n	800bc0e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bbf0:	78fb      	ldrb	r3, [r7, #3]
 800bbf2:	f003 0207 	and.w	r2, r3, #7
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	4413      	add	r3, r2
 800bbfc:	00db      	lsls	r3, r3, #3
 800bbfe:	3310      	adds	r3, #16
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	4413      	add	r3, r2
 800bc04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	705a      	strb	r2, [r3, #1]
 800bc0c:	e00e      	b.n	800bc2c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bc0e:	78fb      	ldrb	r3, [r7, #3]
 800bc10:	f003 0207 	and.w	r2, r3, #7
 800bc14:	4613      	mov	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4413      	add	r3, r2
 800bc1a:	00db      	lsls	r3, r3, #3
 800bc1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	4413      	add	r3, r2
 800bc24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bc32:	78fb      	ldrb	r3, [r7, #3]
 800bc34:	f003 0307 	and.w	r3, r3, #7
 800bc38:	b2da      	uxtb	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d101      	bne.n	800bc4c <HAL_PCD_EP_ClrStall+0x82>
 800bc48:	2302      	movs	r3, #2
 800bc4a:	e00e      	b.n	800bc6a <HAL_PCD_EP_ClrStall+0xa0>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	68f9      	ldr	r1, [r7, #12]
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f007 fb1f 	bl	801329e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800bc68:	2300      	movs	r3, #0
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b096      	sub	sp, #88	@ 0x58
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bc7a:	e3ad      	b.n	800c3d8 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800bc84:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800bc88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	f003 030f 	and.w	r3, r3, #15
 800bc92:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800bc96:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f040 816f 	bne.w	800bf7e <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800bca0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bca4:	f003 0310 	and.w	r3, r3, #16
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d14c      	bne.n	800bd46 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800bcb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcbc:	81fb      	strh	r3, [r7, #14]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	89fb      	ldrh	r3, [r7, #14]
 800bcc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	3310      	adds	r3, #16
 800bcd4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	461a      	mov	r2, r3
 800bce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	00db      	lsls	r3, r3, #3
 800bce8:	4413      	add	r3, r2
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	6812      	ldr	r2, [r2, #0]
 800bcee:	4413      	add	r3, r2
 800bcf0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bcf4:	881b      	ldrh	r3, [r3, #0]
 800bcf6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bcfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcfc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800bcfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd00:	695a      	ldr	r2, [r3, #20]
 800bd02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd04:	69db      	ldr	r3, [r3, #28]
 800bd06:	441a      	add	r2, r3
 800bd08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd0a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f00c fb4b 	bl	80183aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	7b1b      	ldrb	r3, [r3, #12]
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f000 835c 	beq.w	800c3d8 <PCD_EP_ISR_Handler+0x766>
 800bd20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd22:	699b      	ldr	r3, [r3, #24]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f040 8357 	bne.w	800c3d8 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	7b1b      	ldrb	r3, [r3, #12]
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bd34:	b2da      	uxtb	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	731a      	strb	r2, [r3, #12]
 800bd44:	e348      	b.n	800c3d8 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bd4c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	881b      	ldrh	r3, [r3, #0]
 800bd54:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800bd58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800bd5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d032      	beq.n	800bdca <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	461a      	mov	r2, r3
 800bd70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	00db      	lsls	r3, r3, #3
 800bd76:	4413      	add	r3, r2
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	6812      	ldr	r2, [r2, #0]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bd82:	881b      	ldrh	r3, [r3, #0]
 800bd84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bd88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd8a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6818      	ldr	r0, [r3, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800bd96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd98:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800bd9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd9c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	f007 fba8 	bl	80134f4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	881b      	ldrh	r3, [r3, #0]
 800bdaa:	b29a      	uxth	r2, r3
 800bdac:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	823b      	strh	r3, [r7, #16]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	8a3a      	ldrh	r2, [r7, #16]
 800bdba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bdbe:	b292      	uxth	r2, r2
 800bdc0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f00c fac4 	bl	8018350 <HAL_PCD_SetupStageCallback>
 800bdc8:	e306      	b.n	800c3d8 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800bdca:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f280 8302 	bge.w	800c3d8 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	881b      	ldrh	r3, [r3, #0]
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800bde0:	4013      	ands	r3, r2
 800bde2:	83fb      	strh	r3, [r7, #30]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	8bfa      	ldrh	r2, [r7, #30]
 800bdea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bdee:	b292      	uxth	r2, r2
 800bdf0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	00db      	lsls	r3, r3, #3
 800be04:	4413      	add	r3, r2
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	6812      	ldr	r2, [r2, #0]
 800be0a:	4413      	add	r3, r2
 800be0c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be10:	881b      	ldrh	r3, [r3, #0]
 800be12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800be16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be18:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800be1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be1c:	69db      	ldr	r3, [r3, #28]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d019      	beq.n	800be56 <PCD_EP_ISR_Handler+0x1e4>
 800be22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be24:	695b      	ldr	r3, [r3, #20]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d015      	beq.n	800be56 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6818      	ldr	r0, [r3, #0]
 800be2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be30:	6959      	ldr	r1, [r3, #20]
 800be32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be34:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800be36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be38:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	f007 fb5a 	bl	80134f4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800be40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be42:	695a      	ldr	r2, [r3, #20]
 800be44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be46:	69db      	ldr	r3, [r3, #28]
 800be48:	441a      	add	r2, r3
 800be4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be4c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800be4e:	2100      	movs	r1, #0
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f00c fa8f 	bl	8018374 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	881b      	ldrh	r3, [r3, #0]
 800be5c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800be60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800be64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f040 82b5 	bne.w	800c3d8 <PCD_EP_ISR_Handler+0x766>
 800be6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800be72:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800be76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800be7a:	f000 82ad 	beq.w	800c3d8 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	61bb      	str	r3, [r7, #24]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	461a      	mov	r2, r3
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	4413      	add	r3, r2
 800be94:	61bb      	str	r3, [r7, #24]
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be9c:	617b      	str	r3, [r7, #20]
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	881b      	ldrh	r3, [r3, #0]
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bea8:	b29a      	uxth	r2, r3
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	801a      	strh	r2, [r3, #0]
 800beae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800beb0:	691b      	ldr	r3, [r3, #16]
 800beb2:	2b3e      	cmp	r3, #62	@ 0x3e
 800beb4:	d91d      	bls.n	800bef2 <PCD_EP_ISR_Handler+0x280>
 800beb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800beb8:	691b      	ldr	r3, [r3, #16]
 800beba:	095b      	lsrs	r3, r3, #5
 800bebc:	647b      	str	r3, [r7, #68]	@ 0x44
 800bebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	f003 031f 	and.w	r3, r3, #31
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d102      	bne.n	800bed0 <PCD_EP_ISR_Handler+0x25e>
 800beca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800becc:	3b01      	subs	r3, #1
 800bece:	647b      	str	r3, [r7, #68]	@ 0x44
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	881b      	ldrh	r3, [r3, #0]
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bed8:	b29b      	uxth	r3, r3
 800beda:	029b      	lsls	r3, r3, #10
 800bedc:	b29b      	uxth	r3, r3
 800bede:	4313      	orrs	r3, r2
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800beea:	b29a      	uxth	r2, r3
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	801a      	strh	r2, [r3, #0]
 800bef0:	e026      	b.n	800bf40 <PCD_EP_ISR_Handler+0x2ce>
 800bef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d10a      	bne.n	800bf10 <PCD_EP_ISR_Handler+0x29e>
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	881b      	ldrh	r3, [r3, #0]
 800befe:	b29b      	uxth	r3, r3
 800bf00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	801a      	strh	r2, [r3, #0]
 800bf0e:	e017      	b.n	800bf40 <PCD_EP_ISR_Handler+0x2ce>
 800bf10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	085b      	lsrs	r3, r3, #1
 800bf16:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf1a:	691b      	ldr	r3, [r3, #16]
 800bf1c:	f003 0301 	and.w	r3, r3, #1
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d002      	beq.n	800bf2a <PCD_EP_ISR_Handler+0x2b8>
 800bf24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf26:	3301      	adds	r3, #1
 800bf28:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	881b      	ldrh	r3, [r3, #0]
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	029b      	lsls	r3, r3, #10
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	881b      	ldrh	r3, [r3, #0]
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf50:	827b      	strh	r3, [r7, #18]
 800bf52:	8a7b      	ldrh	r3, [r7, #18]
 800bf54:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bf58:	827b      	strh	r3, [r7, #18]
 800bf5a:	8a7b      	ldrh	r3, [r7, #18]
 800bf5c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bf60:	827b      	strh	r3, [r7, #18]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	8a7b      	ldrh	r3, [r7, #18]
 800bf68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	8013      	strh	r3, [r2, #0]
 800bf7c:	e22c      	b.n	800c3d8 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	461a      	mov	r2, r3
 800bf84:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	4413      	add	r3, r2
 800bf8c:	881b      	ldrh	r3, [r3, #0]
 800bf8e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800bf92:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	f280 80f6 	bge.w	800c188 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	4413      	add	r3, r2
 800bfaa:	881b      	ldrh	r3, [r3, #0]
 800bfac:	b29a      	uxth	r2, r3
 800bfae:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800bfb2:	4013      	ands	r3, r2
 800bfb4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4413      	add	r3, r2
 800bfc6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800bfca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bfce:	b292      	uxth	r2, r2
 800bfd0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800bfd2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4413      	add	r3, r2
 800bfdc:	00db      	lsls	r3, r3, #3
 800bfde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800bfe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfea:	7b1b      	ldrb	r3, [r3, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d123      	bne.n	800c038 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	461a      	mov	r2, r3
 800bffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	00db      	lsls	r3, r3, #3
 800c002:	4413      	add	r3, r2
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	6812      	ldr	r2, [r2, #0]
 800c008:	4413      	add	r3, r2
 800c00a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c00e:	881b      	ldrh	r3, [r3, #0]
 800c010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c014:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800c018:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f000 808e 	beq.w	800c13e <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6818      	ldr	r0, [r3, #0]
 800c026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c028:	6959      	ldr	r1, [r3, #20]
 800c02a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c02c:	88da      	ldrh	r2, [r3, #6]
 800c02e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800c032:	f007 fa5f 	bl	80134f4 <USB_ReadPMA>
 800c036:	e082      	b.n	800c13e <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800c038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c03a:	78db      	ldrb	r3, [r3, #3]
 800c03c:	2b02      	cmp	r3, #2
 800c03e:	d10a      	bne.n	800c056 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800c040:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c044:	461a      	mov	r2, r3
 800c046:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f9d3 	bl	800c3f4 <HAL_PCD_EP_DB_Receive>
 800c04e:	4603      	mov	r3, r0
 800c050:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800c054:	e073      	b.n	800c13e <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	461a      	mov	r2, r3
 800c05c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4413      	add	r3, r2
 800c064:	881b      	ldrh	r3, [r3, #0]
 800c066:	b29b      	uxth	r3, r3
 800c068:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c06c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c070:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	461a      	mov	r2, r3
 800c07a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	441a      	add	r2, r3
 800c082:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800c086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c08a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c08e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c092:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c096:	b29b      	uxth	r3, r3
 800c098:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	4413      	add	r3, r2
 800c0a8:	881b      	ldrh	r3, [r3, #0]
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d022      	beq.n	800c0fa <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	461a      	mov	r2, r3
 800c0c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	00db      	lsls	r3, r3, #3
 800c0c6:	4413      	add	r3, r2
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	6812      	ldr	r2, [r2, #0]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0d8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800c0dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d02c      	beq.n	800c13e <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6818      	ldr	r0, [r3, #0]
 800c0e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0ea:	6959      	ldr	r1, [r3, #20]
 800c0ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0ee:	891a      	ldrh	r2, [r3, #8]
 800c0f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800c0f4:	f007 f9fe 	bl	80134f4 <USB_ReadPMA>
 800c0f8:	e021      	b.n	800c13e <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c102:	b29b      	uxth	r3, r3
 800c104:	461a      	mov	r2, r3
 800c106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	00db      	lsls	r3, r3, #3
 800c10c:	4413      	add	r3, r2
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	6812      	ldr	r2, [r2, #0]
 800c112:	4413      	add	r3, r2
 800c114:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c118:	881b      	ldrh	r3, [r3, #0]
 800c11a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c11e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800c122:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800c126:	2b00      	cmp	r3, #0
 800c128:	d009      	beq.n	800c13e <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6818      	ldr	r0, [r3, #0]
 800c12e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c130:	6959      	ldr	r1, [r3, #20]
 800c132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c134:	895a      	ldrh	r2, [r3, #10]
 800c136:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800c13a:	f007 f9db 	bl	80134f4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800c13e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c140:	69da      	ldr	r2, [r3, #28]
 800c142:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800c146:	441a      	add	r2, r3
 800c148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c14a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800c14c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c14e:	695a      	ldr	r2, [r3, #20]
 800c150:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800c154:	441a      	add	r2, r3
 800c156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c158:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800c15a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c15c:	699b      	ldr	r3, [r3, #24]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d005      	beq.n	800c16e <PCD_EP_ISR_Handler+0x4fc>
 800c162:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800c166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d206      	bcs.n	800c17c <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800c16e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	4619      	mov	r1, r3
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f00c f8fd 	bl	8018374 <HAL_PCD_DataOutStageCallback>
 800c17a:	e005      	b.n	800c188 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c182:	4618      	mov	r0, r3
 800c184:	f005 fc89 	bl	8011a9a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800c188:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c18c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c190:	2b00      	cmp	r3, #0
 800c192:	f000 8121 	beq.w	800c3d8 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800c196:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800c19a:	4613      	mov	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4413      	add	r3, r2
 800c1a0:	00db      	lsls	r3, r3, #3
 800c1a2:	3310      	adds	r3, #16
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	4413      	add	r3, r2
 800c1b8:	881b      	ldrh	r3, [r3, #0]
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800c1c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1c4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	441a      	add	r2, r3
 800c1d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c1da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800c1e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1e8:	78db      	ldrb	r3, [r3, #3]
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	f040 80a2 	bne.w	800c334 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800c1f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800c1f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1f8:	7b1b      	ldrb	r3, [r3, #12]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	f000 8093 	beq.w	800c326 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c200:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d046      	beq.n	800c29a <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c20c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c20e:	785b      	ldrb	r3, [r3, #1]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d126      	bne.n	800c262 <PCD_EP_ISR_Handler+0x5f0>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	627b      	str	r3, [r7, #36]	@ 0x24
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c222:	b29b      	uxth	r3, r3
 800c224:	461a      	mov	r2, r3
 800c226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c228:	4413      	add	r3, r2
 800c22a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c22c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	00da      	lsls	r2, r3, #3
 800c232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c234:	4413      	add	r3, r2
 800c236:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c23a:	623b      	str	r3, [r7, #32]
 800c23c:	6a3b      	ldr	r3, [r7, #32]
 800c23e:	881b      	ldrh	r3, [r3, #0]
 800c240:	b29b      	uxth	r3, r3
 800c242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c246:	b29a      	uxth	r2, r3
 800c248:	6a3b      	ldr	r3, [r7, #32]
 800c24a:	801a      	strh	r2, [r3, #0]
 800c24c:	6a3b      	ldr	r3, [r7, #32]
 800c24e:	881b      	ldrh	r3, [r3, #0]
 800c250:	b29b      	uxth	r3, r3
 800c252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	6a3b      	ldr	r3, [r7, #32]
 800c25e:	801a      	strh	r2, [r3, #0]
 800c260:	e061      	b.n	800c326 <PCD_EP_ISR_Handler+0x6b4>
 800c262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c264:	785b      	ldrb	r3, [r3, #1]
 800c266:	2b01      	cmp	r3, #1
 800c268:	d15d      	bne.n	800c326 <PCD_EP_ISR_Handler+0x6b4>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c278:	b29b      	uxth	r3, r3
 800c27a:	461a      	mov	r2, r3
 800c27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c27e:	4413      	add	r3, r2
 800c280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	00da      	lsls	r2, r3, #3
 800c288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c28a:	4413      	add	r3, r2
 800c28c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c290:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c294:	2200      	movs	r2, #0
 800c296:	801a      	strh	r2, [r3, #0]
 800c298:	e045      	b.n	800c326 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c2a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2a2:	785b      	ldrb	r3, [r3, #1]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d126      	bne.n	800c2f6 <PCD_EP_ISR_Handler+0x684>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2bc:	4413      	add	r3, r2
 800c2be:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	00da      	lsls	r2, r3, #3
 800c2c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2c8:	4413      	add	r3, r2
 800c2ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c2ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d2:	881b      	ldrh	r3, [r3, #0]
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2de:	801a      	strh	r2, [r3, #0]
 800c2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e2:	881b      	ldrh	r3, [r3, #0]
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f2:	801a      	strh	r2, [r3, #0]
 800c2f4:	e017      	b.n	800c326 <PCD_EP_ISR_Handler+0x6b4>
 800c2f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2f8:	785b      	ldrb	r3, [r3, #1]
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d113      	bne.n	800c326 <PCD_EP_ISR_Handler+0x6b4>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c306:	b29b      	uxth	r3, r3
 800c308:	461a      	mov	r2, r3
 800c30a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c30c:	4413      	add	r3, r2
 800c30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	00da      	lsls	r2, r3, #3
 800c316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c318:	4413      	add	r3, r2
 800c31a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c31e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c322:	2200      	movs	r2, #0
 800c324:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	4619      	mov	r1, r3
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f00c f83c 	bl	80183aa <HAL_PCD_DataInStageCallback>
 800c332:	e051      	b.n	800c3d8 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800c334:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d144      	bne.n	800c3ca <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c348:	b29b      	uxth	r3, r3
 800c34a:	461a      	mov	r2, r3
 800c34c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	00db      	lsls	r3, r3, #3
 800c352:	4413      	add	r3, r2
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	6812      	ldr	r2, [r2, #0]
 800c358:	4413      	add	r3, r2
 800c35a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c35e:	881b      	ldrh	r3, [r3, #0]
 800c360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c364:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800c368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c36a:	699a      	ldr	r2, [r3, #24]
 800c36c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c370:	429a      	cmp	r2, r3
 800c372:	d907      	bls.n	800c384 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800c374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c376:	699a      	ldr	r2, [r3, #24]
 800c378:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c37c:	1ad2      	subs	r2, r2, r3
 800c37e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c380:	619a      	str	r2, [r3, #24]
 800c382:	e002      	b.n	800c38a <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800c384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c386:	2200      	movs	r2, #0
 800c388:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800c38a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c38c:	699b      	ldr	r3, [r3, #24]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d106      	bne.n	800c3a0 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	4619      	mov	r1, r3
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f00c f806 	bl	80183aa <HAL_PCD_DataInStageCallback>
 800c39e:	e01b      	b.n	800c3d8 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800c3a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3a2:	695a      	ldr	r2, [r3, #20]
 800c3a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c3a8:	441a      	add	r2, r3
 800c3aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3ac:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800c3ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3b0:	69da      	ldr	r2, [r3, #28]
 800c3b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c3b6:	441a      	add	r2, r3
 800c3b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3ba:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f005 fb69 	bl	8011a9a <USB_EPStartXfer>
 800c3c8:	e006      	b.n	800c3d8 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800c3ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 f917 	bl	800c606 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	b21b      	sxth	r3, r3
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f6ff ac49 	blt.w	800bc7c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3758      	adds	r7, #88	@ 0x58
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b088      	sub	sp, #32
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	4613      	mov	r3, r2
 800c400:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c402:	88fb      	ldrh	r3, [r7, #6]
 800c404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d07c      	beq.n	800c506 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c414:	b29b      	uxth	r3, r3
 800c416:	461a      	mov	r2, r3
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	00db      	lsls	r3, r3, #3
 800c41e:	4413      	add	r3, r2
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	6812      	ldr	r2, [r2, #0]
 800c424:	4413      	add	r3, r2
 800c426:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c42a:	881b      	ldrh	r3, [r3, #0]
 800c42c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c430:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	699a      	ldr	r2, [r3, #24]
 800c436:	8b7b      	ldrh	r3, [r7, #26]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d306      	bcc.n	800c44a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	699a      	ldr	r2, [r3, #24]
 800c440:	8b7b      	ldrh	r3, [r7, #26]
 800c442:	1ad2      	subs	r2, r2, r3
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	619a      	str	r2, [r3, #24]
 800c448:	e002      	b.n	800c450 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	2200      	movs	r2, #0
 800c44e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	699b      	ldr	r3, [r3, #24]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d123      	bne.n	800c4a0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	461a      	mov	r2, r3
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	4413      	add	r3, r2
 800c466:	881b      	ldrh	r3, [r3, #0]
 800c468:	b29b      	uxth	r3, r3
 800c46a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c46e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c472:	833b      	strh	r3, [r7, #24]
 800c474:	8b3b      	ldrh	r3, [r7, #24]
 800c476:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c47a:	833b      	strh	r3, [r7, #24]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	461a      	mov	r2, r3
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	009b      	lsls	r3, r3, #2
 800c488:	441a      	add	r2, r3
 800c48a:	8b3b      	ldrh	r3, [r7, #24]
 800c48c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c490:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c494:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c4a0:	88fb      	ldrh	r3, [r7, #6]
 800c4a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d01f      	beq.n	800c4ea <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	4413      	add	r3, r2
 800c4b8:	881b      	ldrh	r3, [r3, #0]
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4c4:	82fb      	strh	r3, [r7, #22]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	441a      	add	r2, r3
 800c4d4:	8afb      	ldrh	r3, [r7, #22]
 800c4d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c4ea:	8b7b      	ldrh	r3, [r7, #26]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f000 8085 	beq.w	800c5fc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6818      	ldr	r0, [r3, #0]
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	6959      	ldr	r1, [r3, #20]
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	891a      	ldrh	r2, [r3, #8]
 800c4fe:	8b7b      	ldrh	r3, [r7, #26]
 800c500:	f006 fff8 	bl	80134f4 <USB_ReadPMA>
 800c504:	e07a      	b.n	800c5fc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c50e:	b29b      	uxth	r3, r3
 800c510:	461a      	mov	r2, r3
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	00db      	lsls	r3, r3, #3
 800c518:	4413      	add	r3, r2
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	6812      	ldr	r2, [r2, #0]
 800c51e:	4413      	add	r3, r2
 800c520:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c524:	881b      	ldrh	r3, [r3, #0]
 800c526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c52a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	699a      	ldr	r2, [r3, #24]
 800c530:	8b7b      	ldrh	r3, [r7, #26]
 800c532:	429a      	cmp	r2, r3
 800c534:	d306      	bcc.n	800c544 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	699a      	ldr	r2, [r3, #24]
 800c53a:	8b7b      	ldrh	r3, [r7, #26]
 800c53c:	1ad2      	subs	r2, r2, r3
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	619a      	str	r2, [r3, #24]
 800c542:	e002      	b.n	800c54a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	2200      	movs	r2, #0
 800c548:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d123      	bne.n	800c59a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	461a      	mov	r2, r3
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4413      	add	r3, r2
 800c560:	881b      	ldrh	r3, [r3, #0]
 800c562:	b29b      	uxth	r3, r3
 800c564:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c56c:	83fb      	strh	r3, [r7, #30]
 800c56e:	8bfb      	ldrh	r3, [r7, #30]
 800c570:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c574:	83fb      	strh	r3, [r7, #30]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	461a      	mov	r2, r3
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	441a      	add	r2, r3
 800c584:	8bfb      	ldrh	r3, [r7, #30]
 800c586:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c58a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c58e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c596:	b29b      	uxth	r3, r3
 800c598:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800c59a:	88fb      	ldrh	r3, [r7, #6]
 800c59c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d11f      	bne.n	800c5e4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	881b      	ldrh	r3, [r3, #0]
 800c5b4:	b29b      	uxth	r3, r3
 800c5b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5be:	83bb      	strh	r3, [r7, #28]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	441a      	add	r2, r3
 800c5ce:	8bbb      	ldrh	r3, [r7, #28]
 800c5d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c5e4:	8b7b      	ldrh	r3, [r7, #26]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d008      	beq.n	800c5fc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	6818      	ldr	r0, [r3, #0]
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	6959      	ldr	r1, [r3, #20]
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	895a      	ldrh	r2, [r3, #10]
 800c5f6:	8b7b      	ldrh	r3, [r7, #26]
 800c5f8:	f006 ff7c 	bl	80134f4 <USB_ReadPMA>
    }
  }

  return count;
 800c5fc:	8b7b      	ldrh	r3, [r7, #26]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3720      	adds	r7, #32
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c606:	b580      	push	{r7, lr}
 800c608:	b0a4      	sub	sp, #144	@ 0x90
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	60f8      	str	r0, [r7, #12]
 800c60e:	60b9      	str	r1, [r7, #8]
 800c610:	4613      	mov	r3, r2
 800c612:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c614:	88fb      	ldrh	r3, [r7, #6]
 800c616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f000 81db 	beq.w	800c9d6 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c628:	b29b      	uxth	r3, r3
 800c62a:	461a      	mov	r2, r3
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	00db      	lsls	r3, r3, #3
 800c632:	4413      	add	r3, r2
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	6812      	ldr	r2, [r2, #0]
 800c638:	4413      	add	r3, r2
 800c63a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c63e:	881b      	ldrh	r3, [r3, #0]
 800c640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c644:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	699a      	ldr	r2, [r3, #24]
 800c64c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800c650:	429a      	cmp	r2, r3
 800c652:	d907      	bls.n	800c664 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	699a      	ldr	r2, [r3, #24]
 800c658:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800c65c:	1ad2      	subs	r2, r2, r3
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	619a      	str	r2, [r3, #24]
 800c662:	e002      	b.n	800c66a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	2200      	movs	r2, #0
 800c668:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	699b      	ldr	r3, [r3, #24]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f040 80b9 	bne.w	800c7e6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	785b      	ldrb	r3, [r3, #1]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d126      	bne.n	800c6ca <HAL_PCD_EP_DB_Transmit+0xc4>
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	461a      	mov	r2, r3
 800c68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c690:	4413      	add	r3, r2
 800c692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	00da      	lsls	r2, r3, #3
 800c69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c69c:	4413      	add	r3, r2
 800c69e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c6a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a6:	881b      	ldrh	r3, [r3, #0]
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b2:	801a      	strh	r2, [r3, #0]
 800c6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b6:	881b      	ldrh	r3, [r3, #0]
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6c2:	b29a      	uxth	r2, r3
 800c6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c6:	801a      	strh	r2, [r3, #0]
 800c6c8:	e01a      	b.n	800c700 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	785b      	ldrb	r3, [r3, #1]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d116      	bne.n	800c700 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6e6:	4413      	add	r3, r2
 800c6e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	00da      	lsls	r2, r3, #3
 800c6f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6f2:	4413      	add	r3, r2
 800c6f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c6f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	627b      	str	r3, [r7, #36]	@ 0x24
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	785b      	ldrb	r3, [r3, #1]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d126      	bne.n	800c75c <HAL_PCD_EP_DB_Transmit+0x156>
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	61fb      	str	r3, [r7, #28]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	461a      	mov	r2, r3
 800c720:	69fb      	ldr	r3, [r7, #28]
 800c722:	4413      	add	r3, r2
 800c724:	61fb      	str	r3, [r7, #28]
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	00da      	lsls	r2, r3, #3
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	4413      	add	r3, r2
 800c730:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c734:	61bb      	str	r3, [r7, #24]
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	881b      	ldrh	r3, [r3, #0]
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c740:	b29a      	uxth	r2, r3
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	801a      	strh	r2, [r3, #0]
 800c746:	69bb      	ldr	r3, [r7, #24]
 800c748:	881b      	ldrh	r3, [r3, #0]
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c754:	b29a      	uxth	r2, r3
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	801a      	strh	r2, [r3, #0]
 800c75a:	e017      	b.n	800c78c <HAL_PCD_EP_DB_Transmit+0x186>
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	785b      	ldrb	r3, [r3, #1]
 800c760:	2b01      	cmp	r3, #1
 800c762:	d113      	bne.n	800c78c <HAL_PCD_EP_DB_Transmit+0x186>
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	461a      	mov	r2, r3
 800c770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c772:	4413      	add	r3, r2
 800c774:	627b      	str	r3, [r7, #36]	@ 0x24
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	00da      	lsls	r2, r3, #3
 800c77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77e:	4413      	add	r3, r2
 800c780:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c784:	623b      	str	r3, [r7, #32]
 800c786:	6a3b      	ldr	r3, [r7, #32]
 800c788:	2200      	movs	r2, #0
 800c78a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	4619      	mov	r1, r3
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	f00b fe09 	bl	80183aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c798:	88fb      	ldrh	r3, [r7, #6]
 800c79a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f000 82fa 	beq.w	800cd98 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	4413      	add	r3, r2
 800c7b2:	881b      	ldrh	r3, [r3, #0]
 800c7b4:	b29b      	uxth	r3, r3
 800c7b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7be:	82fb      	strh	r3, [r7, #22]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	441a      	add	r2, r3
 800c7ce:	8afb      	ldrh	r3, [r7, #22]
 800c7d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c7dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	8013      	strh	r3, [r2, #0]
 800c7e4:	e2d8      	b.n	800cd98 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c7e6:	88fb      	ldrh	r3, [r7, #6]
 800c7e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d021      	beq.n	800c834 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	4413      	add	r3, r2
 800c7fe:	881b      	ldrh	r3, [r3, #0]
 800c800:	b29b      	uxth	r3, r3
 800c802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c80a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	461a      	mov	r2, r3
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	441a      	add	r2, r3
 800c81c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c820:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c824:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c828:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c82c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c830:	b29b      	uxth	r3, r3
 800c832:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	f040 82ac 	bne.w	800cd98 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	695a      	ldr	r2, [r3, #20]
 800c844:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800c848:	441a      	add	r2, r3
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	69da      	ldr	r2, [r3, #28]
 800c852:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800c856:	441a      	add	r2, r3
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	6a1a      	ldr	r2, [r3, #32]
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	691b      	ldr	r3, [r3, #16]
 800c864:	429a      	cmp	r2, r3
 800c866:	d30b      	bcc.n	800c880 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	691b      	ldr	r3, [r3, #16]
 800c86c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	6a1a      	ldr	r2, [r3, #32]
 800c874:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c878:	1ad2      	subs	r2, r2, r3
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	621a      	str	r2, [r3, #32]
 800c87e:	e017      	b.n	800c8b0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	6a1b      	ldr	r3, [r3, #32]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d108      	bne.n	800c89a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800c888:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800c88c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	2200      	movs	r2, #0
 800c894:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800c898:	e00a      	b.n	800c8b0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	2200      	movs	r2, #0
 800c89e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	6a1b      	ldr	r3, [r3, #32]
 800c8a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	785b      	ldrb	r3, [r3, #1]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d165      	bne.n	800c984 <HAL_PCD_EP_DB_Transmit+0x37e>
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8cc:	4413      	add	r3, r2
 800c8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	00da      	lsls	r2, r3, #3
 800c8d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8d8:	4413      	add	r3, r2
 800c8da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c8de:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e2:	881b      	ldrh	r3, [r3, #0]
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ee:	801a      	strh	r2, [r3, #0]
 800c8f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c8f4:	2b3e      	cmp	r3, #62	@ 0x3e
 800c8f6:	d91d      	bls.n	800c934 <HAL_PCD_EP_DB_Transmit+0x32e>
 800c8f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c8fc:	095b      	lsrs	r3, r3, #5
 800c8fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c900:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c904:	f003 031f 	and.w	r3, r3, #31
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d102      	bne.n	800c912 <HAL_PCD_EP_DB_Transmit+0x30c>
 800c90c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c90e:	3b01      	subs	r3, #1
 800c910:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c914:	881b      	ldrh	r3, [r3, #0]
 800c916:	b29a      	uxth	r2, r3
 800c918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	029b      	lsls	r3, r3, #10
 800c91e:	b29b      	uxth	r3, r3
 800c920:	4313      	orrs	r3, r2
 800c922:	b29b      	uxth	r3, r3
 800c924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c92c:	b29a      	uxth	r2, r3
 800c92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c930:	801a      	strh	r2, [r3, #0]
 800c932:	e044      	b.n	800c9be <HAL_PCD_EP_DB_Transmit+0x3b8>
 800c934:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10a      	bne.n	800c952 <HAL_PCD_EP_DB_Transmit+0x34c>
 800c93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c93e:	881b      	ldrh	r3, [r3, #0]
 800c940:	b29b      	uxth	r3, r3
 800c942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c94e:	801a      	strh	r2, [r3, #0]
 800c950:	e035      	b.n	800c9be <HAL_PCD_EP_DB_Transmit+0x3b8>
 800c952:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c956:	085b      	lsrs	r3, r3, #1
 800c958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c95a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c95e:	f003 0301 	and.w	r3, r3, #1
 800c962:	2b00      	cmp	r3, #0
 800c964:	d002      	beq.n	800c96c <HAL_PCD_EP_DB_Transmit+0x366>
 800c966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c968:	3301      	adds	r3, #1
 800c96a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c96e:	881b      	ldrh	r3, [r3, #0]
 800c970:	b29a      	uxth	r2, r3
 800c972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c974:	b29b      	uxth	r3, r3
 800c976:	029b      	lsls	r3, r3, #10
 800c978:	b29b      	uxth	r3, r3
 800c97a:	4313      	orrs	r3, r2
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c980:	801a      	strh	r2, [r3, #0]
 800c982:	e01c      	b.n	800c9be <HAL_PCD_EP_DB_Transmit+0x3b8>
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	785b      	ldrb	r3, [r3, #1]
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d118      	bne.n	800c9be <HAL_PCD_EP_DB_Transmit+0x3b8>
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	647b      	str	r3, [r7, #68]	@ 0x44
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	461a      	mov	r2, r3
 800c99e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9a0:	4413      	add	r3, r2
 800c9a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	00da      	lsls	r2, r3, #3
 800c9aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9ac:	4413      	add	r3, r2
 800c9ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c9b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9bc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	6818      	ldr	r0, [r3, #0]
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	6959      	ldr	r1, [r3, #20]
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	891a      	ldrh	r2, [r3, #8]
 800c9ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	f006 fd4e 	bl	8013470 <USB_WritePMA>
 800c9d4:	e1e0      	b.n	800cd98 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	00db      	lsls	r3, r3, #3
 800c9e8:	4413      	add	r3, r2
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	6812      	ldr	r2, [r2, #0]
 800c9ee:	4413      	add	r3, r2
 800c9f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c9f4:	881b      	ldrh	r3, [r3, #0]
 800c9f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c9fa:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	699a      	ldr	r2, [r3, #24]
 800ca02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d307      	bcc.n	800ca1a <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	699a      	ldr	r2, [r3, #24]
 800ca0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800ca12:	1ad2      	subs	r2, r2, r3
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	619a      	str	r2, [r3, #24]
 800ca18:	e002      	b.n	800ca20 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	699b      	ldr	r3, [r3, #24]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f040 80c0 	bne.w	800cbaa <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	785b      	ldrb	r3, [r3, #1]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d126      	bne.n	800ca80 <HAL_PCD_EP_DB_Transmit+0x47a>
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	461a      	mov	r2, r3
 800ca44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ca46:	4413      	add	r3, r2
 800ca48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	00da      	lsls	r2, r3, #3
 800ca50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ca52:	4413      	add	r3, r2
 800ca54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ca58:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ca5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca5c:	881b      	ldrh	r3, [r3, #0]
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca68:	801a      	strh	r2, [r3, #0]
 800ca6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca6c:	881b      	ldrh	r3, [r3, #0]
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca78:	b29a      	uxth	r2, r3
 800ca7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca7c:	801a      	strh	r2, [r3, #0]
 800ca7e:	e01a      	b.n	800cab6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	785b      	ldrb	r3, [r3, #1]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d116      	bne.n	800cab6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	461a      	mov	r2, r3
 800ca9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca9c:	4413      	add	r3, r2
 800ca9e:	667b      	str	r3, [r7, #100]	@ 0x64
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	00da      	lsls	r2, r3, #3
 800caa6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800caa8:	4413      	add	r3, r2
 800caaa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800caae:	663b      	str	r3, [r7, #96]	@ 0x60
 800cab0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cab2:	2200      	movs	r2, #0
 800cab4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	677b      	str	r3, [r7, #116]	@ 0x74
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	785b      	ldrb	r3, [r3, #1]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d12b      	bne.n	800cb1c <HAL_PCD_EP_DB_Transmit+0x516>
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	461a      	mov	r2, r3
 800cad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cad8:	4413      	add	r3, r2
 800cada:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	00da      	lsls	r2, r3, #3
 800cae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cae4:	4413      	add	r3, r2
 800cae6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800caea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800caee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800caf2:	881b      	ldrh	r3, [r3, #0]
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cafa:	b29a      	uxth	r2, r3
 800cafc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cb00:	801a      	strh	r2, [r3, #0]
 800cb02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cb06:	881b      	ldrh	r3, [r3, #0]
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb12:	b29a      	uxth	r2, r3
 800cb14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cb18:	801a      	strh	r2, [r3, #0]
 800cb1a:	e017      	b.n	800cb4c <HAL_PCD_EP_DB_Transmit+0x546>
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	785b      	ldrb	r3, [r3, #1]
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d113      	bne.n	800cb4c <HAL_PCD_EP_DB_Transmit+0x546>
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	461a      	mov	r2, r3
 800cb30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb32:	4413      	add	r3, r2
 800cb34:	677b      	str	r3, [r7, #116]	@ 0x74
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	00da      	lsls	r2, r3, #3
 800cb3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb3e:	4413      	add	r3, r2
 800cb40:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb44:	673b      	str	r3, [r7, #112]	@ 0x70
 800cb46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb48:	2200      	movs	r2, #0
 800cb4a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	4619      	mov	r1, r3
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f00b fc29 	bl	80183aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800cb58:	88fb      	ldrh	r3, [r7, #6]
 800cb5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f040 811a 	bne.w	800cd98 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	461a      	mov	r2, r3
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	4413      	add	r3, r2
 800cb72:	881b      	ldrh	r3, [r3, #0]
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb7e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	461a      	mov	r2, r3
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	441a      	add	r2, r3
 800cb90:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800cb94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	8013      	strh	r3, [r2, #0]
 800cba8:	e0f6      	b.n	800cd98 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800cbaa:	88fb      	ldrh	r3, [r7, #6]
 800cbac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d121      	bne.n	800cbf8 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	461a      	mov	r2, r3
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4413      	add	r3, r2
 800cbc2:	881b      	ldrh	r3, [r3, #0]
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbce:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	009b      	lsls	r3, r3, #2
 800cbde:	441a      	add	r2, r3
 800cbe0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800cbe4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbe8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cbf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	f040 80ca 	bne.w	800cd98 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	695a      	ldr	r2, [r3, #20]
 800cc08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800cc0c:	441a      	add	r2, r3
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	69da      	ldr	r2, [r3, #28]
 800cc16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800cc1a:	441a      	add	r2, r3
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	6a1a      	ldr	r2, [r3, #32]
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	691b      	ldr	r3, [r3, #16]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d30b      	bcc.n	800cc44 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	691b      	ldr	r3, [r3, #16]
 800cc30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	6a1a      	ldr	r2, [r3, #32]
 800cc38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cc3c:	1ad2      	subs	r2, r2, r3
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	621a      	str	r2, [r3, #32]
 800cc42:	e017      	b.n	800cc74 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	6a1b      	ldr	r3, [r3, #32]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d108      	bne.n	800cc5e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800cc4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800cc50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800cc5c:	e00a      	b.n	800cc74 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	6a1b      	ldr	r3, [r3, #32]
 800cc62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	785b      	ldrb	r3, [r3, #1]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d165      	bne.n	800cd4e <HAL_PCD_EP_DB_Transmit+0x748>
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	461a      	mov	r2, r3
 800cc94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc96:	4413      	add	r3, r2
 800cc98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	00da      	lsls	r2, r3, #3
 800cca0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cca2:	4413      	add	r3, r2
 800cca4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cca8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ccaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ccac:	881b      	ldrh	r3, [r3, #0]
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ccb4:	b29a      	uxth	r2, r3
 800ccb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ccb8:	801a      	strh	r2, [r3, #0]
 800ccba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ccbe:	2b3e      	cmp	r3, #62	@ 0x3e
 800ccc0:	d91d      	bls.n	800ccfe <HAL_PCD_EP_DB_Transmit+0x6f8>
 800ccc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ccc6:	095b      	lsrs	r3, r3, #5
 800ccc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ccca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ccce:	f003 031f 	and.w	r3, r3, #31
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d102      	bne.n	800ccdc <HAL_PCD_EP_DB_Transmit+0x6d6>
 800ccd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ccdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ccde:	881b      	ldrh	r3, [r3, #0]
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	029b      	lsls	r3, r3, #10
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	4313      	orrs	r3, r2
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ccfa:	801a      	strh	r2, [r3, #0]
 800ccfc:	e041      	b.n	800cd82 <HAL_PCD_EP_DB_Transmit+0x77c>
 800ccfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d10a      	bne.n	800cd1c <HAL_PCD_EP_DB_Transmit+0x716>
 800cd06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd08:	881b      	ldrh	r3, [r3, #0]
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd18:	801a      	strh	r2, [r3, #0]
 800cd1a:	e032      	b.n	800cd82 <HAL_PCD_EP_DB_Transmit+0x77c>
 800cd1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd20:	085b      	lsrs	r3, r3, #1
 800cd22:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cd24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd28:	f003 0301 	and.w	r3, r3, #1
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d002      	beq.n	800cd36 <HAL_PCD_EP_DB_Transmit+0x730>
 800cd30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cd32:	3301      	adds	r3, #1
 800cd34:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cd36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd38:	881b      	ldrh	r3, [r3, #0]
 800cd3a:	b29a      	uxth	r2, r3
 800cd3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	029b      	lsls	r3, r3, #10
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	4313      	orrs	r3, r2
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd4a:	801a      	strh	r2, [r3, #0]
 800cd4c:	e019      	b.n	800cd82 <HAL_PCD_EP_DB_Transmit+0x77c>
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	785b      	ldrb	r3, [r3, #1]
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d115      	bne.n	800cd82 <HAL_PCD_EP_DB_Transmit+0x77c>
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	461a      	mov	r2, r3
 800cd62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd64:	4413      	add	r3, r2
 800cd66:	657b      	str	r3, [r7, #84]	@ 0x54
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	00da      	lsls	r2, r3, #3
 800cd6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd70:	4413      	add	r3, r2
 800cd72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cd76:	653b      	str	r3, [r7, #80]	@ 0x50
 800cd78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd80:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6818      	ldr	r0, [r3, #0]
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	6959      	ldr	r1, [r3, #20]
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	895a      	ldrh	r2, [r3, #10]
 800cd8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	f006 fb6c 	bl	8013470 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	4413      	add	r3, r2
 800cda6:	881b      	ldrh	r3, [r3, #0]
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdb2:	82bb      	strh	r3, [r7, #20]
 800cdb4:	8abb      	ldrh	r3, [r7, #20]
 800cdb6:	f083 0310 	eor.w	r3, r3, #16
 800cdba:	82bb      	strh	r3, [r7, #20]
 800cdbc:	8abb      	ldrh	r3, [r7, #20]
 800cdbe:	f083 0320 	eor.w	r3, r3, #32
 800cdc2:	82bb      	strh	r3, [r7, #20]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	461a      	mov	r2, r3
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	441a      	add	r2, r3
 800cdd2:	8abb      	ldrh	r3, [r7, #20]
 800cdd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cddc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cde0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800cde8:	2300      	movs	r3, #0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3790      	adds	r7, #144	@ 0x90
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800cdf2:	b480      	push	{r7}
 800cdf4:	b087      	sub	sp, #28
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	60f8      	str	r0, [r7, #12]
 800cdfa:	607b      	str	r3, [r7, #4]
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	817b      	strh	r3, [r7, #10]
 800ce00:	4613      	mov	r3, r2
 800ce02:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800ce04:	897b      	ldrh	r3, [r7, #10]
 800ce06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00b      	beq.n	800ce28 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce10:	897b      	ldrh	r3, [r7, #10]
 800ce12:	f003 0207 	and.w	r2, r3, #7
 800ce16:	4613      	mov	r3, r2
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	4413      	add	r3, r2
 800ce1c:	00db      	lsls	r3, r3, #3
 800ce1e:	3310      	adds	r3, #16
 800ce20:	68fa      	ldr	r2, [r7, #12]
 800ce22:	4413      	add	r3, r2
 800ce24:	617b      	str	r3, [r7, #20]
 800ce26:	e009      	b.n	800ce3c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ce28:	897a      	ldrh	r2, [r7, #10]
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	4413      	add	r3, r2
 800ce30:	00db      	lsls	r3, r3, #3
 800ce32:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	4413      	add	r3, r2
 800ce3a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800ce3c:	893b      	ldrh	r3, [r7, #8]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d107      	bne.n	800ce52 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	2200      	movs	r2, #0
 800ce46:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	b29a      	uxth	r2, r3
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	80da      	strh	r2, [r3, #6]
 800ce50:	e00b      	b.n	800ce6a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	2201      	movs	r2, #1
 800ce56:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	b29a      	uxth	r2, r3
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	0c1b      	lsrs	r3, r3, #16
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	371c      	adds	r7, #28
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2201      	movs	r2, #1
 800ce8a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2200      	movs	r2, #0
 800ce92:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	f043 0301 	orr.w	r3, r3, #1
 800cea2:	b29a      	uxth	r2, r3
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	f043 0302 	orr.w	r3, r3, #2
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800cebe:	2300      	movs	r3, #0
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3714      	adds	r7, #20
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800cecc:	b480      	push	{r7}
 800cece:	b085      	sub	sp, #20
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d141      	bne.n	800cf5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ceda:	4b4b      	ldr	r3, [pc, #300]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cee6:	d131      	bne.n	800cf4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cee8:	4b47      	ldr	r3, [pc, #284]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ceea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ceee:	4a46      	ldr	r2, [pc, #280]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cef4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cef8:	4b43      	ldr	r3, [pc, #268]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800cf00:	4a41      	ldr	r2, [pc, #260]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cf06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cf08:	4b40      	ldr	r3, [pc, #256]	@ (800d00c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2232      	movs	r2, #50	@ 0x32
 800cf0e:	fb02 f303 	mul.w	r3, r2, r3
 800cf12:	4a3f      	ldr	r2, [pc, #252]	@ (800d010 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cf14:	fba2 2303 	umull	r2, r3, r2, r3
 800cf18:	0c9b      	lsrs	r3, r3, #18
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cf1e:	e002      	b.n	800cf26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	3b01      	subs	r3, #1
 800cf24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cf26:	4b38      	ldr	r3, [pc, #224]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf28:	695b      	ldr	r3, [r3, #20]
 800cf2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf32:	d102      	bne.n	800cf3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d1f2      	bne.n	800cf20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cf3a:	4b33      	ldr	r3, [pc, #204]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf3c:	695b      	ldr	r3, [r3, #20]
 800cf3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf46:	d158      	bne.n	800cffa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cf48:	2303      	movs	r3, #3
 800cf4a:	e057      	b.n	800cffc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cf4c:	4b2e      	ldr	r3, [pc, #184]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf52:	4a2d      	ldr	r2, [pc, #180]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800cf5c:	e04d      	b.n	800cffa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf64:	d141      	bne.n	800cfea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cf66:	4b28      	ldr	r3, [pc, #160]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cf6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf72:	d131      	bne.n	800cfd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cf74:	4b24      	ldr	r3, [pc, #144]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf7a:	4a23      	ldr	r2, [pc, #140]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cf80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cf84:	4b20      	ldr	r3, [pc, #128]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800cf8c:	4a1e      	ldr	r2, [pc, #120]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cf8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cf92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cf94:	4b1d      	ldr	r3, [pc, #116]	@ (800d00c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2232      	movs	r2, #50	@ 0x32
 800cf9a:	fb02 f303 	mul.w	r3, r2, r3
 800cf9e:	4a1c      	ldr	r2, [pc, #112]	@ (800d010 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cfa0:	fba2 2303 	umull	r2, r3, r2, r3
 800cfa4:	0c9b      	lsrs	r3, r3, #18
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cfaa:	e002      	b.n	800cfb2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cfb2:	4b15      	ldr	r3, [pc, #84]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfb4:	695b      	ldr	r3, [r3, #20]
 800cfb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cfbe:	d102      	bne.n	800cfc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d1f2      	bne.n	800cfac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cfc6:	4b10      	ldr	r3, [pc, #64]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfc8:	695b      	ldr	r3, [r3, #20]
 800cfca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cfd2:	d112      	bne.n	800cffa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cfd4:	2303      	movs	r3, #3
 800cfd6:	e011      	b.n	800cffc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cfd8:	4b0b      	ldr	r3, [pc, #44]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfde:	4a0a      	ldr	r2, [pc, #40]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cfe4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800cfe8:	e007      	b.n	800cffa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800cfea:	4b07      	ldr	r3, [pc, #28]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800cff2:	4a05      	ldr	r2, [pc, #20]	@ (800d008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cff4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cff8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800cffa:	2300      	movs	r3, #0
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3714      	adds	r7, #20
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr
 800d008:	40007000 	.word	0x40007000
 800d00c:	20000004 	.word	0x20000004
 800d010:	431bde83 	.word	0x431bde83

0800d014 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800d014:	b480      	push	{r7}
 800d016:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800d018:	4b05      	ldr	r3, [pc, #20]	@ (800d030 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	4a04      	ldr	r2, [pc, #16]	@ (800d030 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d01e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d022:	6093      	str	r3, [r2, #8]
}
 800d024:	bf00      	nop
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop
 800d030:	40007000 	.word	0x40007000

0800d034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b088      	sub	sp, #32
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d101      	bne.n	800d046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d042:	2301      	movs	r3, #1
 800d044:	e2fe      	b.n	800d644 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f003 0301 	and.w	r3, r3, #1
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d075      	beq.n	800d13e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d052:	4b97      	ldr	r3, [pc, #604]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	f003 030c 	and.w	r3, r3, #12
 800d05a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d05c:	4b94      	ldr	r3, [pc, #592]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	f003 0303 	and.w	r3, r3, #3
 800d064:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	2b0c      	cmp	r3, #12
 800d06a:	d102      	bne.n	800d072 <HAL_RCC_OscConfig+0x3e>
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	2b03      	cmp	r3, #3
 800d070:	d002      	beq.n	800d078 <HAL_RCC_OscConfig+0x44>
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	2b08      	cmp	r3, #8
 800d076:	d10b      	bne.n	800d090 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d078:	4b8d      	ldr	r3, [pc, #564]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d080:	2b00      	cmp	r3, #0
 800d082:	d05b      	beq.n	800d13c <HAL_RCC_OscConfig+0x108>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d157      	bne.n	800d13c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d08c:	2301      	movs	r3, #1
 800d08e:	e2d9      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d098:	d106      	bne.n	800d0a8 <HAL_RCC_OscConfig+0x74>
 800d09a:	4b85      	ldr	r3, [pc, #532]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a84      	ldr	r2, [pc, #528]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d0a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d0a4:	6013      	str	r3, [r2, #0]
 800d0a6:	e01d      	b.n	800d0e4 <HAL_RCC_OscConfig+0xb0>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d0b0:	d10c      	bne.n	800d0cc <HAL_RCC_OscConfig+0x98>
 800d0b2:	4b7f      	ldr	r3, [pc, #508]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a7e      	ldr	r2, [pc, #504]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d0b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d0bc:	6013      	str	r3, [r2, #0]
 800d0be:	4b7c      	ldr	r3, [pc, #496]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4a7b      	ldr	r2, [pc, #492]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d0c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d0c8:	6013      	str	r3, [r2, #0]
 800d0ca:	e00b      	b.n	800d0e4 <HAL_RCC_OscConfig+0xb0>
 800d0cc:	4b78      	ldr	r3, [pc, #480]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a77      	ldr	r2, [pc, #476]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d0d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d0d6:	6013      	str	r3, [r2, #0]
 800d0d8:	4b75      	ldr	r3, [pc, #468]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a74      	ldr	r2, [pc, #464]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d0de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d0e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d013      	beq.n	800d114 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0ec:	f7fb fb36 	bl	800875c <HAL_GetTick>
 800d0f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d0f2:	e008      	b.n	800d106 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d0f4:	f7fb fb32 	bl	800875c <HAL_GetTick>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	1ad3      	subs	r3, r2, r3
 800d0fe:	2b64      	cmp	r3, #100	@ 0x64
 800d100:	d901      	bls.n	800d106 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d102:	2303      	movs	r3, #3
 800d104:	e29e      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d106:	4b6a      	ldr	r3, [pc, #424]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d0f0      	beq.n	800d0f4 <HAL_RCC_OscConfig+0xc0>
 800d112:	e014      	b.n	800d13e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d114:	f7fb fb22 	bl	800875c <HAL_GetTick>
 800d118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d11a:	e008      	b.n	800d12e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d11c:	f7fb fb1e 	bl	800875c <HAL_GetTick>
 800d120:	4602      	mov	r2, r0
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	1ad3      	subs	r3, r2, r3
 800d126:	2b64      	cmp	r3, #100	@ 0x64
 800d128:	d901      	bls.n	800d12e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d12a:	2303      	movs	r3, #3
 800d12c:	e28a      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d12e:	4b60      	ldr	r3, [pc, #384]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1f0      	bne.n	800d11c <HAL_RCC_OscConfig+0xe8>
 800d13a:	e000      	b.n	800d13e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d13c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f003 0302 	and.w	r3, r3, #2
 800d146:	2b00      	cmp	r3, #0
 800d148:	d075      	beq.n	800d236 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d14a:	4b59      	ldr	r3, [pc, #356]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	f003 030c 	and.w	r3, r3, #12
 800d152:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d154:	4b56      	ldr	r3, [pc, #344]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	f003 0303 	and.w	r3, r3, #3
 800d15c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	2b0c      	cmp	r3, #12
 800d162:	d102      	bne.n	800d16a <HAL_RCC_OscConfig+0x136>
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	2b02      	cmp	r3, #2
 800d168:	d002      	beq.n	800d170 <HAL_RCC_OscConfig+0x13c>
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	2b04      	cmp	r3, #4
 800d16e:	d11f      	bne.n	800d1b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d170:	4b4f      	ldr	r3, [pc, #316]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d005      	beq.n	800d188 <HAL_RCC_OscConfig+0x154>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d101      	bne.n	800d188 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800d184:	2301      	movs	r3, #1
 800d186:	e25d      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d188:	4b49      	ldr	r3, [pc, #292]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	061b      	lsls	r3, r3, #24
 800d196:	4946      	ldr	r1, [pc, #280]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d198:	4313      	orrs	r3, r2
 800d19a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d19c:	4b45      	ldr	r3, [pc, #276]	@ (800d2b4 <HAL_RCC_OscConfig+0x280>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fb fa8f 	bl	80086c4 <HAL_InitTick>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d043      	beq.n	800d234 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e249      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d023      	beq.n	800d200 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d1b8:	4b3d      	ldr	r3, [pc, #244]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a3c      	ldr	r2, [pc, #240]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d1be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d1c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1c4:	f7fb faca 	bl	800875c <HAL_GetTick>
 800d1c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d1ca:	e008      	b.n	800d1de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d1cc:	f7fb fac6 	bl	800875c <HAL_GetTick>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	1ad3      	subs	r3, r2, r3
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	d901      	bls.n	800d1de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d1da:	2303      	movs	r3, #3
 800d1dc:	e232      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d1de:	4b34      	ldr	r3, [pc, #208]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d0f0      	beq.n	800d1cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d1ea:	4b31      	ldr	r3, [pc, #196]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	691b      	ldr	r3, [r3, #16]
 800d1f6:	061b      	lsls	r3, r3, #24
 800d1f8:	492d      	ldr	r1, [pc, #180]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	604b      	str	r3, [r1, #4]
 800d1fe:	e01a      	b.n	800d236 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d200:	4b2b      	ldr	r3, [pc, #172]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a2a      	ldr	r2, [pc, #168]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d206:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d20a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d20c:	f7fb faa6 	bl	800875c <HAL_GetTick>
 800d210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d212:	e008      	b.n	800d226 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d214:	f7fb faa2 	bl	800875c <HAL_GetTick>
 800d218:	4602      	mov	r2, r0
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	1ad3      	subs	r3, r2, r3
 800d21e:	2b02      	cmp	r3, #2
 800d220:	d901      	bls.n	800d226 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800d222:	2303      	movs	r3, #3
 800d224:	e20e      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d226:	4b22      	ldr	r3, [pc, #136]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1f0      	bne.n	800d214 <HAL_RCC_OscConfig+0x1e0>
 800d232:	e000      	b.n	800d236 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d234:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f003 0308 	and.w	r3, r3, #8
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d041      	beq.n	800d2c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	695b      	ldr	r3, [r3, #20]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d01c      	beq.n	800d284 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d24a:	4b19      	ldr	r3, [pc, #100]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d24c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d250:	4a17      	ldr	r2, [pc, #92]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d252:	f043 0301 	orr.w	r3, r3, #1
 800d256:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d25a:	f7fb fa7f 	bl	800875c <HAL_GetTick>
 800d25e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d260:	e008      	b.n	800d274 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d262:	f7fb fa7b 	bl	800875c <HAL_GetTick>
 800d266:	4602      	mov	r2, r0
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	1ad3      	subs	r3, r2, r3
 800d26c:	2b02      	cmp	r3, #2
 800d26e:	d901      	bls.n	800d274 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d270:	2303      	movs	r3, #3
 800d272:	e1e7      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d274:	4b0e      	ldr	r3, [pc, #56]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d276:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d27a:	f003 0302 	and.w	r3, r3, #2
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0ef      	beq.n	800d262 <HAL_RCC_OscConfig+0x22e>
 800d282:	e020      	b.n	800d2c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d284:	4b0a      	ldr	r3, [pc, #40]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d286:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d28a:	4a09      	ldr	r2, [pc, #36]	@ (800d2b0 <HAL_RCC_OscConfig+0x27c>)
 800d28c:	f023 0301 	bic.w	r3, r3, #1
 800d290:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d294:	f7fb fa62 	bl	800875c <HAL_GetTick>
 800d298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d29a:	e00d      	b.n	800d2b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d29c:	f7fb fa5e 	bl	800875c <HAL_GetTick>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	1ad3      	subs	r3, r2, r3
 800d2a6:	2b02      	cmp	r3, #2
 800d2a8:	d906      	bls.n	800d2b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d2aa:	2303      	movs	r3, #3
 800d2ac:	e1ca      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
 800d2ae:	bf00      	nop
 800d2b0:	40021000 	.word	0x40021000
 800d2b4:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d2b8:	4b8c      	ldr	r3, [pc, #560]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d2ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d2be:	f003 0302 	and.w	r3, r3, #2
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1ea      	bne.n	800d29c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f003 0304 	and.w	r3, r3, #4
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	f000 80a6 	beq.w	800d420 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d2d8:	4b84      	ldr	r3, [pc, #528]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d2da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d101      	bne.n	800d2e8 <HAL_RCC_OscConfig+0x2b4>
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	e000      	b.n	800d2ea <HAL_RCC_OscConfig+0x2b6>
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d00d      	beq.n	800d30a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d2ee:	4b7f      	ldr	r3, [pc, #508]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d2f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2f2:	4a7e      	ldr	r2, [pc, #504]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d2f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d2f8:	6593      	str	r3, [r2, #88]	@ 0x58
 800d2fa:	4b7c      	ldr	r3, [pc, #496]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d2fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d302:	60fb      	str	r3, [r7, #12]
 800d304:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d306:	2301      	movs	r3, #1
 800d308:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d30a:	4b79      	ldr	r3, [pc, #484]	@ (800d4f0 <HAL_RCC_OscConfig+0x4bc>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d312:	2b00      	cmp	r3, #0
 800d314:	d118      	bne.n	800d348 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d316:	4b76      	ldr	r3, [pc, #472]	@ (800d4f0 <HAL_RCC_OscConfig+0x4bc>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4a75      	ldr	r2, [pc, #468]	@ (800d4f0 <HAL_RCC_OscConfig+0x4bc>)
 800d31c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d322:	f7fb fa1b 	bl	800875c <HAL_GetTick>
 800d326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d328:	e008      	b.n	800d33c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d32a:	f7fb fa17 	bl	800875c <HAL_GetTick>
 800d32e:	4602      	mov	r2, r0
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	2b02      	cmp	r3, #2
 800d336:	d901      	bls.n	800d33c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800d338:	2303      	movs	r3, #3
 800d33a:	e183      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d33c:	4b6c      	ldr	r3, [pc, #432]	@ (800d4f0 <HAL_RCC_OscConfig+0x4bc>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d344:	2b00      	cmp	r3, #0
 800d346:	d0f0      	beq.n	800d32a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d108      	bne.n	800d362 <HAL_RCC_OscConfig+0x32e>
 800d350:	4b66      	ldr	r3, [pc, #408]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d356:	4a65      	ldr	r2, [pc, #404]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d358:	f043 0301 	orr.w	r3, r3, #1
 800d35c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d360:	e024      	b.n	800d3ac <HAL_RCC_OscConfig+0x378>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	689b      	ldr	r3, [r3, #8]
 800d366:	2b05      	cmp	r3, #5
 800d368:	d110      	bne.n	800d38c <HAL_RCC_OscConfig+0x358>
 800d36a:	4b60      	ldr	r3, [pc, #384]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d36c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d370:	4a5e      	ldr	r2, [pc, #376]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d372:	f043 0304 	orr.w	r3, r3, #4
 800d376:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d37a:	4b5c      	ldr	r3, [pc, #368]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d37c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d380:	4a5a      	ldr	r2, [pc, #360]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d382:	f043 0301 	orr.w	r3, r3, #1
 800d386:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d38a:	e00f      	b.n	800d3ac <HAL_RCC_OscConfig+0x378>
 800d38c:	4b57      	ldr	r3, [pc, #348]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d38e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d392:	4a56      	ldr	r2, [pc, #344]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d394:	f023 0301 	bic.w	r3, r3, #1
 800d398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d39c:	4b53      	ldr	r3, [pc, #332]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d39e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3a2:	4a52      	ldr	r2, [pc, #328]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d3a4:	f023 0304 	bic.w	r3, r3, #4
 800d3a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d016      	beq.n	800d3e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3b4:	f7fb f9d2 	bl	800875c <HAL_GetTick>
 800d3b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d3ba:	e00a      	b.n	800d3d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3bc:	f7fb f9ce 	bl	800875c <HAL_GetTick>
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	1ad3      	subs	r3, r2, r3
 800d3c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d901      	bls.n	800d3d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800d3ce:	2303      	movs	r3, #3
 800d3d0:	e138      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d3d2:	4b46      	ldr	r3, [pc, #280]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d3d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3d8:	f003 0302 	and.w	r3, r3, #2
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d0ed      	beq.n	800d3bc <HAL_RCC_OscConfig+0x388>
 800d3e0:	e015      	b.n	800d40e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3e2:	f7fb f9bb 	bl	800875c <HAL_GetTick>
 800d3e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d3e8:	e00a      	b.n	800d400 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3ea:	f7fb f9b7 	bl	800875c <HAL_GetTick>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	1ad3      	subs	r3, r2, r3
 800d3f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d901      	bls.n	800d400 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800d3fc:	2303      	movs	r3, #3
 800d3fe:	e121      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d400:	4b3a      	ldr	r3, [pc, #232]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d406:	f003 0302 	and.w	r3, r3, #2
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1ed      	bne.n	800d3ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d40e:	7ffb      	ldrb	r3, [r7, #31]
 800d410:	2b01      	cmp	r3, #1
 800d412:	d105      	bne.n	800d420 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d414:	4b35      	ldr	r3, [pc, #212]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d418:	4a34      	ldr	r2, [pc, #208]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d41a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d41e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f003 0320 	and.w	r3, r3, #32
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d03c      	beq.n	800d4a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	699b      	ldr	r3, [r3, #24]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d01c      	beq.n	800d46e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d434:	4b2d      	ldr	r3, [pc, #180]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d436:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d43a:	4a2c      	ldr	r2, [pc, #176]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d43c:	f043 0301 	orr.w	r3, r3, #1
 800d440:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d444:	f7fb f98a 	bl	800875c <HAL_GetTick>
 800d448:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d44a:	e008      	b.n	800d45e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d44c:	f7fb f986 	bl	800875c <HAL_GetTick>
 800d450:	4602      	mov	r2, r0
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	1ad3      	subs	r3, r2, r3
 800d456:	2b02      	cmp	r3, #2
 800d458:	d901      	bls.n	800d45e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800d45a:	2303      	movs	r3, #3
 800d45c:	e0f2      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d45e:	4b23      	ldr	r3, [pc, #140]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d460:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d464:	f003 0302 	and.w	r3, r3, #2
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d0ef      	beq.n	800d44c <HAL_RCC_OscConfig+0x418>
 800d46c:	e01b      	b.n	800d4a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d46e:	4b1f      	ldr	r3, [pc, #124]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d470:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d474:	4a1d      	ldr	r2, [pc, #116]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d476:	f023 0301 	bic.w	r3, r3, #1
 800d47a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d47e:	f7fb f96d 	bl	800875c <HAL_GetTick>
 800d482:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d484:	e008      	b.n	800d498 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d486:	f7fb f969 	bl	800875c <HAL_GetTick>
 800d48a:	4602      	mov	r2, r0
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	1ad3      	subs	r3, r2, r3
 800d490:	2b02      	cmp	r3, #2
 800d492:	d901      	bls.n	800d498 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800d494:	2303      	movs	r3, #3
 800d496:	e0d5      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d498:	4b14      	ldr	r3, [pc, #80]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d49a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d49e:	f003 0302 	and.w	r3, r3, #2
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d1ef      	bne.n	800d486 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	69db      	ldr	r3, [r3, #28]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	f000 80c9 	beq.w	800d642 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d4b0:	4b0e      	ldr	r3, [pc, #56]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	f003 030c 	and.w	r3, r3, #12
 800d4b8:	2b0c      	cmp	r3, #12
 800d4ba:	f000 8083 	beq.w	800d5c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	69db      	ldr	r3, [r3, #28]
 800d4c2:	2b02      	cmp	r3, #2
 800d4c4:	d15e      	bne.n	800d584 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d4c6:	4b09      	ldr	r3, [pc, #36]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a08      	ldr	r2, [pc, #32]	@ (800d4ec <HAL_RCC_OscConfig+0x4b8>)
 800d4cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d4d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4d2:	f7fb f943 	bl	800875c <HAL_GetTick>
 800d4d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d4d8:	e00c      	b.n	800d4f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d4da:	f7fb f93f 	bl	800875c <HAL_GetTick>
 800d4de:	4602      	mov	r2, r0
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	1ad3      	subs	r3, r2, r3
 800d4e4:	2b02      	cmp	r3, #2
 800d4e6:	d905      	bls.n	800d4f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800d4e8:	2303      	movs	r3, #3
 800d4ea:	e0ab      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
 800d4ec:	40021000 	.word	0x40021000
 800d4f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d4f4:	4b55      	ldr	r3, [pc, #340]	@ (800d64c <HAL_RCC_OscConfig+0x618>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d1ec      	bne.n	800d4da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d500:	4b52      	ldr	r3, [pc, #328]	@ (800d64c <HAL_RCC_OscConfig+0x618>)
 800d502:	68da      	ldr	r2, [r3, #12]
 800d504:	4b52      	ldr	r3, [pc, #328]	@ (800d650 <HAL_RCC_OscConfig+0x61c>)
 800d506:	4013      	ands	r3, r2
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	6a11      	ldr	r1, [r2, #32]
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d510:	3a01      	subs	r2, #1
 800d512:	0112      	lsls	r2, r2, #4
 800d514:	4311      	orrs	r1, r2
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800d51a:	0212      	lsls	r2, r2, #8
 800d51c:	4311      	orrs	r1, r2
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d522:	0852      	lsrs	r2, r2, #1
 800d524:	3a01      	subs	r2, #1
 800d526:	0552      	lsls	r2, r2, #21
 800d528:	4311      	orrs	r1, r2
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d52e:	0852      	lsrs	r2, r2, #1
 800d530:	3a01      	subs	r2, #1
 800d532:	0652      	lsls	r2, r2, #25
 800d534:	4311      	orrs	r1, r2
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d53a:	06d2      	lsls	r2, r2, #27
 800d53c:	430a      	orrs	r2, r1
 800d53e:	4943      	ldr	r1, [pc, #268]	@ (800d64c <HAL_RCC_OscConfig+0x618>)
 800d540:	4313      	orrs	r3, r2
 800d542:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d544:	4b41      	ldr	r3, [pc, #260]	@ (800d64c <HAL_RCC_OscConfig+0x618>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a40      	ldr	r2, [pc, #256]	@ (800d64c <HAL_RCC_OscConfig+0x618>)
 800d54a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d54e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d550:	4b3e      	ldr	r3, [pc, #248]	@ (800d64c <HAL_RCC_OscConfig+0x618>)
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	4a3d      	ldr	r2, [pc, #244]	@ (800d64c <HAL_RCC_OscConfig+0x618>)
 800d556:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d55a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d55c:	f7fb f8fe 	bl	800875c <HAL_GetTick>
 800d560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d562:	e008      	b.n	800d576 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d564:	f7fb f8fa 	bl	800875c <HAL_GetTick>
 800d568:	4602      	mov	r2, r0
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	1ad3      	subs	r3, r2, r3
 800d56e:	2b02      	cmp	r3, #2
 800d570:	d901      	bls.n	800d576 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800d572:	2303      	movs	r3, #3
 800d574:	e066      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d576:	4b35      	ldr	r3, [pc, #212]	@ (800d64c <HAL_RCC_OscConfig+0x618>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d0f0      	beq.n	800d564 <HAL_RCC_OscConfig+0x530>
 800d582:	e05e      	b.n	800d642 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d584:	4b31      	ldr	r3, [pc, #196]	@ (800d64c <HAL_RCC_OscConfig+0x618>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4a30      	ldr	r2, [pc, #192]	@ (800d64c <HAL_RCC_OscConfig+0x618>)
 800d58a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d58e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d590:	f7fb f8e4 	bl	800875c <HAL_GetTick>
 800d594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d596:	e008      	b.n	800d5aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d598:	f7fb f8e0 	bl	800875c <HAL_GetTick>
 800d59c:	4602      	mov	r2, r0
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	1ad3      	subs	r3, r2, r3
 800d5a2:	2b02      	cmp	r3, #2
 800d5a4:	d901      	bls.n	800d5aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800d5a6:	2303      	movs	r3, #3
 800d5a8:	e04c      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d5aa:	4b28      	ldr	r3, [pc, #160]	@ (800d64c <HAL_RCC_OscConfig+0x618>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d1f0      	bne.n	800d598 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800d5b6:	4b25      	ldr	r3, [pc, #148]	@ (800d64c <HAL_RCC_OscConfig+0x618>)
 800d5b8:	68da      	ldr	r2, [r3, #12]
 800d5ba:	4924      	ldr	r1, [pc, #144]	@ (800d64c <HAL_RCC_OscConfig+0x618>)
 800d5bc:	4b25      	ldr	r3, [pc, #148]	@ (800d654 <HAL_RCC_OscConfig+0x620>)
 800d5be:	4013      	ands	r3, r2
 800d5c0:	60cb      	str	r3, [r1, #12]
 800d5c2:	e03e      	b.n	800d642 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	69db      	ldr	r3, [r3, #28]
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	d101      	bne.n	800d5d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	e039      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800d5d0:	4b1e      	ldr	r3, [pc, #120]	@ (800d64c <HAL_RCC_OscConfig+0x618>)
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	f003 0203 	and.w	r2, r3, #3
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6a1b      	ldr	r3, [r3, #32]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d12c      	bne.n	800d63e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d123      	bne.n	800d63e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d600:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d602:	429a      	cmp	r2, r3
 800d604:	d11b      	bne.n	800d63e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d610:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d612:	429a      	cmp	r2, r3
 800d614:	d113      	bne.n	800d63e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d620:	085b      	lsrs	r3, r3, #1
 800d622:	3b01      	subs	r3, #1
 800d624:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d626:	429a      	cmp	r2, r3
 800d628:	d109      	bne.n	800d63e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d634:	085b      	lsrs	r3, r3, #1
 800d636:	3b01      	subs	r3, #1
 800d638:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d001      	beq.n	800d642 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800d63e:	2301      	movs	r3, #1
 800d640:	e000      	b.n	800d644 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800d642:	2300      	movs	r3, #0
}
 800d644:	4618      	mov	r0, r3
 800d646:	3720      	adds	r7, #32
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	40021000 	.word	0x40021000
 800d650:	019f800c 	.word	0x019f800c
 800d654:	feeefffc 	.word	0xfeeefffc

0800d658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b086      	sub	sp, #24
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d662:	2300      	movs	r3, #0
 800d664:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d101      	bne.n	800d670 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d66c:	2301      	movs	r3, #1
 800d66e:	e11e      	b.n	800d8ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d670:	4b91      	ldr	r3, [pc, #580]	@ (800d8b8 <HAL_RCC_ClockConfig+0x260>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f003 030f 	and.w	r3, r3, #15
 800d678:	683a      	ldr	r2, [r7, #0]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d910      	bls.n	800d6a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d67e:	4b8e      	ldr	r3, [pc, #568]	@ (800d8b8 <HAL_RCC_ClockConfig+0x260>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f023 020f 	bic.w	r2, r3, #15
 800d686:	498c      	ldr	r1, [pc, #560]	@ (800d8b8 <HAL_RCC_ClockConfig+0x260>)
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	4313      	orrs	r3, r2
 800d68c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d68e:	4b8a      	ldr	r3, [pc, #552]	@ (800d8b8 <HAL_RCC_ClockConfig+0x260>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f003 030f 	and.w	r3, r3, #15
 800d696:	683a      	ldr	r2, [r7, #0]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d001      	beq.n	800d6a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d69c:	2301      	movs	r3, #1
 800d69e:	e106      	b.n	800d8ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f003 0301 	and.w	r3, r3, #1
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d073      	beq.n	800d794 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	2b03      	cmp	r3, #3
 800d6b2:	d129      	bne.n	800d708 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d6b4:	4b81      	ldr	r3, [pc, #516]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d101      	bne.n	800d6c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	e0f4      	b.n	800d8ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d6c4:	f000 f99e 	bl	800da04 <RCC_GetSysClockFreqFromPLLSource>
 800d6c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	4a7c      	ldr	r2, [pc, #496]	@ (800d8c0 <HAL_RCC_ClockConfig+0x268>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d93f      	bls.n	800d752 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d6d2:	4b7a      	ldr	r3, [pc, #488]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d6d4:	689b      	ldr	r3, [r3, #8]
 800d6d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d009      	beq.n	800d6f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d033      	beq.n	800d752 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d12f      	bne.n	800d752 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d6f2:	4b72      	ldr	r3, [pc, #456]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d6fa:	4a70      	ldr	r2, [pc, #448]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d6fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d700:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d702:	2380      	movs	r3, #128	@ 0x80
 800d704:	617b      	str	r3, [r7, #20]
 800d706:	e024      	b.n	800d752 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	d107      	bne.n	800d720 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d710:	4b6a      	ldr	r3, [pc, #424]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d109      	bne.n	800d730 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d71c:	2301      	movs	r3, #1
 800d71e:	e0c6      	b.n	800d8ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d720:	4b66      	ldr	r3, [pc, #408]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d101      	bne.n	800d730 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d72c:	2301      	movs	r3, #1
 800d72e:	e0be      	b.n	800d8ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d730:	f000 f8ce 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800d734:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	4a61      	ldr	r2, [pc, #388]	@ (800d8c0 <HAL_RCC_ClockConfig+0x268>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d909      	bls.n	800d752 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d73e:	4b5f      	ldr	r3, [pc, #380]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d746:	4a5d      	ldr	r2, [pc, #372]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d74c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d74e:	2380      	movs	r3, #128	@ 0x80
 800d750:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d752:	4b5a      	ldr	r3, [pc, #360]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d754:	689b      	ldr	r3, [r3, #8]
 800d756:	f023 0203 	bic.w	r2, r3, #3
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	4957      	ldr	r1, [pc, #348]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d760:	4313      	orrs	r3, r2
 800d762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d764:	f7fa fffa 	bl	800875c <HAL_GetTick>
 800d768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d76a:	e00a      	b.n	800d782 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d76c:	f7fa fff6 	bl	800875c <HAL_GetTick>
 800d770:	4602      	mov	r2, r0
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d901      	bls.n	800d782 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d77e:	2303      	movs	r3, #3
 800d780:	e095      	b.n	800d8ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d782:	4b4e      	ldr	r3, [pc, #312]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d784:	689b      	ldr	r3, [r3, #8]
 800d786:	f003 020c 	and.w	r2, r3, #12
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	009b      	lsls	r3, r3, #2
 800d790:	429a      	cmp	r2, r3
 800d792:	d1eb      	bne.n	800d76c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f003 0302 	and.w	r3, r3, #2
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d023      	beq.n	800d7e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f003 0304 	and.w	r3, r3, #4
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d005      	beq.n	800d7b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d7ac:	4b43      	ldr	r3, [pc, #268]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	4a42      	ldr	r2, [pc, #264]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d7b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d7b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f003 0308 	and.w	r3, r3, #8
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d007      	beq.n	800d7d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d7c4:	4b3d      	ldr	r3, [pc, #244]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d7cc:	4a3b      	ldr	r2, [pc, #236]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d7ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d7d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d7d4:	4b39      	ldr	r3, [pc, #228]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d7d6:	689b      	ldr	r3, [r3, #8]
 800d7d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	4936      	ldr	r1, [pc, #216]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	608b      	str	r3, [r1, #8]
 800d7e6:	e008      	b.n	800d7fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	2b80      	cmp	r3, #128	@ 0x80
 800d7ec:	d105      	bne.n	800d7fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d7ee:	4b33      	ldr	r3, [pc, #204]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d7f0:	689b      	ldr	r3, [r3, #8]
 800d7f2:	4a32      	ldr	r2, [pc, #200]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d7f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d7f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d7fa:	4b2f      	ldr	r3, [pc, #188]	@ (800d8b8 <HAL_RCC_ClockConfig+0x260>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f003 030f 	and.w	r3, r3, #15
 800d802:	683a      	ldr	r2, [r7, #0]
 800d804:	429a      	cmp	r2, r3
 800d806:	d21d      	bcs.n	800d844 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d808:	4b2b      	ldr	r3, [pc, #172]	@ (800d8b8 <HAL_RCC_ClockConfig+0x260>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f023 020f 	bic.w	r2, r3, #15
 800d810:	4929      	ldr	r1, [pc, #164]	@ (800d8b8 <HAL_RCC_ClockConfig+0x260>)
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	4313      	orrs	r3, r2
 800d816:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d818:	f7fa ffa0 	bl	800875c <HAL_GetTick>
 800d81c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d81e:	e00a      	b.n	800d836 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d820:	f7fa ff9c 	bl	800875c <HAL_GetTick>
 800d824:	4602      	mov	r2, r0
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	1ad3      	subs	r3, r2, r3
 800d82a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d82e:	4293      	cmp	r3, r2
 800d830:	d901      	bls.n	800d836 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d832:	2303      	movs	r3, #3
 800d834:	e03b      	b.n	800d8ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d836:	4b20      	ldr	r3, [pc, #128]	@ (800d8b8 <HAL_RCC_ClockConfig+0x260>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f003 030f 	and.w	r3, r3, #15
 800d83e:	683a      	ldr	r2, [r7, #0]
 800d840:	429a      	cmp	r2, r3
 800d842:	d1ed      	bne.n	800d820 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f003 0304 	and.w	r3, r3, #4
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d008      	beq.n	800d862 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d850:	4b1a      	ldr	r3, [pc, #104]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	68db      	ldr	r3, [r3, #12]
 800d85c:	4917      	ldr	r1, [pc, #92]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d85e:	4313      	orrs	r3, r2
 800d860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f003 0308 	and.w	r3, r3, #8
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d009      	beq.n	800d882 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d86e:	4b13      	ldr	r3, [pc, #76]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d870:	689b      	ldr	r3, [r3, #8]
 800d872:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	691b      	ldr	r3, [r3, #16]
 800d87a:	00db      	lsls	r3, r3, #3
 800d87c:	490f      	ldr	r1, [pc, #60]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d87e:	4313      	orrs	r3, r2
 800d880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d882:	f000 f825 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800d886:	4602      	mov	r2, r0
 800d888:	4b0c      	ldr	r3, [pc, #48]	@ (800d8bc <HAL_RCC_ClockConfig+0x264>)
 800d88a:	689b      	ldr	r3, [r3, #8]
 800d88c:	091b      	lsrs	r3, r3, #4
 800d88e:	f003 030f 	and.w	r3, r3, #15
 800d892:	490c      	ldr	r1, [pc, #48]	@ (800d8c4 <HAL_RCC_ClockConfig+0x26c>)
 800d894:	5ccb      	ldrb	r3, [r1, r3]
 800d896:	f003 031f 	and.w	r3, r3, #31
 800d89a:	fa22 f303 	lsr.w	r3, r2, r3
 800d89e:	4a0a      	ldr	r2, [pc, #40]	@ (800d8c8 <HAL_RCC_ClockConfig+0x270>)
 800d8a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d8a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d8cc <HAL_RCC_ClockConfig+0x274>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fa ff0c 	bl	80086c4 <HAL_InitTick>
 800d8ac:	4603      	mov	r3, r0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3718      	adds	r7, #24
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	40022000 	.word	0x40022000
 800d8bc:	40021000 	.word	0x40021000
 800d8c0:	04c4b400 	.word	0x04c4b400
 800d8c4:	0801aa6c 	.word	0x0801aa6c
 800d8c8:	20000004 	.word	0x20000004
 800d8cc:	20000008 	.word	0x20000008

0800d8d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b087      	sub	sp, #28
 800d8d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d8d6:	4b2c      	ldr	r3, [pc, #176]	@ (800d988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d8d8:	689b      	ldr	r3, [r3, #8]
 800d8da:	f003 030c 	and.w	r3, r3, #12
 800d8de:	2b04      	cmp	r3, #4
 800d8e0:	d102      	bne.n	800d8e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d8e2:	4b2a      	ldr	r3, [pc, #168]	@ (800d98c <HAL_RCC_GetSysClockFreq+0xbc>)
 800d8e4:	613b      	str	r3, [r7, #16]
 800d8e6:	e047      	b.n	800d978 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d8e8:	4b27      	ldr	r3, [pc, #156]	@ (800d988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	f003 030c 	and.w	r3, r3, #12
 800d8f0:	2b08      	cmp	r3, #8
 800d8f2:	d102      	bne.n	800d8fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d8f4:	4b26      	ldr	r3, [pc, #152]	@ (800d990 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d8f6:	613b      	str	r3, [r7, #16]
 800d8f8:	e03e      	b.n	800d978 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d8fa:	4b23      	ldr	r3, [pc, #140]	@ (800d988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d8fc:	689b      	ldr	r3, [r3, #8]
 800d8fe:	f003 030c 	and.w	r3, r3, #12
 800d902:	2b0c      	cmp	r3, #12
 800d904:	d136      	bne.n	800d974 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d906:	4b20      	ldr	r3, [pc, #128]	@ (800d988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d908:	68db      	ldr	r3, [r3, #12]
 800d90a:	f003 0303 	and.w	r3, r3, #3
 800d90e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d910:	4b1d      	ldr	r3, [pc, #116]	@ (800d988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d912:	68db      	ldr	r3, [r3, #12]
 800d914:	091b      	lsrs	r3, r3, #4
 800d916:	f003 030f 	and.w	r3, r3, #15
 800d91a:	3301      	adds	r3, #1
 800d91c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2b03      	cmp	r3, #3
 800d922:	d10c      	bne.n	800d93e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d924:	4a1a      	ldr	r2, [pc, #104]	@ (800d990 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	fbb2 f3f3 	udiv	r3, r2, r3
 800d92c:	4a16      	ldr	r2, [pc, #88]	@ (800d988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d92e:	68d2      	ldr	r2, [r2, #12]
 800d930:	0a12      	lsrs	r2, r2, #8
 800d932:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d936:	fb02 f303 	mul.w	r3, r2, r3
 800d93a:	617b      	str	r3, [r7, #20]
      break;
 800d93c:	e00c      	b.n	800d958 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d93e:	4a13      	ldr	r2, [pc, #76]	@ (800d98c <HAL_RCC_GetSysClockFreq+0xbc>)
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	fbb2 f3f3 	udiv	r3, r2, r3
 800d946:	4a10      	ldr	r2, [pc, #64]	@ (800d988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d948:	68d2      	ldr	r2, [r2, #12]
 800d94a:	0a12      	lsrs	r2, r2, #8
 800d94c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d950:	fb02 f303 	mul.w	r3, r2, r3
 800d954:	617b      	str	r3, [r7, #20]
      break;
 800d956:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d958:	4b0b      	ldr	r3, [pc, #44]	@ (800d988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d95a:	68db      	ldr	r3, [r3, #12]
 800d95c:	0e5b      	lsrs	r3, r3, #25
 800d95e:	f003 0303 	and.w	r3, r3, #3
 800d962:	3301      	adds	r3, #1
 800d964:	005b      	lsls	r3, r3, #1
 800d966:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d968:	697a      	ldr	r2, [r7, #20]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d970:	613b      	str	r3, [r7, #16]
 800d972:	e001      	b.n	800d978 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d974:	2300      	movs	r3, #0
 800d976:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d978:	693b      	ldr	r3, [r7, #16]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	371c      	adds	r7, #28
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr
 800d986:	bf00      	nop
 800d988:	40021000 	.word	0x40021000
 800d98c:	00f42400 	.word	0x00f42400
 800d990:	007a1200 	.word	0x007a1200

0800d994 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d994:	b480      	push	{r7}
 800d996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d998:	4b03      	ldr	r3, [pc, #12]	@ (800d9a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800d99a:	681b      	ldr	r3, [r3, #0]
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	20000004 	.word	0x20000004

0800d9ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d9b0:	f7ff fff0 	bl	800d994 <HAL_RCC_GetHCLKFreq>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	4b06      	ldr	r3, [pc, #24]	@ (800d9d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d9b8:	689b      	ldr	r3, [r3, #8]
 800d9ba:	0a1b      	lsrs	r3, r3, #8
 800d9bc:	f003 0307 	and.w	r3, r3, #7
 800d9c0:	4904      	ldr	r1, [pc, #16]	@ (800d9d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d9c2:	5ccb      	ldrb	r3, [r1, r3]
 800d9c4:	f003 031f 	and.w	r3, r3, #31
 800d9c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	40021000 	.word	0x40021000
 800d9d4:	0801aa7c 	.word	0x0801aa7c

0800d9d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d9dc:	f7ff ffda 	bl	800d994 <HAL_RCC_GetHCLKFreq>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	4b06      	ldr	r3, [pc, #24]	@ (800d9fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	0adb      	lsrs	r3, r3, #11
 800d9e8:	f003 0307 	and.w	r3, r3, #7
 800d9ec:	4904      	ldr	r1, [pc, #16]	@ (800da00 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d9ee:	5ccb      	ldrb	r3, [r1, r3]
 800d9f0:	f003 031f 	and.w	r3, r3, #31
 800d9f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	40021000 	.word	0x40021000
 800da00:	0801aa7c 	.word	0x0801aa7c

0800da04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800da04:	b480      	push	{r7}
 800da06:	b087      	sub	sp, #28
 800da08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800da0a:	4b1e      	ldr	r3, [pc, #120]	@ (800da84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	f003 0303 	and.w	r3, r3, #3
 800da12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800da14:	4b1b      	ldr	r3, [pc, #108]	@ (800da84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	091b      	lsrs	r3, r3, #4
 800da1a:	f003 030f 	and.w	r3, r3, #15
 800da1e:	3301      	adds	r3, #1
 800da20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	2b03      	cmp	r3, #3
 800da26:	d10c      	bne.n	800da42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800da28:	4a17      	ldr	r2, [pc, #92]	@ (800da88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800da30:	4a14      	ldr	r2, [pc, #80]	@ (800da84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800da32:	68d2      	ldr	r2, [r2, #12]
 800da34:	0a12      	lsrs	r2, r2, #8
 800da36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800da3a:	fb02 f303 	mul.w	r3, r2, r3
 800da3e:	617b      	str	r3, [r7, #20]
    break;
 800da40:	e00c      	b.n	800da5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800da42:	4a12      	ldr	r2, [pc, #72]	@ (800da8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	fbb2 f3f3 	udiv	r3, r2, r3
 800da4a:	4a0e      	ldr	r2, [pc, #56]	@ (800da84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800da4c:	68d2      	ldr	r2, [r2, #12]
 800da4e:	0a12      	lsrs	r2, r2, #8
 800da50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800da54:	fb02 f303 	mul.w	r3, r2, r3
 800da58:	617b      	str	r3, [r7, #20]
    break;
 800da5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800da5c:	4b09      	ldr	r3, [pc, #36]	@ (800da84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	0e5b      	lsrs	r3, r3, #25
 800da62:	f003 0303 	and.w	r3, r3, #3
 800da66:	3301      	adds	r3, #1
 800da68:	005b      	lsls	r3, r3, #1
 800da6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800da6c:	697a      	ldr	r2, [r7, #20]
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	fbb2 f3f3 	udiv	r3, r2, r3
 800da74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800da76:	687b      	ldr	r3, [r7, #4]
}
 800da78:	4618      	mov	r0, r3
 800da7a:	371c      	adds	r7, #28
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr
 800da84:	40021000 	.word	0x40021000
 800da88:	007a1200 	.word	0x007a1200
 800da8c:	00f42400 	.word	0x00f42400

0800da90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b086      	sub	sp, #24
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800da98:	2300      	movs	r3, #0
 800da9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800da9c:	2300      	movs	r3, #0
 800da9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f000 8098 	beq.w	800dbde <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800daae:	2300      	movs	r3, #0
 800dab0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dab2:	4b43      	ldr	r3, [pc, #268]	@ (800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d10d      	bne.n	800dada <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dabe:	4b40      	ldr	r3, [pc, #256]	@ (800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dac2:	4a3f      	ldr	r2, [pc, #252]	@ (800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dac8:	6593      	str	r3, [r2, #88]	@ 0x58
 800daca:	4b3d      	ldr	r3, [pc, #244]	@ (800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dacc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dad2:	60bb      	str	r3, [r7, #8]
 800dad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dad6:	2301      	movs	r3, #1
 800dad8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dada:	4b3a      	ldr	r3, [pc, #232]	@ (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a39      	ldr	r2, [pc, #228]	@ (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800dae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dae4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dae6:	f7fa fe39 	bl	800875c <HAL_GetTick>
 800daea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800daec:	e009      	b.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800daee:	f7fa fe35 	bl	800875c <HAL_GetTick>
 800daf2:	4602      	mov	r2, r0
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	1ad3      	subs	r3, r2, r3
 800daf8:	2b02      	cmp	r3, #2
 800dafa:	d902      	bls.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800dafc:	2303      	movs	r3, #3
 800dafe:	74fb      	strb	r3, [r7, #19]
        break;
 800db00:	e005      	b.n	800db0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800db02:	4b30      	ldr	r3, [pc, #192]	@ (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d0ef      	beq.n	800daee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800db0e:	7cfb      	ldrb	r3, [r7, #19]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d159      	bne.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800db14:	4b2a      	ldr	r3, [pc, #168]	@ (800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d01e      	beq.n	800db64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db2a:	697a      	ldr	r2, [r7, #20]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d019      	beq.n	800db64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800db30:	4b23      	ldr	r3, [pc, #140]	@ (800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800db3c:	4b20      	ldr	r3, [pc, #128]	@ (800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db42:	4a1f      	ldr	r2, [pc, #124]	@ (800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800db48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800db4c:	4b1c      	ldr	r3, [pc, #112]	@ (800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db52:	4a1b      	ldr	r2, [pc, #108]	@ (800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800db58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800db5c:	4a18      	ldr	r2, [pc, #96]	@ (800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	f003 0301 	and.w	r3, r3, #1
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d016      	beq.n	800db9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db6e:	f7fa fdf5 	bl	800875c <HAL_GetTick>
 800db72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800db74:	e00b      	b.n	800db8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800db76:	f7fa fdf1 	bl	800875c <HAL_GetTick>
 800db7a:	4602      	mov	r2, r0
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	1ad3      	subs	r3, r2, r3
 800db80:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db84:	4293      	cmp	r3, r2
 800db86:	d902      	bls.n	800db8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800db88:	2303      	movs	r3, #3
 800db8a:	74fb      	strb	r3, [r7, #19]
            break;
 800db8c:	e006      	b.n	800db9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800db8e:	4b0c      	ldr	r3, [pc, #48]	@ (800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db94:	f003 0302 	and.w	r3, r3, #2
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d0ec      	beq.n	800db76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800db9c:	7cfb      	ldrb	r3, [r7, #19]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d10b      	bne.n	800dbba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dba2:	4b07      	ldr	r3, [pc, #28]	@ (800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dba8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbb0:	4903      	ldr	r1, [pc, #12]	@ (800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800dbb8:	e008      	b.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dbba:	7cfb      	ldrb	r3, [r7, #19]
 800dbbc:	74bb      	strb	r3, [r7, #18]
 800dbbe:	e005      	b.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800dbc0:	40021000 	.word	0x40021000
 800dbc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbc8:	7cfb      	ldrb	r3, [r7, #19]
 800dbca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dbcc:	7c7b      	ldrb	r3, [r7, #17]
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d105      	bne.n	800dbde <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dbd2:	4ba7      	ldr	r3, [pc, #668]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbd6:	4aa6      	ldr	r2, [pc, #664]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dbdc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f003 0301 	and.w	r3, r3, #1
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d00a      	beq.n	800dc00 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dbea:	4ba1      	ldr	r3, [pc, #644]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dbf0:	f023 0203 	bic.w	r2, r3, #3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	499d      	ldr	r1, [pc, #628]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbfa:	4313      	orrs	r3, r2
 800dbfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f003 0302 	and.w	r3, r3, #2
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00a      	beq.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dc0c:	4b98      	ldr	r3, [pc, #608]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc12:	f023 020c 	bic.w	r2, r3, #12
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	689b      	ldr	r3, [r3, #8]
 800dc1a:	4995      	ldr	r1, [pc, #596]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc1c:	4313      	orrs	r3, r2
 800dc1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f003 0304 	and.w	r3, r3, #4
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d00a      	beq.n	800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dc2e:	4b90      	ldr	r3, [pc, #576]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	498c      	ldr	r1, [pc, #560]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f003 0308 	and.w	r3, r3, #8
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00a      	beq.n	800dc66 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dc50:	4b87      	ldr	r3, [pc, #540]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	691b      	ldr	r3, [r3, #16]
 800dc5e:	4984      	ldr	r1, [pc, #528]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc60:	4313      	orrs	r3, r2
 800dc62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f003 0310 	and.w	r3, r3, #16
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d00a      	beq.n	800dc88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800dc72:	4b7f      	ldr	r3, [pc, #508]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	695b      	ldr	r3, [r3, #20]
 800dc80:	497b      	ldr	r1, [pc, #492]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc82:	4313      	orrs	r3, r2
 800dc84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f003 0320 	and.w	r3, r3, #32
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d00a      	beq.n	800dcaa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dc94:	4b76      	ldr	r3, [pc, #472]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc9a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	699b      	ldr	r3, [r3, #24]
 800dca2:	4973      	ldr	r1, [pc, #460]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dca4:	4313      	orrs	r3, r2
 800dca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00a      	beq.n	800dccc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dcb6:	4b6e      	ldr	r3, [pc, #440]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dcbc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	69db      	ldr	r3, [r3, #28]
 800dcc4:	496a      	ldr	r1, [pc, #424]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d00a      	beq.n	800dcee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dcd8:	4b65      	ldr	r3, [pc, #404]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dcde:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6a1b      	ldr	r3, [r3, #32]
 800dce6:	4962      	ldr	r1, [pc, #392]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dce8:	4313      	orrs	r3, r2
 800dcea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00a      	beq.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800dcfa:	4b5d      	ldr	r3, [pc, #372]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd08:	4959      	ldr	r1, [pc, #356]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d00a      	beq.n	800dd32 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dd1c:	4b54      	ldr	r3, [pc, #336]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd22:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd2a:	4951      	ldr	r1, [pc, #324]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d015      	beq.n	800dd6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dd3e:	4b4c      	ldr	r3, [pc, #304]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd44:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd4c:	4948      	ldr	r1, [pc, #288]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd5c:	d105      	bne.n	800dd6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dd5e:	4b44      	ldr	r3, [pc, #272]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	4a43      	ldr	r2, [pc, #268]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd68:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d015      	beq.n	800dda2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800dd76:	4b3e      	ldr	r3, [pc, #248]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd7c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd84:	493a      	ldr	r1, [pc, #232]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd86:	4313      	orrs	r3, r2
 800dd88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dd94:	d105      	bne.n	800dda2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dd96:	4b36      	ldr	r3, [pc, #216]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	4a35      	ldr	r2, [pc, #212]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dda0:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d015      	beq.n	800ddda <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ddae:	4b30      	ldr	r3, [pc, #192]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ddb4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddbc:	492c      	ldr	r1, [pc, #176]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddbe:	4313      	orrs	r3, r2
 800ddc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ddcc:	d105      	bne.n	800ddda <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ddce:	4b28      	ldr	r3, [pc, #160]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	4a27      	ldr	r2, [pc, #156]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ddd8:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d015      	beq.n	800de12 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dde6:	4b22      	ldr	r3, [pc, #136]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dde8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ddec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddf4:	491e      	ldr	r1, [pc, #120]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800de04:	d105      	bne.n	800de12 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800de06:	4b1a      	ldr	r3, [pc, #104]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	4a19      	ldr	r2, [pc, #100]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800de10:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d015      	beq.n	800de4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800de1e:	4b14      	ldr	r3, [pc, #80]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de24:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de2c:	4910      	ldr	r1, [pc, #64]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de2e:	4313      	orrs	r3, r2
 800de30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800de3c:	d105      	bne.n	800de4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800de3e:	4b0c      	ldr	r3, [pc, #48]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	4a0b      	ldr	r2, [pc, #44]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800de48:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800de52:	2b00      	cmp	r3, #0
 800de54:	d018      	beq.n	800de88 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800de56:	4b06      	ldr	r3, [pc, #24]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de5c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de64:	4902      	ldr	r1, [pc, #8]	@ (800de70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de66:	4313      	orrs	r3, r2
 800de68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	e001      	b.n	800de74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800de70:	40021000 	.word	0x40021000
 800de74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de7a:	d105      	bne.n	800de88 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800de7c:	4b21      	ldr	r3, [pc, #132]	@ (800df04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800de7e:	68db      	ldr	r3, [r3, #12]
 800de80:	4a20      	ldr	r2, [pc, #128]	@ (800df04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800de82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800de86:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800de90:	2b00      	cmp	r3, #0
 800de92:	d015      	beq.n	800dec0 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800de94:	4b1b      	ldr	r3, [pc, #108]	@ (800df04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800de96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de9a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dea2:	4918      	ldr	r1, [pc, #96]	@ (800df04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800dea4:	4313      	orrs	r3, r2
 800dea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800deae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800deb2:	d105      	bne.n	800dec0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800deb4:	4b13      	ldr	r3, [pc, #76]	@ (800df04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	4a12      	ldr	r2, [pc, #72]	@ (800df04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800deba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800debe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d015      	beq.n	800def8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800decc:	4b0d      	ldr	r3, [pc, #52]	@ (800df04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800dece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ded2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800deda:	490a      	ldr	r1, [pc, #40]	@ (800df04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800dedc:	4313      	orrs	r3, r2
 800dede:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dee6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800deea:	d105      	bne.n	800def8 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800deec:	4b05      	ldr	r3, [pc, #20]	@ (800df04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	4a04      	ldr	r2, [pc, #16]	@ (800df04 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800def2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800def6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800def8:	7cbb      	ldrb	r3, [r7, #18]
}
 800defa:	4618      	mov	r0, r3
 800defc:	3718      	adds	r7, #24
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop
 800df04:	40021000 	.word	0x40021000

0800df08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b088      	sub	sp, #32
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800df10:	2300      	movs	r3, #0
 800df12:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800df1a:	d136      	bne.n	800df8a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800df1c:	4bb3      	ldr	r3, [pc, #716]	@ (800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800df1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800df26:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800df28:	4bb0      	ldr	r3, [pc, #704]	@ (800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800df2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df2e:	f003 0302 	and.w	r3, r3, #2
 800df32:	2b02      	cmp	r3, #2
 800df34:	d108      	bne.n	800df48 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df3c:	d104      	bne.n	800df48 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 800df3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df42:	61fb      	str	r3, [r7, #28]
 800df44:	f000 bce6 	b.w	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800df48:	4ba8      	ldr	r3, [pc, #672]	@ (800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800df4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800df4e:	f003 0302 	and.w	r3, r3, #2
 800df52:	2b02      	cmp	r3, #2
 800df54:	d108      	bne.n	800df68 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df5c:	d104      	bne.n	800df68 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 800df5e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800df62:	61fb      	str	r3, [r7, #28]
 800df64:	f000 bcd6 	b.w	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800df68:	4ba0      	ldr	r3, [pc, #640]	@ (800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df74:	f040 84ce 	bne.w	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800df7e:	f040 84c9 	bne.w	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
    {
      frequency = HSE_VALUE / 32U;
 800df82:	4b9b      	ldr	r3, [pc, #620]	@ (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800df84:	61fb      	str	r3, [r7, #28]
 800df86:	f000 bcc5 	b.w	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 800df8a:	4b98      	ldr	r3, [pc, #608]	@ (800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800df8c:	68db      	ldr	r3, [r3, #12]
 800df8e:	f003 0303 	and.w	r3, r3, #3
 800df92:	2b02      	cmp	r3, #2
 800df94:	d10c      	bne.n	800dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800df96:	4b95      	ldr	r3, [pc, #596]	@ (800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800df9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dfa2:	d102      	bne.n	800dfaa <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 800dfa4:	4b93      	ldr	r3, [pc, #588]	@ (800e1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800dfa6:	61bb      	str	r3, [r7, #24]
 800dfa8:	e017      	b.n	800dfda <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	61bb      	str	r3, [r7, #24]
 800dfae:	e014      	b.n	800dfda <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 800dfb0:	4b8e      	ldr	r3, [pc, #568]	@ (800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	f003 0303 	and.w	r3, r3, #3
 800dfb8:	2b03      	cmp	r3, #3
 800dfba:	d10c      	bne.n	800dfd6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800dfbc:	4b8b      	ldr	r3, [pc, #556]	@ (800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dfc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dfc8:	d102      	bne.n	800dfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 800dfca:	4b8b      	ldr	r3, [pc, #556]	@ (800e1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800dfcc:	61bb      	str	r3, [r7, #24]
 800dfce:	e004      	b.n	800dfda <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	61bb      	str	r3, [r7, #24]
 800dfd4:	e001      	b.n	800dfda <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800dfda:	4b84      	ldr	r3, [pc, #528]	@ (800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800dfdc:	68db      	ldr	r3, [r3, #12]
 800dfde:	091b      	lsrs	r3, r3, #4
 800dfe0:	f003 030f 	and.w	r3, r3, #15
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	69ba      	ldr	r2, [r7, #24]
 800dfe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfec:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dff4:	f000 843c 	beq.w	800e870 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dffe:	f200 8464 	bhi.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e008:	f000 83f7 	beq.w	800e7fa <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e012:	f200 845a 	bhi.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e01c:	f000 83b0 	beq.w	800e780 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e026:	f200 8450 	bhi.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e030:	f000 8378 	beq.w	800e724 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e03a:	f200 8446 	bhi.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e044:	f000 8335 	beq.w	800e6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e04e:	f200 843c 	bhi.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e058:	f000 82f6 	beq.w	800e648 <HAL_RCCEx_GetPeriphCLKFreq+0x740>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e062:	f200 8432 	bhi.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e06c:	f000 82a8 	beq.w	800e5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e076:	f200 8428 	bhi.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e080:	f000 825a 	beq.w	800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e08a:	f200 841e 	bhi.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e094:	f000 8214 	beq.w	800e4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e09e:	f200 8414 	bhi.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0a8:	f000 81e0 	beq.w	800e46c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0b2:	f200 840a 	bhi.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2b80      	cmp	r3, #128	@ 0x80
 800e0ba:	f000 81b2 	beq.w	800e422 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2b80      	cmp	r3, #128	@ 0x80
 800e0c2:	f200 8402 	bhi.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2b20      	cmp	r3, #32
 800e0ca:	d84b      	bhi.n	800e164 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	f000 83fb 	beq.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	3b01      	subs	r3, #1
 800e0d8:	2b1f      	cmp	r3, #31
 800e0da:	f200 83f6 	bhi.w	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800e0de:	a201      	add	r2, pc, #4	@ (adr r2, 800e0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800e0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0e4:	0800e16f 	.word	0x0800e16f
 800e0e8:	0800e1d1 	.word	0x0800e1d1
 800e0ec:	0800e8cb 	.word	0x0800e8cb
 800e0f0:	0800e245 	.word	0x0800e245
 800e0f4:	0800e8cb 	.word	0x0800e8cb
 800e0f8:	0800e8cb 	.word	0x0800e8cb
 800e0fc:	0800e8cb 	.word	0x0800e8cb
 800e100:	0800e2a7 	.word	0x0800e2a7
 800e104:	0800e8cb 	.word	0x0800e8cb
 800e108:	0800e8cb 	.word	0x0800e8cb
 800e10c:	0800e8cb 	.word	0x0800e8cb
 800e110:	0800e8cb 	.word	0x0800e8cb
 800e114:	0800e8cb 	.word	0x0800e8cb
 800e118:	0800e8cb 	.word	0x0800e8cb
 800e11c:	0800e8cb 	.word	0x0800e8cb
 800e120:	0800e309 	.word	0x0800e309
 800e124:	0800e8cb 	.word	0x0800e8cb
 800e128:	0800e8cb 	.word	0x0800e8cb
 800e12c:	0800e8cb 	.word	0x0800e8cb
 800e130:	0800e8cb 	.word	0x0800e8cb
 800e134:	0800e8cb 	.word	0x0800e8cb
 800e138:	0800e8cb 	.word	0x0800e8cb
 800e13c:	0800e8cb 	.word	0x0800e8cb
 800e140:	0800e8cb 	.word	0x0800e8cb
 800e144:	0800e8cb 	.word	0x0800e8cb
 800e148:	0800e8cb 	.word	0x0800e8cb
 800e14c:	0800e8cb 	.word	0x0800e8cb
 800e150:	0800e8cb 	.word	0x0800e8cb
 800e154:	0800e8cb 	.word	0x0800e8cb
 800e158:	0800e8cb 	.word	0x0800e8cb
 800e15c:	0800e8cb 	.word	0x0800e8cb
 800e160:	0800e371 	.word	0x0800e371
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2b40      	cmp	r3, #64	@ 0x40
 800e168:	f000 8136 	beq.w	800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      break;

#endif /* QUADSPI */

    default:
      break;
 800e16c:	e3ad      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800e16e:	4b1f      	ldr	r3, [pc, #124]	@ (800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800e170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e174:	f003 0303 	and.w	r3, r3, #3
 800e178:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d103      	bne.n	800e188 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        frequency = HAL_RCC_GetPCLK2Freq();
 800e180:	f7ff fc2a 	bl	800d9d8 <HAL_RCC_GetPCLK2Freq>
 800e184:	61f8      	str	r0, [r7, #28]
      break;
 800e186:	e3a2      	b.n	800e8ce <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d103      	bne.n	800e196 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
        frequency = HAL_RCC_GetSysClockFreq();
 800e18e:	f7ff fb9f 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800e192:	61f8      	str	r0, [r7, #28]
      break;
 800e194:	e39b      	b.n	800e8ce <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 800e196:	4b15      	ldr	r3, [pc, #84]	@ (800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e19e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e1a2:	d105      	bne.n	800e1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	2b02      	cmp	r3, #2
 800e1a8:	d102      	bne.n	800e1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
        frequency = HSI_VALUE;
 800e1aa:	4b12      	ldr	r3, [pc, #72]	@ (800e1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800e1ac:	61fb      	str	r3, [r7, #28]
      break;
 800e1ae:	e38e      	b.n	800e8ce <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800e1b0:	4b0e      	ldr	r3, [pc, #56]	@ (800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800e1b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1b6:	f003 0302 	and.w	r3, r3, #2
 800e1ba:	2b02      	cmp	r3, #2
 800e1bc:	f040 8387 	bne.w	800e8ce <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	2b03      	cmp	r3, #3
 800e1c4:	f040 8383 	bne.w	800e8ce <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
        frequency = LSE_VALUE;
 800e1c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e1cc:	61fb      	str	r3, [r7, #28]
      break;
 800e1ce:	e37e      	b.n	800e8ce <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800e1d0:	4b06      	ldr	r3, [pc, #24]	@ (800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800e1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e1d6:	f003 030c 	and.w	r3, r3, #12
 800e1da:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d10c      	bne.n	800e1fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
        frequency = HAL_RCC_GetPCLK1Freq();
 800e1e2:	f7ff fbe3 	bl	800d9ac <HAL_RCC_GetPCLK1Freq>
 800e1e6:	61f8      	str	r0, [r7, #28]
      break;
 800e1e8:	e373      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 800e1ea:	bf00      	nop
 800e1ec:	40021000 	.word	0x40021000
 800e1f0:	0003d090 	.word	0x0003d090
 800e1f4:	00f42400 	.word	0x00f42400
 800e1f8:	007a1200 	.word	0x007a1200
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	2b04      	cmp	r3, #4
 800e200:	d103      	bne.n	800e20a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
        frequency = HAL_RCC_GetSysClockFreq();
 800e202:	f7ff fb65 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800e206:	61f8      	str	r0, [r7, #28]
      break;
 800e208:	e363      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800e20a:	4ba3      	ldr	r3, [pc, #652]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e216:	d105      	bne.n	800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	2b08      	cmp	r3, #8
 800e21c:	d102      	bne.n	800e224 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HSI_VALUE;
 800e21e:	4b9f      	ldr	r3, [pc, #636]	@ (800e49c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800e220:	61fb      	str	r3, [r7, #28]
      break;
 800e222:	e356      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800e224:	4b9c      	ldr	r3, [pc, #624]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e22a:	f003 0302 	and.w	r3, r3, #2
 800e22e:	2b02      	cmp	r3, #2
 800e230:	f040 834f 	bne.w	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	2b0c      	cmp	r3, #12
 800e238:	f040 834b 	bne.w	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
        frequency = LSE_VALUE;
 800e23c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e240:	61fb      	str	r3, [r7, #28]
      break;
 800e242:	e346      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800e244:	4b94      	ldr	r3, [pc, #592]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e24a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e24e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d103      	bne.n	800e25e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
        frequency = HAL_RCC_GetPCLK1Freq();
 800e256:	f7ff fba9 	bl	800d9ac <HAL_RCC_GetPCLK1Freq>
 800e25a:	61f8      	str	r0, [r7, #28]
      break;
 800e25c:	e33b      	b.n	800e8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	2b10      	cmp	r3, #16
 800e262:	d103      	bne.n	800e26c <HAL_RCCEx_GetPeriphCLKFreq+0x364>
        frequency = HAL_RCC_GetSysClockFreq();
 800e264:	f7ff fb34 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800e268:	61f8      	str	r0, [r7, #28]
      break;
 800e26a:	e334      	b.n	800e8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800e26c:	4b8a      	ldr	r3, [pc, #552]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e278:	d105      	bne.n	800e286 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	2b20      	cmp	r3, #32
 800e27e:	d102      	bne.n	800e286 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
        frequency = HSI_VALUE;
 800e280:	4b86      	ldr	r3, [pc, #536]	@ (800e49c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800e282:	61fb      	str	r3, [r7, #28]
      break;
 800e284:	e327      	b.n	800e8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800e286:	4b84      	ldr	r3, [pc, #528]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e28c:	f003 0302 	and.w	r3, r3, #2
 800e290:	2b02      	cmp	r3, #2
 800e292:	f040 8320 	bne.w	800e8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	2b30      	cmp	r3, #48	@ 0x30
 800e29a:	f040 831c 	bne.w	800e8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
        frequency = LSE_VALUE;
 800e29e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e2a2:	61fb      	str	r3, [r7, #28]
      break;
 800e2a4:	e317      	b.n	800e8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800e2a6:	4b7c      	ldr	r3, [pc, #496]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2ac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e2b0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d103      	bne.n	800e2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
        frequency = HAL_RCC_GetPCLK1Freq();
 800e2b8:	f7ff fb78 	bl	800d9ac <HAL_RCC_GetPCLK1Freq>
 800e2bc:	61f8      	str	r0, [r7, #28]
      break;
 800e2be:	e30c      	b.n	800e8da <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	2b40      	cmp	r3, #64	@ 0x40
 800e2c4:	d103      	bne.n	800e2ce <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetSysClockFreq();
 800e2c6:	f7ff fb03 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800e2ca:	61f8      	str	r0, [r7, #28]
      break;
 800e2cc:	e305      	b.n	800e8da <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800e2ce:	4b72      	ldr	r3, [pc, #456]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e2d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e2da:	d105      	bne.n	800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	2b80      	cmp	r3, #128	@ 0x80
 800e2e0:	d102      	bne.n	800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        frequency = HSI_VALUE;
 800e2e2:	4b6e      	ldr	r3, [pc, #440]	@ (800e49c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800e2e4:	61fb      	str	r3, [r7, #28]
      break;
 800e2e6:	e2f8      	b.n	800e8da <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800e2e8:	4b6b      	ldr	r3, [pc, #428]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e2ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2ee:	f003 0302 	and.w	r3, r3, #2
 800e2f2:	2b02      	cmp	r3, #2
 800e2f4:	f040 82f1 	bne.w	800e8da <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	2bc0      	cmp	r3, #192	@ 0xc0
 800e2fc:	f040 82ed 	bne.w	800e8da <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
        frequency = LSE_VALUE;
 800e300:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e304:	61fb      	str	r3, [r7, #28]
      break;
 800e306:	e2e8      	b.n	800e8da <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800e308:	4b63      	ldr	r3, [pc, #396]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e30e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e312:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d103      	bne.n	800e322 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        frequency = HAL_RCC_GetPCLK1Freq();
 800e31a:	f7ff fb47 	bl	800d9ac <HAL_RCC_GetPCLK1Freq>
 800e31e:	61f8      	str	r0, [r7, #28]
      break;
 800e320:	e2dd      	b.n	800e8de <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e328:	d103      	bne.n	800e332 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
        frequency = HAL_RCC_GetSysClockFreq();
 800e32a:	f7ff fad1 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800e32e:	61f8      	str	r0, [r7, #28]
      break;
 800e330:	e2d5      	b.n	800e8de <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800e332:	4b59      	ldr	r3, [pc, #356]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e33a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e33e:	d106      	bne.n	800e34e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e346:	d102      	bne.n	800e34e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
        frequency = HSI_VALUE;
 800e348:	4b54      	ldr	r3, [pc, #336]	@ (800e49c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800e34a:	61fb      	str	r3, [r7, #28]
      break;
 800e34c:	e2c7      	b.n	800e8de <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800e34e:	4b52      	ldr	r3, [pc, #328]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e354:	f003 0302 	and.w	r3, r3, #2
 800e358:	2b02      	cmp	r3, #2
 800e35a:	f040 82c0 	bne.w	800e8de <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e364:	f040 82bb 	bne.w	800e8de <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        frequency = LSE_VALUE;
 800e368:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e36c:	61fb      	str	r3, [r7, #28]
      break;
 800e36e:	e2b6      	b.n	800e8de <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800e370:	4b49      	ldr	r3, [pc, #292]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e376:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e37a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d103      	bne.n	800e38a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
        frequency = HAL_RCC_GetPCLK1Freq();
 800e382:	f7ff fb13 	bl	800d9ac <HAL_RCC_GetPCLK1Freq>
 800e386:	61f8      	str	r0, [r7, #28]
      break;
 800e388:	e2ab      	b.n	800e8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e390:	d103      	bne.n	800e39a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        frequency = HAL_RCC_GetSysClockFreq();
 800e392:	f7ff fa9d 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800e396:	61f8      	str	r0, [r7, #28]
      break;
 800e398:	e2a3      	b.n	800e8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800e39a:	4b3f      	ldr	r3, [pc, #252]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e3a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e3a6:	d106      	bne.n	800e3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e3ae:	d102      	bne.n	800e3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
        frequency = HSI_VALUE;
 800e3b0:	4b3a      	ldr	r3, [pc, #232]	@ (800e49c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800e3b2:	61fb      	str	r3, [r7, #28]
      break;
 800e3b4:	e295      	b.n	800e8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800e3b6:	4b38      	ldr	r3, [pc, #224]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3bc:	f003 0302 	and.w	r3, r3, #2
 800e3c0:	2b02      	cmp	r3, #2
 800e3c2:	f040 828e 	bne.w	800e8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e3cc:	f040 8289 	bne.w	800e8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        frequency = LSE_VALUE;
 800e3d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e3d4:	61fb      	str	r3, [r7, #28]
      break;
 800e3d6:	e284      	b.n	800e8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800e3d8:	4b2f      	ldr	r3, [pc, #188]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e3da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e3e2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d103      	bne.n	800e3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        frequency = HAL_RCC_GetPCLK1Freq();
 800e3ea:	f7ff fadf 	bl	800d9ac <HAL_RCC_GetPCLK1Freq>
 800e3ee:	61f8      	str	r0, [r7, #28]
      break;
 800e3f0:	e279      	b.n	800e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3f8:	d103      	bne.n	800e402 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        frequency = HAL_RCC_GetSysClockFreq();
 800e3fa:	f7ff fa69 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800e3fe:	61f8      	str	r0, [r7, #28]
      break;
 800e400:	e271      	b.n	800e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800e402:	4b25      	ldr	r3, [pc, #148]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e40a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e40e:	f040 826a 	bne.w	800e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e418:	f040 8265 	bne.w	800e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
        frequency = HSI_VALUE;
 800e41c:	4b1f      	ldr	r3, [pc, #124]	@ (800e49c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800e41e:	61fb      	str	r3, [r7, #28]
      break;
 800e420:	e261      	b.n	800e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800e422:	4b1d      	ldr	r3, [pc, #116]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e428:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e42c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d103      	bne.n	800e43c <HAL_RCCEx_GetPeriphCLKFreq+0x534>
        frequency = HAL_RCC_GetPCLK1Freq();
 800e434:	f7ff faba 	bl	800d9ac <HAL_RCC_GetPCLK1Freq>
 800e438:	61f8      	str	r0, [r7, #28]
      break;
 800e43a:	e256      	b.n	800e8ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e442:	d103      	bne.n	800e44c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
        frequency = HAL_RCC_GetSysClockFreq();
 800e444:	f7ff fa44 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800e448:	61f8      	str	r0, [r7, #28]
      break;
 800e44a:	e24e      	b.n	800e8ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800e44c:	4b12      	ldr	r3, [pc, #72]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e458:	f040 8247 	bne.w	800e8ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e462:	f040 8242 	bne.w	800e8ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
        frequency = HSI_VALUE;
 800e466:	4b0d      	ldr	r3, [pc, #52]	@ (800e49c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800e468:	61fb      	str	r3, [r7, #28]
      break;
 800e46a:	e23e      	b.n	800e8ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800e46c:	4b0a      	ldr	r3, [pc, #40]	@ (800e498 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800e46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e472:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e476:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d103      	bne.n	800e486 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
        frequency = HAL_RCC_GetPCLK1Freq();
 800e47e:	f7ff fa95 	bl	800d9ac <HAL_RCC_GetPCLK1Freq>
 800e482:	61f8      	str	r0, [r7, #28]
      break;
 800e484:	e233      	b.n	800e8ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e48c:	d108      	bne.n	800e4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetSysClockFreq();
 800e48e:	f7ff fa1f 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800e492:	61f8      	str	r0, [r7, #28]
      break;
 800e494:	e22b      	b.n	800e8ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 800e496:	bf00      	nop
 800e498:	40021000 	.word	0x40021000
 800e49c:	00f42400 	.word	0x00f42400
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800e4a0:	4b9b      	ldr	r3, [pc, #620]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e4a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e4ac:	f040 821f 	bne.w	800e8ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e4b6:	f040 821a 	bne.w	800e8ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        frequency = HSI_VALUE;
 800e4ba:	4b96      	ldr	r3, [pc, #600]	@ (800e714 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800e4bc:	61fb      	str	r3, [r7, #28]
      break;
 800e4be:	e216      	b.n	800e8ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800e4c0:	4b93      	ldr	r3, [pc, #588]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e4c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4c6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800e4ca:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d103      	bne.n	800e4da <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
        frequency = HAL_RCC_GetPCLK1Freq();
 800e4d2:	f7ff fa6b 	bl	800d9ac <HAL_RCC_GetPCLK1Freq>
 800e4d6:	61f8      	str	r0, [r7, #28]
      break;
 800e4d8:	e20b      	b.n	800e8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800e4da:	4b8d      	ldr	r3, [pc, #564]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e4dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e4e0:	f003 0302 	and.w	r3, r3, #2
 800e4e4:	2b02      	cmp	r3, #2
 800e4e6:	d107      	bne.n	800e4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e4ee:	d103      	bne.n	800e4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        frequency = LSI_VALUE;
 800e4f0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e4f4:	61fb      	str	r3, [r7, #28]
 800e4f6:	e01e      	b.n	800e536 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800e4f8:	4b85      	ldr	r3, [pc, #532]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e504:	d106      	bne.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e50c:	d102      	bne.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
        frequency = HSI_VALUE;
 800e50e:	4b81      	ldr	r3, [pc, #516]	@ (800e714 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800e510:	61fb      	str	r3, [r7, #28]
 800e512:	e010      	b.n	800e536 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800e514:	4b7e      	ldr	r3, [pc, #504]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e51a:	f003 0302 	and.w	r3, r3, #2
 800e51e:	2b02      	cmp	r3, #2
 800e520:	f040 81e7 	bne.w	800e8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800e52a:	f040 81e2 	bne.w	800e8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        frequency = LSE_VALUE;
 800e52e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e532:	61fb      	str	r3, [r7, #28]
      break;
 800e534:	e1dd      	b.n	800e8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 800e536:	e1dc      	b.n	800e8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800e538:	4b75      	ldr	r3, [pc, #468]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e53a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e53e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800e542:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d103      	bne.n	800e552 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        frequency = HAL_RCC_GetSysClockFreq();
 800e54a:	f7ff f9c1 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800e54e:	61f8      	str	r0, [r7, #28]
      break;
 800e550:	e1d1      	b.n	800e8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e558:	d11b      	bne.n	800e592 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800e55a:	4b6d      	ldr	r3, [pc, #436]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e55c:	68db      	ldr	r3, [r3, #12]
 800e55e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e562:	2b00      	cmp	r3, #0
 800e564:	f000 81c7 	beq.w	800e8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800e568:	4b69      	ldr	r3, [pc, #420]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e56a:	68db      	ldr	r3, [r3, #12]
 800e56c:	0a1b      	lsrs	r3, r3, #8
 800e56e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e572:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800e574:	69bb      	ldr	r3, [r7, #24]
 800e576:	68fa      	ldr	r2, [r7, #12]
 800e578:	fb03 f202 	mul.w	r2, r3, r2
 800e57c:	4b64      	ldr	r3, [pc, #400]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	0d5b      	lsrs	r3, r3, #21
 800e582:	f003 0303 	and.w	r3, r3, #3
 800e586:	3301      	adds	r3, #1
 800e588:	005b      	lsls	r3, r3, #1
 800e58a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e58e:	61fb      	str	r3, [r7, #28]
      break;
 800e590:	e1b1      	b.n	800e8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e598:	d102      	bne.n	800e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        frequency = EXTERNAL_CLOCK_VALUE;
 800e59a:	4b5f      	ldr	r3, [pc, #380]	@ (800e718 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800e59c:	61fb      	str	r3, [r7, #28]
      break;
 800e59e:	e1aa      	b.n	800e8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 800e5a0:	4b5b      	ldr	r3, [pc, #364]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e5a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e5ac:	f040 81a3 	bne.w	800e8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e5b6:	f040 819e 	bne.w	800e8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        frequency = HSI_VALUE;
 800e5ba:	4b56      	ldr	r3, [pc, #344]	@ (800e714 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800e5bc:	61fb      	str	r3, [r7, #28]
      break;
 800e5be:	e19a      	b.n	800e8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800e5c0:	4b53      	ldr	r3, [pc, #332]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e5c6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800e5ca:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d103      	bne.n	800e5da <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
        frequency = HAL_RCC_GetSysClockFreq();
 800e5d2:	f7ff f97d 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800e5d6:	61f8      	str	r0, [r7, #28]
      break;
 800e5d8:	e18f      	b.n	800e8fa <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e5e0:	d11b      	bne.n	800e61a <HAL_RCCEx_GetPeriphCLKFreq+0x712>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800e5e2:	4b4b      	ldr	r3, [pc, #300]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e5e4:	68db      	ldr	r3, [r3, #12]
 800e5e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	f000 8185 	beq.w	800e8fa <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800e5f0:	4b47      	ldr	r3, [pc, #284]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e5f2:	68db      	ldr	r3, [r3, #12]
 800e5f4:	0a1b      	lsrs	r3, r3, #8
 800e5f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e5fa:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800e5fc:	69bb      	ldr	r3, [r7, #24]
 800e5fe:	68fa      	ldr	r2, [r7, #12]
 800e600:	fb03 f202 	mul.w	r2, r3, r2
 800e604:	4b42      	ldr	r3, [pc, #264]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	0d5b      	lsrs	r3, r3, #21
 800e60a:	f003 0303 	and.w	r3, r3, #3
 800e60e:	3301      	adds	r3, #1
 800e610:	005b      	lsls	r3, r3, #1
 800e612:	fbb2 f3f3 	udiv	r3, r2, r3
 800e616:	61fb      	str	r3, [r7, #28]
      break;
 800e618:	e16f      	b.n	800e8fa <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e620:	d102      	bne.n	800e628 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        frequency = EXTERNAL_CLOCK_VALUE;
 800e622:	4b3d      	ldr	r3, [pc, #244]	@ (800e718 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800e624:	61fb      	str	r3, [r7, #28]
      break;
 800e626:	e168      	b.n	800e8fa <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 800e628:	4b39      	ldr	r3, [pc, #228]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e634:	f040 8161 	bne.w	800e8fa <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e63e:	f040 815c 	bne.w	800e8fa <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
        frequency = HSI_VALUE;
 800e642:	4b34      	ldr	r3, [pc, #208]	@ (800e714 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800e644:	61fb      	str	r3, [r7, #28]
      break;
 800e646:	e158      	b.n	800e8fa <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e648:	4b31      	ldr	r3, [pc, #196]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e64a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e64e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800e652:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e65a:	d103      	bne.n	800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
        frequency = HAL_RCC_GetPCLK1Freq();
 800e65c:	f7ff f9a6 	bl	800d9ac <HAL_RCC_GetPCLK1Freq>
 800e660:	61f8      	str	r0, [r7, #28]
      break;
 800e662:	e14c      	b.n	800e8fe <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d102      	bne.n	800e670 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        frequency = HSE_VALUE;
 800e66a:	4b2c      	ldr	r3, [pc, #176]	@ (800e71c <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 800e66c:	61fb      	str	r3, [r7, #28]
      break;
 800e66e:	e146      	b.n	800e8fe <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e676:	f040 8142 	bne.w	800e8fe <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800e67a:	4b25      	ldr	r3, [pc, #148]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e67c:	68db      	ldr	r3, [r3, #12]
 800e67e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e682:	2b00      	cmp	r3, #0
 800e684:	f000 813b 	beq.w	800e8fe <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800e688:	4b21      	ldr	r3, [pc, #132]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	0a1b      	lsrs	r3, r3, #8
 800e68e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e692:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	68fa      	ldr	r2, [r7, #12]
 800e698:	fb03 f202 	mul.w	r2, r3, r2
 800e69c:	4b1c      	ldr	r3, [pc, #112]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	0d5b      	lsrs	r3, r3, #21
 800e6a2:	f003 0303 	and.w	r3, r3, #3
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	005b      	lsls	r3, r3, #1
 800e6aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6ae:	61fb      	str	r3, [r7, #28]
      break;
 800e6b0:	e125      	b.n	800e8fe <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 800e6b2:	4b17      	ldr	r3, [pc, #92]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e6b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6b8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800e6bc:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e6c4:	d114      	bne.n	800e6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800e6c6:	4b12      	ldr	r3, [pc, #72]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e6c8:	68db      	ldr	r3, [r3, #12]
 800e6ca:	0a1b      	lsrs	r3, r3, #8
 800e6cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e6d0:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	68fa      	ldr	r2, [r7, #12]
 800e6d6:	fb03 f202 	mul.w	r2, r3, r2
 800e6da:	4b0d      	ldr	r3, [pc, #52]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e6dc:	68db      	ldr	r3, [r3, #12]
 800e6de:	0d5b      	lsrs	r3, r3, #21
 800e6e0:	f003 0303 	and.w	r3, r3, #3
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	005b      	lsls	r3, r3, #1
 800e6e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6ec:	61fb      	str	r3, [r7, #28]
      break;
 800e6ee:	e108      	b.n	800e902 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 800e6f0:	4b07      	ldr	r3, [pc, #28]	@ (800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800e6f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e6f6:	f003 0302 	and.w	r3, r3, #2
 800e6fa:	2b02      	cmp	r3, #2
 800e6fc:	f040 8101 	bne.w	800e902 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	2b00      	cmp	r3, #0
 800e704:	f040 80fd 	bne.w	800e902 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        frequency = HSI48_VALUE;
 800e708:	4b05      	ldr	r3, [pc, #20]	@ (800e720 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800e70a:	61fb      	str	r3, [r7, #28]
      break;
 800e70c:	e0f9      	b.n	800e902 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800e70e:	bf00      	nop
 800e710:	40021000 	.word	0x40021000
 800e714:	00f42400 	.word	0x00f42400
 800e718:	00bb8000 	.word	0x00bb8000
 800e71c:	007a1200 	.word	0x007a1200
 800e720:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800e724:	4b7e      	ldr	r3, [pc, #504]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e72a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800e72e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e736:	d114      	bne.n	800e762 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800e738:	4b79      	ldr	r3, [pc, #484]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	0a1b      	lsrs	r3, r3, #8
 800e73e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e742:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	68fa      	ldr	r2, [r7, #12]
 800e748:	fb03 f202 	mul.w	r2, r3, r2
 800e74c:	4b74      	ldr	r3, [pc, #464]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	0d5b      	lsrs	r3, r3, #21
 800e752:	f003 0303 	and.w	r3, r3, #3
 800e756:	3301      	adds	r3, #1
 800e758:	005b      	lsls	r3, r3, #1
 800e75a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e75e:	61fb      	str	r3, [r7, #28]
      break;
 800e760:	e0d1      	b.n	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 800e762:	4b6f      	ldr	r3, [pc, #444]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e764:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e768:	f003 0302 	and.w	r3, r3, #2
 800e76c:	2b02      	cmp	r3, #2
 800e76e:	f040 80ca 	bne.w	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	2b00      	cmp	r3, #0
 800e776:	f040 80c6 	bne.w	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        frequency = HSI48_VALUE;
 800e77a:	4b6a      	ldr	r3, [pc, #424]	@ (800e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>)
 800e77c:	61fb      	str	r3, [r7, #28]
      break;
 800e77e:	e0c2      	b.n	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 800e780:	4b67      	ldr	r3, [pc, #412]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e786:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e78a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e792:	d129      	bne.n	800e7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 800e794:	4b62      	ldr	r3, [pc, #392]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e796:	68db      	ldr	r3, [r3, #12]
 800e798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f000 80b4 	beq.w	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800e7a2:	4b5f      	ldr	r3, [pc, #380]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	0a1b      	lsrs	r3, r3, #8
 800e7a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7ac:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800e7ae:	4b5c      	ldr	r3, [pc, #368]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e7b0:	68db      	ldr	r3, [r3, #12]
 800e7b2:	0edb      	lsrs	r3, r3, #27
 800e7b4:	f003 031f 	and.w	r3, r3, #31
 800e7b8:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d10a      	bne.n	800e7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800e7c0:	4b57      	ldr	r3, [pc, #348]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d002      	beq.n	800e7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
              pllp = 17U;
 800e7cc:	2311      	movs	r3, #17
 800e7ce:	617b      	str	r3, [r7, #20]
 800e7d0:	e001      	b.n	800e7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
              pllp = 7U;
 800e7d2:	2307      	movs	r3, #7
 800e7d4:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 800e7d6:	69bb      	ldr	r3, [r7, #24]
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	fb03 f202 	mul.w	r2, r3, r2
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7e4:	61fb      	str	r3, [r7, #28]
      break;
 800e7e6:	e090      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e7ee:	f040 808c 	bne.w	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        frequency = HAL_RCC_GetSysClockFreq();
 800e7f2:	f7ff f86d 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800e7f6:	61f8      	str	r0, [r7, #28]
      break;
 800e7f8:	e087      	b.n	800e90a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 800e7fa:	4b49      	ldr	r3, [pc, #292]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e7fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e800:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e804:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e80c:	d128      	bne.n	800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 800e80e:	4b44      	ldr	r3, [pc, #272]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e810:	68db      	ldr	r3, [r3, #12]
 800e812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e816:	2b00      	cmp	r3, #0
 800e818:	d079      	beq.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800e81a:	4b41      	ldr	r3, [pc, #260]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	0a1b      	lsrs	r3, r3, #8
 800e820:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e824:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800e826:	4b3e      	ldr	r3, [pc, #248]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e828:	68db      	ldr	r3, [r3, #12]
 800e82a:	0edb      	lsrs	r3, r3, #27
 800e82c:	f003 031f 	and.w	r3, r3, #31
 800e830:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d10a      	bne.n	800e84e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800e838:	4b39      	ldr	r3, [pc, #228]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e83a:	68db      	ldr	r3, [r3, #12]
 800e83c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e840:	2b00      	cmp	r3, #0
 800e842:	d002      	beq.n	800e84a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
              pllp = 17U;
 800e844:	2311      	movs	r3, #17
 800e846:	617b      	str	r3, [r7, #20]
 800e848:	e001      	b.n	800e84e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
              pllp = 7U;
 800e84a:	2307      	movs	r3, #7
 800e84c:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	68fa      	ldr	r2, [r7, #12]
 800e852:	fb03 f202 	mul.w	r2, r3, r2
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	fbb2 f3f3 	udiv	r3, r2, r3
 800e85c:	61fb      	str	r3, [r7, #28]
      break;
 800e85e:	e056      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e866:	d152      	bne.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        frequency = HAL_RCC_GetSysClockFreq();
 800e868:	f7ff f832 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800e86c:	61f8      	str	r0, [r7, #28]
      break;
 800e86e:	e04e      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 800e870:	4b2b      	ldr	r3, [pc, #172]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e872:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e876:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800e87a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e882:	d114      	bne.n	800e8ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800e884:	4b26      	ldr	r3, [pc, #152]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e886:	68db      	ldr	r3, [r3, #12]
 800e888:	0a1b      	lsrs	r3, r3, #8
 800e88a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e88e:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800e890:	69bb      	ldr	r3, [r7, #24]
 800e892:	68fa      	ldr	r2, [r7, #12]
 800e894:	fb03 f202 	mul.w	r2, r3, r2
 800e898:	4b21      	ldr	r3, [pc, #132]	@ (800e920 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>)
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	0d5b      	lsrs	r3, r3, #21
 800e89e:	f003 0303 	and.w	r3, r3, #3
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	005b      	lsls	r3, r3, #1
 800e8a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8aa:	61fb      	str	r3, [r7, #28]
      break;
 800e8ac:	e031      	b.n	800e912 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e8b4:	d102      	bne.n	800e8bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
        frequency = HSI_VALUE;
 800e8b6:	4b1c      	ldr	r3, [pc, #112]	@ (800e928 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>)
 800e8b8:	61fb      	str	r3, [r7, #28]
      break;
 800e8ba:	e02a      	b.n	800e912 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d127      	bne.n	800e912 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        frequency = HAL_RCC_GetSysClockFreq();
 800e8c2:	f7ff f805 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800e8c6:	61f8      	str	r0, [r7, #28]
      break;
 800e8c8:	e023      	b.n	800e912 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
      break;
 800e8ca:	bf00      	nop
 800e8cc:	e022      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e8ce:	bf00      	nop
 800e8d0:	e020      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e8d2:	bf00      	nop
 800e8d4:	e01e      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e8d6:	bf00      	nop
 800e8d8:	e01c      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e8da:	bf00      	nop
 800e8dc:	e01a      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e8de:	bf00      	nop
 800e8e0:	e018      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e8e2:	bf00      	nop
 800e8e4:	e016      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e8e6:	bf00      	nop
 800e8e8:	e014      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e8ea:	bf00      	nop
 800e8ec:	e012      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e8ee:	bf00      	nop
 800e8f0:	e010      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e8f2:	bf00      	nop
 800e8f4:	e00e      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e8f6:	bf00      	nop
 800e8f8:	e00c      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e8fa:	bf00      	nop
 800e8fc:	e00a      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e8fe:	bf00      	nop
 800e900:	e008      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e902:	bf00      	nop
 800e904:	e006      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e906:	bf00      	nop
 800e908:	e004      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e90a:	bf00      	nop
 800e90c:	e002      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e90e:	bf00      	nop
 800e910:	e000      	b.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>
      break;
 800e912:	bf00      	nop
    }
  }

  return(frequency);
 800e914:	69fb      	ldr	r3, [r7, #28]
}
 800e916:	4618      	mov	r0, r3
 800e918:	3720      	adds	r7, #32
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	40021000 	.word	0x40021000
 800e924:	02dc6c00 	.word	0x02dc6c00
 800e928:	00f42400 	.word	0x00f42400

0800e92c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b086      	sub	sp, #24
 800e930:	af00      	add	r7, sp, #0
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	60b9      	str	r1, [r7, #8]
 800e936:	607a      	str	r2, [r7, #4]
 800e938:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	2b02      	cmp	r3, #2
 800e93e:	d904      	bls.n	800e94a <HAL_SAI_InitProtocol+0x1e>
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	3b03      	subs	r3, #3
 800e944:	2b01      	cmp	r3, #1
 800e946:	d812      	bhi.n	800e96e <HAL_SAI_InitProtocol+0x42>
 800e948:	e008      	b.n	800e95c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	68b9      	ldr	r1, [r7, #8]
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f000 f9b9 	bl	800ecc8 <SAI_InitI2S>
 800e956:	4603      	mov	r3, r0
 800e958:	75fb      	strb	r3, [r7, #23]
      break;
 800e95a:	e00b      	b.n	800e974 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	68b9      	ldr	r1, [r7, #8]
 800e962:	68f8      	ldr	r0, [r7, #12]
 800e964:	f000 fa62 	bl	800ee2c <SAI_InitPCM>
 800e968:	4603      	mov	r3, r0
 800e96a:	75fb      	strb	r3, [r7, #23]
      break;
 800e96c:	e002      	b.n	800e974 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800e96e:	2301      	movs	r3, #1
 800e970:	75fb      	strb	r3, [r7, #23]
      break;
 800e972:	bf00      	nop
  }

  if (status == HAL_OK)
 800e974:	7dfb      	ldrb	r3, [r7, #23]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d104      	bne.n	800e984 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800e97a:	68f8      	ldr	r0, [r7, #12]
 800e97c:	f000 f808 	bl	800e990 <HAL_SAI_Init>
 800e980:	4603      	mov	r3, r0
 800e982:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e984:	7dfb      	ldrb	r3, [r7, #23]
}
 800e986:	4618      	mov	r0, r3
 800e988:	3718      	adds	r7, #24
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
	...

0800e990 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b088      	sub	sp, #32
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d101      	bne.n	800e9a2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800e99e:	2301      	movs	r3, #1
 800e9a0:	e186      	b.n	800ecb0 <HAL_SAI_Init+0x320>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d10e      	bne.n	800e9ca <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4a61      	ldr	r2, [pc, #388]	@ (800eb38 <HAL_SAI_Init+0x1a8>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d107      	bne.n	800e9c6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	d103      	bne.n	800e9c6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d001      	beq.n	800e9ca <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e172      	b.n	800ecb0 <HAL_SAI_Init+0x320>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e9d0:	b2db      	uxtb	r3, r3
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d106      	bne.n	800e9e4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f7f8 fdc8 	bl	8007574 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f000 faa3 	bl	800ef30 <SAI_Disable>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d001      	beq.n	800e9f4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e15d      	b.n	800ecb0 <HAL_SAI_Init+0x320>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2202      	movs	r2, #2
 800e9f8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.Synchro)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d002      	beq.n	800ea0a <HAL_SAI_Init+0x7a>
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d003      	beq.n	800ea10 <HAL_SAI_Init+0x80>
 800ea08:	e006      	b.n	800ea18 <HAL_SAI_Init+0x88>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	61bb      	str	r3, [r7, #24]
      break;
 800ea0e:	e006      	b.n	800ea1e <HAL_SAI_Init+0x8e>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ea10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ea14:	61bb      	str	r3, [r7, #24]
      break;
 800ea16:	e002      	b.n	800ea1e <HAL_SAI_Init+0x8e>
    default :
      syncen_bits = 0;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	61bb      	str	r3, [r7, #24]
      break;
 800ea1c:	bf00      	nop
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6a1b      	ldr	r3, [r3, #32]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d06f      	beq.n	800eb06 <HAL_SAI_Init+0x176>
  {
    uint32_t freq = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4a42      	ldr	r2, [pc, #264]	@ (800eb38 <HAL_SAI_Init+0x1a8>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d004      	beq.n	800ea3e <HAL_SAI_Init+0xae>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4a40      	ldr	r2, [pc, #256]	@ (800eb3c <HAL_SAI_Init+0x1ac>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d104      	bne.n	800ea48 <HAL_SAI_Init+0xb8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ea3e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800ea42:	f7ff fa61 	bl	800df08 <HAL_RCCEx_GetPeriphCLKFreq>
 800ea46:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	699b      	ldr	r3, [r3, #24]
 800ea4c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ea50:	d120      	bne.n	800ea94 <HAL_SAI_Init+0x104>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea56:	2b04      	cmp	r3, #4
 800ea58:	d102      	bne.n	800ea60 <HAL_SAI_Init+0xd0>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800ea5a:	2340      	movs	r3, #64	@ 0x40
 800ea5c:	60fb      	str	r3, [r7, #12]
 800ea5e:	e00a      	b.n	800ea76 <HAL_SAI_Init+0xe6>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea64:	2b08      	cmp	r3, #8
 800ea66:	d103      	bne.n	800ea70 <HAL_SAI_Init+0xe0>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800ea68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ea6c:	60fb      	str	r3, [r7, #12]
 800ea6e:	e002      	b.n	800ea76 <HAL_SAI_Init+0xe6>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea74:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800ea76:	697a      	ldr	r2, [r7, #20]
 800ea78:	4613      	mov	r3, r2
 800ea7a:	009b      	lsls	r3, r3, #2
 800ea7c:	4413      	add	r3, r2
 800ea7e:	005b      	lsls	r3, r3, #1
 800ea80:	4619      	mov	r1, r3
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6a1b      	ldr	r3, [r3, #32]
 800ea86:	68fa      	ldr	r2, [r7, #12]
 800ea88:	fb02 f303 	mul.w	r3, r2, r3
 800ea8c:	fbb1 f3f3 	udiv	r3, r1, r3
 800ea90:	613b      	str	r3, [r7, #16]
 800ea92:	e017      	b.n	800eac4 <HAL_SAI_Init+0x134>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ea9c:	d101      	bne.n	800eaa2 <HAL_SAI_Init+0x112>
 800ea9e:	2302      	movs	r3, #2
 800eaa0:	e000      	b.n	800eaa4 <HAL_SAI_Init+0x114>
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800eaa6:	697a      	ldr	r2, [r7, #20]
 800eaa8:	4613      	mov	r3, r2
 800eaaa:	009b      	lsls	r3, r3, #2
 800eaac:	4413      	add	r3, r2
 800eaae:	005b      	lsls	r3, r3, #1
 800eab0:	4619      	mov	r1, r3
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6a1b      	ldr	r3, [r3, #32]
 800eab6:	68ba      	ldr	r2, [r7, #8]
 800eab8:	fb02 f303 	mul.w	r3, r2, r3
 800eabc:	021b      	lsls	r3, r3, #8
 800eabe:	fbb1 f3f3 	udiv	r3, r1, r3
 800eac2:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	4a1e      	ldr	r2, [pc, #120]	@ (800eb40 <HAL_SAI_Init+0x1b0>)
 800eac8:	fba2 2303 	umull	r2, r3, r2, r3
 800eacc:	08da      	lsrs	r2, r3, #3
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ead2:	6939      	ldr	r1, [r7, #16]
 800ead4:	4b1a      	ldr	r3, [pc, #104]	@ (800eb40 <HAL_SAI_Init+0x1b0>)
 800ead6:	fba3 2301 	umull	r2, r3, r3, r1
 800eada:	08da      	lsrs	r2, r3, #3
 800eadc:	4613      	mov	r3, r2
 800eade:	009b      	lsls	r3, r3, #2
 800eae0:	4413      	add	r3, r2
 800eae2:	005b      	lsls	r3, r3, #1
 800eae4:	1aca      	subs	r2, r1, r3
 800eae6:	2a08      	cmp	r2, #8
 800eae8:	d904      	bls.n	800eaf4 <HAL_SAI_Init+0x164>
    {
      hsai->Init.Mckdiv += 1U;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaee:	1c5a      	adds	r2, r3, #1
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eaf8:	2b04      	cmp	r3, #4
 800eafa:	d104      	bne.n	800eb06 <HAL_SAI_Init+0x176>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb00:	085a      	lsrs	r2, r3, #1
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d003      	beq.n	800eb16 <HAL_SAI_Init+0x186>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	2b02      	cmp	r3, #2
 800eb14:	d109      	bne.n	800eb2a <HAL_SAI_Init+0x19a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	d101      	bne.n	800eb22 <HAL_SAI_Init+0x192>
 800eb1e:	2300      	movs	r3, #0
 800eb20:	e001      	b.n	800eb26 <HAL_SAI_Init+0x196>
 800eb22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eb26:	61fb      	str	r3, [r7, #28]
 800eb28:	e00e      	b.n	800eb48 <HAL_SAI_Init+0x1b8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d108      	bne.n	800eb44 <HAL_SAI_Init+0x1b4>
 800eb32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eb36:	e006      	b.n	800eb46 <HAL_SAI_Init+0x1b6>
 800eb38:	40015404 	.word	0x40015404
 800eb3c:	40015424 	.word	0x40015424
 800eb40:	cccccccd 	.word	0xcccccccd
 800eb44:	2300      	movs	r3, #0
 800eb46:	61fb      	str	r3, [r7, #28]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	6819      	ldr	r1, [r3, #0]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681a      	ldr	r2, [r3, #0]
 800eb52:	4b59      	ldr	r3, [pc, #356]	@ (800ecb8 <HAL_SAI_Init+0x328>)
 800eb54:	400b      	ands	r3, r1
 800eb56:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	6819      	ldr	r1, [r3, #0]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	685a      	ldr	r2, [r3, #4]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb66:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eb6c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb72:	431a      	orrs	r2, r3
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800eb78:	69bb      	ldr	r3, [r7, #24]
 800eb7a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800eb80:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	695b      	ldr	r3, [r3, #20]
 800eb86:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800eb8c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb92:	051b      	lsls	r3, r3, #20
 800eb94:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800eb9a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	691b      	ldr	r3, [r3, #16]
 800eba0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	430a      	orrs	r2, r1
 800eba8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	687a      	ldr	r2, [r7, #4]
 800ebb2:	6812      	ldr	r2, [r2, #0]
 800ebb4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800ebb8:	f023 030f 	bic.w	r3, r3, #15
 800ebbc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	6859      	ldr	r1, [r3, #4]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	69da      	ldr	r2, [r3, #28]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebcc:	431a      	orrs	r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebd2:	431a      	orrs	r2, r3
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	430a      	orrs	r2, r1
 800ebda:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	6899      	ldr	r1, [r3, #8]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	4b35      	ldr	r3, [pc, #212]	@ (800ecbc <HAL_SAI_Init+0x32c>)
 800ebe8:	400b      	ands	r3, r1
 800ebea:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	6899      	ldr	r1, [r3, #8]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebf6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ebfc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800ec02:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800ec08:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec0e:	3b01      	subs	r3, #1
 800ec10:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ec12:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	430a      	orrs	r2, r1
 800ec1a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	68d9      	ldr	r1, [r3, #12]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800ec2a:	400b      	ands	r3, r1
 800ec2c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	68d9      	ldr	r1, [r3, #12]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec3c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec42:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ec44:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec4a:	3b01      	subs	r3, #1
 800ec4c:	021b      	lsls	r3, r3, #8
 800ec4e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	430a      	orrs	r2, r1
 800ec56:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4a18      	ldr	r2, [pc, #96]	@ (800ecc0 <HAL_SAI_Init+0x330>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d119      	bne.n	800ec96 <HAL_SAI_Init+0x306>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ec62:	4b18      	ldr	r3, [pc, #96]	@ (800ecc4 <HAL_SAI_Init+0x334>)
 800ec64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec66:	4a17      	ldr	r2, [pc, #92]	@ (800ecc4 <HAL_SAI_Init+0x334>)
 800ec68:	f023 0301 	bic.w	r3, r3, #1
 800ec6c:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d10e      	bne.n	800ec96 <HAL_SAI_Init+0x306>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec80:	3b01      	subs	r3, #1
 800ec82:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ec84:	490f      	ldr	r1, [pc, #60]	@ (800ecc4 <HAL_SAI_Init+0x334>)
 800ec86:	4313      	orrs	r3, r2
 800ec88:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800ec8a:	4b0e      	ldr	r3, [pc, #56]	@ (800ecc4 <HAL_SAI_Init+0x334>)
 800ec8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec8e:	4a0d      	ldr	r2, [pc, #52]	@ (800ecc4 <HAL_SAI_Init+0x334>)
 800ec90:	f043 0301 	orr.w	r3, r3, #1
 800ec94:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2201      	movs	r2, #1
 800eca2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800ecae:	2300      	movs	r3, #0
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3720      	adds	r7, #32
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	f005c010 	.word	0xf005c010
 800ecbc:	fff88000 	.word	0xfff88000
 800ecc0:	40015404 	.word	0x40015404
 800ecc4:	40015400 	.word	0x40015400

0800ecc8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b087      	sub	sp, #28
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	607a      	str	r2, [r7, #4]
 800ecd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2200      	movs	r2, #0
 800ece4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d003      	beq.n	800ecf6 <SAI_InitI2S+0x2e>
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	685b      	ldr	r3, [r3, #4]
 800ecf2:	2b02      	cmp	r3, #2
 800ecf4:	d103      	bne.n	800ecfe <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	651a      	str	r2, [r3, #80]	@ 0x50
 800ecfc:	e002      	b.n	800ed04 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	2201      	movs	r2, #1
 800ed02:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ed0a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed12:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	2200      	movs	r2, #0
 800ed18:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	683a      	ldr	r2, [r7, #0]
 800ed1e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	f003 0301 	and.w	r3, r3, #1
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d001      	beq.n	800ed2e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	e077      	b.n	800ee1e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d107      	bne.n	800ed44 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2200      	movs	r2, #0
 800ed38:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ed40:	665a      	str	r2, [r3, #100]	@ 0x64
 800ed42:	e006      	b.n	800ed52 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ed4a:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2b03      	cmp	r3, #3
 800ed56:	d84f      	bhi.n	800edf8 <SAI_InitI2S+0x130>
 800ed58:	a201      	add	r2, pc, #4	@ (adr r2, 800ed60 <SAI_InitI2S+0x98>)
 800ed5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed5e:	bf00      	nop
 800ed60:	0800ed71 	.word	0x0800ed71
 800ed64:	0800ed93 	.word	0x0800ed93
 800ed68:	0800edb5 	.word	0x0800edb5
 800ed6c:	0800edd7 	.word	0x0800edd7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2280      	movs	r2, #128	@ 0x80
 800ed74:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	085b      	lsrs	r3, r3, #1
 800ed7a:	015a      	lsls	r2, r3, #5
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	085b      	lsrs	r3, r3, #1
 800ed84:	011a      	lsls	r2, r3, #4
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2240      	movs	r2, #64	@ 0x40
 800ed8e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ed90:	e035      	b.n	800edfe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2280      	movs	r2, #128	@ 0x80
 800ed96:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	085b      	lsrs	r3, r3, #1
 800ed9c:	019a      	lsls	r2, r3, #6
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	085b      	lsrs	r3, r3, #1
 800eda6:	015a      	lsls	r2, r3, #5
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2280      	movs	r2, #128	@ 0x80
 800edb0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800edb2:	e024      	b.n	800edfe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	22c0      	movs	r2, #192	@ 0xc0
 800edb8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	085b      	lsrs	r3, r3, #1
 800edbe:	019a      	lsls	r2, r3, #6
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	085b      	lsrs	r3, r3, #1
 800edc8:	015a      	lsls	r2, r3, #5
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	2280      	movs	r2, #128	@ 0x80
 800edd2:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800edd4:	e013      	b.n	800edfe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	22e0      	movs	r2, #224	@ 0xe0
 800edda:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	085b      	lsrs	r3, r3, #1
 800ede0:	019a      	lsls	r2, r3, #6
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	085b      	lsrs	r3, r3, #1
 800edea:	015a      	lsls	r2, r3, #5
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2280      	movs	r2, #128	@ 0x80
 800edf4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800edf6:	e002      	b.n	800edfe <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800edf8:	2301      	movs	r3, #1
 800edfa:	75fb      	strb	r3, [r7, #23]
      break;
 800edfc:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	2b02      	cmp	r3, #2
 800ee02:	d10b      	bne.n	800ee1c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2b01      	cmp	r3, #1
 800ee08:	d102      	bne.n	800ee10 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2210      	movs	r2, #16
 800ee0e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	d102      	bne.n	800ee1c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2208      	movs	r2, #8
 800ee1a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800ee1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	371c      	adds	r7, #28
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop

0800ee2c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b087      	sub	sp, #28
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	60b9      	str	r1, [r7, #8]
 800ee36:	607a      	str	r2, [r7, #4]
 800ee38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2200      	movs	r2, #0
 800ee42:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2200      	movs	r2, #0
 800ee48:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d003      	beq.n	800ee5a <SAI_InitPCM+0x2e>
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	685b      	ldr	r3, [r3, #4]
 800ee56:	2b02      	cmp	r3, #2
 800ee58:	d103      	bne.n	800ee62 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	651a      	str	r2, [r3, #80]	@ 0x50
 800ee60:	e002      	b.n	800ee68 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2200      	movs	r2, #0
 800ee66:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ee74:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ee7c:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2200      	movs	r2, #0
 800ee82:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	683a      	ldr	r2, [r7, #0]
 800ee88:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee90:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	2b04      	cmp	r3, #4
 800ee96:	d103      	bne.n	800eea0 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	659a      	str	r2, [r3, #88]	@ 0x58
 800ee9e:	e002      	b.n	800eea6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	220d      	movs	r2, #13
 800eea4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2b03      	cmp	r3, #3
 800eeaa:	d837      	bhi.n	800ef1c <SAI_InitPCM+0xf0>
 800eeac:	a201      	add	r2, pc, #4	@ (adr r2, 800eeb4 <SAI_InitPCM+0x88>)
 800eeae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb2:	bf00      	nop
 800eeb4:	0800eec5 	.word	0x0800eec5
 800eeb8:	0800eedb 	.word	0x0800eedb
 800eebc:	0800eef1 	.word	0x0800eef1
 800eec0:	0800ef07 	.word	0x0800ef07
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2280      	movs	r2, #128	@ 0x80
 800eec8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	011a      	lsls	r2, r3, #4
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	2240      	movs	r2, #64	@ 0x40
 800eed6:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eed8:	e023      	b.n	800ef22 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2280      	movs	r2, #128	@ 0x80
 800eede:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	015a      	lsls	r2, r3, #5
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2280      	movs	r2, #128	@ 0x80
 800eeec:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eeee:	e018      	b.n	800ef22 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	22c0      	movs	r2, #192	@ 0xc0
 800eef4:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	015a      	lsls	r2, r3, #5
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2280      	movs	r2, #128	@ 0x80
 800ef02:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ef04:	e00d      	b.n	800ef22 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	22e0      	movs	r2, #224	@ 0xe0
 800ef0a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	015a      	lsls	r2, r3, #5
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2280      	movs	r2, #128	@ 0x80
 800ef18:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ef1a:	e002      	b.n	800ef22 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	75fb      	strb	r3, [r7, #23]
      break;
 800ef20:	bf00      	nop
  }

  return status;
 800ef22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	371c      	adds	r7, #28
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr

0800ef30 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ef30:	b480      	push	{r7}
 800ef32:	b085      	sub	sp, #20
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ef38:	4b18      	ldr	r3, [pc, #96]	@ (800ef9c <SAI_Disable+0x6c>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4a18      	ldr	r2, [pc, #96]	@ (800efa0 <SAI_Disable+0x70>)
 800ef3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ef42:	0b1b      	lsrs	r3, r3, #12
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ef5a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d10a      	bne.n	800ef78 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ef68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800ef72:	2303      	movs	r3, #3
 800ef74:	72fb      	strb	r3, [r7, #11]
      break;
 800ef76:	e009      	b.n	800ef8c <SAI_Disable+0x5c>
    }
    count--;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d1e7      	bne.n	800ef5c <SAI_Disable+0x2c>

  return status;
 800ef8c:	7afb      	ldrb	r3, [r7, #11]
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3714      	adds	r7, #20
 800ef92:	46bd      	mov	sp, r7
 800ef94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef98:	4770      	bx	lr
 800ef9a:	bf00      	nop
 800ef9c:	20000004 	.word	0x20000004
 800efa0:	95cbec1b 	.word	0x95cbec1b

0800efa4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d101      	bne.n	800efb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800efb2:	2301      	movs	r3, #1
 800efb4:	e049      	b.n	800f04a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800efbc:	b2db      	uxtb	r3, r3
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d106      	bne.n	800efd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2200      	movs	r2, #0
 800efc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f7f8 ff68 	bl	8007ea0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2202      	movs	r2, #2
 800efd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	3304      	adds	r3, #4
 800efe0:	4619      	mov	r1, r3
 800efe2:	4610      	mov	r0, r2
 800efe4:	f000 f94a 	bl	800f27c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2201      	movs	r2, #1
 800efec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2201      	movs	r2, #1
 800eff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2201      	movs	r2, #1
 800effc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2201      	movs	r2, #1
 800f004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2201      	movs	r2, #1
 800f00c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2201      	movs	r2, #1
 800f014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2201      	movs	r2, #1
 800f01c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2201      	movs	r2, #1
 800f024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2201      	movs	r2, #1
 800f02c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2201      	movs	r2, #1
 800f034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2201      	movs	r2, #1
 800f03c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2201      	movs	r2, #1
 800f044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f048:	2300      	movs	r3, #0
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3708      	adds	r7, #8
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
	...

0800f054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b086      	sub	sp, #24
 800f058:	af00      	add	r7, sp, #0
 800f05a:	60f8      	str	r0, [r7, #12]
 800f05c:	60b9      	str	r1, [r7, #8]
 800f05e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f060:	2300      	movs	r3, #0
 800f062:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d101      	bne.n	800f072 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f06e:	2302      	movs	r3, #2
 800f070:	e0ff      	b.n	800f272 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2201      	movs	r2, #1
 800f076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2b14      	cmp	r3, #20
 800f07e:	f200 80f0 	bhi.w	800f262 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f082:	a201      	add	r2, pc, #4	@ (adr r2, 800f088 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f088:	0800f0dd 	.word	0x0800f0dd
 800f08c:	0800f263 	.word	0x0800f263
 800f090:	0800f263 	.word	0x0800f263
 800f094:	0800f263 	.word	0x0800f263
 800f098:	0800f11d 	.word	0x0800f11d
 800f09c:	0800f263 	.word	0x0800f263
 800f0a0:	0800f263 	.word	0x0800f263
 800f0a4:	0800f263 	.word	0x0800f263
 800f0a8:	0800f15f 	.word	0x0800f15f
 800f0ac:	0800f263 	.word	0x0800f263
 800f0b0:	0800f263 	.word	0x0800f263
 800f0b4:	0800f263 	.word	0x0800f263
 800f0b8:	0800f19f 	.word	0x0800f19f
 800f0bc:	0800f263 	.word	0x0800f263
 800f0c0:	0800f263 	.word	0x0800f263
 800f0c4:	0800f263 	.word	0x0800f263
 800f0c8:	0800f1e1 	.word	0x0800f1e1
 800f0cc:	0800f263 	.word	0x0800f263
 800f0d0:	0800f263 	.word	0x0800f263
 800f0d4:	0800f263 	.word	0x0800f263
 800f0d8:	0800f221 	.word	0x0800f221
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	68b9      	ldr	r1, [r7, #8]
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f000 f974 	bl	800f3d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	699a      	ldr	r2, [r3, #24]
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f042 0208 	orr.w	r2, r2, #8
 800f0f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	699a      	ldr	r2, [r3, #24]
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f022 0204 	bic.w	r2, r2, #4
 800f106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	6999      	ldr	r1, [r3, #24]
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	691a      	ldr	r2, [r3, #16]
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	430a      	orrs	r2, r1
 800f118:	619a      	str	r2, [r3, #24]
      break;
 800f11a:	e0a5      	b.n	800f268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	68b9      	ldr	r1, [r7, #8]
 800f122:	4618      	mov	r0, r3
 800f124:	f000 f9ee 	bl	800f504 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	699a      	ldr	r2, [r3, #24]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	699a      	ldr	r2, [r3, #24]
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	6999      	ldr	r1, [r3, #24]
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	691b      	ldr	r3, [r3, #16]
 800f152:	021a      	lsls	r2, r3, #8
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	430a      	orrs	r2, r1
 800f15a:	619a      	str	r2, [r3, #24]
      break;
 800f15c:	e084      	b.n	800f268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	68b9      	ldr	r1, [r7, #8]
 800f164:	4618      	mov	r0, r3
 800f166:	f000 fa61 	bl	800f62c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	69da      	ldr	r2, [r3, #28]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f042 0208 	orr.w	r2, r2, #8
 800f178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	69da      	ldr	r2, [r3, #28]
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f022 0204 	bic.w	r2, r2, #4
 800f188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	69d9      	ldr	r1, [r3, #28]
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	691a      	ldr	r2, [r3, #16]
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	430a      	orrs	r2, r1
 800f19a:	61da      	str	r2, [r3, #28]
      break;
 800f19c:	e064      	b.n	800f268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	68b9      	ldr	r1, [r7, #8]
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f000 fad3 	bl	800f750 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	69da      	ldr	r2, [r3, #28]
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f1b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	69da      	ldr	r2, [r3, #28]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f1c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	69d9      	ldr	r1, [r3, #28]
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	691b      	ldr	r3, [r3, #16]
 800f1d4:	021a      	lsls	r2, r3, #8
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	430a      	orrs	r2, r1
 800f1dc:	61da      	str	r2, [r3, #28]
      break;
 800f1de:	e043      	b.n	800f268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	68b9      	ldr	r1, [r7, #8]
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f000 fb46 	bl	800f878 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f042 0208 	orr.w	r2, r2, #8
 800f1fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f022 0204 	bic.w	r2, r2, #4
 800f20a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	691a      	ldr	r2, [r3, #16]
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	430a      	orrs	r2, r1
 800f21c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f21e:	e023      	b.n	800f268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	68b9      	ldr	r1, [r7, #8]
 800f226:	4618      	mov	r0, r3
 800f228:	f000 fb90 	bl	800f94c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f23a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f24a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	691b      	ldr	r3, [r3, #16]
 800f256:	021a      	lsls	r2, r3, #8
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	430a      	orrs	r2, r1
 800f25e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f260:	e002      	b.n	800f268 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f262:	2301      	movs	r3, #1
 800f264:	75fb      	strb	r3, [r7, #23]
      break;
 800f266:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f270:	7dfb      	ldrb	r3, [r7, #23]
}
 800f272:	4618      	mov	r0, r3
 800f274:	3718      	adds	r7, #24
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop

0800f27c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f27c:	b480      	push	{r7}
 800f27e:	b085      	sub	sp, #20
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	4a48      	ldr	r2, [pc, #288]	@ (800f3b0 <TIM_Base_SetConfig+0x134>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d013      	beq.n	800f2bc <TIM_Base_SetConfig+0x40>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f29a:	d00f      	beq.n	800f2bc <TIM_Base_SetConfig+0x40>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	4a45      	ldr	r2, [pc, #276]	@ (800f3b4 <TIM_Base_SetConfig+0x138>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d00b      	beq.n	800f2bc <TIM_Base_SetConfig+0x40>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4a44      	ldr	r2, [pc, #272]	@ (800f3b8 <TIM_Base_SetConfig+0x13c>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d007      	beq.n	800f2bc <TIM_Base_SetConfig+0x40>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4a43      	ldr	r2, [pc, #268]	@ (800f3bc <TIM_Base_SetConfig+0x140>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d003      	beq.n	800f2bc <TIM_Base_SetConfig+0x40>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	4a42      	ldr	r2, [pc, #264]	@ (800f3c0 <TIM_Base_SetConfig+0x144>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d108      	bne.n	800f2ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	68fa      	ldr	r2, [r7, #12]
 800f2ca:	4313      	orrs	r3, r2
 800f2cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	4a37      	ldr	r2, [pc, #220]	@ (800f3b0 <TIM_Base_SetConfig+0x134>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d01f      	beq.n	800f316 <TIM_Base_SetConfig+0x9a>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2dc:	d01b      	beq.n	800f316 <TIM_Base_SetConfig+0x9a>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	4a34      	ldr	r2, [pc, #208]	@ (800f3b4 <TIM_Base_SetConfig+0x138>)
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d017      	beq.n	800f316 <TIM_Base_SetConfig+0x9a>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	4a33      	ldr	r2, [pc, #204]	@ (800f3b8 <TIM_Base_SetConfig+0x13c>)
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d013      	beq.n	800f316 <TIM_Base_SetConfig+0x9a>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	4a32      	ldr	r2, [pc, #200]	@ (800f3bc <TIM_Base_SetConfig+0x140>)
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d00f      	beq.n	800f316 <TIM_Base_SetConfig+0x9a>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4a32      	ldr	r2, [pc, #200]	@ (800f3c4 <TIM_Base_SetConfig+0x148>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d00b      	beq.n	800f316 <TIM_Base_SetConfig+0x9a>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	4a31      	ldr	r2, [pc, #196]	@ (800f3c8 <TIM_Base_SetConfig+0x14c>)
 800f302:	4293      	cmp	r3, r2
 800f304:	d007      	beq.n	800f316 <TIM_Base_SetConfig+0x9a>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4a30      	ldr	r2, [pc, #192]	@ (800f3cc <TIM_Base_SetConfig+0x150>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d003      	beq.n	800f316 <TIM_Base_SetConfig+0x9a>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	4a2b      	ldr	r2, [pc, #172]	@ (800f3c0 <TIM_Base_SetConfig+0x144>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d108      	bne.n	800f328 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f31c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	68db      	ldr	r3, [r3, #12]
 800f322:	68fa      	ldr	r2, [r7, #12]
 800f324:	4313      	orrs	r3, r2
 800f326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	695b      	ldr	r3, [r3, #20]
 800f332:	4313      	orrs	r3, r2
 800f334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	68fa      	ldr	r2, [r7, #12]
 800f33a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	689a      	ldr	r2, [r3, #8]
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	681a      	ldr	r2, [r3, #0]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	4a18      	ldr	r2, [pc, #96]	@ (800f3b0 <TIM_Base_SetConfig+0x134>)
 800f350:	4293      	cmp	r3, r2
 800f352:	d013      	beq.n	800f37c <TIM_Base_SetConfig+0x100>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	4a19      	ldr	r2, [pc, #100]	@ (800f3bc <TIM_Base_SetConfig+0x140>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d00f      	beq.n	800f37c <TIM_Base_SetConfig+0x100>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	4a19      	ldr	r2, [pc, #100]	@ (800f3c4 <TIM_Base_SetConfig+0x148>)
 800f360:	4293      	cmp	r3, r2
 800f362:	d00b      	beq.n	800f37c <TIM_Base_SetConfig+0x100>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	4a18      	ldr	r2, [pc, #96]	@ (800f3c8 <TIM_Base_SetConfig+0x14c>)
 800f368:	4293      	cmp	r3, r2
 800f36a:	d007      	beq.n	800f37c <TIM_Base_SetConfig+0x100>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	4a17      	ldr	r2, [pc, #92]	@ (800f3cc <TIM_Base_SetConfig+0x150>)
 800f370:	4293      	cmp	r3, r2
 800f372:	d003      	beq.n	800f37c <TIM_Base_SetConfig+0x100>
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	4a12      	ldr	r2, [pc, #72]	@ (800f3c0 <TIM_Base_SetConfig+0x144>)
 800f378:	4293      	cmp	r3, r2
 800f37a:	d103      	bne.n	800f384 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	691a      	ldr	r2, [r3, #16]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2201      	movs	r2, #1
 800f388:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	691b      	ldr	r3, [r3, #16]
 800f38e:	f003 0301 	and.w	r3, r3, #1
 800f392:	2b01      	cmp	r3, #1
 800f394:	d105      	bne.n	800f3a2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	691b      	ldr	r3, [r3, #16]
 800f39a:	f023 0201 	bic.w	r2, r3, #1
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	611a      	str	r2, [r3, #16]
  }
}
 800f3a2:	bf00      	nop
 800f3a4:	3714      	adds	r7, #20
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr
 800f3ae:	bf00      	nop
 800f3b0:	40012c00 	.word	0x40012c00
 800f3b4:	40000400 	.word	0x40000400
 800f3b8:	40000800 	.word	0x40000800
 800f3bc:	40013400 	.word	0x40013400
 800f3c0:	40015000 	.word	0x40015000
 800f3c4:	40014000 	.word	0x40014000
 800f3c8:	40014400 	.word	0x40014400
 800f3cc:	40014800 	.word	0x40014800

0800f3d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f3d0:	b480      	push	{r7}
 800f3d2:	b087      	sub	sp, #28
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6a1b      	ldr	r3, [r3, #32]
 800f3de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6a1b      	ldr	r3, [r3, #32]
 800f3e4:	f023 0201 	bic.w	r2, r3, #1
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	685b      	ldr	r3, [r3, #4]
 800f3f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	699b      	ldr	r3, [r3, #24]
 800f3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f3fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f023 0303 	bic.w	r3, r3, #3
 800f40a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	4313      	orrs	r3, r2
 800f414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	f023 0302 	bic.w	r3, r3, #2
 800f41c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	697a      	ldr	r2, [r7, #20]
 800f424:	4313      	orrs	r3, r2
 800f426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	4a30      	ldr	r2, [pc, #192]	@ (800f4ec <TIM_OC1_SetConfig+0x11c>)
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d013      	beq.n	800f458 <TIM_OC1_SetConfig+0x88>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	4a2f      	ldr	r2, [pc, #188]	@ (800f4f0 <TIM_OC1_SetConfig+0x120>)
 800f434:	4293      	cmp	r3, r2
 800f436:	d00f      	beq.n	800f458 <TIM_OC1_SetConfig+0x88>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	4a2e      	ldr	r2, [pc, #184]	@ (800f4f4 <TIM_OC1_SetConfig+0x124>)
 800f43c:	4293      	cmp	r3, r2
 800f43e:	d00b      	beq.n	800f458 <TIM_OC1_SetConfig+0x88>
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	4a2d      	ldr	r2, [pc, #180]	@ (800f4f8 <TIM_OC1_SetConfig+0x128>)
 800f444:	4293      	cmp	r3, r2
 800f446:	d007      	beq.n	800f458 <TIM_OC1_SetConfig+0x88>
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	4a2c      	ldr	r2, [pc, #176]	@ (800f4fc <TIM_OC1_SetConfig+0x12c>)
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d003      	beq.n	800f458 <TIM_OC1_SetConfig+0x88>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	4a2b      	ldr	r2, [pc, #172]	@ (800f500 <TIM_OC1_SetConfig+0x130>)
 800f454:	4293      	cmp	r3, r2
 800f456:	d10c      	bne.n	800f472 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	f023 0308 	bic.w	r3, r3, #8
 800f45e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	68db      	ldr	r3, [r3, #12]
 800f464:	697a      	ldr	r2, [r7, #20]
 800f466:	4313      	orrs	r3, r2
 800f468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	f023 0304 	bic.w	r3, r3, #4
 800f470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4a1d      	ldr	r2, [pc, #116]	@ (800f4ec <TIM_OC1_SetConfig+0x11c>)
 800f476:	4293      	cmp	r3, r2
 800f478:	d013      	beq.n	800f4a2 <TIM_OC1_SetConfig+0xd2>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	4a1c      	ldr	r2, [pc, #112]	@ (800f4f0 <TIM_OC1_SetConfig+0x120>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d00f      	beq.n	800f4a2 <TIM_OC1_SetConfig+0xd2>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4a1b      	ldr	r2, [pc, #108]	@ (800f4f4 <TIM_OC1_SetConfig+0x124>)
 800f486:	4293      	cmp	r3, r2
 800f488:	d00b      	beq.n	800f4a2 <TIM_OC1_SetConfig+0xd2>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4a1a      	ldr	r2, [pc, #104]	@ (800f4f8 <TIM_OC1_SetConfig+0x128>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d007      	beq.n	800f4a2 <TIM_OC1_SetConfig+0xd2>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	4a19      	ldr	r2, [pc, #100]	@ (800f4fc <TIM_OC1_SetConfig+0x12c>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d003      	beq.n	800f4a2 <TIM_OC1_SetConfig+0xd2>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4a18      	ldr	r2, [pc, #96]	@ (800f500 <TIM_OC1_SetConfig+0x130>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d111      	bne.n	800f4c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f4a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f4b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	695b      	ldr	r3, [r3, #20]
 800f4b6:	693a      	ldr	r2, [r7, #16]
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	699b      	ldr	r3, [r3, #24]
 800f4c0:	693a      	ldr	r2, [r7, #16]
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	693a      	ldr	r2, [r7, #16]
 800f4ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	68fa      	ldr	r2, [r7, #12]
 800f4d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	685a      	ldr	r2, [r3, #4]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	697a      	ldr	r2, [r7, #20]
 800f4de:	621a      	str	r2, [r3, #32]
}
 800f4e0:	bf00      	nop
 800f4e2:	371c      	adds	r7, #28
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr
 800f4ec:	40012c00 	.word	0x40012c00
 800f4f0:	40013400 	.word	0x40013400
 800f4f4:	40014000 	.word	0x40014000
 800f4f8:	40014400 	.word	0x40014400
 800f4fc:	40014800 	.word	0x40014800
 800f500:	40015000 	.word	0x40015000

0800f504 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f504:	b480      	push	{r7}
 800f506:	b087      	sub	sp, #28
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6a1b      	ldr	r3, [r3, #32]
 800f512:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6a1b      	ldr	r3, [r3, #32]
 800f518:	f023 0210 	bic.w	r2, r3, #16
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	699b      	ldr	r3, [r3, #24]
 800f52a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f532:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f53e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	021b      	lsls	r3, r3, #8
 800f546:	68fa      	ldr	r2, [r7, #12]
 800f548:	4313      	orrs	r3, r2
 800f54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f54c:	697b      	ldr	r3, [r7, #20]
 800f54e:	f023 0320 	bic.w	r3, r3, #32
 800f552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	689b      	ldr	r3, [r3, #8]
 800f558:	011b      	lsls	r3, r3, #4
 800f55a:	697a      	ldr	r2, [r7, #20]
 800f55c:	4313      	orrs	r3, r2
 800f55e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4a2c      	ldr	r2, [pc, #176]	@ (800f614 <TIM_OC2_SetConfig+0x110>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d007      	beq.n	800f578 <TIM_OC2_SetConfig+0x74>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	4a2b      	ldr	r2, [pc, #172]	@ (800f618 <TIM_OC2_SetConfig+0x114>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d003      	beq.n	800f578 <TIM_OC2_SetConfig+0x74>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4a2a      	ldr	r2, [pc, #168]	@ (800f61c <TIM_OC2_SetConfig+0x118>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d10d      	bne.n	800f594 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f57e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	68db      	ldr	r3, [r3, #12]
 800f584:	011b      	lsls	r3, r3, #4
 800f586:	697a      	ldr	r2, [r7, #20]
 800f588:	4313      	orrs	r3, r2
 800f58a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f592:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	4a1f      	ldr	r2, [pc, #124]	@ (800f614 <TIM_OC2_SetConfig+0x110>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d013      	beq.n	800f5c4 <TIM_OC2_SetConfig+0xc0>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	4a1e      	ldr	r2, [pc, #120]	@ (800f618 <TIM_OC2_SetConfig+0x114>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d00f      	beq.n	800f5c4 <TIM_OC2_SetConfig+0xc0>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	4a1e      	ldr	r2, [pc, #120]	@ (800f620 <TIM_OC2_SetConfig+0x11c>)
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d00b      	beq.n	800f5c4 <TIM_OC2_SetConfig+0xc0>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	4a1d      	ldr	r2, [pc, #116]	@ (800f624 <TIM_OC2_SetConfig+0x120>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d007      	beq.n	800f5c4 <TIM_OC2_SetConfig+0xc0>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	4a1c      	ldr	r2, [pc, #112]	@ (800f628 <TIM_OC2_SetConfig+0x124>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d003      	beq.n	800f5c4 <TIM_OC2_SetConfig+0xc0>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	4a17      	ldr	r2, [pc, #92]	@ (800f61c <TIM_OC2_SetConfig+0x118>)
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d113      	bne.n	800f5ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f5ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f5d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	695b      	ldr	r3, [r3, #20]
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	693a      	ldr	r2, [r7, #16]
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	699b      	ldr	r3, [r3, #24]
 800f5e4:	009b      	lsls	r3, r3, #2
 800f5e6:	693a      	ldr	r2, [r7, #16]
 800f5e8:	4313      	orrs	r3, r2
 800f5ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	693a      	ldr	r2, [r7, #16]
 800f5f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	685a      	ldr	r2, [r3, #4]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	697a      	ldr	r2, [r7, #20]
 800f604:	621a      	str	r2, [r3, #32]
}
 800f606:	bf00      	nop
 800f608:	371c      	adds	r7, #28
 800f60a:	46bd      	mov	sp, r7
 800f60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f610:	4770      	bx	lr
 800f612:	bf00      	nop
 800f614:	40012c00 	.word	0x40012c00
 800f618:	40013400 	.word	0x40013400
 800f61c:	40015000 	.word	0x40015000
 800f620:	40014000 	.word	0x40014000
 800f624:	40014400 	.word	0x40014400
 800f628:	40014800 	.word	0x40014800

0800f62c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b087      	sub	sp, #28
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6a1b      	ldr	r3, [r3, #32]
 800f63a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6a1b      	ldr	r3, [r3, #32]
 800f640:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	685b      	ldr	r3, [r3, #4]
 800f64c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	69db      	ldr	r3, [r3, #28]
 800f652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f65a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f65e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	f023 0303 	bic.w	r3, r3, #3
 800f666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	68fa      	ldr	r2, [r7, #12]
 800f66e:	4313      	orrs	r3, r2
 800f670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	021b      	lsls	r3, r3, #8
 800f680:	697a      	ldr	r2, [r7, #20]
 800f682:	4313      	orrs	r3, r2
 800f684:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	4a2b      	ldr	r2, [pc, #172]	@ (800f738 <TIM_OC3_SetConfig+0x10c>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d007      	beq.n	800f69e <TIM_OC3_SetConfig+0x72>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	4a2a      	ldr	r2, [pc, #168]	@ (800f73c <TIM_OC3_SetConfig+0x110>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d003      	beq.n	800f69e <TIM_OC3_SetConfig+0x72>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	4a29      	ldr	r2, [pc, #164]	@ (800f740 <TIM_OC3_SetConfig+0x114>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d10d      	bne.n	800f6ba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f6a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	021b      	lsls	r3, r3, #8
 800f6ac:	697a      	ldr	r2, [r7, #20]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f6b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	4a1e      	ldr	r2, [pc, #120]	@ (800f738 <TIM_OC3_SetConfig+0x10c>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d013      	beq.n	800f6ea <TIM_OC3_SetConfig+0xbe>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	4a1d      	ldr	r2, [pc, #116]	@ (800f73c <TIM_OC3_SetConfig+0x110>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d00f      	beq.n	800f6ea <TIM_OC3_SetConfig+0xbe>
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	4a1d      	ldr	r2, [pc, #116]	@ (800f744 <TIM_OC3_SetConfig+0x118>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d00b      	beq.n	800f6ea <TIM_OC3_SetConfig+0xbe>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	4a1c      	ldr	r2, [pc, #112]	@ (800f748 <TIM_OC3_SetConfig+0x11c>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d007      	beq.n	800f6ea <TIM_OC3_SetConfig+0xbe>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	4a1b      	ldr	r2, [pc, #108]	@ (800f74c <TIM_OC3_SetConfig+0x120>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d003      	beq.n	800f6ea <TIM_OC3_SetConfig+0xbe>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	4a16      	ldr	r2, [pc, #88]	@ (800f740 <TIM_OC3_SetConfig+0x114>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d113      	bne.n	800f712 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f6f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f6f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	695b      	ldr	r3, [r3, #20]
 800f6fe:	011b      	lsls	r3, r3, #4
 800f700:	693a      	ldr	r2, [r7, #16]
 800f702:	4313      	orrs	r3, r2
 800f704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	699b      	ldr	r3, [r3, #24]
 800f70a:	011b      	lsls	r3, r3, #4
 800f70c:	693a      	ldr	r2, [r7, #16]
 800f70e:	4313      	orrs	r3, r2
 800f710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	693a      	ldr	r2, [r7, #16]
 800f716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	68fa      	ldr	r2, [r7, #12]
 800f71c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	685a      	ldr	r2, [r3, #4]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	697a      	ldr	r2, [r7, #20]
 800f72a:	621a      	str	r2, [r3, #32]
}
 800f72c:	bf00      	nop
 800f72e:	371c      	adds	r7, #28
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr
 800f738:	40012c00 	.word	0x40012c00
 800f73c:	40013400 	.word	0x40013400
 800f740:	40015000 	.word	0x40015000
 800f744:	40014000 	.word	0x40014000
 800f748:	40014400 	.word	0x40014400
 800f74c:	40014800 	.word	0x40014800

0800f750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f750:	b480      	push	{r7}
 800f752:	b087      	sub	sp, #28
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6a1b      	ldr	r3, [r3, #32]
 800f75e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6a1b      	ldr	r3, [r3, #32]
 800f764:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	685b      	ldr	r3, [r3, #4]
 800f770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	69db      	ldr	r3, [r3, #28]
 800f776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f77e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f78a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	021b      	lsls	r3, r3, #8
 800f792:	68fa      	ldr	r2, [r7, #12]
 800f794:	4313      	orrs	r3, r2
 800f796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f79e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	689b      	ldr	r3, [r3, #8]
 800f7a4:	031b      	lsls	r3, r3, #12
 800f7a6:	697a      	ldr	r2, [r7, #20]
 800f7a8:	4313      	orrs	r3, r2
 800f7aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	4a2c      	ldr	r2, [pc, #176]	@ (800f860 <TIM_OC4_SetConfig+0x110>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d007      	beq.n	800f7c4 <TIM_OC4_SetConfig+0x74>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4a2b      	ldr	r2, [pc, #172]	@ (800f864 <TIM_OC4_SetConfig+0x114>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d003      	beq.n	800f7c4 <TIM_OC4_SetConfig+0x74>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4a2a      	ldr	r2, [pc, #168]	@ (800f868 <TIM_OC4_SetConfig+0x118>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d10d      	bne.n	800f7e0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f7ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	031b      	lsls	r3, r3, #12
 800f7d2:	697a      	ldr	r2, [r7, #20]
 800f7d4:	4313      	orrs	r3, r2
 800f7d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f7de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	4a1f      	ldr	r2, [pc, #124]	@ (800f860 <TIM_OC4_SetConfig+0x110>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d013      	beq.n	800f810 <TIM_OC4_SetConfig+0xc0>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	4a1e      	ldr	r2, [pc, #120]	@ (800f864 <TIM_OC4_SetConfig+0x114>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d00f      	beq.n	800f810 <TIM_OC4_SetConfig+0xc0>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	4a1e      	ldr	r2, [pc, #120]	@ (800f86c <TIM_OC4_SetConfig+0x11c>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d00b      	beq.n	800f810 <TIM_OC4_SetConfig+0xc0>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	4a1d      	ldr	r2, [pc, #116]	@ (800f870 <TIM_OC4_SetConfig+0x120>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d007      	beq.n	800f810 <TIM_OC4_SetConfig+0xc0>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	4a1c      	ldr	r2, [pc, #112]	@ (800f874 <TIM_OC4_SetConfig+0x124>)
 800f804:	4293      	cmp	r3, r2
 800f806:	d003      	beq.n	800f810 <TIM_OC4_SetConfig+0xc0>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	4a17      	ldr	r2, [pc, #92]	@ (800f868 <TIM_OC4_SetConfig+0x118>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d113      	bne.n	800f838 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f816:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f81e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	695b      	ldr	r3, [r3, #20]
 800f824:	019b      	lsls	r3, r3, #6
 800f826:	693a      	ldr	r2, [r7, #16]
 800f828:	4313      	orrs	r3, r2
 800f82a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	699b      	ldr	r3, [r3, #24]
 800f830:	019b      	lsls	r3, r3, #6
 800f832:	693a      	ldr	r2, [r7, #16]
 800f834:	4313      	orrs	r3, r2
 800f836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	693a      	ldr	r2, [r7, #16]
 800f83c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	685a      	ldr	r2, [r3, #4]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	697a      	ldr	r2, [r7, #20]
 800f850:	621a      	str	r2, [r3, #32]
}
 800f852:	bf00      	nop
 800f854:	371c      	adds	r7, #28
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr
 800f85e:	bf00      	nop
 800f860:	40012c00 	.word	0x40012c00
 800f864:	40013400 	.word	0x40013400
 800f868:	40015000 	.word	0x40015000
 800f86c:	40014000 	.word	0x40014000
 800f870:	40014400 	.word	0x40014400
 800f874:	40014800 	.word	0x40014800

0800f878 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f878:	b480      	push	{r7}
 800f87a:	b087      	sub	sp, #28
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6a1b      	ldr	r3, [r3, #32]
 800f886:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6a1b      	ldr	r3, [r3, #32]
 800f88c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	685b      	ldr	r3, [r3, #4]
 800f898:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f8a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f8aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	68fa      	ldr	r2, [r7, #12]
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f8bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	689b      	ldr	r3, [r3, #8]
 800f8c2:	041b      	lsls	r3, r3, #16
 800f8c4:	693a      	ldr	r2, [r7, #16]
 800f8c6:	4313      	orrs	r3, r2
 800f8c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	4a19      	ldr	r2, [pc, #100]	@ (800f934 <TIM_OC5_SetConfig+0xbc>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d013      	beq.n	800f8fa <TIM_OC5_SetConfig+0x82>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4a18      	ldr	r2, [pc, #96]	@ (800f938 <TIM_OC5_SetConfig+0xc0>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d00f      	beq.n	800f8fa <TIM_OC5_SetConfig+0x82>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	4a17      	ldr	r2, [pc, #92]	@ (800f93c <TIM_OC5_SetConfig+0xc4>)
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d00b      	beq.n	800f8fa <TIM_OC5_SetConfig+0x82>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	4a16      	ldr	r2, [pc, #88]	@ (800f940 <TIM_OC5_SetConfig+0xc8>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d007      	beq.n	800f8fa <TIM_OC5_SetConfig+0x82>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	4a15      	ldr	r2, [pc, #84]	@ (800f944 <TIM_OC5_SetConfig+0xcc>)
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d003      	beq.n	800f8fa <TIM_OC5_SetConfig+0x82>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	4a14      	ldr	r2, [pc, #80]	@ (800f948 <TIM_OC5_SetConfig+0xd0>)
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d109      	bne.n	800f90e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f900:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	695b      	ldr	r3, [r3, #20]
 800f906:	021b      	lsls	r3, r3, #8
 800f908:	697a      	ldr	r2, [r7, #20]
 800f90a:	4313      	orrs	r3, r2
 800f90c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	697a      	ldr	r2, [r7, #20]
 800f912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	68fa      	ldr	r2, [r7, #12]
 800f918:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	685a      	ldr	r2, [r3, #4]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	693a      	ldr	r2, [r7, #16]
 800f926:	621a      	str	r2, [r3, #32]
}
 800f928:	bf00      	nop
 800f92a:	371c      	adds	r7, #28
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr
 800f934:	40012c00 	.word	0x40012c00
 800f938:	40013400 	.word	0x40013400
 800f93c:	40014000 	.word	0x40014000
 800f940:	40014400 	.word	0x40014400
 800f944:	40014800 	.word	0x40014800
 800f948:	40015000 	.word	0x40015000

0800f94c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b087      	sub	sp, #28
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6a1b      	ldr	r3, [r3, #32]
 800f95a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6a1b      	ldr	r3, [r3, #32]
 800f960:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f97a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f97e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	021b      	lsls	r3, r3, #8
 800f986:	68fa      	ldr	r2, [r7, #12]
 800f988:	4313      	orrs	r3, r2
 800f98a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	689b      	ldr	r3, [r3, #8]
 800f998:	051b      	lsls	r3, r3, #20
 800f99a:	693a      	ldr	r2, [r7, #16]
 800f99c:	4313      	orrs	r3, r2
 800f99e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	4a1a      	ldr	r2, [pc, #104]	@ (800fa0c <TIM_OC6_SetConfig+0xc0>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d013      	beq.n	800f9d0 <TIM_OC6_SetConfig+0x84>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	4a19      	ldr	r2, [pc, #100]	@ (800fa10 <TIM_OC6_SetConfig+0xc4>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d00f      	beq.n	800f9d0 <TIM_OC6_SetConfig+0x84>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	4a18      	ldr	r2, [pc, #96]	@ (800fa14 <TIM_OC6_SetConfig+0xc8>)
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	d00b      	beq.n	800f9d0 <TIM_OC6_SetConfig+0x84>
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	4a17      	ldr	r2, [pc, #92]	@ (800fa18 <TIM_OC6_SetConfig+0xcc>)
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	d007      	beq.n	800f9d0 <TIM_OC6_SetConfig+0x84>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	4a16      	ldr	r2, [pc, #88]	@ (800fa1c <TIM_OC6_SetConfig+0xd0>)
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	d003      	beq.n	800f9d0 <TIM_OC6_SetConfig+0x84>
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	4a15      	ldr	r2, [pc, #84]	@ (800fa20 <TIM_OC6_SetConfig+0xd4>)
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d109      	bne.n	800f9e4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f9d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	695b      	ldr	r3, [r3, #20]
 800f9dc:	029b      	lsls	r3, r3, #10
 800f9de:	697a      	ldr	r2, [r7, #20]
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	697a      	ldr	r2, [r7, #20]
 800f9e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	68fa      	ldr	r2, [r7, #12]
 800f9ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	685a      	ldr	r2, [r3, #4]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	693a      	ldr	r2, [r7, #16]
 800f9fc:	621a      	str	r2, [r3, #32]
}
 800f9fe:	bf00      	nop
 800fa00:	371c      	adds	r7, #28
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr
 800fa0a:	bf00      	nop
 800fa0c:	40012c00 	.word	0x40012c00
 800fa10:	40013400 	.word	0x40013400
 800fa14:	40014000 	.word	0x40014000
 800fa18:	40014400 	.word	0x40014400
 800fa1c:	40014800 	.word	0x40014800
 800fa20:	40015000 	.word	0x40015000

0800fa24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b085      	sub	sp, #20
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	d101      	bne.n	800fa3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fa38:	2302      	movs	r3, #2
 800fa3a:	e06f      	b.n	800fb1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2201      	movs	r2, #1
 800fa40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2202      	movs	r2, #2
 800fa48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	685b      	ldr	r3, [r3, #4]
 800fa52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	689b      	ldr	r3, [r3, #8]
 800fa5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	4a31      	ldr	r2, [pc, #196]	@ (800fb28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d009      	beq.n	800fa7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	4a30      	ldr	r2, [pc, #192]	@ (800fb2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d004      	beq.n	800fa7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a2e      	ldr	r2, [pc, #184]	@ (800fb30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d108      	bne.n	800fa8c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fa80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	685b      	ldr	r3, [r3, #4]
 800fa86:	68fa      	ldr	r2, [r7, #12]
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800fa92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	68fa      	ldr	r2, [r7, #12]
 800fa9e:	4313      	orrs	r3, r2
 800faa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	68fa      	ldr	r2, [r7, #12]
 800faa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	4a1e      	ldr	r2, [pc, #120]	@ (800fb28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d01d      	beq.n	800faf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fabc:	d018      	beq.n	800faf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	4a1c      	ldr	r2, [pc, #112]	@ (800fb34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fac4:	4293      	cmp	r3, r2
 800fac6:	d013      	beq.n	800faf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4a1a      	ldr	r2, [pc, #104]	@ (800fb38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800face:	4293      	cmp	r3, r2
 800fad0:	d00e      	beq.n	800faf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	4a15      	ldr	r2, [pc, #84]	@ (800fb2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d009      	beq.n	800faf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4a16      	ldr	r2, [pc, #88]	@ (800fb3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d004      	beq.n	800faf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	4a11      	ldr	r2, [pc, #68]	@ (800fb30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d10c      	bne.n	800fb0a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800faf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	689b      	ldr	r3, [r3, #8]
 800fafc:	68ba      	ldr	r2, [r7, #8]
 800fafe:	4313      	orrs	r3, r2
 800fb00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	68ba      	ldr	r2, [r7, #8]
 800fb08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2200      	movs	r2, #0
 800fb16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fb1a:	2300      	movs	r3, #0
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3714      	adds	r7, #20
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr
 800fb28:	40012c00 	.word	0x40012c00
 800fb2c:	40013400 	.word	0x40013400
 800fb30:	40015000 	.word	0x40015000
 800fb34:	40000400 	.word	0x40000400
 800fb38:	40000800 	.word	0x40000800
 800fb3c:	40014000 	.word	0x40014000

0800fb40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d101      	bne.n	800fb52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fb4e:	2301      	movs	r3, #1
 800fb50:	e042      	b.n	800fbd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d106      	bne.n	800fb6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f7f8 fd11 	bl	800858c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2224      	movs	r2, #36	@ 0x24
 800fb6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f022 0201 	bic.w	r2, r2, #1
 800fb80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d002      	beq.n	800fb90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 fb24 	bl	80101d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f000 f825 	bl	800fbe0 <UART_SetConfig>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	d101      	bne.n	800fba0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	e01b      	b.n	800fbd8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	685a      	ldr	r2, [r3, #4]
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fbae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	689a      	ldr	r2, [r3, #8]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fbbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f042 0201 	orr.w	r2, r2, #1
 800fbce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f000 fba3 	bl	801031c <UART_CheckIdleState>
 800fbd6:	4603      	mov	r3, r0
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3708      	adds	r7, #8
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fbe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fbe4:	b08c      	sub	sp, #48	@ 0x30
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fbea:	2300      	movs	r3, #0
 800fbec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	689a      	ldr	r2, [r3, #8]
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	691b      	ldr	r3, [r3, #16]
 800fbf8:	431a      	orrs	r2, r3
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	695b      	ldr	r3, [r3, #20]
 800fbfe:	431a      	orrs	r2, r3
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	69db      	ldr	r3, [r3, #28]
 800fc04:	4313      	orrs	r3, r2
 800fc06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	681a      	ldr	r2, [r3, #0]
 800fc0e:	4baa      	ldr	r3, [pc, #680]	@ (800feb8 <UART_SetConfig+0x2d8>)
 800fc10:	4013      	ands	r3, r2
 800fc12:	697a      	ldr	r2, [r7, #20]
 800fc14:	6812      	ldr	r2, [r2, #0]
 800fc16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fc18:	430b      	orrs	r3, r1
 800fc1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	685b      	ldr	r3, [r3, #4]
 800fc22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	68da      	ldr	r2, [r3, #12]
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	430a      	orrs	r2, r1
 800fc30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	699b      	ldr	r3, [r3, #24]
 800fc36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	4a9f      	ldr	r2, [pc, #636]	@ (800febc <UART_SetConfig+0x2dc>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d004      	beq.n	800fc4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	6a1b      	ldr	r3, [r3, #32]
 800fc46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	689b      	ldr	r3, [r3, #8]
 800fc52:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800fc56:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800fc5a:	697a      	ldr	r2, [r7, #20]
 800fc5c:	6812      	ldr	r2, [r2, #0]
 800fc5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fc60:	430b      	orrs	r3, r1
 800fc62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc6a:	f023 010f 	bic.w	r1, r3, #15
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	430a      	orrs	r2, r1
 800fc78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	4a90      	ldr	r2, [pc, #576]	@ (800fec0 <UART_SetConfig+0x2e0>)
 800fc80:	4293      	cmp	r3, r2
 800fc82:	d125      	bne.n	800fcd0 <UART_SetConfig+0xf0>
 800fc84:	4b8f      	ldr	r3, [pc, #572]	@ (800fec4 <UART_SetConfig+0x2e4>)
 800fc86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fc8a:	f003 0303 	and.w	r3, r3, #3
 800fc8e:	2b03      	cmp	r3, #3
 800fc90:	d81a      	bhi.n	800fcc8 <UART_SetConfig+0xe8>
 800fc92:	a201      	add	r2, pc, #4	@ (adr r2, 800fc98 <UART_SetConfig+0xb8>)
 800fc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc98:	0800fca9 	.word	0x0800fca9
 800fc9c:	0800fcb9 	.word	0x0800fcb9
 800fca0:	0800fcb1 	.word	0x0800fcb1
 800fca4:	0800fcc1 	.word	0x0800fcc1
 800fca8:	2301      	movs	r3, #1
 800fcaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fcae:	e116      	b.n	800fede <UART_SetConfig+0x2fe>
 800fcb0:	2302      	movs	r3, #2
 800fcb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fcb6:	e112      	b.n	800fede <UART_SetConfig+0x2fe>
 800fcb8:	2304      	movs	r3, #4
 800fcba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fcbe:	e10e      	b.n	800fede <UART_SetConfig+0x2fe>
 800fcc0:	2308      	movs	r3, #8
 800fcc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fcc6:	e10a      	b.n	800fede <UART_SetConfig+0x2fe>
 800fcc8:	2310      	movs	r3, #16
 800fcca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fcce:	e106      	b.n	800fede <UART_SetConfig+0x2fe>
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	4a7c      	ldr	r2, [pc, #496]	@ (800fec8 <UART_SetConfig+0x2e8>)
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d138      	bne.n	800fd4c <UART_SetConfig+0x16c>
 800fcda:	4b7a      	ldr	r3, [pc, #488]	@ (800fec4 <UART_SetConfig+0x2e4>)
 800fcdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fce0:	f003 030c 	and.w	r3, r3, #12
 800fce4:	2b0c      	cmp	r3, #12
 800fce6:	d82d      	bhi.n	800fd44 <UART_SetConfig+0x164>
 800fce8:	a201      	add	r2, pc, #4	@ (adr r2, 800fcf0 <UART_SetConfig+0x110>)
 800fcea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcee:	bf00      	nop
 800fcf0:	0800fd25 	.word	0x0800fd25
 800fcf4:	0800fd45 	.word	0x0800fd45
 800fcf8:	0800fd45 	.word	0x0800fd45
 800fcfc:	0800fd45 	.word	0x0800fd45
 800fd00:	0800fd35 	.word	0x0800fd35
 800fd04:	0800fd45 	.word	0x0800fd45
 800fd08:	0800fd45 	.word	0x0800fd45
 800fd0c:	0800fd45 	.word	0x0800fd45
 800fd10:	0800fd2d 	.word	0x0800fd2d
 800fd14:	0800fd45 	.word	0x0800fd45
 800fd18:	0800fd45 	.word	0x0800fd45
 800fd1c:	0800fd45 	.word	0x0800fd45
 800fd20:	0800fd3d 	.word	0x0800fd3d
 800fd24:	2300      	movs	r3, #0
 800fd26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fd2a:	e0d8      	b.n	800fede <UART_SetConfig+0x2fe>
 800fd2c:	2302      	movs	r3, #2
 800fd2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fd32:	e0d4      	b.n	800fede <UART_SetConfig+0x2fe>
 800fd34:	2304      	movs	r3, #4
 800fd36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fd3a:	e0d0      	b.n	800fede <UART_SetConfig+0x2fe>
 800fd3c:	2308      	movs	r3, #8
 800fd3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fd42:	e0cc      	b.n	800fede <UART_SetConfig+0x2fe>
 800fd44:	2310      	movs	r3, #16
 800fd46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fd4a:	e0c8      	b.n	800fede <UART_SetConfig+0x2fe>
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4a5e      	ldr	r2, [pc, #376]	@ (800fecc <UART_SetConfig+0x2ec>)
 800fd52:	4293      	cmp	r3, r2
 800fd54:	d125      	bne.n	800fda2 <UART_SetConfig+0x1c2>
 800fd56:	4b5b      	ldr	r3, [pc, #364]	@ (800fec4 <UART_SetConfig+0x2e4>)
 800fd58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fd5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800fd60:	2b30      	cmp	r3, #48	@ 0x30
 800fd62:	d016      	beq.n	800fd92 <UART_SetConfig+0x1b2>
 800fd64:	2b30      	cmp	r3, #48	@ 0x30
 800fd66:	d818      	bhi.n	800fd9a <UART_SetConfig+0x1ba>
 800fd68:	2b20      	cmp	r3, #32
 800fd6a:	d00a      	beq.n	800fd82 <UART_SetConfig+0x1a2>
 800fd6c:	2b20      	cmp	r3, #32
 800fd6e:	d814      	bhi.n	800fd9a <UART_SetConfig+0x1ba>
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d002      	beq.n	800fd7a <UART_SetConfig+0x19a>
 800fd74:	2b10      	cmp	r3, #16
 800fd76:	d008      	beq.n	800fd8a <UART_SetConfig+0x1aa>
 800fd78:	e00f      	b.n	800fd9a <UART_SetConfig+0x1ba>
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fd80:	e0ad      	b.n	800fede <UART_SetConfig+0x2fe>
 800fd82:	2302      	movs	r3, #2
 800fd84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fd88:	e0a9      	b.n	800fede <UART_SetConfig+0x2fe>
 800fd8a:	2304      	movs	r3, #4
 800fd8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fd90:	e0a5      	b.n	800fede <UART_SetConfig+0x2fe>
 800fd92:	2308      	movs	r3, #8
 800fd94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fd98:	e0a1      	b.n	800fede <UART_SetConfig+0x2fe>
 800fd9a:	2310      	movs	r3, #16
 800fd9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fda0:	e09d      	b.n	800fede <UART_SetConfig+0x2fe>
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	4a4a      	ldr	r2, [pc, #296]	@ (800fed0 <UART_SetConfig+0x2f0>)
 800fda8:	4293      	cmp	r3, r2
 800fdaa:	d125      	bne.n	800fdf8 <UART_SetConfig+0x218>
 800fdac:	4b45      	ldr	r3, [pc, #276]	@ (800fec4 <UART_SetConfig+0x2e4>)
 800fdae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fdb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800fdb6:	2bc0      	cmp	r3, #192	@ 0xc0
 800fdb8:	d016      	beq.n	800fde8 <UART_SetConfig+0x208>
 800fdba:	2bc0      	cmp	r3, #192	@ 0xc0
 800fdbc:	d818      	bhi.n	800fdf0 <UART_SetConfig+0x210>
 800fdbe:	2b80      	cmp	r3, #128	@ 0x80
 800fdc0:	d00a      	beq.n	800fdd8 <UART_SetConfig+0x1f8>
 800fdc2:	2b80      	cmp	r3, #128	@ 0x80
 800fdc4:	d814      	bhi.n	800fdf0 <UART_SetConfig+0x210>
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d002      	beq.n	800fdd0 <UART_SetConfig+0x1f0>
 800fdca:	2b40      	cmp	r3, #64	@ 0x40
 800fdcc:	d008      	beq.n	800fde0 <UART_SetConfig+0x200>
 800fdce:	e00f      	b.n	800fdf0 <UART_SetConfig+0x210>
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fdd6:	e082      	b.n	800fede <UART_SetConfig+0x2fe>
 800fdd8:	2302      	movs	r3, #2
 800fdda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fdde:	e07e      	b.n	800fede <UART_SetConfig+0x2fe>
 800fde0:	2304      	movs	r3, #4
 800fde2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fde6:	e07a      	b.n	800fede <UART_SetConfig+0x2fe>
 800fde8:	2308      	movs	r3, #8
 800fdea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fdee:	e076      	b.n	800fede <UART_SetConfig+0x2fe>
 800fdf0:	2310      	movs	r3, #16
 800fdf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fdf6:	e072      	b.n	800fede <UART_SetConfig+0x2fe>
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4a35      	ldr	r2, [pc, #212]	@ (800fed4 <UART_SetConfig+0x2f4>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d12a      	bne.n	800fe58 <UART_SetConfig+0x278>
 800fe02:	4b30      	ldr	r3, [pc, #192]	@ (800fec4 <UART_SetConfig+0x2e4>)
 800fe04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fe0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fe10:	d01a      	beq.n	800fe48 <UART_SetConfig+0x268>
 800fe12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fe16:	d81b      	bhi.n	800fe50 <UART_SetConfig+0x270>
 800fe18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe1c:	d00c      	beq.n	800fe38 <UART_SetConfig+0x258>
 800fe1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe22:	d815      	bhi.n	800fe50 <UART_SetConfig+0x270>
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d003      	beq.n	800fe30 <UART_SetConfig+0x250>
 800fe28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe2c:	d008      	beq.n	800fe40 <UART_SetConfig+0x260>
 800fe2e:	e00f      	b.n	800fe50 <UART_SetConfig+0x270>
 800fe30:	2300      	movs	r3, #0
 800fe32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fe36:	e052      	b.n	800fede <UART_SetConfig+0x2fe>
 800fe38:	2302      	movs	r3, #2
 800fe3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fe3e:	e04e      	b.n	800fede <UART_SetConfig+0x2fe>
 800fe40:	2304      	movs	r3, #4
 800fe42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fe46:	e04a      	b.n	800fede <UART_SetConfig+0x2fe>
 800fe48:	2308      	movs	r3, #8
 800fe4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fe4e:	e046      	b.n	800fede <UART_SetConfig+0x2fe>
 800fe50:	2310      	movs	r3, #16
 800fe52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fe56:	e042      	b.n	800fede <UART_SetConfig+0x2fe>
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4a17      	ldr	r2, [pc, #92]	@ (800febc <UART_SetConfig+0x2dc>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d13a      	bne.n	800fed8 <UART_SetConfig+0x2f8>
 800fe62:	4b18      	ldr	r3, [pc, #96]	@ (800fec4 <UART_SetConfig+0x2e4>)
 800fe64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800fe6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fe70:	d01a      	beq.n	800fea8 <UART_SetConfig+0x2c8>
 800fe72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fe76:	d81b      	bhi.n	800feb0 <UART_SetConfig+0x2d0>
 800fe78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fe7c:	d00c      	beq.n	800fe98 <UART_SetConfig+0x2b8>
 800fe7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fe82:	d815      	bhi.n	800feb0 <UART_SetConfig+0x2d0>
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d003      	beq.n	800fe90 <UART_SetConfig+0x2b0>
 800fe88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fe8c:	d008      	beq.n	800fea0 <UART_SetConfig+0x2c0>
 800fe8e:	e00f      	b.n	800feb0 <UART_SetConfig+0x2d0>
 800fe90:	2300      	movs	r3, #0
 800fe92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fe96:	e022      	b.n	800fede <UART_SetConfig+0x2fe>
 800fe98:	2302      	movs	r3, #2
 800fe9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fe9e:	e01e      	b.n	800fede <UART_SetConfig+0x2fe>
 800fea0:	2304      	movs	r3, #4
 800fea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800fea6:	e01a      	b.n	800fede <UART_SetConfig+0x2fe>
 800fea8:	2308      	movs	r3, #8
 800feaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800feae:	e016      	b.n	800fede <UART_SetConfig+0x2fe>
 800feb0:	2310      	movs	r3, #16
 800feb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800feb6:	e012      	b.n	800fede <UART_SetConfig+0x2fe>
 800feb8:	cfff69f3 	.word	0xcfff69f3
 800febc:	40008000 	.word	0x40008000
 800fec0:	40013800 	.word	0x40013800
 800fec4:	40021000 	.word	0x40021000
 800fec8:	40004400 	.word	0x40004400
 800fecc:	40004800 	.word	0x40004800
 800fed0:	40004c00 	.word	0x40004c00
 800fed4:	40005000 	.word	0x40005000
 800fed8:	2310      	movs	r3, #16
 800feda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	4aae      	ldr	r2, [pc, #696]	@ (801019c <UART_SetConfig+0x5bc>)
 800fee4:	4293      	cmp	r3, r2
 800fee6:	f040 8097 	bne.w	8010018 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800feea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800feee:	2b08      	cmp	r3, #8
 800fef0:	d823      	bhi.n	800ff3a <UART_SetConfig+0x35a>
 800fef2:	a201      	add	r2, pc, #4	@ (adr r2, 800fef8 <UART_SetConfig+0x318>)
 800fef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fef8:	0800ff1d 	.word	0x0800ff1d
 800fefc:	0800ff3b 	.word	0x0800ff3b
 800ff00:	0800ff25 	.word	0x0800ff25
 800ff04:	0800ff3b 	.word	0x0800ff3b
 800ff08:	0800ff2b 	.word	0x0800ff2b
 800ff0c:	0800ff3b 	.word	0x0800ff3b
 800ff10:	0800ff3b 	.word	0x0800ff3b
 800ff14:	0800ff3b 	.word	0x0800ff3b
 800ff18:	0800ff33 	.word	0x0800ff33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff1c:	f7fd fd46 	bl	800d9ac <HAL_RCC_GetPCLK1Freq>
 800ff20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ff22:	e010      	b.n	800ff46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ff24:	4b9e      	ldr	r3, [pc, #632]	@ (80101a0 <UART_SetConfig+0x5c0>)
 800ff26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ff28:	e00d      	b.n	800ff46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ff2a:	f7fd fcd1 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 800ff2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ff30:	e009      	b.n	800ff46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ff38:	e005      	b.n	800ff46 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ff3e:	2301      	movs	r3, #1
 800ff40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ff44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ff46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	f000 8130 	beq.w	80101ae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff52:	4a94      	ldr	r2, [pc, #592]	@ (80101a4 <UART_SetConfig+0x5c4>)
 800ff54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff58:	461a      	mov	r2, r3
 800ff5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	685a      	ldr	r2, [r3, #4]
 800ff66:	4613      	mov	r3, r2
 800ff68:	005b      	lsls	r3, r3, #1
 800ff6a:	4413      	add	r3, r2
 800ff6c:	69ba      	ldr	r2, [r7, #24]
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d305      	bcc.n	800ff7e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff78:	69ba      	ldr	r2, [r7, #24]
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d903      	bls.n	800ff86 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ff7e:	2301      	movs	r3, #1
 800ff80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ff84:	e113      	b.n	80101ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff88:	2200      	movs	r2, #0
 800ff8a:	60bb      	str	r3, [r7, #8]
 800ff8c:	60fa      	str	r2, [r7, #12]
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff92:	4a84      	ldr	r2, [pc, #528]	@ (80101a4 <UART_SetConfig+0x5c4>)
 800ff94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff98:	b29b      	uxth	r3, r3
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	603b      	str	r3, [r7, #0]
 800ff9e:	607a      	str	r2, [r7, #4]
 800ffa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ffa8:	f7f5 ffac 	bl	8005f04 <__aeabi_uldivmod>
 800ffac:	4602      	mov	r2, r0
 800ffae:	460b      	mov	r3, r1
 800ffb0:	4610      	mov	r0, r2
 800ffb2:	4619      	mov	r1, r3
 800ffb4:	f04f 0200 	mov.w	r2, #0
 800ffb8:	f04f 0300 	mov.w	r3, #0
 800ffbc:	020b      	lsls	r3, r1, #8
 800ffbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ffc2:	0202      	lsls	r2, r0, #8
 800ffc4:	6979      	ldr	r1, [r7, #20]
 800ffc6:	6849      	ldr	r1, [r1, #4]
 800ffc8:	0849      	lsrs	r1, r1, #1
 800ffca:	2000      	movs	r0, #0
 800ffcc:	460c      	mov	r4, r1
 800ffce:	4605      	mov	r5, r0
 800ffd0:	eb12 0804 	adds.w	r8, r2, r4
 800ffd4:	eb43 0905 	adc.w	r9, r3, r5
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	685b      	ldr	r3, [r3, #4]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	469a      	mov	sl, r3
 800ffe0:	4693      	mov	fp, r2
 800ffe2:	4652      	mov	r2, sl
 800ffe4:	465b      	mov	r3, fp
 800ffe6:	4640      	mov	r0, r8
 800ffe8:	4649      	mov	r1, r9
 800ffea:	f7f5 ff8b 	bl	8005f04 <__aeabi_uldivmod>
 800ffee:	4602      	mov	r2, r0
 800fff0:	460b      	mov	r3, r1
 800fff2:	4613      	mov	r3, r2
 800fff4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fff6:	6a3b      	ldr	r3, [r7, #32]
 800fff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fffc:	d308      	bcc.n	8010010 <UART_SetConfig+0x430>
 800fffe:	6a3b      	ldr	r3, [r7, #32]
 8010000:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010004:	d204      	bcs.n	8010010 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	6a3a      	ldr	r2, [r7, #32]
 801000c:	60da      	str	r2, [r3, #12]
 801000e:	e0ce      	b.n	80101ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8010010:	2301      	movs	r3, #1
 8010012:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010016:	e0ca      	b.n	80101ae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	69db      	ldr	r3, [r3, #28]
 801001c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010020:	d166      	bne.n	80100f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8010022:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010026:	2b08      	cmp	r3, #8
 8010028:	d827      	bhi.n	801007a <UART_SetConfig+0x49a>
 801002a:	a201      	add	r2, pc, #4	@ (adr r2, 8010030 <UART_SetConfig+0x450>)
 801002c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010030:	08010055 	.word	0x08010055
 8010034:	0801005d 	.word	0x0801005d
 8010038:	08010065 	.word	0x08010065
 801003c:	0801007b 	.word	0x0801007b
 8010040:	0801006b 	.word	0x0801006b
 8010044:	0801007b 	.word	0x0801007b
 8010048:	0801007b 	.word	0x0801007b
 801004c:	0801007b 	.word	0x0801007b
 8010050:	08010073 	.word	0x08010073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010054:	f7fd fcaa 	bl	800d9ac <HAL_RCC_GetPCLK1Freq>
 8010058:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801005a:	e014      	b.n	8010086 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801005c:	f7fd fcbc 	bl	800d9d8 <HAL_RCC_GetPCLK2Freq>
 8010060:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010062:	e010      	b.n	8010086 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010064:	4b4e      	ldr	r3, [pc, #312]	@ (80101a0 <UART_SetConfig+0x5c0>)
 8010066:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010068:	e00d      	b.n	8010086 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801006a:	f7fd fc31 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 801006e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010070:	e009      	b.n	8010086 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010076:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010078:	e005      	b.n	8010086 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801007a:	2300      	movs	r3, #0
 801007c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801007e:	2301      	movs	r3, #1
 8010080:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010088:	2b00      	cmp	r3, #0
 801008a:	f000 8090 	beq.w	80101ae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010092:	4a44      	ldr	r2, [pc, #272]	@ (80101a4 <UART_SetConfig+0x5c4>)
 8010094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010098:	461a      	mov	r2, r3
 801009a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801009c:	fbb3 f3f2 	udiv	r3, r3, r2
 80100a0:	005a      	lsls	r2, r3, #1
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	085b      	lsrs	r3, r3, #1
 80100a8:	441a      	add	r2, r3
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80100b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80100b4:	6a3b      	ldr	r3, [r7, #32]
 80100b6:	2b0f      	cmp	r3, #15
 80100b8:	d916      	bls.n	80100e8 <UART_SetConfig+0x508>
 80100ba:	6a3b      	ldr	r3, [r7, #32]
 80100bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80100c0:	d212      	bcs.n	80100e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80100c2:	6a3b      	ldr	r3, [r7, #32]
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	f023 030f 	bic.w	r3, r3, #15
 80100ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80100cc:	6a3b      	ldr	r3, [r7, #32]
 80100ce:	085b      	lsrs	r3, r3, #1
 80100d0:	b29b      	uxth	r3, r3
 80100d2:	f003 0307 	and.w	r3, r3, #7
 80100d6:	b29a      	uxth	r2, r3
 80100d8:	8bfb      	ldrh	r3, [r7, #30]
 80100da:	4313      	orrs	r3, r2
 80100dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	8bfa      	ldrh	r2, [r7, #30]
 80100e4:	60da      	str	r2, [r3, #12]
 80100e6:	e062      	b.n	80101ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80100e8:	2301      	movs	r3, #1
 80100ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80100ee:	e05e      	b.n	80101ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80100f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80100f4:	2b08      	cmp	r3, #8
 80100f6:	d828      	bhi.n	801014a <UART_SetConfig+0x56a>
 80100f8:	a201      	add	r2, pc, #4	@ (adr r2, 8010100 <UART_SetConfig+0x520>)
 80100fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100fe:	bf00      	nop
 8010100:	08010125 	.word	0x08010125
 8010104:	0801012d 	.word	0x0801012d
 8010108:	08010135 	.word	0x08010135
 801010c:	0801014b 	.word	0x0801014b
 8010110:	0801013b 	.word	0x0801013b
 8010114:	0801014b 	.word	0x0801014b
 8010118:	0801014b 	.word	0x0801014b
 801011c:	0801014b 	.word	0x0801014b
 8010120:	08010143 	.word	0x08010143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010124:	f7fd fc42 	bl	800d9ac <HAL_RCC_GetPCLK1Freq>
 8010128:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801012a:	e014      	b.n	8010156 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801012c:	f7fd fc54 	bl	800d9d8 <HAL_RCC_GetPCLK2Freq>
 8010130:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010132:	e010      	b.n	8010156 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010134:	4b1a      	ldr	r3, [pc, #104]	@ (80101a0 <UART_SetConfig+0x5c0>)
 8010136:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010138:	e00d      	b.n	8010156 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801013a:	f7fd fbc9 	bl	800d8d0 <HAL_RCC_GetSysClockFreq>
 801013e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010140:	e009      	b.n	8010156 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010146:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010148:	e005      	b.n	8010156 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801014a:	2300      	movs	r3, #0
 801014c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801014e:	2301      	movs	r3, #1
 8010150:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010154:	bf00      	nop
    }

    if (pclk != 0U)
 8010156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010158:	2b00      	cmp	r3, #0
 801015a:	d028      	beq.n	80101ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010160:	4a10      	ldr	r2, [pc, #64]	@ (80101a4 <UART_SetConfig+0x5c4>)
 8010162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010166:	461a      	mov	r2, r3
 8010168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801016a:	fbb3 f2f2 	udiv	r2, r3, r2
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	085b      	lsrs	r3, r3, #1
 8010174:	441a      	add	r2, r3
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	685b      	ldr	r3, [r3, #4]
 801017a:	fbb2 f3f3 	udiv	r3, r2, r3
 801017e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010180:	6a3b      	ldr	r3, [r7, #32]
 8010182:	2b0f      	cmp	r3, #15
 8010184:	d910      	bls.n	80101a8 <UART_SetConfig+0x5c8>
 8010186:	6a3b      	ldr	r3, [r7, #32]
 8010188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801018c:	d20c      	bcs.n	80101a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801018e:	6a3b      	ldr	r3, [r7, #32]
 8010190:	b29a      	uxth	r2, r3
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	60da      	str	r2, [r3, #12]
 8010198:	e009      	b.n	80101ae <UART_SetConfig+0x5ce>
 801019a:	bf00      	nop
 801019c:	40008000 	.word	0x40008000
 80101a0:	00f42400 	.word	0x00f42400
 80101a4:	0801aa8c 	.word	0x0801aa8c
      }
      else
      {
        ret = HAL_ERROR;
 80101a8:	2301      	movs	r3, #1
 80101aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	2201      	movs	r2, #1
 80101b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	2201      	movs	r2, #1
 80101ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	2200      	movs	r2, #0
 80101c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	2200      	movs	r2, #0
 80101c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80101ca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3730      	adds	r7, #48	@ 0x30
 80101d2:	46bd      	mov	sp, r7
 80101d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080101d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80101d8:	b480      	push	{r7}
 80101da:	b083      	sub	sp, #12
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101e4:	f003 0308 	and.w	r3, r3, #8
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d00a      	beq.n	8010202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	430a      	orrs	r2, r1
 8010200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010206:	f003 0301 	and.w	r3, r3, #1
 801020a:	2b00      	cmp	r3, #0
 801020c:	d00a      	beq.n	8010224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	685b      	ldr	r3, [r3, #4]
 8010214:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	430a      	orrs	r2, r1
 8010222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010228:	f003 0302 	and.w	r3, r3, #2
 801022c:	2b00      	cmp	r3, #0
 801022e:	d00a      	beq.n	8010246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	430a      	orrs	r2, r1
 8010244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801024a:	f003 0304 	and.w	r3, r3, #4
 801024e:	2b00      	cmp	r3, #0
 8010250:	d00a      	beq.n	8010268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	430a      	orrs	r2, r1
 8010266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801026c:	f003 0310 	and.w	r3, r3, #16
 8010270:	2b00      	cmp	r3, #0
 8010272:	d00a      	beq.n	801028a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	689b      	ldr	r3, [r3, #8]
 801027a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	430a      	orrs	r2, r1
 8010288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801028e:	f003 0320 	and.w	r3, r3, #32
 8010292:	2b00      	cmp	r3, #0
 8010294:	d00a      	beq.n	80102ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	689b      	ldr	r3, [r3, #8]
 801029c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	430a      	orrs	r2, r1
 80102aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d01a      	beq.n	80102ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	430a      	orrs	r2, r1
 80102cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80102d6:	d10a      	bne.n	80102ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	430a      	orrs	r2, r1
 80102ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d00a      	beq.n	8010310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	430a      	orrs	r2, r1
 801030e:	605a      	str	r2, [r3, #4]
  }
}
 8010310:	bf00      	nop
 8010312:	370c      	adds	r7, #12
 8010314:	46bd      	mov	sp, r7
 8010316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031a:	4770      	bx	lr

0801031c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b098      	sub	sp, #96	@ 0x60
 8010320:	af02      	add	r7, sp, #8
 8010322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2200      	movs	r2, #0
 8010328:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801032c:	f7f8 fa16 	bl	800875c <HAL_GetTick>
 8010330:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f003 0308 	and.w	r3, r3, #8
 801033c:	2b08      	cmp	r3, #8
 801033e:	d12f      	bne.n	80103a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010340:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010344:	9300      	str	r3, [sp, #0]
 8010346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010348:	2200      	movs	r2, #0
 801034a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f000 f88e 	bl	8010470 <UART_WaitOnFlagUntilTimeout>
 8010354:	4603      	mov	r3, r0
 8010356:	2b00      	cmp	r3, #0
 8010358:	d022      	beq.n	80103a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010362:	e853 3f00 	ldrex	r3, [r3]
 8010366:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801036a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801036e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	461a      	mov	r2, r3
 8010376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010378:	647b      	str	r3, [r7, #68]	@ 0x44
 801037a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801037c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801037e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010380:	e841 2300 	strex	r3, r2, [r1]
 8010384:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010388:	2b00      	cmp	r3, #0
 801038a:	d1e6      	bne.n	801035a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2220      	movs	r2, #32
 8010390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2200      	movs	r2, #0
 8010398:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801039c:	2303      	movs	r3, #3
 801039e:	e063      	b.n	8010468 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	f003 0304 	and.w	r3, r3, #4
 80103aa:	2b04      	cmp	r3, #4
 80103ac:	d149      	bne.n	8010442 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80103ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80103b2:	9300      	str	r3, [sp, #0]
 80103b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103b6:	2200      	movs	r2, #0
 80103b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f000 f857 	bl	8010470 <UART_WaitOnFlagUntilTimeout>
 80103c2:	4603      	mov	r3, r0
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d03c      	beq.n	8010442 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103d0:	e853 3f00 	ldrex	r3, [r3]
 80103d4:	623b      	str	r3, [r7, #32]
   return(result);
 80103d6:	6a3b      	ldr	r3, [r7, #32]
 80103d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80103dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	461a      	mov	r2, r3
 80103e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80103e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80103e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80103ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103ee:	e841 2300 	strex	r3, r2, [r1]
 80103f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80103f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d1e6      	bne.n	80103c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	3308      	adds	r3, #8
 8010400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	e853 3f00 	ldrex	r3, [r3]
 8010408:	60fb      	str	r3, [r7, #12]
   return(result);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	f023 0301 	bic.w	r3, r3, #1
 8010410:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	3308      	adds	r3, #8
 8010418:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801041a:	61fa      	str	r2, [r7, #28]
 801041c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801041e:	69b9      	ldr	r1, [r7, #24]
 8010420:	69fa      	ldr	r2, [r7, #28]
 8010422:	e841 2300 	strex	r3, r2, [r1]
 8010426:	617b      	str	r3, [r7, #20]
   return(result);
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d1e5      	bne.n	80103fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2220      	movs	r2, #32
 8010432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2200      	movs	r2, #0
 801043a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801043e:	2303      	movs	r3, #3
 8010440:	e012      	b.n	8010468 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2220      	movs	r2, #32
 8010446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2220      	movs	r2, #32
 801044e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2200      	movs	r2, #0
 8010456:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2200      	movs	r2, #0
 801045c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2200      	movs	r2, #0
 8010462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010466:	2300      	movs	r3, #0
}
 8010468:	4618      	mov	r0, r3
 801046a:	3758      	adds	r7, #88	@ 0x58
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	603b      	str	r3, [r7, #0]
 801047c:	4613      	mov	r3, r2
 801047e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010480:	e04f      	b.n	8010522 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010482:	69bb      	ldr	r3, [r7, #24]
 8010484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010488:	d04b      	beq.n	8010522 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801048a:	f7f8 f967 	bl	800875c <HAL_GetTick>
 801048e:	4602      	mov	r2, r0
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	1ad3      	subs	r3, r2, r3
 8010494:	69ba      	ldr	r2, [r7, #24]
 8010496:	429a      	cmp	r2, r3
 8010498:	d302      	bcc.n	80104a0 <UART_WaitOnFlagUntilTimeout+0x30>
 801049a:	69bb      	ldr	r3, [r7, #24]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d101      	bne.n	80104a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80104a0:	2303      	movs	r3, #3
 80104a2:	e04e      	b.n	8010542 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	f003 0304 	and.w	r3, r3, #4
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d037      	beq.n	8010522 <UART_WaitOnFlagUntilTimeout+0xb2>
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	2b80      	cmp	r3, #128	@ 0x80
 80104b6:	d034      	beq.n	8010522 <UART_WaitOnFlagUntilTimeout+0xb2>
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	2b40      	cmp	r3, #64	@ 0x40
 80104bc:	d031      	beq.n	8010522 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	69db      	ldr	r3, [r3, #28]
 80104c4:	f003 0308 	and.w	r3, r3, #8
 80104c8:	2b08      	cmp	r3, #8
 80104ca:	d110      	bne.n	80104ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	2208      	movs	r2, #8
 80104d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80104d4:	68f8      	ldr	r0, [r7, #12]
 80104d6:	f000 f838 	bl	801054a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	2208      	movs	r2, #8
 80104de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2200      	movs	r2, #0
 80104e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80104ea:	2301      	movs	r3, #1
 80104ec:	e029      	b.n	8010542 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	69db      	ldr	r3, [r3, #28]
 80104f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80104f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80104fc:	d111      	bne.n	8010522 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010506:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010508:	68f8      	ldr	r0, [r7, #12]
 801050a:	f000 f81e 	bl	801054a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2220      	movs	r2, #32
 8010512:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	2200      	movs	r2, #0
 801051a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801051e:	2303      	movs	r3, #3
 8010520:	e00f      	b.n	8010542 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	69da      	ldr	r2, [r3, #28]
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	4013      	ands	r3, r2
 801052c:	68ba      	ldr	r2, [r7, #8]
 801052e:	429a      	cmp	r2, r3
 8010530:	bf0c      	ite	eq
 8010532:	2301      	moveq	r3, #1
 8010534:	2300      	movne	r3, #0
 8010536:	b2db      	uxtb	r3, r3
 8010538:	461a      	mov	r2, r3
 801053a:	79fb      	ldrb	r3, [r7, #7]
 801053c:	429a      	cmp	r2, r3
 801053e:	d0a0      	beq.n	8010482 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010540:	2300      	movs	r3, #0
}
 8010542:	4618      	mov	r0, r3
 8010544:	3710      	adds	r7, #16
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}

0801054a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801054a:	b480      	push	{r7}
 801054c:	b095      	sub	sp, #84	@ 0x54
 801054e:	af00      	add	r7, sp, #0
 8010550:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801055a:	e853 3f00 	ldrex	r3, [r3]
 801055e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010562:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010566:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	461a      	mov	r2, r3
 801056e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010570:	643b      	str	r3, [r7, #64]	@ 0x40
 8010572:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010574:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010576:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010578:	e841 2300 	strex	r3, r2, [r1]
 801057c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801057e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010580:	2b00      	cmp	r3, #0
 8010582:	d1e6      	bne.n	8010552 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	3308      	adds	r3, #8
 801058a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801058c:	6a3b      	ldr	r3, [r7, #32]
 801058e:	e853 3f00 	ldrex	r3, [r3]
 8010592:	61fb      	str	r3, [r7, #28]
   return(result);
 8010594:	69fb      	ldr	r3, [r7, #28]
 8010596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801059a:	f023 0301 	bic.w	r3, r3, #1
 801059e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	3308      	adds	r3, #8
 80105a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80105a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80105aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80105ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80105b0:	e841 2300 	strex	r3, r2, [r1]
 80105b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80105b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d1e3      	bne.n	8010584 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105c0:	2b01      	cmp	r3, #1
 80105c2:	d118      	bne.n	80105f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	e853 3f00 	ldrex	r3, [r3]
 80105d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	f023 0310 	bic.w	r3, r3, #16
 80105d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	461a      	mov	r2, r3
 80105e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80105e2:	61bb      	str	r3, [r7, #24]
 80105e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e6:	6979      	ldr	r1, [r7, #20]
 80105e8:	69ba      	ldr	r2, [r7, #24]
 80105ea:	e841 2300 	strex	r3, r2, [r1]
 80105ee:	613b      	str	r3, [r7, #16]
   return(result);
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1e6      	bne.n	80105c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2220      	movs	r2, #32
 80105fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2200      	movs	r2, #0
 8010602:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2200      	movs	r2, #0
 8010608:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801060a:	bf00      	nop
 801060c:	3754      	adds	r7, #84	@ 0x54
 801060e:	46bd      	mov	sp, r7
 8010610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010614:	4770      	bx	lr

08010616 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010616:	b480      	push	{r7}
 8010618:	b085      	sub	sp, #20
 801061a:	af00      	add	r7, sp, #0
 801061c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010624:	2b01      	cmp	r3, #1
 8010626:	d101      	bne.n	801062c <HAL_UARTEx_DisableFifoMode+0x16>
 8010628:	2302      	movs	r3, #2
 801062a:	e027      	b.n	801067c <HAL_UARTEx_DisableFifoMode+0x66>
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2201      	movs	r2, #1
 8010630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2224      	movs	r2, #36	@ 0x24
 8010638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	f022 0201 	bic.w	r2, r2, #1
 8010652:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801065a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2200      	movs	r2, #0
 8010660:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	68fa      	ldr	r2, [r7, #12]
 8010668:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2220      	movs	r2, #32
 801066e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2200      	movs	r2, #0
 8010676:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801067a:	2300      	movs	r3, #0
}
 801067c:	4618      	mov	r0, r3
 801067e:	3714      	adds	r7, #20
 8010680:	46bd      	mov	sp, r7
 8010682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010686:	4770      	bx	lr

08010688 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010698:	2b01      	cmp	r3, #1
 801069a:	d101      	bne.n	80106a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801069c:	2302      	movs	r3, #2
 801069e:	e02d      	b.n	80106fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2201      	movs	r2, #1
 80106a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2224      	movs	r2, #36	@ 0x24
 80106ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	681a      	ldr	r2, [r3, #0]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	f022 0201 	bic.w	r2, r2, #1
 80106c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	689b      	ldr	r3, [r3, #8]
 80106ce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	683a      	ldr	r2, [r7, #0]
 80106d8:	430a      	orrs	r2, r1
 80106da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f000 f84f 	bl	8010780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	68fa      	ldr	r2, [r7, #12]
 80106e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2220      	movs	r2, #32
 80106ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2200      	movs	r2, #0
 80106f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80106fa:	2300      	movs	r3, #0
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3710      	adds	r7, #16
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}

08010704 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b084      	sub	sp, #16
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010714:	2b01      	cmp	r3, #1
 8010716:	d101      	bne.n	801071c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010718:	2302      	movs	r3, #2
 801071a:	e02d      	b.n	8010778 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2201      	movs	r2, #1
 8010720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2224      	movs	r2, #36	@ 0x24
 8010728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	681a      	ldr	r2, [r3, #0]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	f022 0201 	bic.w	r2, r2, #1
 8010742:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	689b      	ldr	r3, [r3, #8]
 801074a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	683a      	ldr	r2, [r7, #0]
 8010754:	430a      	orrs	r2, r1
 8010756:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f000 f811 	bl	8010780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	68fa      	ldr	r2, [r7, #12]
 8010764:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2220      	movs	r2, #32
 801076a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2200      	movs	r2, #0
 8010772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010776:	2300      	movs	r3, #0
}
 8010778:	4618      	mov	r0, r3
 801077a:	3710      	adds	r7, #16
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}

08010780 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010780:	b480      	push	{r7}
 8010782:	b085      	sub	sp, #20
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801078c:	2b00      	cmp	r3, #0
 801078e:	d108      	bne.n	80107a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2201      	movs	r2, #1
 8010794:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2201      	movs	r2, #1
 801079c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80107a0:	e031      	b.n	8010806 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80107a2:	2308      	movs	r3, #8
 80107a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80107a6:	2308      	movs	r3, #8
 80107a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	689b      	ldr	r3, [r3, #8]
 80107b0:	0e5b      	lsrs	r3, r3, #25
 80107b2:	b2db      	uxtb	r3, r3
 80107b4:	f003 0307 	and.w	r3, r3, #7
 80107b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	689b      	ldr	r3, [r3, #8]
 80107c0:	0f5b      	lsrs	r3, r3, #29
 80107c2:	b2db      	uxtb	r3, r3
 80107c4:	f003 0307 	and.w	r3, r3, #7
 80107c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80107ca:	7bbb      	ldrb	r3, [r7, #14]
 80107cc:	7b3a      	ldrb	r2, [r7, #12]
 80107ce:	4911      	ldr	r1, [pc, #68]	@ (8010814 <UARTEx_SetNbDataToProcess+0x94>)
 80107d0:	5c8a      	ldrb	r2, [r1, r2]
 80107d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80107d6:	7b3a      	ldrb	r2, [r7, #12]
 80107d8:	490f      	ldr	r1, [pc, #60]	@ (8010818 <UARTEx_SetNbDataToProcess+0x98>)
 80107da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80107dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80107e0:	b29a      	uxth	r2, r3
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80107e8:	7bfb      	ldrb	r3, [r7, #15]
 80107ea:	7b7a      	ldrb	r2, [r7, #13]
 80107ec:	4909      	ldr	r1, [pc, #36]	@ (8010814 <UARTEx_SetNbDataToProcess+0x94>)
 80107ee:	5c8a      	ldrb	r2, [r1, r2]
 80107f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80107f4:	7b7a      	ldrb	r2, [r7, #13]
 80107f6:	4908      	ldr	r1, [pc, #32]	@ (8010818 <UARTEx_SetNbDataToProcess+0x98>)
 80107f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80107fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80107fe:	b29a      	uxth	r2, r3
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010806:	bf00      	nop
 8010808:	3714      	adds	r7, #20
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr
 8010812:	bf00      	nop
 8010814:	0801aaa4 	.word	0x0801aaa4
 8010818:	0801aaac 	.word	0x0801aaac

0801081c <LL_DMA_ConfigTransfer>:
{
 801081c:	b480      	push	{r7}
 801081e:	b087      	sub	sp, #28
 8010820:	af00      	add	r7, sp, #0
 8010822:	60f8      	str	r0, [r7, #12]
 8010824:	60b9      	str	r1, [r7, #8]
 8010826:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 801082c:	4a0e      	ldr	r2, [pc, #56]	@ (8010868 <LL_DMA_ConfigTransfer+0x4c>)
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	4413      	add	r3, r2
 8010832:	781b      	ldrb	r3, [r3, #0]
 8010834:	461a      	mov	r2, r3
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	4413      	add	r3, r2
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8010840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010844:	4908      	ldr	r1, [pc, #32]	@ (8010868 <LL_DMA_ConfigTransfer+0x4c>)
 8010846:	68ba      	ldr	r2, [r7, #8]
 8010848:	440a      	add	r2, r1
 801084a:	7812      	ldrb	r2, [r2, #0]
 801084c:	4611      	mov	r1, r2
 801084e:	697a      	ldr	r2, [r7, #20]
 8010850:	440a      	add	r2, r1
 8010852:	4611      	mov	r1, r2
 8010854:	687a      	ldr	r2, [r7, #4]
 8010856:	4313      	orrs	r3, r2
 8010858:	600b      	str	r3, [r1, #0]
}
 801085a:	bf00      	nop
 801085c:	371c      	adds	r7, #28
 801085e:	46bd      	mov	sp, r7
 8010860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010864:	4770      	bx	lr
 8010866:	bf00      	nop
 8010868:	0801aab4 	.word	0x0801aab4

0801086c <LL_DMA_SetDataLength>:
{
 801086c:	b480      	push	{r7}
 801086e:	b087      	sub	sp, #28
 8010870:	af00      	add	r7, sp, #0
 8010872:	60f8      	str	r0, [r7, #12]
 8010874:	60b9      	str	r1, [r7, #8]
 8010876:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 801087c:	4a0d      	ldr	r2, [pc, #52]	@ (80108b4 <LL_DMA_SetDataLength+0x48>)
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	4413      	add	r3, r2
 8010882:	781b      	ldrb	r3, [r3, #0]
 8010884:	461a      	mov	r2, r3
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	4413      	add	r3, r2
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	0c1b      	lsrs	r3, r3, #16
 801088e:	041b      	lsls	r3, r3, #16
 8010890:	4908      	ldr	r1, [pc, #32]	@ (80108b4 <LL_DMA_SetDataLength+0x48>)
 8010892:	68ba      	ldr	r2, [r7, #8]
 8010894:	440a      	add	r2, r1
 8010896:	7812      	ldrb	r2, [r2, #0]
 8010898:	4611      	mov	r1, r2
 801089a:	697a      	ldr	r2, [r7, #20]
 801089c:	440a      	add	r2, r1
 801089e:	4611      	mov	r1, r2
 80108a0:	687a      	ldr	r2, [r7, #4]
 80108a2:	4313      	orrs	r3, r2
 80108a4:	604b      	str	r3, [r1, #4]
}
 80108a6:	bf00      	nop
 80108a8:	371c      	adds	r7, #28
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr
 80108b2:	bf00      	nop
 80108b4:	0801aab4 	.word	0x0801aab4

080108b8 <LL_DMA_SetMemoryAddress>:
{
 80108b8:	b480      	push	{r7}
 80108ba:	b087      	sub	sp, #28
 80108bc:	af00      	add	r7, sp, #0
 80108be:	60f8      	str	r0, [r7, #12]
 80108c0:	60b9      	str	r1, [r7, #8]
 80108c2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80108c8:	4a07      	ldr	r2, [pc, #28]	@ (80108e8 <LL_DMA_SetMemoryAddress+0x30>)
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	4413      	add	r3, r2
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	461a      	mov	r2, r3
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	4413      	add	r3, r2
 80108d6:	461a      	mov	r2, r3
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	60d3      	str	r3, [r2, #12]
}
 80108dc:	bf00      	nop
 80108de:	371c      	adds	r7, #28
 80108e0:	46bd      	mov	sp, r7
 80108e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e6:	4770      	bx	lr
 80108e8:	0801aab4 	.word	0x0801aab4

080108ec <LL_DMA_SetPeriphAddress>:
{
 80108ec:	b480      	push	{r7}
 80108ee:	b087      	sub	sp, #28
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 80108fc:	4a07      	ldr	r2, [pc, #28]	@ (801091c <LL_DMA_SetPeriphAddress+0x30>)
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	4413      	add	r3, r2
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	461a      	mov	r2, r3
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	4413      	add	r3, r2
 801090a:	461a      	mov	r2, r3
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6093      	str	r3, [r2, #8]
}
 8010910:	bf00      	nop
 8010912:	371c      	adds	r7, #28
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr
 801091c:	0801aab4 	.word	0x0801aab4

08010920 <LL_DMA_SetPeriphRequest>:
{
 8010920:	b480      	push	{r7}
 8010922:	b087      	sub	sp, #28
 8010924:	af00      	add	r7, sp, #0
 8010926:	60f8      	str	r0, [r7, #12]
 8010928:	60b9      	str	r1, [r7, #8]
 801092a:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	0a9b      	lsrs	r3, r3, #10
 8010930:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8010934:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8010938:	00db      	lsls	r3, r3, #3
 801093a:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 801093c:	68ba      	ldr	r2, [r7, #8]
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	4413      	add	r3, r2
 8010942:	009b      	lsls	r3, r3, #2
 8010944:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010948:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010952:	68ba      	ldr	r2, [r7, #8]
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	4413      	add	r3, r2
 8010958:	009b      	lsls	r3, r3, #2
 801095a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801095e:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	430a      	orrs	r2, r1
 8010966:	601a      	str	r2, [r3, #0]
}
 8010968:	bf00      	nop
 801096a:	371c      	adds	r7, #28
 801096c:	46bd      	mov	sp, r7
 801096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010972:	4770      	bx	lr

08010974 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8010988:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 801098e:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8010994:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 801099a:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80109a0:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80109a6:	4313      	orrs	r3, r2
 80109a8:	461a      	mov	r2, r3
 80109aa:	68b9      	ldr	r1, [r7, #8]
 80109ac:	68f8      	ldr	r0, [r7, #12]
 80109ae:	f7ff ff35 	bl	801081c <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	461a      	mov	r2, r3
 80109b8:	68b9      	ldr	r1, [r7, #8]
 80109ba:	68f8      	ldr	r0, [r7, #12]
 80109bc:	f7ff ff7c 	bl	80108b8 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	461a      	mov	r2, r3
 80109c6:	68b9      	ldr	r1, [r7, #8]
 80109c8:	68f8      	ldr	r0, [r7, #12]
 80109ca:	f7ff ff8f 	bl	80108ec <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6a1b      	ldr	r3, [r3, #32]
 80109d2:	461a      	mov	r2, r3
 80109d4:	68b9      	ldr	r1, [r7, #8]
 80109d6:	68f8      	ldr	r0, [r7, #12]
 80109d8:	f7ff ff48 	bl	801086c <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109e0:	461a      	mov	r2, r3
 80109e2:	68b9      	ldr	r1, [r7, #8]
 80109e4:	68f8      	ldr	r0, [r7, #12]
 80109e6:	f7ff ff9b 	bl	8010920 <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 80109ea:	2300      	movs	r3, #0
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3710      	adds	r7, #16
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}

080109f4 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 80109f4:	b480      	push	{r7}
 80109f6:	b083      	sub	sp, #12
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = (uint32_t)0x00000000U;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2200      	movs	r2, #0
 8010a00:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = (uint32_t)0x00000000U;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2200      	movs	r2, #0
 8010a06:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2200      	movs	r2, #0
 8010a12:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2200      	movs	r2, #0
 8010a18:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2200      	movs	r2, #0
 8010a24:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = (uint32_t)0x00000000U;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2200      	movs	r2, #0
 8010a30:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2200      	movs	r2, #0
 8010a36:	625a      	str	r2, [r3, #36]	@ 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8010a3e:	bf00      	nop
 8010a40:	370c      	adds	r7, #12
 8010a42:	46bd      	mov	sp, r7
 8010a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a48:	4770      	bx	lr

08010a4a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8010a4a:	b480      	push	{r7}
 8010a4c:	b08b      	sub	sp, #44	@ 0x2c
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	60f8      	str	r0, [r7, #12]
 8010a52:	60b9      	str	r1, [r7, #8]
 8010a54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	fa93 f3a3 	rbit	r3, r3
 8010a64:	613b      	str	r3, [r7, #16]
  return result;
 8010a66:	693b      	ldr	r3, [r7, #16]
 8010a68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d101      	bne.n	8010a74 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8010a70:	2320      	movs	r3, #32
 8010a72:	e003      	b.n	8010a7c <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8010a74:	69bb      	ldr	r3, [r7, #24]
 8010a76:	fab3 f383 	clz	r3, r3
 8010a7a:	b2db      	uxtb	r3, r3
 8010a7c:	005b      	lsls	r3, r3, #1
 8010a7e:	2103      	movs	r1, #3
 8010a80:	fa01 f303 	lsl.w	r3, r1, r3
 8010a84:	43db      	mvns	r3, r3
 8010a86:	401a      	ands	r2, r3
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010a8c:	6a3b      	ldr	r3, [r7, #32]
 8010a8e:	fa93 f3a3 	rbit	r3, r3
 8010a92:	61fb      	str	r3, [r7, #28]
  return result;
 8010a94:	69fb      	ldr	r3, [r7, #28]
 8010a96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8010a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d101      	bne.n	8010aa2 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8010a9e:	2320      	movs	r3, #32
 8010aa0:	e003      	b.n	8010aaa <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8010aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aa4:	fab3 f383 	clz	r3, r3
 8010aa8:	b2db      	uxtb	r3, r3
 8010aaa:	005b      	lsls	r3, r3, #1
 8010aac:	6879      	ldr	r1, [r7, #4]
 8010aae:	fa01 f303 	lsl.w	r3, r1, r3
 8010ab2:	431a      	orrs	r2, r3
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	601a      	str	r2, [r3, #0]
}
 8010ab8:	bf00      	nop
 8010aba:	372c      	adds	r7, #44	@ 0x2c
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr

08010ac4 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	60b9      	str	r1, [r7, #8]
 8010ace:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	685a      	ldr	r2, [r3, #4]
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	43db      	mvns	r3, r3
 8010ad8:	401a      	ands	r2, r3
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	6879      	ldr	r1, [r7, #4]
 8010ade:	fb01 f303 	mul.w	r3, r1, r3
 8010ae2:	431a      	orrs	r2, r3
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	605a      	str	r2, [r3, #4]
}
 8010ae8:	bf00      	nop
 8010aea:	3714      	adds	r7, #20
 8010aec:	46bd      	mov	sp, r7
 8010aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af2:	4770      	bx	lr

08010af4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b08b      	sub	sp, #44	@ 0x2c
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	60f8      	str	r0, [r7, #12]
 8010afc:	60b9      	str	r1, [r7, #8]
 8010afe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	689a      	ldr	r2, [r3, #8]
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	fa93 f3a3 	rbit	r3, r3
 8010b0e:	613b      	str	r3, [r7, #16]
  return result;
 8010b10:	693b      	ldr	r3, [r7, #16]
 8010b12:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8010b14:	69bb      	ldr	r3, [r7, #24]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d101      	bne.n	8010b1e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8010b1a:	2320      	movs	r3, #32
 8010b1c:	e003      	b.n	8010b26 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8010b1e:	69bb      	ldr	r3, [r7, #24]
 8010b20:	fab3 f383 	clz	r3, r3
 8010b24:	b2db      	uxtb	r3, r3
 8010b26:	005b      	lsls	r3, r3, #1
 8010b28:	2103      	movs	r1, #3
 8010b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8010b2e:	43db      	mvns	r3, r3
 8010b30:	401a      	ands	r2, r3
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010b36:	6a3b      	ldr	r3, [r7, #32]
 8010b38:	fa93 f3a3 	rbit	r3, r3
 8010b3c:	61fb      	str	r3, [r7, #28]
  return result;
 8010b3e:	69fb      	ldr	r3, [r7, #28]
 8010b40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8010b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d101      	bne.n	8010b4c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8010b48:	2320      	movs	r3, #32
 8010b4a:	e003      	b.n	8010b54 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8010b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b4e:	fab3 f383 	clz	r3, r3
 8010b52:	b2db      	uxtb	r3, r3
 8010b54:	005b      	lsls	r3, r3, #1
 8010b56:	6879      	ldr	r1, [r7, #4]
 8010b58:	fa01 f303 	lsl.w	r3, r1, r3
 8010b5c:	431a      	orrs	r2, r3
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8010b62:	bf00      	nop
 8010b64:	372c      	adds	r7, #44	@ 0x2c
 8010b66:	46bd      	mov	sp, r7
 8010b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6c:	4770      	bx	lr

08010b6e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8010b6e:	b480      	push	{r7}
 8010b70:	b08b      	sub	sp, #44	@ 0x2c
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	60f8      	str	r0, [r7, #12]
 8010b76:	60b9      	str	r1, [r7, #8]
 8010b78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	68da      	ldr	r2, [r3, #12]
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	fa93 f3a3 	rbit	r3, r3
 8010b88:	613b      	str	r3, [r7, #16]
  return result;
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8010b8e:	69bb      	ldr	r3, [r7, #24]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d101      	bne.n	8010b98 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8010b94:	2320      	movs	r3, #32
 8010b96:	e003      	b.n	8010ba0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8010b98:	69bb      	ldr	r3, [r7, #24]
 8010b9a:	fab3 f383 	clz	r3, r3
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	005b      	lsls	r3, r3, #1
 8010ba2:	2103      	movs	r1, #3
 8010ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8010ba8:	43db      	mvns	r3, r3
 8010baa:	401a      	ands	r2, r3
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010bb0:	6a3b      	ldr	r3, [r7, #32]
 8010bb2:	fa93 f3a3 	rbit	r3, r3
 8010bb6:	61fb      	str	r3, [r7, #28]
  return result;
 8010bb8:	69fb      	ldr	r3, [r7, #28]
 8010bba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8010bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d101      	bne.n	8010bc6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8010bc2:	2320      	movs	r3, #32
 8010bc4:	e003      	b.n	8010bce <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8010bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bc8:	fab3 f383 	clz	r3, r3
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	005b      	lsls	r3, r3, #1
 8010bd0:	6879      	ldr	r1, [r7, #4]
 8010bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8010bd6:	431a      	orrs	r2, r3
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	60da      	str	r2, [r3, #12]
}
 8010bdc:	bf00      	nop
 8010bde:	372c      	adds	r7, #44	@ 0x2c
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr

08010be8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8010be8:	b480      	push	{r7}
 8010bea:	b08b      	sub	sp, #44	@ 0x2c
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	60f8      	str	r0, [r7, #12]
 8010bf0:	60b9      	str	r1, [r7, #8]
 8010bf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	6a1a      	ldr	r2, [r3, #32]
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	fa93 f3a3 	rbit	r3, r3
 8010c02:	613b      	str	r3, [r7, #16]
  return result;
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8010c08:	69bb      	ldr	r3, [r7, #24]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d101      	bne.n	8010c12 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8010c0e:	2320      	movs	r3, #32
 8010c10:	e003      	b.n	8010c1a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8010c12:	69bb      	ldr	r3, [r7, #24]
 8010c14:	fab3 f383 	clz	r3, r3
 8010c18:	b2db      	uxtb	r3, r3
 8010c1a:	009b      	lsls	r3, r3, #2
 8010c1c:	210f      	movs	r1, #15
 8010c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8010c22:	43db      	mvns	r3, r3
 8010c24:	401a      	ands	r2, r3
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010c2a:	6a3b      	ldr	r3, [r7, #32]
 8010c2c:	fa93 f3a3 	rbit	r3, r3
 8010c30:	61fb      	str	r3, [r7, #28]
  return result;
 8010c32:	69fb      	ldr	r3, [r7, #28]
 8010c34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8010c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d101      	bne.n	8010c40 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8010c3c:	2320      	movs	r3, #32
 8010c3e:	e003      	b.n	8010c48 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8010c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c42:	fab3 f383 	clz	r3, r3
 8010c46:	b2db      	uxtb	r3, r3
 8010c48:	009b      	lsls	r3, r3, #2
 8010c4a:	6879      	ldr	r1, [r7, #4]
 8010c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8010c50:	431a      	orrs	r2, r3
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8010c56:	bf00      	nop
 8010c58:	372c      	adds	r7, #44	@ 0x2c
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c60:	4770      	bx	lr

08010c62 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8010c62:	b480      	push	{r7}
 8010c64:	b08b      	sub	sp, #44	@ 0x2c
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	60f8      	str	r0, [r7, #12]
 8010c6a:	60b9      	str	r1, [r7, #8]
 8010c6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	0a1b      	lsrs	r3, r3, #8
 8010c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	fa93 f3a3 	rbit	r3, r3
 8010c7e:	613b      	str	r3, [r7, #16]
  return result;
 8010c80:	693b      	ldr	r3, [r7, #16]
 8010c82:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8010c84:	69bb      	ldr	r3, [r7, #24]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d101      	bne.n	8010c8e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8010c8a:	2320      	movs	r3, #32
 8010c8c:	e003      	b.n	8010c96 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8010c8e:	69bb      	ldr	r3, [r7, #24]
 8010c90:	fab3 f383 	clz	r3, r3
 8010c94:	b2db      	uxtb	r3, r3
 8010c96:	009b      	lsls	r3, r3, #2
 8010c98:	210f      	movs	r1, #15
 8010c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8010c9e:	43db      	mvns	r3, r3
 8010ca0:	401a      	ands	r2, r3
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	0a1b      	lsrs	r3, r3, #8
 8010ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010ca8:	6a3b      	ldr	r3, [r7, #32]
 8010caa:	fa93 f3a3 	rbit	r3, r3
 8010cae:	61fb      	str	r3, [r7, #28]
  return result;
 8010cb0:	69fb      	ldr	r3, [r7, #28]
 8010cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8010cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d101      	bne.n	8010cbe <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8010cba:	2320      	movs	r3, #32
 8010cbc:	e003      	b.n	8010cc6 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8010cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc0:	fab3 f383 	clz	r3, r3
 8010cc4:	b2db      	uxtb	r3, r3
 8010cc6:	009b      	lsls	r3, r3, #2
 8010cc8:	6879      	ldr	r1, [r7, #4]
 8010cca:	fa01 f303 	lsl.w	r3, r1, r3
 8010cce:	431a      	orrs	r2, r3
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8010cd4:	bf00      	nop
 8010cd6:	372c      	adds	r7, #44	@ 0x2c
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b088      	sub	sp, #32
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	fa93 f3a3 	rbit	r3, r3
 8010cf6:	60fb      	str	r3, [r7, #12]
  return result;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8010cfc:	697b      	ldr	r3, [r7, #20]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d101      	bne.n	8010d06 <LL_GPIO_Init+0x26>
    return 32U;
 8010d02:	2320      	movs	r3, #32
 8010d04:	e003      	b.n	8010d0e <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	fab3 f383 	clz	r3, r3
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8010d10:	e048      	b.n	8010da4 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	681a      	ldr	r2, [r3, #0]
 8010d16:	2101      	movs	r1, #1
 8010d18:	69fb      	ldr	r3, [r7, #28]
 8010d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8010d1e:	4013      	ands	r3, r2
 8010d20:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8010d22:	69bb      	ldr	r3, [r7, #24]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d03a      	beq.n	8010d9e <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	685b      	ldr	r3, [r3, #4]
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	d003      	beq.n	8010d38 <LL_GPIO_Init+0x58>
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	2b02      	cmp	r3, #2
 8010d36:	d10e      	bne.n	8010d56 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	689b      	ldr	r3, [r3, #8]
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	69b9      	ldr	r1, [r7, #24]
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f7ff fed7 	bl	8010af4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	6819      	ldr	r1, [r3, #0]
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	68db      	ldr	r3, [r3, #12]
 8010d4e:	461a      	mov	r2, r3
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f7ff feb7 	bl	8010ac4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	691b      	ldr	r3, [r3, #16]
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	69b9      	ldr	r1, [r7, #24]
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f7ff ff05 	bl	8010b6e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	2b02      	cmp	r3, #2
 8010d6a:	d111      	bne.n	8010d90 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8010d6c:	69bb      	ldr	r3, [r7, #24]
 8010d6e:	2bff      	cmp	r3, #255	@ 0xff
 8010d70:	d807      	bhi.n	8010d82 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	695b      	ldr	r3, [r3, #20]
 8010d76:	461a      	mov	r2, r3
 8010d78:	69b9      	ldr	r1, [r7, #24]
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f7ff ff34 	bl	8010be8 <LL_GPIO_SetAFPin_0_7>
 8010d80:	e006      	b.n	8010d90 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	695b      	ldr	r3, [r3, #20]
 8010d86:	461a      	mov	r2, r3
 8010d88:	69b9      	ldr	r1, [r7, #24]
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f7ff ff69 	bl	8010c62 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	685b      	ldr	r3, [r3, #4]
 8010d94:	461a      	mov	r2, r3
 8010d96:	69b9      	ldr	r1, [r7, #24]
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f7ff fe56 	bl	8010a4a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8010d9e:	69fb      	ldr	r3, [r7, #28]
 8010da0:	3301      	adds	r3, #1
 8010da2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	681a      	ldr	r2, [r3, #0]
 8010da8:	69fb      	ldr	r3, [r7, #28]
 8010daa:	fa22 f303 	lsr.w	r3, r2, r3
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d1af      	bne.n	8010d12 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8010db2:	2300      	movs	r3, #0
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	3720      	adds	r7, #32
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}

08010dbc <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b083      	sub	sp, #12
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	601a      	str	r2, [r3, #0]
}
 8010dd0:	bf00      	nop
 8010dd2:	370c      	adds	r7, #12
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dda:	4770      	bx	lr

08010ddc <LL_APB1_GRP2_EnableClock>:
{
 8010ddc:	b480      	push	{r7}
 8010dde:	b085      	sub	sp, #20
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8010de4:	4b08      	ldr	r3, [pc, #32]	@ (8010e08 <LL_APB1_GRP2_EnableClock+0x2c>)
 8010de6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010de8:	4907      	ldr	r1, [pc, #28]	@ (8010e08 <LL_APB1_GRP2_EnableClock+0x2c>)
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	4313      	orrs	r3, r2
 8010dee:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8010df0:	4b05      	ldr	r3, [pc, #20]	@ (8010e08 <LL_APB1_GRP2_EnableClock+0x2c>)
 8010df2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	4013      	ands	r3, r2
 8010df8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
}
 8010dfc:	bf00      	nop
 8010dfe:	3714      	adds	r7, #20
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr
 8010e08:	40021000 	.word	0x40021000

08010e0c <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	4a11      	ldr	r2, [pc, #68]	@ (8010e60 <LL_UCPD_Init+0x54>)
 8010e1a:	4293      	cmp	r3, r2
 8010e1c:	d103      	bne.n	8010e26 <LL_UCPD_Init+0x1a>
  {
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8010e1e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8010e22:	f7ff ffdb 	bl	8010ddc <LL_APB1_GRP2_EnableClock>
  }


  LL_UCPD_Disable(UCPDx);
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f7ff ffc8 	bl	8010dbc <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681a      	ldr	r2, [r3, #0]
 8010e30:	4b0c      	ldr	r3, [pc, #48]	@ (8010e64 <LL_UCPD_Init+0x58>)
 8010e32:	4013      	ands	r3, r2
 8010e34:	683a      	ldr	r2, [r7, #0]
 8010e36:	6811      	ldr	r1, [r2, #0]
 8010e38:	683a      	ldr	r2, [r7, #0]
 8010e3a:	6852      	ldr	r2, [r2, #4]
 8010e3c:	02d2      	lsls	r2, r2, #11
 8010e3e:	4311      	orrs	r1, r2
 8010e40:	683a      	ldr	r2, [r7, #0]
 8010e42:	6892      	ldr	r2, [r2, #8]
 8010e44:	0192      	lsls	r2, r2, #6
 8010e46:	4311      	orrs	r1, r2
 8010e48:	683a      	ldr	r2, [r7, #0]
 8010e4a:	68d2      	ldr	r2, [r2, #12]
 8010e4c:	430a      	orrs	r2, r1
 8010e4e:	431a      	orrs	r2, r3
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 8010e54:	2300      	movs	r3, #0
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3708      	adds	r7, #8
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
 8010e5e:	bf00      	nop
 8010e60:	4000a000 	.word	0x4000a000
 8010e64:	fff10000 	.word	0xfff10000

08010e68 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b083      	sub	sp, #12
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8010e76:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2207      	movs	r2, #7
 8010e7c:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2210      	movs	r2, #16
 8010e82:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	220d      	movs	r2, #13
 8010e88:	60da      	str	r2, [r3, #12]
}
 8010e8a:	bf00      	nop
 8010e8c:	370c      	adds	r7, #12
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e94:	4770      	bx	lr

08010e96 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8010e96:	b480      	push	{r7}
 8010e98:	b085      	sub	sp, #20
 8010e9a:	af00      	add	r7, sp, #0
 8010e9c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010ea6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8010eaa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	b29a      	uxth	r2, r3
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8010eb6:	2300      	movs	r3, #0
}
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3714      	adds	r7, #20
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec2:	4770      	bx	lr

08010ec4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8010ec4:	b480      	push	{r7}
 8010ec6:	b085      	sub	sp, #20
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010ecc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8010ed0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8010ed8:	b29a      	uxth	r2, r3
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	43db      	mvns	r3, r3
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	4013      	ands	r3, r2
 8010ee4:	b29a      	uxth	r2, r3
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8010eec:	2300      	movs	r3, #0
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3714      	adds	r7, #20
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef8:	4770      	bx	lr

08010efa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8010efa:	b480      	push	{r7}
 8010efc:	b085      	sub	sp, #20
 8010efe:	af00      	add	r7, sp, #0
 8010f00:	60f8      	str	r0, [r7, #12]
 8010f02:	1d3b      	adds	r3, r7, #4
 8010f04:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	2201      	movs	r2, #1
 8010f0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	2200      	movs	r2, #0
 8010f14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	2200      	movs	r2, #0
 8010f24:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8010f28:	2300      	movs	r3, #0
}
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3714      	adds	r7, #20
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f34:	4770      	bx	lr
	...

08010f38 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010f38:	b480      	push	{r7}
 8010f3a:	b09d      	sub	sp, #116	@ 0x74
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8010f42:	2300      	movs	r3, #0
 8010f44:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8010f48:	687a      	ldr	r2, [r7, #4]
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	781b      	ldrb	r3, [r3, #0]
 8010f4e:	009b      	lsls	r3, r3, #2
 8010f50:	4413      	add	r3, r2
 8010f52:	881b      	ldrh	r3, [r3, #0]
 8010f54:	b29b      	uxth	r3, r3
 8010f56:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8010f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010f5e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	78db      	ldrb	r3, [r3, #3]
 8010f66:	2b03      	cmp	r3, #3
 8010f68:	d81f      	bhi.n	8010faa <USB_ActivateEndpoint+0x72>
 8010f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8010f70 <USB_ActivateEndpoint+0x38>)
 8010f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f70:	08010f81 	.word	0x08010f81
 8010f74:	08010f9d 	.word	0x08010f9d
 8010f78:	08010fb3 	.word	0x08010fb3
 8010f7c:	08010f8f 	.word	0x08010f8f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8010f80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010f84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010f88:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8010f8c:	e012      	b.n	8010fb4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8010f8e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010f92:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8010f96:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8010f9a:	e00b      	b.n	8010fb4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010f9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010fa0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8010fa4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8010fa8:	e004      	b.n	8010fb4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8010faa:	2301      	movs	r3, #1
 8010fac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8010fb0:	e000      	b.n	8010fb4 <USB_ActivateEndpoint+0x7c>
      break;
 8010fb2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8010fb4:	687a      	ldr	r2, [r7, #4]
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	781b      	ldrb	r3, [r3, #0]
 8010fba:	009b      	lsls	r3, r3, #2
 8010fbc:	441a      	add	r2, r3
 8010fbe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	4413      	add	r3, r2
 8010fe0:	881b      	ldrh	r3, [r3, #0]
 8010fe2:	b29b      	uxth	r3, r3
 8010fe4:	b21b      	sxth	r3, r3
 8010fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010fee:	b21a      	sxth	r2, r3
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	781b      	ldrb	r3, [r3, #0]
 8010ff4:	b21b      	sxth	r3, r3
 8010ff6:	4313      	orrs	r3, r2
 8010ff8:	b21b      	sxth	r3, r3
 8010ffa:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8010ffe:	687a      	ldr	r2, [r7, #4]
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	781b      	ldrb	r3, [r3, #0]
 8011004:	009b      	lsls	r3, r3, #2
 8011006:	441a      	add	r2, r3
 8011008:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 801100c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801101c:	b29b      	uxth	r3, r3
 801101e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	7b1b      	ldrb	r3, [r3, #12]
 8011024:	2b00      	cmp	r3, #0
 8011026:	f040 8178 	bne.w	801131a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	785b      	ldrb	r3, [r3, #1]
 801102e:	2b00      	cmp	r3, #0
 8011030:	f000 8084 	beq.w	801113c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	61bb      	str	r3, [r7, #24]
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801103e:	b29b      	uxth	r3, r3
 8011040:	461a      	mov	r2, r3
 8011042:	69bb      	ldr	r3, [r7, #24]
 8011044:	4413      	add	r3, r2
 8011046:	61bb      	str	r3, [r7, #24]
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	00da      	lsls	r2, r3, #3
 801104e:	69bb      	ldr	r3, [r7, #24]
 8011050:	4413      	add	r3, r2
 8011052:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011056:	617b      	str	r3, [r7, #20]
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	88db      	ldrh	r3, [r3, #6]
 801105c:	085b      	lsrs	r3, r3, #1
 801105e:	b29b      	uxth	r3, r3
 8011060:	005b      	lsls	r3, r3, #1
 8011062:	b29a      	uxth	r2, r3
 8011064:	697b      	ldr	r3, [r7, #20]
 8011066:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011068:	687a      	ldr	r2, [r7, #4]
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	781b      	ldrb	r3, [r3, #0]
 801106e:	009b      	lsls	r3, r3, #2
 8011070:	4413      	add	r3, r2
 8011072:	881b      	ldrh	r3, [r3, #0]
 8011074:	827b      	strh	r3, [r7, #18]
 8011076:	8a7b      	ldrh	r3, [r7, #18]
 8011078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801107c:	2b00      	cmp	r3, #0
 801107e:	d01b      	beq.n	80110b8 <USB_ActivateEndpoint+0x180>
 8011080:	687a      	ldr	r2, [r7, #4]
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	781b      	ldrb	r3, [r3, #0]
 8011086:	009b      	lsls	r3, r3, #2
 8011088:	4413      	add	r3, r2
 801108a:	881b      	ldrh	r3, [r3, #0]
 801108c:	b29b      	uxth	r3, r3
 801108e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011096:	823b      	strh	r3, [r7, #16]
 8011098:	687a      	ldr	r2, [r7, #4]
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	781b      	ldrb	r3, [r3, #0]
 801109e:	009b      	lsls	r3, r3, #2
 80110a0:	441a      	add	r2, r3
 80110a2:	8a3b      	ldrh	r3, [r7, #16]
 80110a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80110a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80110ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80110b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	78db      	ldrb	r3, [r3, #3]
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d020      	beq.n	8011102 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80110c0:	687a      	ldr	r2, [r7, #4]
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	009b      	lsls	r3, r3, #2
 80110c8:	4413      	add	r3, r2
 80110ca:	881b      	ldrh	r3, [r3, #0]
 80110cc:	b29b      	uxth	r3, r3
 80110ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80110d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80110d6:	81bb      	strh	r3, [r7, #12]
 80110d8:	89bb      	ldrh	r3, [r7, #12]
 80110da:	f083 0320 	eor.w	r3, r3, #32
 80110de:	81bb      	strh	r3, [r7, #12]
 80110e0:	687a      	ldr	r2, [r7, #4]
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	781b      	ldrb	r3, [r3, #0]
 80110e6:	009b      	lsls	r3, r3, #2
 80110e8:	441a      	add	r2, r3
 80110ea:	89bb      	ldrh	r3, [r7, #12]
 80110ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80110f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80110f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80110f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	8013      	strh	r3, [r2, #0]
 8011100:	e2d5      	b.n	80116ae <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011102:	687a      	ldr	r2, [r7, #4]
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	009b      	lsls	r3, r3, #2
 801110a:	4413      	add	r3, r2
 801110c:	881b      	ldrh	r3, [r3, #0]
 801110e:	b29b      	uxth	r3, r3
 8011110:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011118:	81fb      	strh	r3, [r7, #14]
 801111a:	687a      	ldr	r2, [r7, #4]
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	781b      	ldrb	r3, [r3, #0]
 8011120:	009b      	lsls	r3, r3, #2
 8011122:	441a      	add	r2, r3
 8011124:	89fb      	ldrh	r3, [r7, #14]
 8011126:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801112a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801112e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011136:	b29b      	uxth	r3, r3
 8011138:	8013      	strh	r3, [r2, #0]
 801113a:	e2b8      	b.n	80116ae <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011146:	b29b      	uxth	r3, r3
 8011148:	461a      	mov	r2, r3
 801114a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801114c:	4413      	add	r3, r2
 801114e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	00da      	lsls	r2, r3, #3
 8011156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011158:	4413      	add	r3, r2
 801115a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	88db      	ldrh	r3, [r3, #6]
 8011164:	085b      	lsrs	r3, r3, #1
 8011166:	b29b      	uxth	r3, r3
 8011168:	005b      	lsls	r3, r3, #1
 801116a:	b29a      	uxth	r2, r3
 801116c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801116e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801117a:	b29b      	uxth	r3, r3
 801117c:	461a      	mov	r2, r3
 801117e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011180:	4413      	add	r3, r2
 8011182:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	00da      	lsls	r2, r3, #3
 801118a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801118c:	4413      	add	r3, r2
 801118e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011192:	627b      	str	r3, [r7, #36]	@ 0x24
 8011194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011196:	881b      	ldrh	r3, [r3, #0]
 8011198:	b29b      	uxth	r3, r3
 801119a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801119e:	b29a      	uxth	r2, r3
 80111a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a2:	801a      	strh	r2, [r3, #0]
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	691b      	ldr	r3, [r3, #16]
 80111a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80111aa:	d91d      	bls.n	80111e8 <USB_ActivateEndpoint+0x2b0>
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	691b      	ldr	r3, [r3, #16]
 80111b0:	095b      	lsrs	r3, r3, #5
 80111b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	691b      	ldr	r3, [r3, #16]
 80111b8:	f003 031f 	and.w	r3, r3, #31
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d102      	bne.n	80111c6 <USB_ActivateEndpoint+0x28e>
 80111c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80111c2:	3b01      	subs	r3, #1
 80111c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80111c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c8:	881b      	ldrh	r3, [r3, #0]
 80111ca:	b29a      	uxth	r2, r3
 80111cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80111ce:	b29b      	uxth	r3, r3
 80111d0:	029b      	lsls	r3, r3, #10
 80111d2:	b29b      	uxth	r3, r3
 80111d4:	4313      	orrs	r3, r2
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111e0:	b29a      	uxth	r2, r3
 80111e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111e4:	801a      	strh	r2, [r3, #0]
 80111e6:	e026      	b.n	8011236 <USB_ActivateEndpoint+0x2fe>
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	691b      	ldr	r3, [r3, #16]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d10a      	bne.n	8011206 <USB_ActivateEndpoint+0x2ce>
 80111f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111f2:	881b      	ldrh	r3, [r3, #0]
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111fe:	b29a      	uxth	r2, r3
 8011200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011202:	801a      	strh	r2, [r3, #0]
 8011204:	e017      	b.n	8011236 <USB_ActivateEndpoint+0x2fe>
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	691b      	ldr	r3, [r3, #16]
 801120a:	085b      	lsrs	r3, r3, #1
 801120c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	691b      	ldr	r3, [r3, #16]
 8011212:	f003 0301 	and.w	r3, r3, #1
 8011216:	2b00      	cmp	r3, #0
 8011218:	d002      	beq.n	8011220 <USB_ActivateEndpoint+0x2e8>
 801121a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801121c:	3301      	adds	r3, #1
 801121e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011222:	881b      	ldrh	r3, [r3, #0]
 8011224:	b29a      	uxth	r2, r3
 8011226:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011228:	b29b      	uxth	r3, r3
 801122a:	029b      	lsls	r3, r3, #10
 801122c:	b29b      	uxth	r3, r3
 801122e:	4313      	orrs	r3, r2
 8011230:	b29a      	uxth	r2, r3
 8011232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011234:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011236:	687a      	ldr	r2, [r7, #4]
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	009b      	lsls	r3, r3, #2
 801123e:	4413      	add	r3, r2
 8011240:	881b      	ldrh	r3, [r3, #0]
 8011242:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011244:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801124a:	2b00      	cmp	r3, #0
 801124c:	d01b      	beq.n	8011286 <USB_ActivateEndpoint+0x34e>
 801124e:	687a      	ldr	r2, [r7, #4]
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	009b      	lsls	r3, r3, #2
 8011256:	4413      	add	r3, r2
 8011258:	881b      	ldrh	r3, [r3, #0]
 801125a:	b29b      	uxth	r3, r3
 801125c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011264:	843b      	strh	r3, [r7, #32]
 8011266:	687a      	ldr	r2, [r7, #4]
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	009b      	lsls	r3, r3, #2
 801126e:	441a      	add	r2, r3
 8011270:	8c3b      	ldrh	r3, [r7, #32]
 8011272:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011276:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801127a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801127e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011282:	b29b      	uxth	r3, r3
 8011284:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d124      	bne.n	80112d8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	009b      	lsls	r3, r3, #2
 8011296:	4413      	add	r3, r2
 8011298:	881b      	ldrh	r3, [r3, #0]
 801129a:	b29b      	uxth	r3, r3
 801129c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80112a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80112a4:	83bb      	strh	r3, [r7, #28]
 80112a6:	8bbb      	ldrh	r3, [r7, #28]
 80112a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80112ac:	83bb      	strh	r3, [r7, #28]
 80112ae:	8bbb      	ldrh	r3, [r7, #28]
 80112b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80112b4:	83bb      	strh	r3, [r7, #28]
 80112b6:	687a      	ldr	r2, [r7, #4]
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	781b      	ldrb	r3, [r3, #0]
 80112bc:	009b      	lsls	r3, r3, #2
 80112be:	441a      	add	r2, r3
 80112c0:	8bbb      	ldrh	r3, [r7, #28]
 80112c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80112c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80112ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80112ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	8013      	strh	r3, [r2, #0]
 80112d6:	e1ea      	b.n	80116ae <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80112d8:	687a      	ldr	r2, [r7, #4]
 80112da:	683b      	ldr	r3, [r7, #0]
 80112dc:	781b      	ldrb	r3, [r3, #0]
 80112de:	009b      	lsls	r3, r3, #2
 80112e0:	4413      	add	r3, r2
 80112e2:	881b      	ldrh	r3, [r3, #0]
 80112e4:	b29b      	uxth	r3, r3
 80112e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80112ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80112ee:	83fb      	strh	r3, [r7, #30]
 80112f0:	8bfb      	ldrh	r3, [r7, #30]
 80112f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80112f6:	83fb      	strh	r3, [r7, #30]
 80112f8:	687a      	ldr	r2, [r7, #4]
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	009b      	lsls	r3, r3, #2
 8011300:	441a      	add	r2, r3
 8011302:	8bfb      	ldrh	r3, [r7, #30]
 8011304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801130c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011314:	b29b      	uxth	r3, r3
 8011316:	8013      	strh	r3, [r2, #0]
 8011318:	e1c9      	b.n	80116ae <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	78db      	ldrb	r3, [r3, #3]
 801131e:	2b02      	cmp	r3, #2
 8011320:	d11e      	bne.n	8011360 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	009b      	lsls	r3, r3, #2
 801132a:	4413      	add	r3, r2
 801132c:	881b      	ldrh	r3, [r3, #0]
 801132e:	b29b      	uxth	r3, r3
 8011330:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011338:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 801133c:	687a      	ldr	r2, [r7, #4]
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	781b      	ldrb	r3, [r3, #0]
 8011342:	009b      	lsls	r3, r3, #2
 8011344:	441a      	add	r2, r3
 8011346:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 801134a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801134e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011352:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801135a:	b29b      	uxth	r3, r3
 801135c:	8013      	strh	r3, [r2, #0]
 801135e:	e01d      	b.n	801139c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011360:	687a      	ldr	r2, [r7, #4]
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	009b      	lsls	r3, r3, #2
 8011368:	4413      	add	r3, r2
 801136a:	881b      	ldrh	r3, [r3, #0]
 801136c:	b29b      	uxth	r3, r3
 801136e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8011372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011376:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 801137a:	687a      	ldr	r2, [r7, #4]
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	781b      	ldrb	r3, [r3, #0]
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	441a      	add	r2, r3
 8011384:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011388:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801138c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011390:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011398:	b29b      	uxth	r3, r3
 801139a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80113a6:	b29b      	uxth	r3, r3
 80113a8:	461a      	mov	r2, r3
 80113aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80113ac:	4413      	add	r3, r2
 80113ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	00da      	lsls	r2, r3, #3
 80113b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80113b8:	4413      	add	r3, r2
 80113ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80113be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	891b      	ldrh	r3, [r3, #8]
 80113c4:	085b      	lsrs	r3, r3, #1
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	005b      	lsls	r3, r3, #1
 80113ca:	b29a      	uxth	r2, r3
 80113cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80113ce:	801a      	strh	r2, [r3, #0]
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80113da:	b29b      	uxth	r3, r3
 80113dc:	461a      	mov	r2, r3
 80113de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80113e0:	4413      	add	r3, r2
 80113e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	00da      	lsls	r2, r3, #3
 80113ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80113ec:	4413      	add	r3, r2
 80113ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80113f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	895b      	ldrh	r3, [r3, #10]
 80113f8:	085b      	lsrs	r3, r3, #1
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	005b      	lsls	r3, r3, #1
 80113fe:	b29a      	uxth	r2, r3
 8011400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011402:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	785b      	ldrb	r3, [r3, #1]
 8011408:	2b00      	cmp	r3, #0
 801140a:	f040 8093 	bne.w	8011534 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801140e:	687a      	ldr	r2, [r7, #4]
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	4413      	add	r3, r2
 8011418:	881b      	ldrh	r3, [r3, #0]
 801141a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801141e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011426:	2b00      	cmp	r3, #0
 8011428:	d01b      	beq.n	8011462 <USB_ActivateEndpoint+0x52a>
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	009b      	lsls	r3, r3, #2
 8011432:	4413      	add	r3, r2
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	b29b      	uxth	r3, r3
 8011438:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801143c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011440:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8011442:	687a      	ldr	r2, [r7, #4]
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	781b      	ldrb	r3, [r3, #0]
 8011448:	009b      	lsls	r3, r3, #2
 801144a:	441a      	add	r2, r3
 801144c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801144e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011456:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801145a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801145e:	b29b      	uxth	r3, r3
 8011460:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011462:	687a      	ldr	r2, [r7, #4]
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	009b      	lsls	r3, r3, #2
 801146a:	4413      	add	r3, r2
 801146c:	881b      	ldrh	r3, [r3, #0]
 801146e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8011470:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011476:	2b00      	cmp	r3, #0
 8011478:	d01b      	beq.n	80114b2 <USB_ActivateEndpoint+0x57a>
 801147a:	687a      	ldr	r2, [r7, #4]
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	009b      	lsls	r3, r3, #2
 8011482:	4413      	add	r3, r2
 8011484:	881b      	ldrh	r3, [r3, #0]
 8011486:	b29b      	uxth	r3, r3
 8011488:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801148c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011490:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8011492:	687a      	ldr	r2, [r7, #4]
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	009b      	lsls	r3, r3, #2
 801149a:	441a      	add	r2, r3
 801149c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801149e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80114a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80114a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80114aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80114b2:	687a      	ldr	r2, [r7, #4]
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	009b      	lsls	r3, r3, #2
 80114ba:	4413      	add	r3, r2
 80114bc:	881b      	ldrh	r3, [r3, #0]
 80114be:	b29b      	uxth	r3, r3
 80114c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80114c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80114c8:	873b      	strh	r3, [r7, #56]	@ 0x38
 80114ca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80114cc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80114d0:	873b      	strh	r3, [r7, #56]	@ 0x38
 80114d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80114d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80114d8:	873b      	strh	r3, [r7, #56]	@ 0x38
 80114da:	687a      	ldr	r2, [r7, #4]
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	781b      	ldrb	r3, [r3, #0]
 80114e0:	009b      	lsls	r3, r3, #2
 80114e2:	441a      	add	r2, r3
 80114e4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80114e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80114ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80114ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80114f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114f6:	b29b      	uxth	r3, r3
 80114f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80114fa:	687a      	ldr	r2, [r7, #4]
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	781b      	ldrb	r3, [r3, #0]
 8011500:	009b      	lsls	r3, r3, #2
 8011502:	4413      	add	r3, r2
 8011504:	881b      	ldrh	r3, [r3, #0]
 8011506:	b29b      	uxth	r3, r3
 8011508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801150c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011510:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011512:	687a      	ldr	r2, [r7, #4]
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	781b      	ldrb	r3, [r3, #0]
 8011518:	009b      	lsls	r3, r3, #2
 801151a:	441a      	add	r2, r3
 801151c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801151e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801152a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801152e:	b29b      	uxth	r3, r3
 8011530:	8013      	strh	r3, [r2, #0]
 8011532:	e0bc      	b.n	80116ae <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011534:	687a      	ldr	r2, [r7, #4]
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	781b      	ldrb	r3, [r3, #0]
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	4413      	add	r3, r2
 801153e:	881b      	ldrh	r3, [r3, #0]
 8011540:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8011544:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011548:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801154c:	2b00      	cmp	r3, #0
 801154e:	d01d      	beq.n	801158c <USB_ActivateEndpoint+0x654>
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	009b      	lsls	r3, r3, #2
 8011558:	4413      	add	r3, r2
 801155a:	881b      	ldrh	r3, [r3, #0]
 801155c:	b29b      	uxth	r3, r3
 801155e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011566:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 801156a:	687a      	ldr	r2, [r7, #4]
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	009b      	lsls	r3, r3, #2
 8011572:	441a      	add	r2, r3
 8011574:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8011578:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801157c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011580:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011588:	b29b      	uxth	r3, r3
 801158a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801158c:	687a      	ldr	r2, [r7, #4]
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	781b      	ldrb	r3, [r3, #0]
 8011592:	009b      	lsls	r3, r3, #2
 8011594:	4413      	add	r3, r2
 8011596:	881b      	ldrh	r3, [r3, #0]
 8011598:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 801159c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80115a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d01d      	beq.n	80115e4 <USB_ActivateEndpoint+0x6ac>
 80115a8:	687a      	ldr	r2, [r7, #4]
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	781b      	ldrb	r3, [r3, #0]
 80115ae:	009b      	lsls	r3, r3, #2
 80115b0:	4413      	add	r3, r2
 80115b2:	881b      	ldrh	r3, [r3, #0]
 80115b4:	b29b      	uxth	r3, r3
 80115b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80115ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80115be:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80115c2:	687a      	ldr	r2, [r7, #4]
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	781b      	ldrb	r3, [r3, #0]
 80115c8:	009b      	lsls	r3, r3, #2
 80115ca:	441a      	add	r2, r3
 80115cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80115d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80115d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80115d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80115dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	78db      	ldrb	r3, [r3, #3]
 80115e8:	2b01      	cmp	r3, #1
 80115ea:	d024      	beq.n	8011636 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80115ec:	687a      	ldr	r2, [r7, #4]
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	009b      	lsls	r3, r3, #2
 80115f4:	4413      	add	r3, r2
 80115f6:	881b      	ldrh	r3, [r3, #0]
 80115f8:	b29b      	uxth	r3, r3
 80115fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80115fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011602:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8011606:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801160a:	f083 0320 	eor.w	r3, r3, #32
 801160e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8011612:	687a      	ldr	r2, [r7, #4]
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	009b      	lsls	r3, r3, #2
 801161a:	441a      	add	r2, r3
 801161c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011620:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011624:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011628:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801162c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011630:	b29b      	uxth	r3, r3
 8011632:	8013      	strh	r3, [r2, #0]
 8011634:	e01d      	b.n	8011672 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011636:	687a      	ldr	r2, [r7, #4]
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	009b      	lsls	r3, r3, #2
 801163e:	4413      	add	r3, r2
 8011640:	881b      	ldrh	r3, [r3, #0]
 8011642:	b29b      	uxth	r3, r3
 8011644:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801164c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8011650:	687a      	ldr	r2, [r7, #4]
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	781b      	ldrb	r3, [r3, #0]
 8011656:	009b      	lsls	r3, r3, #2
 8011658:	441a      	add	r2, r3
 801165a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801165e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801166a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801166e:	b29b      	uxth	r3, r3
 8011670:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011672:	687a      	ldr	r2, [r7, #4]
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	009b      	lsls	r3, r3, #2
 801167a:	4413      	add	r3, r2
 801167c:	881b      	ldrh	r3, [r3, #0]
 801167e:	b29b      	uxth	r3, r3
 8011680:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011688:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801168c:	687a      	ldr	r2, [r7, #4]
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	781b      	ldrb	r3, [r3, #0]
 8011692:	009b      	lsls	r3, r3, #2
 8011694:	441a      	add	r2, r3
 8011696:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801169a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801169e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80116a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80116a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80116ae:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3774      	adds	r7, #116	@ 0x74
 80116b6:	46bd      	mov	sp, r7
 80116b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116bc:	4770      	bx	lr
 80116be:	bf00      	nop

080116c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80116c0:	b480      	push	{r7}
 80116c2:	b08d      	sub	sp, #52	@ 0x34
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	7b1b      	ldrb	r3, [r3, #12]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	f040 808e 	bne.w	80117f0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	785b      	ldrb	r3, [r3, #1]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d044      	beq.n	8011766 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80116dc:	687a      	ldr	r2, [r7, #4]
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	009b      	lsls	r3, r3, #2
 80116e4:	4413      	add	r3, r2
 80116e6:	881b      	ldrh	r3, [r3, #0]
 80116e8:	81bb      	strh	r3, [r7, #12]
 80116ea:	89bb      	ldrh	r3, [r7, #12]
 80116ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d01b      	beq.n	801172c <USB_DeactivateEndpoint+0x6c>
 80116f4:	687a      	ldr	r2, [r7, #4]
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	009b      	lsls	r3, r3, #2
 80116fc:	4413      	add	r3, r2
 80116fe:	881b      	ldrh	r3, [r3, #0]
 8011700:	b29b      	uxth	r3, r3
 8011702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801170a:	817b      	strh	r3, [r7, #10]
 801170c:	687a      	ldr	r2, [r7, #4]
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	781b      	ldrb	r3, [r3, #0]
 8011712:	009b      	lsls	r3, r3, #2
 8011714:	441a      	add	r2, r3
 8011716:	897b      	ldrh	r3, [r7, #10]
 8011718:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801171c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011724:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011728:	b29b      	uxth	r3, r3
 801172a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801172c:	687a      	ldr	r2, [r7, #4]
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	009b      	lsls	r3, r3, #2
 8011734:	4413      	add	r3, r2
 8011736:	881b      	ldrh	r3, [r3, #0]
 8011738:	b29b      	uxth	r3, r3
 801173a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801173e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011742:	813b      	strh	r3, [r7, #8]
 8011744:	687a      	ldr	r2, [r7, #4]
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	009b      	lsls	r3, r3, #2
 801174c:	441a      	add	r2, r3
 801174e:	893b      	ldrh	r3, [r7, #8]
 8011750:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011754:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011758:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801175c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011760:	b29b      	uxth	r3, r3
 8011762:	8013      	strh	r3, [r2, #0]
 8011764:	e192      	b.n	8011a8c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	009b      	lsls	r3, r3, #2
 801176e:	4413      	add	r3, r2
 8011770:	881b      	ldrh	r3, [r3, #0]
 8011772:	827b      	strh	r3, [r7, #18]
 8011774:	8a7b      	ldrh	r3, [r7, #18]
 8011776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801177a:	2b00      	cmp	r3, #0
 801177c:	d01b      	beq.n	80117b6 <USB_DeactivateEndpoint+0xf6>
 801177e:	687a      	ldr	r2, [r7, #4]
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	009b      	lsls	r3, r3, #2
 8011786:	4413      	add	r3, r2
 8011788:	881b      	ldrh	r3, [r3, #0]
 801178a:	b29b      	uxth	r3, r3
 801178c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011794:	823b      	strh	r3, [r7, #16]
 8011796:	687a      	ldr	r2, [r7, #4]
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	009b      	lsls	r3, r3, #2
 801179e:	441a      	add	r2, r3
 80117a0:	8a3b      	ldrh	r3, [r7, #16]
 80117a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80117a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80117aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80117ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117b2:	b29b      	uxth	r3, r3
 80117b4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80117b6:	687a      	ldr	r2, [r7, #4]
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	781b      	ldrb	r3, [r3, #0]
 80117bc:	009b      	lsls	r3, r3, #2
 80117be:	4413      	add	r3, r2
 80117c0:	881b      	ldrh	r3, [r3, #0]
 80117c2:	b29b      	uxth	r3, r3
 80117c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80117c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80117cc:	81fb      	strh	r3, [r7, #14]
 80117ce:	687a      	ldr	r2, [r7, #4]
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	781b      	ldrb	r3, [r3, #0]
 80117d4:	009b      	lsls	r3, r3, #2
 80117d6:	441a      	add	r2, r3
 80117d8:	89fb      	ldrh	r3, [r7, #14]
 80117da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80117de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80117e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80117e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117ea:	b29b      	uxth	r3, r3
 80117ec:	8013      	strh	r3, [r2, #0]
 80117ee:	e14d      	b.n	8011a8c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	785b      	ldrb	r3, [r3, #1]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	f040 80a5 	bne.w	8011944 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80117fa:	687a      	ldr	r2, [r7, #4]
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	781b      	ldrb	r3, [r3, #0]
 8011800:	009b      	lsls	r3, r3, #2
 8011802:	4413      	add	r3, r2
 8011804:	881b      	ldrh	r3, [r3, #0]
 8011806:	843b      	strh	r3, [r7, #32]
 8011808:	8c3b      	ldrh	r3, [r7, #32]
 801180a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801180e:	2b00      	cmp	r3, #0
 8011810:	d01b      	beq.n	801184a <USB_DeactivateEndpoint+0x18a>
 8011812:	687a      	ldr	r2, [r7, #4]
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	009b      	lsls	r3, r3, #2
 801181a:	4413      	add	r3, r2
 801181c:	881b      	ldrh	r3, [r3, #0]
 801181e:	b29b      	uxth	r3, r3
 8011820:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011824:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011828:	83fb      	strh	r3, [r7, #30]
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	009b      	lsls	r3, r3, #2
 8011832:	441a      	add	r2, r3
 8011834:	8bfb      	ldrh	r3, [r7, #30]
 8011836:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801183a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801183e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011846:	b29b      	uxth	r3, r3
 8011848:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801184a:	687a      	ldr	r2, [r7, #4]
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	009b      	lsls	r3, r3, #2
 8011852:	4413      	add	r3, r2
 8011854:	881b      	ldrh	r3, [r3, #0]
 8011856:	83bb      	strh	r3, [r7, #28]
 8011858:	8bbb      	ldrh	r3, [r7, #28]
 801185a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801185e:	2b00      	cmp	r3, #0
 8011860:	d01b      	beq.n	801189a <USB_DeactivateEndpoint+0x1da>
 8011862:	687a      	ldr	r2, [r7, #4]
 8011864:	683b      	ldr	r3, [r7, #0]
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	009b      	lsls	r3, r3, #2
 801186a:	4413      	add	r3, r2
 801186c:	881b      	ldrh	r3, [r3, #0]
 801186e:	b29b      	uxth	r3, r3
 8011870:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011878:	837b      	strh	r3, [r7, #26]
 801187a:	687a      	ldr	r2, [r7, #4]
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	781b      	ldrb	r3, [r3, #0]
 8011880:	009b      	lsls	r3, r3, #2
 8011882:	441a      	add	r2, r3
 8011884:	8b7b      	ldrh	r3, [r7, #26]
 8011886:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801188a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801188e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011892:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011896:	b29b      	uxth	r3, r3
 8011898:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	781b      	ldrb	r3, [r3, #0]
 80118a0:	009b      	lsls	r3, r3, #2
 80118a2:	4413      	add	r3, r2
 80118a4:	881b      	ldrh	r3, [r3, #0]
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80118ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80118b0:	833b      	strh	r3, [r7, #24]
 80118b2:	687a      	ldr	r2, [r7, #4]
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	781b      	ldrb	r3, [r3, #0]
 80118b8:	009b      	lsls	r3, r3, #2
 80118ba:	441a      	add	r2, r3
 80118bc:	8b3b      	ldrh	r3, [r7, #24]
 80118be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80118c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80118c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80118ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80118ce:	b29b      	uxth	r3, r3
 80118d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80118d2:	687a      	ldr	r2, [r7, #4]
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	009b      	lsls	r3, r3, #2
 80118da:	4413      	add	r3, r2
 80118dc:	881b      	ldrh	r3, [r3, #0]
 80118de:	b29b      	uxth	r3, r3
 80118e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80118e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80118e8:	82fb      	strh	r3, [r7, #22]
 80118ea:	687a      	ldr	r2, [r7, #4]
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	781b      	ldrb	r3, [r3, #0]
 80118f0:	009b      	lsls	r3, r3, #2
 80118f2:	441a      	add	r2, r3
 80118f4:	8afb      	ldrh	r3, [r7, #22]
 80118f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80118fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80118fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011906:	b29b      	uxth	r3, r3
 8011908:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	781b      	ldrb	r3, [r3, #0]
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	4413      	add	r3, r2
 8011914:	881b      	ldrh	r3, [r3, #0]
 8011916:	b29b      	uxth	r3, r3
 8011918:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801191c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011920:	82bb      	strh	r3, [r7, #20]
 8011922:	687a      	ldr	r2, [r7, #4]
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	781b      	ldrb	r3, [r3, #0]
 8011928:	009b      	lsls	r3, r3, #2
 801192a:	441a      	add	r2, r3
 801192c:	8abb      	ldrh	r3, [r7, #20]
 801192e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801193a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801193e:	b29b      	uxth	r3, r3
 8011940:	8013      	strh	r3, [r2, #0]
 8011942:	e0a3      	b.n	8011a8c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011944:	687a      	ldr	r2, [r7, #4]
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	781b      	ldrb	r3, [r3, #0]
 801194a:	009b      	lsls	r3, r3, #2
 801194c:	4413      	add	r3, r2
 801194e:	881b      	ldrh	r3, [r3, #0]
 8011950:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8011952:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011954:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011958:	2b00      	cmp	r3, #0
 801195a:	d01b      	beq.n	8011994 <USB_DeactivateEndpoint+0x2d4>
 801195c:	687a      	ldr	r2, [r7, #4]
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	781b      	ldrb	r3, [r3, #0]
 8011962:	009b      	lsls	r3, r3, #2
 8011964:	4413      	add	r3, r2
 8011966:	881b      	ldrh	r3, [r3, #0]
 8011968:	b29b      	uxth	r3, r3
 801196a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801196e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011972:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8011974:	687a      	ldr	r2, [r7, #4]
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	009b      	lsls	r3, r3, #2
 801197c:	441a      	add	r2, r3
 801197e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011988:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801198c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011990:	b29b      	uxth	r3, r3
 8011992:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011994:	687a      	ldr	r2, [r7, #4]
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	781b      	ldrb	r3, [r3, #0]
 801199a:	009b      	lsls	r3, r3, #2
 801199c:	4413      	add	r3, r2
 801199e:	881b      	ldrh	r3, [r3, #0]
 80119a0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80119a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80119a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d01b      	beq.n	80119e4 <USB_DeactivateEndpoint+0x324>
 80119ac:	687a      	ldr	r2, [r7, #4]
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	781b      	ldrb	r3, [r3, #0]
 80119b2:	009b      	lsls	r3, r3, #2
 80119b4:	4413      	add	r3, r2
 80119b6:	881b      	ldrh	r3, [r3, #0]
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80119be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80119c2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	781b      	ldrb	r3, [r3, #0]
 80119ca:	009b      	lsls	r3, r3, #2
 80119cc:	441a      	add	r2, r3
 80119ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80119d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80119d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80119d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80119dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80119e4:	687a      	ldr	r2, [r7, #4]
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	781b      	ldrb	r3, [r3, #0]
 80119ea:	009b      	lsls	r3, r3, #2
 80119ec:	4413      	add	r3, r2
 80119ee:	881b      	ldrh	r3, [r3, #0]
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80119f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80119fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80119fc:	687a      	ldr	r2, [r7, #4]
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	009b      	lsls	r3, r3, #2
 8011a04:	441a      	add	r2, r3
 8011a06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011a08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011a1c:	687a      	ldr	r2, [r7, #4]
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	009b      	lsls	r3, r3, #2
 8011a24:	4413      	add	r3, r2
 8011a26:	881b      	ldrh	r3, [r3, #0]
 8011a28:	b29b      	uxth	r3, r3
 8011a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011a32:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011a34:	687a      	ldr	r2, [r7, #4]
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	781b      	ldrb	r3, [r3, #0]
 8011a3a:	009b      	lsls	r3, r3, #2
 8011a3c:	441a      	add	r2, r3
 8011a3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011a40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011a54:	687a      	ldr	r2, [r7, #4]
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	009b      	lsls	r3, r3, #2
 8011a5c:	4413      	add	r3, r2
 8011a5e:	881b      	ldrh	r3, [r3, #0]
 8011a60:	b29b      	uxth	r3, r3
 8011a62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a6a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011a6c:	687a      	ldr	r2, [r7, #4]
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	781b      	ldrb	r3, [r3, #0]
 8011a72:	009b      	lsls	r3, r3, #2
 8011a74:	441a      	add	r2, r3
 8011a76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011a78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a88:	b29b      	uxth	r3, r3
 8011a8a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011a8c:	2300      	movs	r3, #0
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3734      	adds	r7, #52	@ 0x34
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr

08011a9a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011a9a:	b580      	push	{r7, lr}
 8011a9c:	b0c2      	sub	sp, #264	@ 0x108
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011aa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011aa8:	6018      	str	r0, [r3, #0]
 8011aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011ab2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	785b      	ldrb	r3, [r3, #1]
 8011ac0:	2b01      	cmp	r3, #1
 8011ac2:	f040 86b7 	bne.w	8012834 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8011ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	699a      	ldr	r2, [r3, #24]
 8011ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	691b      	ldr	r3, [r3, #16]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d908      	bls.n	8011af4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8011ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	691b      	ldr	r3, [r3, #16]
 8011aee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8011af2:	e007      	b.n	8011b04 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8011af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	699b      	ldr	r3, [r3, #24]
 8011b00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	7b1b      	ldrb	r3, [r3, #12]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d13a      	bne.n	8011b8a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	6959      	ldr	r1, [r3, #20]
 8011b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	88da      	ldrh	r2, [r3, #6]
 8011b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b30:	b29b      	uxth	r3, r3
 8011b32:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8011b36:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8011b3a:	6800      	ldr	r0, [r0, #0]
 8011b3c:	f001 fc98 	bl	8013470 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011b44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	613b      	str	r3, [r7, #16]
 8011b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011b50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011b5a:	b29b      	uxth	r3, r3
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	4413      	add	r3, r2
 8011b62:	613b      	str	r3, [r7, #16]
 8011b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	00da      	lsls	r2, r3, #3
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	4413      	add	r3, r2
 8011b76:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011b7a:	60fb      	str	r3, [r7, #12]
 8011b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b80:	b29a      	uxth	r2, r3
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	801a      	strh	r2, [r3, #0]
 8011b86:	f000 be1f 	b.w	80127c8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	78db      	ldrb	r3, [r3, #3]
 8011b96:	2b02      	cmp	r3, #2
 8011b98:	f040 8462 	bne.w	8012460 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	6a1a      	ldr	r2, [r3, #32]
 8011ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	691b      	ldr	r3, [r3, #16]
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	f240 83df 	bls.w	8012378 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011bbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011bc2:	681a      	ldr	r2, [r3, #0]
 8011bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	781b      	ldrb	r3, [r3, #0]
 8011bd0:	009b      	lsls	r3, r3, #2
 8011bd2:	4413      	add	r3, r2
 8011bd4:	881b      	ldrh	r3, [r3, #0]
 8011bd6:	b29b      	uxth	r3, r3
 8011bd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011be0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8011be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011be8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011bec:	681a      	ldr	r2, [r3, #0]
 8011bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	781b      	ldrb	r3, [r3, #0]
 8011bfa:	009b      	lsls	r3, r3, #2
 8011bfc:	441a      	add	r2, r3
 8011bfe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8011c02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c0a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8011c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011c1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	6a1a      	ldr	r2, [r3, #32]
 8011c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c26:	1ad2      	subs	r2, r2, r3
 8011c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011c38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011c3c:	681a      	ldr	r2, [r3, #0]
 8011c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	009b      	lsls	r3, r3, #2
 8011c4c:	4413      	add	r3, r2
 8011c4e:	881b      	ldrh	r3, [r3, #0]
 8011c50:	b29b      	uxth	r3, r3
 8011c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	f000 81c7 	beq.w	8011fea <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011c60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	633b      	str	r3, [r7, #48]	@ 0x30
 8011c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	785b      	ldrb	r3, [r3, #1]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d177      	bne.n	8011d68 <USB_EPStartXfer+0x2ce>
 8011c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011c7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011c88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	461a      	mov	r2, r3
 8011c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c98:	4413      	add	r3, r2
 8011c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	00da      	lsls	r2, r3, #3
 8011caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cac:	4413      	add	r3, r2
 8011cae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8011cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cb6:	881b      	ldrh	r3, [r3, #0]
 8011cb8:	b29b      	uxth	r3, r3
 8011cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011cbe:	b29a      	uxth	r2, r3
 8011cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cc2:	801a      	strh	r2, [r3, #0]
 8011cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8011cca:	d921      	bls.n	8011d10 <USB_EPStartXfer+0x276>
 8011ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cd0:	095b      	lsrs	r3, r3, #5
 8011cd2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8011cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cda:	f003 031f 	and.w	r3, r3, #31
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d104      	bne.n	8011cec <USB_EPStartXfer+0x252>
 8011ce2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8011ce6:	3b01      	subs	r3, #1
 8011ce8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8011cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cee:	881b      	ldrh	r3, [r3, #0]
 8011cf0:	b29a      	uxth	r2, r3
 8011cf2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	029b      	lsls	r3, r3, #10
 8011cfa:	b29b      	uxth	r3, r3
 8011cfc:	4313      	orrs	r3, r2
 8011cfe:	b29b      	uxth	r3, r3
 8011d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011d08:	b29a      	uxth	r2, r3
 8011d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d0c:	801a      	strh	r2, [r3, #0]
 8011d0e:	e050      	b.n	8011db2 <USB_EPStartXfer+0x318>
 8011d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d10a      	bne.n	8011d2e <USB_EPStartXfer+0x294>
 8011d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d1a:	881b      	ldrh	r3, [r3, #0]
 8011d1c:	b29b      	uxth	r3, r3
 8011d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011d26:	b29a      	uxth	r2, r3
 8011d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d2a:	801a      	strh	r2, [r3, #0]
 8011d2c:	e041      	b.n	8011db2 <USB_EPStartXfer+0x318>
 8011d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d32:	085b      	lsrs	r3, r3, #1
 8011d34:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8011d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d3c:	f003 0301 	and.w	r3, r3, #1
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d004      	beq.n	8011d4e <USB_EPStartXfer+0x2b4>
 8011d44:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8011d48:	3301      	adds	r3, #1
 8011d4a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8011d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d50:	881b      	ldrh	r3, [r3, #0]
 8011d52:	b29a      	uxth	r2, r3
 8011d54:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	029b      	lsls	r3, r3, #10
 8011d5c:	b29b      	uxth	r3, r3
 8011d5e:	4313      	orrs	r3, r2
 8011d60:	b29a      	uxth	r2, r3
 8011d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d64:	801a      	strh	r2, [r3, #0]
 8011d66:	e024      	b.n	8011db2 <USB_EPStartXfer+0x318>
 8011d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	785b      	ldrb	r3, [r3, #1]
 8011d74:	2b01      	cmp	r3, #1
 8011d76:	d11c      	bne.n	8011db2 <USB_EPStartXfer+0x318>
 8011d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011d7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	461a      	mov	r2, r3
 8011d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d8c:	4413      	add	r3, r2
 8011d8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	781b      	ldrb	r3, [r3, #0]
 8011d9c:	00da      	lsls	r2, r3, #3
 8011d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011da0:	4413      	add	r3, r2
 8011da2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dac:	b29a      	uxth	r2, r3
 8011dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011db0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	895b      	ldrh	r3, [r3, #10]
 8011dbe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	6959      	ldr	r1, [r3, #20]
 8011dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dd2:	b29b      	uxth	r3, r3
 8011dd4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011dd8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8011ddc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8011de0:	6800      	ldr	r0, [r0, #0]
 8011de2:	f001 fb45 	bl	8013470 <USB_WritePMA>
            ep->xfer_buff += len;
 8011de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	695a      	ldr	r2, [r3, #20]
 8011df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011df6:	441a      	add	r2, r3
 8011df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	6a1a      	ldr	r2, [r3, #32]
 8011e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	691b      	ldr	r3, [r3, #16]
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	d90f      	bls.n	8011e40 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8011e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	6a1a      	ldr	r2, [r3, #32]
 8011e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e30:	1ad2      	subs	r2, r2, r3
 8011e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	621a      	str	r2, [r3, #32]
 8011e3e:	e00e      	b.n	8011e5e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8011e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	6a1b      	ldr	r3, [r3, #32]
 8011e4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8011e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	785b      	ldrb	r3, [r3, #1]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d177      	bne.n	8011f5e <USB_EPStartXfer+0x4c4>
 8011e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	61bb      	str	r3, [r7, #24]
 8011e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011e88:	b29b      	uxth	r3, r3
 8011e8a:	461a      	mov	r2, r3
 8011e8c:	69bb      	ldr	r3, [r7, #24]
 8011e8e:	4413      	add	r3, r2
 8011e90:	61bb      	str	r3, [r7, #24]
 8011e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	781b      	ldrb	r3, [r3, #0]
 8011e9e:	00da      	lsls	r2, r3, #3
 8011ea0:	69bb      	ldr	r3, [r7, #24]
 8011ea2:	4413      	add	r3, r2
 8011ea4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011ea8:	617b      	str	r3, [r7, #20]
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	881b      	ldrh	r3, [r3, #0]
 8011eae:	b29b      	uxth	r3, r3
 8011eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011eb4:	b29a      	uxth	r2, r3
 8011eb6:	697b      	ldr	r3, [r7, #20]
 8011eb8:	801a      	strh	r2, [r3, #0]
 8011eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ebe:	2b3e      	cmp	r3, #62	@ 0x3e
 8011ec0:	d921      	bls.n	8011f06 <USB_EPStartXfer+0x46c>
 8011ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ec6:	095b      	lsrs	r3, r3, #5
 8011ec8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8011ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ed0:	f003 031f 	and.w	r3, r3, #31
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d104      	bne.n	8011ee2 <USB_EPStartXfer+0x448>
 8011ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011edc:	3b01      	subs	r3, #1
 8011ede:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	881b      	ldrh	r3, [r3, #0]
 8011ee6:	b29a      	uxth	r2, r3
 8011ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011eec:	b29b      	uxth	r3, r3
 8011eee:	029b      	lsls	r3, r3, #10
 8011ef0:	b29b      	uxth	r3, r3
 8011ef2:	4313      	orrs	r3, r2
 8011ef4:	b29b      	uxth	r3, r3
 8011ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	801a      	strh	r2, [r3, #0]
 8011f04:	e056      	b.n	8011fb4 <USB_EPStartXfer+0x51a>
 8011f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d10a      	bne.n	8011f24 <USB_EPStartXfer+0x48a>
 8011f0e:	697b      	ldr	r3, [r7, #20]
 8011f10:	881b      	ldrh	r3, [r3, #0]
 8011f12:	b29b      	uxth	r3, r3
 8011f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f1c:	b29a      	uxth	r2, r3
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	801a      	strh	r2, [r3, #0]
 8011f22:	e047      	b.n	8011fb4 <USB_EPStartXfer+0x51a>
 8011f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f28:	085b      	lsrs	r3, r3, #1
 8011f2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8011f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f32:	f003 0301 	and.w	r3, r3, #1
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d004      	beq.n	8011f44 <USB_EPStartXfer+0x4aa>
 8011f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011f3e:	3301      	adds	r3, #1
 8011f40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	881b      	ldrh	r3, [r3, #0]
 8011f48:	b29a      	uxth	r2, r3
 8011f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	029b      	lsls	r3, r3, #10
 8011f52:	b29b      	uxth	r3, r3
 8011f54:	4313      	orrs	r3, r2
 8011f56:	b29a      	uxth	r2, r3
 8011f58:	697b      	ldr	r3, [r7, #20]
 8011f5a:	801a      	strh	r2, [r3, #0]
 8011f5c:	e02a      	b.n	8011fb4 <USB_EPStartXfer+0x51a>
 8011f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011f62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	785b      	ldrb	r3, [r3, #1]
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d122      	bne.n	8011fb4 <USB_EPStartXfer+0x51a>
 8011f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	623b      	str	r3, [r7, #32]
 8011f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011f88:	b29b      	uxth	r3, r3
 8011f8a:	461a      	mov	r2, r3
 8011f8c:	6a3b      	ldr	r3, [r7, #32]
 8011f8e:	4413      	add	r3, r2
 8011f90:	623b      	str	r3, [r7, #32]
 8011f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	781b      	ldrb	r3, [r3, #0]
 8011f9e:	00da      	lsls	r2, r3, #3
 8011fa0:	6a3b      	ldr	r3, [r7, #32]
 8011fa2:	4413      	add	r3, r2
 8011fa4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011fa8:	61fb      	str	r3, [r7, #28]
 8011faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fae:	b29a      	uxth	r2, r3
 8011fb0:	69fb      	ldr	r3, [r7, #28]
 8011fb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	891b      	ldrh	r3, [r3, #8]
 8011fc0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	6959      	ldr	r1, [r3, #20]
 8011fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fd4:	b29b      	uxth	r3, r3
 8011fd6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011fda:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8011fde:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8011fe2:	6800      	ldr	r0, [r0, #0]
 8011fe4:	f001 fa44 	bl	8013470 <USB_WritePMA>
 8011fe8:	e3ee      	b.n	80127c8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	785b      	ldrb	r3, [r3, #1]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d177      	bne.n	80120ea <USB_EPStartXfer+0x650>
 8011ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011ffe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801200a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012014:	b29b      	uxth	r3, r3
 8012016:	461a      	mov	r2, r3
 8012018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801201a:	4413      	add	r3, r2
 801201c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801201e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	00da      	lsls	r2, r3, #3
 801202c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801202e:	4413      	add	r3, r2
 8012030:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012034:	647b      	str	r3, [r7, #68]	@ 0x44
 8012036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012038:	881b      	ldrh	r3, [r3, #0]
 801203a:	b29b      	uxth	r3, r3
 801203c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012040:	b29a      	uxth	r2, r3
 8012042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012044:	801a      	strh	r2, [r3, #0]
 8012046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801204a:	2b3e      	cmp	r3, #62	@ 0x3e
 801204c:	d921      	bls.n	8012092 <USB_EPStartXfer+0x5f8>
 801204e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012052:	095b      	lsrs	r3, r3, #5
 8012054:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8012058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801205c:	f003 031f 	and.w	r3, r3, #31
 8012060:	2b00      	cmp	r3, #0
 8012062:	d104      	bne.n	801206e <USB_EPStartXfer+0x5d4>
 8012064:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012068:	3b01      	subs	r3, #1
 801206a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801206e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012070:	881b      	ldrh	r3, [r3, #0]
 8012072:	b29a      	uxth	r2, r3
 8012074:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012078:	b29b      	uxth	r3, r3
 801207a:	029b      	lsls	r3, r3, #10
 801207c:	b29b      	uxth	r3, r3
 801207e:	4313      	orrs	r3, r2
 8012080:	b29b      	uxth	r3, r3
 8012082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801208a:	b29a      	uxth	r2, r3
 801208c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801208e:	801a      	strh	r2, [r3, #0]
 8012090:	e056      	b.n	8012140 <USB_EPStartXfer+0x6a6>
 8012092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012096:	2b00      	cmp	r3, #0
 8012098:	d10a      	bne.n	80120b0 <USB_EPStartXfer+0x616>
 801209a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801209c:	881b      	ldrh	r3, [r3, #0]
 801209e:	b29b      	uxth	r3, r3
 80120a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120a8:	b29a      	uxth	r2, r3
 80120aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120ac:	801a      	strh	r2, [r3, #0]
 80120ae:	e047      	b.n	8012140 <USB_EPStartXfer+0x6a6>
 80120b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120b4:	085b      	lsrs	r3, r3, #1
 80120b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80120ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120be:	f003 0301 	and.w	r3, r3, #1
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d004      	beq.n	80120d0 <USB_EPStartXfer+0x636>
 80120c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80120ca:	3301      	adds	r3, #1
 80120cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80120d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120d2:	881b      	ldrh	r3, [r3, #0]
 80120d4:	b29a      	uxth	r2, r3
 80120d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80120da:	b29b      	uxth	r3, r3
 80120dc:	029b      	lsls	r3, r3, #10
 80120de:	b29b      	uxth	r3, r3
 80120e0:	4313      	orrs	r3, r2
 80120e2:	b29a      	uxth	r2, r3
 80120e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120e6:	801a      	strh	r2, [r3, #0]
 80120e8:	e02a      	b.n	8012140 <USB_EPStartXfer+0x6a6>
 80120ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80120ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	785b      	ldrb	r3, [r3, #1]
 80120f6:	2b01      	cmp	r3, #1
 80120f8:	d122      	bne.n	8012140 <USB_EPStartXfer+0x6a6>
 80120fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80120fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	653b      	str	r3, [r7, #80]	@ 0x50
 8012106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801210a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012114:	b29b      	uxth	r3, r3
 8012116:	461a      	mov	r2, r3
 8012118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801211a:	4413      	add	r3, r2
 801211c:	653b      	str	r3, [r7, #80]	@ 0x50
 801211e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	00da      	lsls	r2, r3, #3
 801212c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801212e:	4413      	add	r3, r2
 8012130:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012134:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801213a:	b29a      	uxth	r2, r3
 801213c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801213e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	891b      	ldrh	r3, [r3, #8]
 801214c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	6959      	ldr	r1, [r3, #20]
 801215c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012160:	b29b      	uxth	r3, r3
 8012162:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012166:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 801216a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 801216e:	6800      	ldr	r0, [r0, #0]
 8012170:	f001 f97e 	bl	8013470 <USB_WritePMA>
            ep->xfer_buff += len;
 8012174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	695a      	ldr	r2, [r3, #20]
 8012180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012184:	441a      	add	r2, r3
 8012186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801218a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8012192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	6a1a      	ldr	r2, [r3, #32]
 801219e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80121a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	691b      	ldr	r3, [r3, #16]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d90f      	bls.n	80121ce <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80121ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80121b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	6a1a      	ldr	r2, [r3, #32]
 80121ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121be:	1ad2      	subs	r2, r2, r3
 80121c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80121c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	621a      	str	r2, [r3, #32]
 80121cc:	e00e      	b.n	80121ec <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80121ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80121d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	6a1b      	ldr	r3, [r3, #32]
 80121da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80121de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80121e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	2200      	movs	r2, #0
 80121ea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80121ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80121f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80121f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80121fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	785b      	ldrb	r3, [r3, #1]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d177      	bne.n	80122f8 <USB_EPStartXfer+0x85e>
 8012208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801220c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012218:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012222:	b29b      	uxth	r3, r3
 8012224:	461a      	mov	r2, r3
 8012226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012228:	4413      	add	r3, r2
 801222a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801222c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	781b      	ldrb	r3, [r3, #0]
 8012238:	00da      	lsls	r2, r3, #3
 801223a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801223c:	4413      	add	r3, r2
 801223e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012242:	637b      	str	r3, [r7, #52]	@ 0x34
 8012244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012246:	881b      	ldrh	r3, [r3, #0]
 8012248:	b29b      	uxth	r3, r3
 801224a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801224e:	b29a      	uxth	r2, r3
 8012250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012252:	801a      	strh	r2, [r3, #0]
 8012254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012258:	2b3e      	cmp	r3, #62	@ 0x3e
 801225a:	d921      	bls.n	80122a0 <USB_EPStartXfer+0x806>
 801225c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012260:	095b      	lsrs	r3, r3, #5
 8012262:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8012266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801226a:	f003 031f 	and.w	r3, r3, #31
 801226e:	2b00      	cmp	r3, #0
 8012270:	d104      	bne.n	801227c <USB_EPStartXfer+0x7e2>
 8012272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012276:	3b01      	subs	r3, #1
 8012278:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801227c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801227e:	881b      	ldrh	r3, [r3, #0]
 8012280:	b29a      	uxth	r2, r3
 8012282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012286:	b29b      	uxth	r3, r3
 8012288:	029b      	lsls	r3, r3, #10
 801228a:	b29b      	uxth	r3, r3
 801228c:	4313      	orrs	r3, r2
 801228e:	b29b      	uxth	r3, r3
 8012290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012298:	b29a      	uxth	r2, r3
 801229a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801229c:	801a      	strh	r2, [r3, #0]
 801229e:	e050      	b.n	8012342 <USB_EPStartXfer+0x8a8>
 80122a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d10a      	bne.n	80122be <USB_EPStartXfer+0x824>
 80122a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122aa:	881b      	ldrh	r3, [r3, #0]
 80122ac:	b29b      	uxth	r3, r3
 80122ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80122b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80122b6:	b29a      	uxth	r2, r3
 80122b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122ba:	801a      	strh	r2, [r3, #0]
 80122bc:	e041      	b.n	8012342 <USB_EPStartXfer+0x8a8>
 80122be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122c2:	085b      	lsrs	r3, r3, #1
 80122c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80122c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122cc:	f003 0301 	and.w	r3, r3, #1
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d004      	beq.n	80122de <USB_EPStartXfer+0x844>
 80122d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80122d8:	3301      	adds	r3, #1
 80122da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80122de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122e0:	881b      	ldrh	r3, [r3, #0]
 80122e2:	b29a      	uxth	r2, r3
 80122e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80122e8:	b29b      	uxth	r3, r3
 80122ea:	029b      	lsls	r3, r3, #10
 80122ec:	b29b      	uxth	r3, r3
 80122ee:	4313      	orrs	r3, r2
 80122f0:	b29a      	uxth	r2, r3
 80122f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122f4:	801a      	strh	r2, [r3, #0]
 80122f6:	e024      	b.n	8012342 <USB_EPStartXfer+0x8a8>
 80122f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80122fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	785b      	ldrb	r3, [r3, #1]
 8012304:	2b01      	cmp	r3, #1
 8012306:	d11c      	bne.n	8012342 <USB_EPStartXfer+0x8a8>
 8012308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801230c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012316:	b29b      	uxth	r3, r3
 8012318:	461a      	mov	r2, r3
 801231a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801231c:	4413      	add	r3, r2
 801231e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	781b      	ldrb	r3, [r3, #0]
 801232c:	00da      	lsls	r2, r3, #3
 801232e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012330:	4413      	add	r3, r2
 8012332:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801233c:	b29a      	uxth	r2, r3
 801233e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012340:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8012342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	895b      	ldrh	r3, [r3, #10]
 801234e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	6959      	ldr	r1, [r3, #20]
 801235e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012362:	b29b      	uxth	r3, r3
 8012364:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012368:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 801236c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8012370:	6800      	ldr	r0, [r0, #0]
 8012372:	f001 f87d 	bl	8013470 <USB_WritePMA>
 8012376:	e227      	b.n	80127c8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801237c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	6a1b      	ldr	r3, [r3, #32]
 8012384:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8012388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801238c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012390:	681a      	ldr	r2, [r3, #0]
 8012392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	781b      	ldrb	r3, [r3, #0]
 801239e:	009b      	lsls	r3, r3, #2
 80123a0:	4413      	add	r3, r2
 80123a2:	881b      	ldrh	r3, [r3, #0]
 80123a4:	b29b      	uxth	r3, r3
 80123a6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80123aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80123ae:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80123b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80123b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80123ba:	681a      	ldr	r2, [r3, #0]
 80123bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80123c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	781b      	ldrb	r3, [r3, #0]
 80123c8:	009b      	lsls	r3, r3, #2
 80123ca:	441a      	add	r2, r3
 80123cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80123d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80123d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80123d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80123dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80123e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80123e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80123f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80123f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80123fe:	b29b      	uxth	r3, r3
 8012400:	461a      	mov	r2, r3
 8012402:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012404:	4413      	add	r3, r2
 8012406:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801240c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	00da      	lsls	r2, r3, #3
 8012416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012418:	4413      	add	r3, r2
 801241a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801241e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012424:	b29a      	uxth	r2, r3
 8012426:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012428:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801242a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801242e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	891b      	ldrh	r3, [r3, #8]
 8012436:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801243a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801243e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	6959      	ldr	r1, [r3, #20]
 8012446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801244a:	b29b      	uxth	r3, r3
 801244c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012450:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8012454:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8012458:	6800      	ldr	r0, [r0, #0]
 801245a:	f001 f809 	bl	8013470 <USB_WritePMA>
 801245e:	e1b3      	b.n	80127c8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	6a1a      	ldr	r2, [r3, #32]
 801246c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012470:	1ad2      	subs	r2, r2, r3
 8012472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801247e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012486:	681a      	ldr	r2, [r3, #0]
 8012488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801248c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	009b      	lsls	r3, r3, #2
 8012496:	4413      	add	r3, r2
 8012498:	881b      	ldrh	r3, [r3, #0]
 801249a:	b29b      	uxth	r3, r3
 801249c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	f000 80c6 	beq.w	8012632 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80124a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80124aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80124b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80124b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	785b      	ldrb	r3, [r3, #1]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d177      	bne.n	80125b2 <USB_EPStartXfer+0xb18>
 80124c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80124c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80124ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80124d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80124dc:	b29b      	uxth	r3, r3
 80124de:	461a      	mov	r2, r3
 80124e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80124e2:	4413      	add	r3, r2
 80124e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80124e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80124ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	781b      	ldrb	r3, [r3, #0]
 80124f2:	00da      	lsls	r2, r3, #3
 80124f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80124f6:	4413      	add	r3, r2
 80124f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80124fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80124fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012500:	881b      	ldrh	r3, [r3, #0]
 8012502:	b29b      	uxth	r3, r3
 8012504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012508:	b29a      	uxth	r2, r3
 801250a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801250c:	801a      	strh	r2, [r3, #0]
 801250e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012512:	2b3e      	cmp	r3, #62	@ 0x3e
 8012514:	d921      	bls.n	801255a <USB_EPStartXfer+0xac0>
 8012516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801251a:	095b      	lsrs	r3, r3, #5
 801251c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8012520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012524:	f003 031f 	and.w	r3, r3, #31
 8012528:	2b00      	cmp	r3, #0
 801252a:	d104      	bne.n	8012536 <USB_EPStartXfer+0xa9c>
 801252c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012530:	3b01      	subs	r3, #1
 8012532:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8012536:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012538:	881b      	ldrh	r3, [r3, #0]
 801253a:	b29a      	uxth	r2, r3
 801253c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012540:	b29b      	uxth	r3, r3
 8012542:	029b      	lsls	r3, r3, #10
 8012544:	b29b      	uxth	r3, r3
 8012546:	4313      	orrs	r3, r2
 8012548:	b29b      	uxth	r3, r3
 801254a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801254e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012552:	b29a      	uxth	r2, r3
 8012554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012556:	801a      	strh	r2, [r3, #0]
 8012558:	e050      	b.n	80125fc <USB_EPStartXfer+0xb62>
 801255a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801255e:	2b00      	cmp	r3, #0
 8012560:	d10a      	bne.n	8012578 <USB_EPStartXfer+0xade>
 8012562:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012564:	881b      	ldrh	r3, [r3, #0]
 8012566:	b29b      	uxth	r3, r3
 8012568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801256c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012570:	b29a      	uxth	r2, r3
 8012572:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012574:	801a      	strh	r2, [r3, #0]
 8012576:	e041      	b.n	80125fc <USB_EPStartXfer+0xb62>
 8012578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801257c:	085b      	lsrs	r3, r3, #1
 801257e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8012582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012586:	f003 0301 	and.w	r3, r3, #1
 801258a:	2b00      	cmp	r3, #0
 801258c:	d004      	beq.n	8012598 <USB_EPStartXfer+0xafe>
 801258e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012592:	3301      	adds	r3, #1
 8012594:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8012598:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801259a:	881b      	ldrh	r3, [r3, #0]
 801259c:	b29a      	uxth	r2, r3
 801259e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	029b      	lsls	r3, r3, #10
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	4313      	orrs	r3, r2
 80125aa:	b29a      	uxth	r2, r3
 80125ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80125ae:	801a      	strh	r2, [r3, #0]
 80125b0:	e024      	b.n	80125fc <USB_EPStartXfer+0xb62>
 80125b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80125b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	785b      	ldrb	r3, [r3, #1]
 80125be:	2b01      	cmp	r3, #1
 80125c0:	d11c      	bne.n	80125fc <USB_EPStartXfer+0xb62>
 80125c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80125c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80125d0:	b29b      	uxth	r3, r3
 80125d2:	461a      	mov	r2, r3
 80125d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80125d6:	4413      	add	r3, r2
 80125d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80125da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80125de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	781b      	ldrb	r3, [r3, #0]
 80125e6:	00da      	lsls	r2, r3, #3
 80125e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80125ea:	4413      	add	r3, r2
 80125ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80125f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80125f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125f6:	b29a      	uxth	r2, r3
 80125f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80125fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80125fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	895b      	ldrh	r3, [r3, #10]
 8012608:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801260c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	6959      	ldr	r1, [r3, #20]
 8012618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801261c:	b29b      	uxth	r3, r3
 801261e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012622:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8012626:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 801262a:	6800      	ldr	r0, [r0, #0]
 801262c:	f000 ff20 	bl	8013470 <USB_WritePMA>
 8012630:	e0ca      	b.n	80127c8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	785b      	ldrb	r3, [r3, #1]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d177      	bne.n	8012732 <USB_EPStartXfer+0xc98>
 8012642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012646:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801264e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012652:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801265c:	b29b      	uxth	r3, r3
 801265e:	461a      	mov	r2, r3
 8012660:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012662:	4413      	add	r3, r2
 8012664:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801266a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	781b      	ldrb	r3, [r3, #0]
 8012672:	00da      	lsls	r2, r3, #3
 8012674:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012676:	4413      	add	r3, r2
 8012678:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801267c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801267e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012680:	881b      	ldrh	r3, [r3, #0]
 8012682:	b29b      	uxth	r3, r3
 8012684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012688:	b29a      	uxth	r2, r3
 801268a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801268c:	801a      	strh	r2, [r3, #0]
 801268e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012692:	2b3e      	cmp	r3, #62	@ 0x3e
 8012694:	d921      	bls.n	80126da <USB_EPStartXfer+0xc40>
 8012696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801269a:	095b      	lsrs	r3, r3, #5
 801269c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80126a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126a4:	f003 031f 	and.w	r3, r3, #31
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d104      	bne.n	80126b6 <USB_EPStartXfer+0xc1c>
 80126ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80126b0:	3b01      	subs	r3, #1
 80126b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80126b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80126b8:	881b      	ldrh	r3, [r3, #0]
 80126ba:	b29a      	uxth	r2, r3
 80126bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80126c0:	b29b      	uxth	r3, r3
 80126c2:	029b      	lsls	r3, r3, #10
 80126c4:	b29b      	uxth	r3, r3
 80126c6:	4313      	orrs	r3, r2
 80126c8:	b29b      	uxth	r3, r3
 80126ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80126ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80126d2:	b29a      	uxth	r2, r3
 80126d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80126d6:	801a      	strh	r2, [r3, #0]
 80126d8:	e05c      	b.n	8012794 <USB_EPStartXfer+0xcfa>
 80126da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d10a      	bne.n	80126f8 <USB_EPStartXfer+0xc5e>
 80126e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80126e4:	881b      	ldrh	r3, [r3, #0]
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80126ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80126f0:	b29a      	uxth	r2, r3
 80126f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80126f4:	801a      	strh	r2, [r3, #0]
 80126f6:	e04d      	b.n	8012794 <USB_EPStartXfer+0xcfa>
 80126f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126fc:	085b      	lsrs	r3, r3, #1
 80126fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8012702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012706:	f003 0301 	and.w	r3, r3, #1
 801270a:	2b00      	cmp	r3, #0
 801270c:	d004      	beq.n	8012718 <USB_EPStartXfer+0xc7e>
 801270e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8012712:	3301      	adds	r3, #1
 8012714:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8012718:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801271a:	881b      	ldrh	r3, [r3, #0]
 801271c:	b29a      	uxth	r2, r3
 801271e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8012722:	b29b      	uxth	r3, r3
 8012724:	029b      	lsls	r3, r3, #10
 8012726:	b29b      	uxth	r3, r3
 8012728:	4313      	orrs	r3, r2
 801272a:	b29a      	uxth	r2, r3
 801272c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801272e:	801a      	strh	r2, [r3, #0]
 8012730:	e030      	b.n	8012794 <USB_EPStartXfer+0xcfa>
 8012732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	785b      	ldrb	r3, [r3, #1]
 801273e:	2b01      	cmp	r3, #1
 8012740:	d128      	bne.n	8012794 <USB_EPStartXfer+0xcfa>
 8012742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012754:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801275e:	b29b      	uxth	r3, r3
 8012760:	461a      	mov	r2, r3
 8012762:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012766:	4413      	add	r3, r2
 8012768:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801276c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	00da      	lsls	r2, r3, #3
 801277a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801277e:	4413      	add	r3, r2
 8012780:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012784:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801278c:	b29a      	uxth	r2, r3
 801278e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012792:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	891b      	ldrh	r3, [r3, #8]
 80127a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80127a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80127a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	6959      	ldr	r1, [r3, #20]
 80127b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127b4:	b29b      	uxth	r3, r3
 80127b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80127ba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80127be:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80127c2:	6800      	ldr	r0, [r0, #0]
 80127c4:	f000 fe54 	bl	8013470 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80127c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80127cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80127d0:	681a      	ldr	r2, [r3, #0]
 80127d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80127d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	781b      	ldrb	r3, [r3, #0]
 80127de:	009b      	lsls	r3, r3, #2
 80127e0:	4413      	add	r3, r2
 80127e2:	881b      	ldrh	r3, [r3, #0]
 80127e4:	b29b      	uxth	r3, r3
 80127e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80127ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80127ee:	817b      	strh	r3, [r7, #10]
 80127f0:	897b      	ldrh	r3, [r7, #10]
 80127f2:	f083 0310 	eor.w	r3, r3, #16
 80127f6:	817b      	strh	r3, [r7, #10]
 80127f8:	897b      	ldrh	r3, [r7, #10]
 80127fa:	f083 0320 	eor.w	r3, r3, #32
 80127fe:	817b      	strh	r3, [r7, #10]
 8012800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012804:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012808:	681a      	ldr	r2, [r3, #0]
 801280a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801280e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	781b      	ldrb	r3, [r3, #0]
 8012816:	009b      	lsls	r3, r3, #2
 8012818:	441a      	add	r2, r3
 801281a:	897b      	ldrh	r3, [r7, #10]
 801281c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012820:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012824:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801282c:	b29b      	uxth	r3, r3
 801282e:	8013      	strh	r3, [r2, #0]
 8012830:	f000 bcde 	b.w	80131f0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	7b1b      	ldrb	r3, [r3, #12]
 8012840:	2b00      	cmp	r3, #0
 8012842:	f040 80bb 	bne.w	80129bc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801284a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	699a      	ldr	r2, [r3, #24]
 8012852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	691b      	ldr	r3, [r3, #16]
 801285e:	429a      	cmp	r2, r3
 8012860:	d917      	bls.n	8012892 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8012862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	691b      	ldr	r3, [r3, #16]
 801286e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8012872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	699a      	ldr	r2, [r3, #24]
 801287e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012882:	1ad2      	subs	r2, r2, r3
 8012884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	619a      	str	r2, [r3, #24]
 8012890:	e00e      	b.n	80128b0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8012892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	699b      	ldr	r3, [r3, #24]
 801289e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80128a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80128a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	2200      	movs	r2, #0
 80128ae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80128b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80128b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80128be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80128c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80128cc:	b29b      	uxth	r3, r3
 80128ce:	461a      	mov	r2, r3
 80128d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80128d4:	4413      	add	r3, r2
 80128d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80128da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80128de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	781b      	ldrb	r3, [r3, #0]
 80128e6:	00da      	lsls	r2, r3, #3
 80128e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80128ec:	4413      	add	r3, r2
 80128ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80128f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80128f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80128fa:	881b      	ldrh	r3, [r3, #0]
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012902:	b29a      	uxth	r2, r3
 8012904:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012908:	801a      	strh	r2, [r3, #0]
 801290a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801290e:	2b3e      	cmp	r3, #62	@ 0x3e
 8012910:	d924      	bls.n	801295c <USB_EPStartXfer+0xec2>
 8012912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012916:	095b      	lsrs	r3, r3, #5
 8012918:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801291c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012920:	f003 031f 	and.w	r3, r3, #31
 8012924:	2b00      	cmp	r3, #0
 8012926:	d104      	bne.n	8012932 <USB_EPStartXfer+0xe98>
 8012928:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801292c:	3b01      	subs	r3, #1
 801292e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8012932:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012936:	881b      	ldrh	r3, [r3, #0]
 8012938:	b29a      	uxth	r2, r3
 801293a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801293e:	b29b      	uxth	r3, r3
 8012940:	029b      	lsls	r3, r3, #10
 8012942:	b29b      	uxth	r3, r3
 8012944:	4313      	orrs	r3, r2
 8012946:	b29b      	uxth	r3, r3
 8012948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801294c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012950:	b29a      	uxth	r2, r3
 8012952:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012956:	801a      	strh	r2, [r3, #0]
 8012958:	f000 bc10 	b.w	801317c <USB_EPStartXfer+0x16e2>
 801295c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012960:	2b00      	cmp	r3, #0
 8012962:	d10c      	bne.n	801297e <USB_EPStartXfer+0xee4>
 8012964:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012968:	881b      	ldrh	r3, [r3, #0]
 801296a:	b29b      	uxth	r3, r3
 801296c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012974:	b29a      	uxth	r2, r3
 8012976:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801297a:	801a      	strh	r2, [r3, #0]
 801297c:	e3fe      	b.n	801317c <USB_EPStartXfer+0x16e2>
 801297e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012982:	085b      	lsrs	r3, r3, #1
 8012984:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8012988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801298c:	f003 0301 	and.w	r3, r3, #1
 8012990:	2b00      	cmp	r3, #0
 8012992:	d004      	beq.n	801299e <USB_EPStartXfer+0xf04>
 8012994:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012998:	3301      	adds	r3, #1
 801299a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801299e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80129a2:	881b      	ldrh	r3, [r3, #0]
 80129a4:	b29a      	uxth	r2, r3
 80129a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80129aa:	b29b      	uxth	r3, r3
 80129ac:	029b      	lsls	r3, r3, #10
 80129ae:	b29b      	uxth	r3, r3
 80129b0:	4313      	orrs	r3, r2
 80129b2:	b29a      	uxth	r2, r3
 80129b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80129b8:	801a      	strh	r2, [r3, #0]
 80129ba:	e3df      	b.n	801317c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80129bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80129c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	78db      	ldrb	r3, [r3, #3]
 80129c8:	2b02      	cmp	r3, #2
 80129ca:	f040 8218 	bne.w	8012dfe <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80129ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80129d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	785b      	ldrb	r3, [r3, #1]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f040 809d 	bne.w	8012b1a <USB_EPStartXfer+0x1080>
 80129e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80129e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80129ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80129f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80129fc:	b29b      	uxth	r3, r3
 80129fe:	461a      	mov	r2, r3
 8012a00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012a04:	4413      	add	r3, r2
 8012a06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	781b      	ldrb	r3, [r3, #0]
 8012a16:	00da      	lsls	r2, r3, #3
 8012a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012a1c:	4413      	add	r3, r2
 8012a1e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012a22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012a26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012a2a:	881b      	ldrh	r3, [r3, #0]
 8012a2c:	b29b      	uxth	r3, r3
 8012a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012a32:	b29a      	uxth	r2, r3
 8012a34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012a38:	801a      	strh	r2, [r3, #0]
 8012a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	691b      	ldr	r3, [r3, #16]
 8012a46:	2b3e      	cmp	r3, #62	@ 0x3e
 8012a48:	d92b      	bls.n	8012aa2 <USB_EPStartXfer+0x1008>
 8012a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	691b      	ldr	r3, [r3, #16]
 8012a56:	095b      	lsrs	r3, r3, #5
 8012a58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	691b      	ldr	r3, [r3, #16]
 8012a68:	f003 031f 	and.w	r3, r3, #31
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d104      	bne.n	8012a7a <USB_EPStartXfer+0xfe0>
 8012a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a74:	3b01      	subs	r3, #1
 8012a76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012a7e:	881b      	ldrh	r3, [r3, #0]
 8012a80:	b29a      	uxth	r2, r3
 8012a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a86:	b29b      	uxth	r3, r3
 8012a88:	029b      	lsls	r3, r3, #10
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	4313      	orrs	r3, r2
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a98:	b29a      	uxth	r2, r3
 8012a9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012a9e:	801a      	strh	r2, [r3, #0]
 8012aa0:	e070      	b.n	8012b84 <USB_EPStartXfer+0x10ea>
 8012aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012aa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	691b      	ldr	r3, [r3, #16]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d10c      	bne.n	8012acc <USB_EPStartXfer+0x1032>
 8012ab2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012ab6:	881b      	ldrh	r3, [r3, #0]
 8012ab8:	b29b      	uxth	r3, r3
 8012aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012ac2:	b29a      	uxth	r2, r3
 8012ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012ac8:	801a      	strh	r2, [r3, #0]
 8012aca:	e05b      	b.n	8012b84 <USB_EPStartXfer+0x10ea>
 8012acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	691b      	ldr	r3, [r3, #16]
 8012ad8:	085b      	lsrs	r3, r3, #1
 8012ada:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	691b      	ldr	r3, [r3, #16]
 8012aea:	f003 0301 	and.w	r3, r3, #1
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d004      	beq.n	8012afc <USB_EPStartXfer+0x1062>
 8012af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012af6:	3301      	adds	r3, #1
 8012af8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012b00:	881b      	ldrh	r3, [r3, #0]
 8012b02:	b29a      	uxth	r2, r3
 8012b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012b08:	b29b      	uxth	r3, r3
 8012b0a:	029b      	lsls	r3, r3, #10
 8012b0c:	b29b      	uxth	r3, r3
 8012b0e:	4313      	orrs	r3, r2
 8012b10:	b29a      	uxth	r2, r3
 8012b12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012b16:	801a      	strh	r2, [r3, #0]
 8012b18:	e034      	b.n	8012b84 <USB_EPStartXfer+0x10ea>
 8012b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	785b      	ldrb	r3, [r3, #1]
 8012b26:	2b01      	cmp	r3, #1
 8012b28:	d12c      	bne.n	8012b84 <USB_EPStartXfer+0x10ea>
 8012b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012b2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012b3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012b46:	b29b      	uxth	r3, r3
 8012b48:	461a      	mov	r2, r3
 8012b4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012b4e:	4413      	add	r3, r2
 8012b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	781b      	ldrb	r3, [r3, #0]
 8012b60:	00da      	lsls	r2, r3, #3
 8012b62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012b66:	4413      	add	r3, r2
 8012b68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	691b      	ldr	r3, [r3, #16]
 8012b7c:	b29a      	uxth	r2, r3
 8012b7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012b82:	801a      	strh	r2, [r3, #0]
 8012b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012b88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012b96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	785b      	ldrb	r3, [r3, #1]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	f040 809d 	bne.w	8012cde <USB_EPStartXfer+0x1244>
 8012ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012ba8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012bb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012bc0:	b29b      	uxth	r3, r3
 8012bc2:	461a      	mov	r2, r3
 8012bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012bc8:	4413      	add	r3, r2
 8012bca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	781b      	ldrb	r3, [r3, #0]
 8012bda:	00da      	lsls	r2, r3, #3
 8012bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012be0:	4413      	add	r3, r2
 8012be2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012be6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012bea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012bee:	881b      	ldrh	r3, [r3, #0]
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012bf6:	b29a      	uxth	r2, r3
 8012bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012bfc:	801a      	strh	r2, [r3, #0]
 8012bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	691b      	ldr	r3, [r3, #16]
 8012c0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8012c0c:	d92b      	bls.n	8012c66 <USB_EPStartXfer+0x11cc>
 8012c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	691b      	ldr	r3, [r3, #16]
 8012c1a:	095b      	lsrs	r3, r3, #5
 8012c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012c24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	691b      	ldr	r3, [r3, #16]
 8012c2c:	f003 031f 	and.w	r3, r3, #31
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d104      	bne.n	8012c3e <USB_EPStartXfer+0x11a4>
 8012c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012c38:	3b01      	subs	r3, #1
 8012c3a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012c3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012c42:	881b      	ldrh	r3, [r3, #0]
 8012c44:	b29a      	uxth	r2, r3
 8012c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012c4a:	b29b      	uxth	r3, r3
 8012c4c:	029b      	lsls	r3, r3, #10
 8012c4e:	b29b      	uxth	r3, r3
 8012c50:	4313      	orrs	r3, r2
 8012c52:	b29b      	uxth	r3, r3
 8012c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012c5c:	b29a      	uxth	r2, r3
 8012c5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012c62:	801a      	strh	r2, [r3, #0]
 8012c64:	e069      	b.n	8012d3a <USB_EPStartXfer+0x12a0>
 8012c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	691b      	ldr	r3, [r3, #16]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d10c      	bne.n	8012c90 <USB_EPStartXfer+0x11f6>
 8012c76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012c7a:	881b      	ldrh	r3, [r3, #0]
 8012c7c:	b29b      	uxth	r3, r3
 8012c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012c86:	b29a      	uxth	r2, r3
 8012c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012c8c:	801a      	strh	r2, [r3, #0]
 8012c8e:	e054      	b.n	8012d3a <USB_EPStartXfer+0x12a0>
 8012c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	691b      	ldr	r3, [r3, #16]
 8012c9c:	085b      	lsrs	r3, r3, #1
 8012c9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012ca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	691b      	ldr	r3, [r3, #16]
 8012cae:	f003 0301 	and.w	r3, r3, #1
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d004      	beq.n	8012cc0 <USB_EPStartXfer+0x1226>
 8012cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012cba:	3301      	adds	r3, #1
 8012cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012cc4:	881b      	ldrh	r3, [r3, #0]
 8012cc6:	b29a      	uxth	r2, r3
 8012cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012ccc:	b29b      	uxth	r3, r3
 8012cce:	029b      	lsls	r3, r3, #10
 8012cd0:	b29b      	uxth	r3, r3
 8012cd2:	4313      	orrs	r3, r2
 8012cd4:	b29a      	uxth	r2, r3
 8012cd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012cda:	801a      	strh	r2, [r3, #0]
 8012cdc:	e02d      	b.n	8012d3a <USB_EPStartXfer+0x12a0>
 8012cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	785b      	ldrb	r3, [r3, #1]
 8012cea:	2b01      	cmp	r3, #1
 8012cec:	d125      	bne.n	8012d3a <USB_EPStartXfer+0x12a0>
 8012cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012cf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012cfc:	b29b      	uxth	r3, r3
 8012cfe:	461a      	mov	r2, r3
 8012d00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012d04:	4413      	add	r3, r2
 8012d06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	781b      	ldrb	r3, [r3, #0]
 8012d16:	00da      	lsls	r2, r3, #3
 8012d18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012d1c:	4413      	add	r3, r2
 8012d1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012d22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	691b      	ldr	r3, [r3, #16]
 8012d32:	b29a      	uxth	r2, r3
 8012d34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012d38:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	69db      	ldr	r3, [r3, #28]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	f000 8218 	beq.w	801317c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012d50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012d54:	681a      	ldr	r2, [r3, #0]
 8012d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	009b      	lsls	r3, r3, #2
 8012d64:	4413      	add	r3, r2
 8012d66:	881b      	ldrh	r3, [r3, #0]
 8012d68:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012d6c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8012d70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d005      	beq.n	8012d84 <USB_EPStartXfer+0x12ea>
 8012d78:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8012d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d10d      	bne.n	8012da0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012d84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8012d88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	f040 81f5 	bne.w	801317c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012d92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8012d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	f040 81ee 	bne.w	801317c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012da4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012da8:	681a      	ldr	r2, [r3, #0]
 8012daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	781b      	ldrb	r3, [r3, #0]
 8012db6:	009b      	lsls	r3, r3, #2
 8012db8:	4413      	add	r3, r2
 8012dba:	881b      	ldrh	r3, [r3, #0]
 8012dbc:	b29b      	uxth	r3, r3
 8012dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012dc6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8012dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012dce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012dd2:	681a      	ldr	r2, [r3, #0]
 8012dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	781b      	ldrb	r3, [r3, #0]
 8012de0:	009b      	lsls	r3, r3, #2
 8012de2:	441a      	add	r2, r3
 8012de4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8012de8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012dec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012df0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012df4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012df8:	b29b      	uxth	r3, r3
 8012dfa:	8013      	strh	r3, [r2, #0]
 8012dfc:	e1be      	b.n	801317c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	78db      	ldrb	r3, [r3, #3]
 8012e0a:	2b01      	cmp	r3, #1
 8012e0c:	f040 81b4 	bne.w	8013178 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8012e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	699a      	ldr	r2, [r3, #24]
 8012e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	691b      	ldr	r3, [r3, #16]
 8012e28:	429a      	cmp	r2, r3
 8012e2a:	d917      	bls.n	8012e5c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8012e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	691b      	ldr	r3, [r3, #16]
 8012e38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8012e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	699a      	ldr	r2, [r3, #24]
 8012e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e4c:	1ad2      	subs	r2, r2, r3
 8012e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012e52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	619a      	str	r2, [r3, #24]
 8012e5a:	e00e      	b.n	8012e7a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8012e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	699b      	ldr	r3, [r3, #24]
 8012e68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8012e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	2200      	movs	r2, #0
 8012e78:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8012e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012e7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	785b      	ldrb	r3, [r3, #1]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	f040 8085 	bne.w	8012f96 <USB_EPStartXfer+0x14fc>
 8012e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012e90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8012e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012e9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012ea8:	b29b      	uxth	r3, r3
 8012eaa:	461a      	mov	r2, r3
 8012eac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012eb0:	4413      	add	r3, r2
 8012eb2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8012eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	00da      	lsls	r2, r3, #3
 8012ec4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012ec8:	4413      	add	r3, r2
 8012eca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012ece:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012ed2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012ed6:	881b      	ldrh	r3, [r3, #0]
 8012ed8:	b29b      	uxth	r3, r3
 8012eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012ede:	b29a      	uxth	r2, r3
 8012ee0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012ee4:	801a      	strh	r2, [r3, #0]
 8012ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012eea:	2b3e      	cmp	r3, #62	@ 0x3e
 8012eec:	d923      	bls.n	8012f36 <USB_EPStartXfer+0x149c>
 8012eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ef2:	095b      	lsrs	r3, r3, #5
 8012ef4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8012ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012efc:	f003 031f 	and.w	r3, r3, #31
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d104      	bne.n	8012f0e <USB_EPStartXfer+0x1474>
 8012f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012f08:	3b01      	subs	r3, #1
 8012f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8012f0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012f12:	881b      	ldrh	r3, [r3, #0]
 8012f14:	b29a      	uxth	r2, r3
 8012f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012f1a:	b29b      	uxth	r3, r3
 8012f1c:	029b      	lsls	r3, r3, #10
 8012f1e:	b29b      	uxth	r3, r3
 8012f20:	4313      	orrs	r3, r2
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012f28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012f2c:	b29a      	uxth	r2, r3
 8012f2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012f32:	801a      	strh	r2, [r3, #0]
 8012f34:	e060      	b.n	8012ff8 <USB_EPStartXfer+0x155e>
 8012f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d10c      	bne.n	8012f58 <USB_EPStartXfer+0x14be>
 8012f3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012f42:	881b      	ldrh	r3, [r3, #0]
 8012f44:	b29b      	uxth	r3, r3
 8012f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012f4e:	b29a      	uxth	r2, r3
 8012f50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012f54:	801a      	strh	r2, [r3, #0]
 8012f56:	e04f      	b.n	8012ff8 <USB_EPStartXfer+0x155e>
 8012f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f5c:	085b      	lsrs	r3, r3, #1
 8012f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8012f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f66:	f003 0301 	and.w	r3, r3, #1
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d004      	beq.n	8012f78 <USB_EPStartXfer+0x14de>
 8012f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012f72:	3301      	adds	r3, #1
 8012f74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8012f78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012f7c:	881b      	ldrh	r3, [r3, #0]
 8012f7e:	b29a      	uxth	r2, r3
 8012f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	029b      	lsls	r3, r3, #10
 8012f88:	b29b      	uxth	r3, r3
 8012f8a:	4313      	orrs	r3, r2
 8012f8c:	b29a      	uxth	r2, r3
 8012f8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012f92:	801a      	strh	r2, [r3, #0]
 8012f94:	e030      	b.n	8012ff8 <USB_EPStartXfer+0x155e>
 8012f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	785b      	ldrb	r3, [r3, #1]
 8012fa2:	2b01      	cmp	r3, #1
 8012fa4:	d128      	bne.n	8012ff8 <USB_EPStartXfer+0x155e>
 8012fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012faa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012fb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012fc2:	b29b      	uxth	r3, r3
 8012fc4:	461a      	mov	r2, r3
 8012fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012fca:	4413      	add	r3, r2
 8012fcc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	781b      	ldrb	r3, [r3, #0]
 8012fdc:	00da      	lsls	r2, r3, #3
 8012fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012fe2:	4413      	add	r3, r2
 8012fe4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ff0:	b29a      	uxth	r2, r3
 8012ff2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8012ff6:	801a      	strh	r2, [r3, #0]
 8012ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8012ffc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8013006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801300a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	785b      	ldrb	r3, [r3, #1]
 8013012:	2b00      	cmp	r3, #0
 8013014:	f040 8085 	bne.w	8013122 <USB_EPStartXfer+0x1688>
 8013018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801301c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8013026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801302a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8013034:	b29b      	uxth	r3, r3
 8013036:	461a      	mov	r2, r3
 8013038:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801303c:	4413      	add	r3, r2
 801303e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8013042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	781b      	ldrb	r3, [r3, #0]
 801304e:	00da      	lsls	r2, r3, #3
 8013050:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013054:	4413      	add	r3, r2
 8013056:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801305a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801305e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013062:	881b      	ldrh	r3, [r3, #0]
 8013064:	b29b      	uxth	r3, r3
 8013066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801306a:	b29a      	uxth	r2, r3
 801306c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013070:	801a      	strh	r2, [r3, #0]
 8013072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013076:	2b3e      	cmp	r3, #62	@ 0x3e
 8013078:	d923      	bls.n	80130c2 <USB_EPStartXfer+0x1628>
 801307a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801307e:	095b      	lsrs	r3, r3, #5
 8013080:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8013084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013088:	f003 031f 	and.w	r3, r3, #31
 801308c:	2b00      	cmp	r3, #0
 801308e:	d104      	bne.n	801309a <USB_EPStartXfer+0x1600>
 8013090:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013094:	3b01      	subs	r3, #1
 8013096:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801309a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801309e:	881b      	ldrh	r3, [r3, #0]
 80130a0:	b29a      	uxth	r2, r3
 80130a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80130a6:	b29b      	uxth	r3, r3
 80130a8:	029b      	lsls	r3, r3, #10
 80130aa:	b29b      	uxth	r3, r3
 80130ac:	4313      	orrs	r3, r2
 80130ae:	b29b      	uxth	r3, r3
 80130b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80130b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80130b8:	b29a      	uxth	r2, r3
 80130ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80130be:	801a      	strh	r2, [r3, #0]
 80130c0:	e05c      	b.n	801317c <USB_EPStartXfer+0x16e2>
 80130c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d10c      	bne.n	80130e4 <USB_EPStartXfer+0x164a>
 80130ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80130ce:	881b      	ldrh	r3, [r3, #0]
 80130d0:	b29b      	uxth	r3, r3
 80130d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80130d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80130da:	b29a      	uxth	r2, r3
 80130dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80130e0:	801a      	strh	r2, [r3, #0]
 80130e2:	e04b      	b.n	801317c <USB_EPStartXfer+0x16e2>
 80130e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130e8:	085b      	lsrs	r3, r3, #1
 80130ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80130ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130f2:	f003 0301 	and.w	r3, r3, #1
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d004      	beq.n	8013104 <USB_EPStartXfer+0x166a>
 80130fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80130fe:	3301      	adds	r3, #1
 8013100:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8013104:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013108:	881b      	ldrh	r3, [r3, #0]
 801310a:	b29a      	uxth	r2, r3
 801310c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013110:	b29b      	uxth	r3, r3
 8013112:	029b      	lsls	r3, r3, #10
 8013114:	b29b      	uxth	r3, r3
 8013116:	4313      	orrs	r3, r2
 8013118:	b29a      	uxth	r2, r3
 801311a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801311e:	801a      	strh	r2, [r3, #0]
 8013120:	e02c      	b.n	801317c <USB_EPStartXfer+0x16e2>
 8013122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	785b      	ldrb	r3, [r3, #1]
 801312e:	2b01      	cmp	r3, #1
 8013130:	d124      	bne.n	801317c <USB_EPStartXfer+0x16e2>
 8013132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013136:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8013140:	b29b      	uxth	r3, r3
 8013142:	461a      	mov	r2, r3
 8013144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013148:	4413      	add	r3, r2
 801314a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801314e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	00da      	lsls	r2, r3, #3
 801315c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013160:	4413      	add	r3, r2
 8013162:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8013166:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801316a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801316e:	b29a      	uxth	r2, r3
 8013170:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013174:	801a      	strh	r2, [r3, #0]
 8013176:	e001      	b.n	801317c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8013178:	2301      	movs	r3, #1
 801317a:	e03a      	b.n	80131f2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801317c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8013180:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013184:	681a      	ldr	r2, [r3, #0]
 8013186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801318a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	781b      	ldrb	r3, [r3, #0]
 8013192:	009b      	lsls	r3, r3, #2
 8013194:	4413      	add	r3, r2
 8013196:	881b      	ldrh	r3, [r3, #0]
 8013198:	b29b      	uxth	r3, r3
 801319a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801319e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80131a2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80131a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80131aa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80131ae:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80131b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80131b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80131ba:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80131be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80131c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80131c6:	681a      	ldr	r2, [r3, #0]
 80131c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80131cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	009b      	lsls	r3, r3, #2
 80131d6:	441a      	add	r2, r3
 80131d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80131dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80131e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80131e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80131e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80131ec:	b29b      	uxth	r3, r3
 80131ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80131f0:	2300      	movs	r3, #0
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}

080131fc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80131fc:	b480      	push	{r7}
 80131fe:	b085      	sub	sp, #20
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	785b      	ldrb	r3, [r3, #1]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d020      	beq.n	8013250 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801320e:	687a      	ldr	r2, [r7, #4]
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	009b      	lsls	r3, r3, #2
 8013216:	4413      	add	r3, r2
 8013218:	881b      	ldrh	r3, [r3, #0]
 801321a:	b29b      	uxth	r3, r3
 801321c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013224:	81bb      	strh	r3, [r7, #12]
 8013226:	89bb      	ldrh	r3, [r7, #12]
 8013228:	f083 0310 	eor.w	r3, r3, #16
 801322c:	81bb      	strh	r3, [r7, #12]
 801322e:	687a      	ldr	r2, [r7, #4]
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	781b      	ldrb	r3, [r3, #0]
 8013234:	009b      	lsls	r3, r3, #2
 8013236:	441a      	add	r2, r3
 8013238:	89bb      	ldrh	r3, [r7, #12]
 801323a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801323e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801324a:	b29b      	uxth	r3, r3
 801324c:	8013      	strh	r3, [r2, #0]
 801324e:	e01f      	b.n	8013290 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8013250:	687a      	ldr	r2, [r7, #4]
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	781b      	ldrb	r3, [r3, #0]
 8013256:	009b      	lsls	r3, r3, #2
 8013258:	4413      	add	r3, r2
 801325a:	881b      	ldrh	r3, [r3, #0]
 801325c:	b29b      	uxth	r3, r3
 801325e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8013262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013266:	81fb      	strh	r3, [r7, #14]
 8013268:	89fb      	ldrh	r3, [r7, #14]
 801326a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801326e:	81fb      	strh	r3, [r7, #14]
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	781b      	ldrb	r3, [r3, #0]
 8013276:	009b      	lsls	r3, r3, #2
 8013278:	441a      	add	r2, r3
 801327a:	89fb      	ldrh	r3, [r7, #14]
 801327c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013280:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013284:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801328c:	b29b      	uxth	r3, r3
 801328e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8013290:	2300      	movs	r3, #0
}
 8013292:	4618      	mov	r0, r3
 8013294:	3714      	adds	r7, #20
 8013296:	46bd      	mov	sp, r7
 8013298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329c:	4770      	bx	lr

0801329e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801329e:	b480      	push	{r7}
 80132a0:	b087      	sub	sp, #28
 80132a2:	af00      	add	r7, sp, #0
 80132a4:	6078      	str	r0, [r7, #4]
 80132a6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	7b1b      	ldrb	r3, [r3, #12]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	f040 809d 	bne.w	80133ec <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	785b      	ldrb	r3, [r3, #1]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d04c      	beq.n	8013354 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80132ba:	687a      	ldr	r2, [r7, #4]
 80132bc:	683b      	ldr	r3, [r7, #0]
 80132be:	781b      	ldrb	r3, [r3, #0]
 80132c0:	009b      	lsls	r3, r3, #2
 80132c2:	4413      	add	r3, r2
 80132c4:	881b      	ldrh	r3, [r3, #0]
 80132c6:	823b      	strh	r3, [r7, #16]
 80132c8:	8a3b      	ldrh	r3, [r7, #16]
 80132ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d01b      	beq.n	801330a <USB_EPClearStall+0x6c>
 80132d2:	687a      	ldr	r2, [r7, #4]
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	009b      	lsls	r3, r3, #2
 80132da:	4413      	add	r3, r2
 80132dc:	881b      	ldrh	r3, [r3, #0]
 80132de:	b29b      	uxth	r3, r3
 80132e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80132e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80132e8:	81fb      	strh	r3, [r7, #14]
 80132ea:	687a      	ldr	r2, [r7, #4]
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	781b      	ldrb	r3, [r3, #0]
 80132f0:	009b      	lsls	r3, r3, #2
 80132f2:	441a      	add	r2, r3
 80132f4:	89fb      	ldrh	r3, [r7, #14]
 80132f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80132fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80132fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013302:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8013306:	b29b      	uxth	r3, r3
 8013308:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	78db      	ldrb	r3, [r3, #3]
 801330e:	2b01      	cmp	r3, #1
 8013310:	d06c      	beq.n	80133ec <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013312:	687a      	ldr	r2, [r7, #4]
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	781b      	ldrb	r3, [r3, #0]
 8013318:	009b      	lsls	r3, r3, #2
 801331a:	4413      	add	r3, r2
 801331c:	881b      	ldrh	r3, [r3, #0]
 801331e:	b29b      	uxth	r3, r3
 8013320:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013328:	81bb      	strh	r3, [r7, #12]
 801332a:	89bb      	ldrh	r3, [r7, #12]
 801332c:	f083 0320 	eor.w	r3, r3, #32
 8013330:	81bb      	strh	r3, [r7, #12]
 8013332:	687a      	ldr	r2, [r7, #4]
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	009b      	lsls	r3, r3, #2
 801333a:	441a      	add	r2, r3
 801333c:	89bb      	ldrh	r3, [r7, #12]
 801333e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013342:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801334a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801334e:	b29b      	uxth	r3, r3
 8013350:	8013      	strh	r3, [r2, #0]
 8013352:	e04b      	b.n	80133ec <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013354:	687a      	ldr	r2, [r7, #4]
 8013356:	683b      	ldr	r3, [r7, #0]
 8013358:	781b      	ldrb	r3, [r3, #0]
 801335a:	009b      	lsls	r3, r3, #2
 801335c:	4413      	add	r3, r2
 801335e:	881b      	ldrh	r3, [r3, #0]
 8013360:	82fb      	strh	r3, [r7, #22]
 8013362:	8afb      	ldrh	r3, [r7, #22]
 8013364:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013368:	2b00      	cmp	r3, #0
 801336a:	d01b      	beq.n	80133a4 <USB_EPClearStall+0x106>
 801336c:	687a      	ldr	r2, [r7, #4]
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	781b      	ldrb	r3, [r3, #0]
 8013372:	009b      	lsls	r3, r3, #2
 8013374:	4413      	add	r3, r2
 8013376:	881b      	ldrh	r3, [r3, #0]
 8013378:	b29b      	uxth	r3, r3
 801337a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801337e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013382:	82bb      	strh	r3, [r7, #20]
 8013384:	687a      	ldr	r2, [r7, #4]
 8013386:	683b      	ldr	r3, [r7, #0]
 8013388:	781b      	ldrb	r3, [r3, #0]
 801338a:	009b      	lsls	r3, r3, #2
 801338c:	441a      	add	r2, r3
 801338e:	8abb      	ldrh	r3, [r7, #20]
 8013390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013398:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801339c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80133a0:	b29b      	uxth	r3, r3
 80133a2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80133a4:	687a      	ldr	r2, [r7, #4]
 80133a6:	683b      	ldr	r3, [r7, #0]
 80133a8:	781b      	ldrb	r3, [r3, #0]
 80133aa:	009b      	lsls	r3, r3, #2
 80133ac:	4413      	add	r3, r2
 80133ae:	881b      	ldrh	r3, [r3, #0]
 80133b0:	b29b      	uxth	r3, r3
 80133b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80133b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80133ba:	827b      	strh	r3, [r7, #18]
 80133bc:	8a7b      	ldrh	r3, [r7, #18]
 80133be:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80133c2:	827b      	strh	r3, [r7, #18]
 80133c4:	8a7b      	ldrh	r3, [r7, #18]
 80133c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80133ca:	827b      	strh	r3, [r7, #18]
 80133cc:	687a      	ldr	r2, [r7, #4]
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	781b      	ldrb	r3, [r3, #0]
 80133d2:	009b      	lsls	r3, r3, #2
 80133d4:	441a      	add	r2, r3
 80133d6:	8a7b      	ldrh	r3, [r7, #18]
 80133d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80133dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80133e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80133e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80133e8:	b29b      	uxth	r3, r3
 80133ea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80133ec:	2300      	movs	r3, #0
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	371c      	adds	r7, #28
 80133f2:	46bd      	mov	sp, r7
 80133f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f8:	4770      	bx	lr

080133fa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80133fa:	b480      	push	{r7}
 80133fc:	b083      	sub	sp, #12
 80133fe:	af00      	add	r7, sp, #0
 8013400:	6078      	str	r0, [r7, #4]
 8013402:	460b      	mov	r3, r1
 8013404:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8013406:	78fb      	ldrb	r3, [r7, #3]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d103      	bne.n	8013414 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2280      	movs	r2, #128	@ 0x80
 8013410:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8013414:	2300      	movs	r3, #0
}
 8013416:	4618      	mov	r0, r3
 8013418:	370c      	adds	r7, #12
 801341a:	46bd      	mov	sp, r7
 801341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013420:	4770      	bx	lr

08013422 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8013422:	b480      	push	{r7}
 8013424:	b083      	sub	sp, #12
 8013426:	af00      	add	r7, sp, #0
 8013428:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8013430:	b29b      	uxth	r3, r3
 8013432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801343a:	b29a      	uxth	r2, r3
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8013442:	2300      	movs	r3, #0
}
 8013444:	4618      	mov	r0, r3
 8013446:	370c      	adds	r7, #12
 8013448:	46bd      	mov	sp, r7
 801344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344e:	4770      	bx	lr

08013450 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8013450:	b480      	push	{r7}
 8013452:	b085      	sub	sp, #20
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801345e:	b29b      	uxth	r3, r3
 8013460:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8013462:	68fb      	ldr	r3, [r7, #12]
}
 8013464:	4618      	mov	r0, r3
 8013466:	3714      	adds	r7, #20
 8013468:	46bd      	mov	sp, r7
 801346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346e:	4770      	bx	lr

08013470 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013470:	b480      	push	{r7}
 8013472:	b08b      	sub	sp, #44	@ 0x2c
 8013474:	af00      	add	r7, sp, #0
 8013476:	60f8      	str	r0, [r7, #12]
 8013478:	60b9      	str	r1, [r7, #8]
 801347a:	4611      	mov	r1, r2
 801347c:	461a      	mov	r2, r3
 801347e:	460b      	mov	r3, r1
 8013480:	80fb      	strh	r3, [r7, #6]
 8013482:	4613      	mov	r3, r2
 8013484:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8013486:	88bb      	ldrh	r3, [r7, #4]
 8013488:	3301      	adds	r3, #1
 801348a:	085b      	lsrs	r3, r3, #1
 801348c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8013496:	88fa      	ldrh	r2, [r7, #6]
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	4413      	add	r3, r2
 801349c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80134a0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80134a2:	69bb      	ldr	r3, [r7, #24]
 80134a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80134a6:	e01b      	b.n	80134e0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80134a8:	69fb      	ldr	r3, [r7, #28]
 80134aa:	781b      	ldrb	r3, [r3, #0]
 80134ac:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80134ae:	69fb      	ldr	r3, [r7, #28]
 80134b0:	3301      	adds	r3, #1
 80134b2:	781b      	ldrb	r3, [r3, #0]
 80134b4:	021b      	lsls	r3, r3, #8
 80134b6:	b21a      	sxth	r2, r3
 80134b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80134bc:	4313      	orrs	r3, r2
 80134be:	b21b      	sxth	r3, r3
 80134c0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80134c2:	6a3b      	ldr	r3, [r7, #32]
 80134c4:	8a7a      	ldrh	r2, [r7, #18]
 80134c6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80134c8:	6a3b      	ldr	r3, [r7, #32]
 80134ca:	3302      	adds	r3, #2
 80134cc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80134ce:	69fb      	ldr	r3, [r7, #28]
 80134d0:	3301      	adds	r3, #1
 80134d2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80134d4:	69fb      	ldr	r3, [r7, #28]
 80134d6:	3301      	adds	r3, #1
 80134d8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80134da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134dc:	3b01      	subs	r3, #1
 80134de:	627b      	str	r3, [r7, #36]	@ 0x24
 80134e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d1e0      	bne.n	80134a8 <USB_WritePMA+0x38>
  }
}
 80134e6:	bf00      	nop
 80134e8:	bf00      	nop
 80134ea:	372c      	adds	r7, #44	@ 0x2c
 80134ec:	46bd      	mov	sp, r7
 80134ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f2:	4770      	bx	lr

080134f4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80134f4:	b480      	push	{r7}
 80134f6:	b08b      	sub	sp, #44	@ 0x2c
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	60f8      	str	r0, [r7, #12]
 80134fc:	60b9      	str	r1, [r7, #8]
 80134fe:	4611      	mov	r1, r2
 8013500:	461a      	mov	r2, r3
 8013502:	460b      	mov	r3, r1
 8013504:	80fb      	strh	r3, [r7, #6]
 8013506:	4613      	mov	r3, r2
 8013508:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801350a:	88bb      	ldrh	r3, [r7, #4]
 801350c:	085b      	lsrs	r3, r3, #1
 801350e:	b29b      	uxth	r3, r3
 8013510:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8013516:	68bb      	ldr	r3, [r7, #8]
 8013518:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801351a:	88fa      	ldrh	r2, [r7, #6]
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	4413      	add	r3, r2
 8013520:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8013524:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8013526:	69bb      	ldr	r3, [r7, #24]
 8013528:	627b      	str	r3, [r7, #36]	@ 0x24
 801352a:	e018      	b.n	801355e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801352c:	6a3b      	ldr	r3, [r7, #32]
 801352e:	881b      	ldrh	r3, [r3, #0]
 8013530:	b29b      	uxth	r3, r3
 8013532:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8013534:	6a3b      	ldr	r3, [r7, #32]
 8013536:	3302      	adds	r3, #2
 8013538:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801353a:	693b      	ldr	r3, [r7, #16]
 801353c:	b2da      	uxtb	r2, r3
 801353e:	69fb      	ldr	r3, [r7, #28]
 8013540:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013542:	69fb      	ldr	r3, [r7, #28]
 8013544:	3301      	adds	r3, #1
 8013546:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8013548:	693b      	ldr	r3, [r7, #16]
 801354a:	0a1b      	lsrs	r3, r3, #8
 801354c:	b2da      	uxtb	r2, r3
 801354e:	69fb      	ldr	r3, [r7, #28]
 8013550:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013552:	69fb      	ldr	r3, [r7, #28]
 8013554:	3301      	adds	r3, #1
 8013556:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8013558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801355a:	3b01      	subs	r3, #1
 801355c:	627b      	str	r3, [r7, #36]	@ 0x24
 801355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013560:	2b00      	cmp	r3, #0
 8013562:	d1e3      	bne.n	801352c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8013564:	88bb      	ldrh	r3, [r7, #4]
 8013566:	f003 0301 	and.w	r3, r3, #1
 801356a:	b29b      	uxth	r3, r3
 801356c:	2b00      	cmp	r3, #0
 801356e:	d007      	beq.n	8013580 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8013570:	6a3b      	ldr	r3, [r7, #32]
 8013572:	881b      	ldrh	r3, [r3, #0]
 8013574:	b29b      	uxth	r3, r3
 8013576:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8013578:	693b      	ldr	r3, [r7, #16]
 801357a:	b2da      	uxtb	r2, r3
 801357c:	69fb      	ldr	r3, [r7, #28]
 801357e:	701a      	strb	r2, [r3, #0]
  }
}
 8013580:	bf00      	nop
 8013582:	372c      	adds	r7, #44	@ 0x2c
 8013584:	46bd      	mov	sp, r7
 8013586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358a:	4770      	bx	lr

0801358c <__NVIC_EnableIRQ>:
{
 801358c:	b480      	push	{r7}
 801358e:	b083      	sub	sp, #12
 8013590:	af00      	add	r7, sp, #0
 8013592:	4603      	mov	r3, r0
 8013594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801359a:	2b00      	cmp	r3, #0
 801359c:	db0b      	blt.n	80135b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801359e:	79fb      	ldrb	r3, [r7, #7]
 80135a0:	f003 021f 	and.w	r2, r3, #31
 80135a4:	4907      	ldr	r1, [pc, #28]	@ (80135c4 <__NVIC_EnableIRQ+0x38>)
 80135a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80135aa:	095b      	lsrs	r3, r3, #5
 80135ac:	2001      	movs	r0, #1
 80135ae:	fa00 f202 	lsl.w	r2, r0, r2
 80135b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80135b6:	bf00      	nop
 80135b8:	370c      	adds	r7, #12
 80135ba:	46bd      	mov	sp, r7
 80135bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c0:	4770      	bx	lr
 80135c2:	bf00      	nop
 80135c4:	e000e100 	.word	0xe000e100

080135c8 <__NVIC_SetPriority>:
{
 80135c8:	b480      	push	{r7}
 80135ca:	b083      	sub	sp, #12
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	4603      	mov	r3, r0
 80135d0:	6039      	str	r1, [r7, #0]
 80135d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80135d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	db0a      	blt.n	80135f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	b2da      	uxtb	r2, r3
 80135e0:	490c      	ldr	r1, [pc, #48]	@ (8013614 <__NVIC_SetPriority+0x4c>)
 80135e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80135e6:	0112      	lsls	r2, r2, #4
 80135e8:	b2d2      	uxtb	r2, r2
 80135ea:	440b      	add	r3, r1
 80135ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80135f0:	e00a      	b.n	8013608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	b2da      	uxtb	r2, r3
 80135f6:	4908      	ldr	r1, [pc, #32]	@ (8013618 <__NVIC_SetPriority+0x50>)
 80135f8:	79fb      	ldrb	r3, [r7, #7]
 80135fa:	f003 030f 	and.w	r3, r3, #15
 80135fe:	3b04      	subs	r3, #4
 8013600:	0112      	lsls	r2, r2, #4
 8013602:	b2d2      	uxtb	r2, r2
 8013604:	440b      	add	r3, r1
 8013606:	761a      	strb	r2, [r3, #24]
}
 8013608:	bf00      	nop
 801360a:	370c      	adds	r7, #12
 801360c:	46bd      	mov	sp, r7
 801360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013612:	4770      	bx	lr
 8013614:	e000e100 	.word	0xe000e100
 8013618:	e000ed00 	.word	0xe000ed00

0801361c <LL_AHB2_GRP1_EnableClock>:
{
 801361c:	b480      	push	{r7}
 801361e:	b085      	sub	sp, #20
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8013624:	4b08      	ldr	r3, [pc, #32]	@ (8013648 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8013626:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013628:	4907      	ldr	r1, [pc, #28]	@ (8013648 <LL_AHB2_GRP1_EnableClock+0x2c>)
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	4313      	orrs	r3, r2
 801362e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8013630:	4b05      	ldr	r3, [pc, #20]	@ (8013648 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8013632:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	4013      	ands	r3, r2
 8013638:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801363a:	68fb      	ldr	r3, [r7, #12]
}
 801363c:	bf00      	nop
 801363e:	3714      	adds	r7, #20
 8013640:	46bd      	mov	sp, r7
 8013642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013646:	4770      	bx	lr
 8013648:	40021000 	.word	0x40021000

0801364c <LL_GPIO_SetPinMode>:
{
 801364c:	b480      	push	{r7}
 801364e:	b08b      	sub	sp, #44	@ 0x2c
 8013650:	af00      	add	r7, sp, #0
 8013652:	60f8      	str	r0, [r7, #12]
 8013654:	60b9      	str	r1, [r7, #8]
 8013656:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	681a      	ldr	r2, [r3, #0]
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013660:	697b      	ldr	r3, [r7, #20]
 8013662:	fa93 f3a3 	rbit	r3, r3
 8013666:	613b      	str	r3, [r7, #16]
  return result;
 8013668:	693b      	ldr	r3, [r7, #16]
 801366a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801366c:	69bb      	ldr	r3, [r7, #24]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d101      	bne.n	8013676 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8013672:	2320      	movs	r3, #32
 8013674:	e003      	b.n	801367e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8013676:	69bb      	ldr	r3, [r7, #24]
 8013678:	fab3 f383 	clz	r3, r3
 801367c:	b2db      	uxtb	r3, r3
 801367e:	005b      	lsls	r3, r3, #1
 8013680:	2103      	movs	r1, #3
 8013682:	fa01 f303 	lsl.w	r3, r1, r3
 8013686:	43db      	mvns	r3, r3
 8013688:	401a      	ands	r2, r3
 801368a:	68bb      	ldr	r3, [r7, #8]
 801368c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801368e:	6a3b      	ldr	r3, [r7, #32]
 8013690:	fa93 f3a3 	rbit	r3, r3
 8013694:	61fb      	str	r3, [r7, #28]
  return result;
 8013696:	69fb      	ldr	r3, [r7, #28]
 8013698:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 801369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801369c:	2b00      	cmp	r3, #0
 801369e:	d101      	bne.n	80136a4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80136a0:	2320      	movs	r3, #32
 80136a2:	e003      	b.n	80136ac <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80136a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136a6:	fab3 f383 	clz	r3, r3
 80136aa:	b2db      	uxtb	r3, r3
 80136ac:	005b      	lsls	r3, r3, #1
 80136ae:	6879      	ldr	r1, [r7, #4]
 80136b0:	fa01 f303 	lsl.w	r3, r1, r3
 80136b4:	431a      	orrs	r2, r3
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	601a      	str	r2, [r3, #0]
}
 80136ba:	bf00      	nop
 80136bc:	372c      	adds	r7, #44	@ 0x2c
 80136be:	46bd      	mov	sp, r7
 80136c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c4:	4770      	bx	lr

080136c6 <LL_GPIO_SetPinPull>:
{
 80136c6:	b480      	push	{r7}
 80136c8:	b08b      	sub	sp, #44	@ 0x2c
 80136ca:	af00      	add	r7, sp, #0
 80136cc:	60f8      	str	r0, [r7, #12]
 80136ce:	60b9      	str	r1, [r7, #8]
 80136d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	68da      	ldr	r2, [r3, #12]
 80136d6:	68bb      	ldr	r3, [r7, #8]
 80136d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80136da:	697b      	ldr	r3, [r7, #20]
 80136dc:	fa93 f3a3 	rbit	r3, r3
 80136e0:	613b      	str	r3, [r7, #16]
  return result;
 80136e2:	693b      	ldr	r3, [r7, #16]
 80136e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80136e6:	69bb      	ldr	r3, [r7, #24]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d101      	bne.n	80136f0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80136ec:	2320      	movs	r3, #32
 80136ee:	e003      	b.n	80136f8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80136f0:	69bb      	ldr	r3, [r7, #24]
 80136f2:	fab3 f383 	clz	r3, r3
 80136f6:	b2db      	uxtb	r3, r3
 80136f8:	005b      	lsls	r3, r3, #1
 80136fa:	2103      	movs	r1, #3
 80136fc:	fa01 f303 	lsl.w	r3, r1, r3
 8013700:	43db      	mvns	r3, r3
 8013702:	401a      	ands	r2, r3
 8013704:	68bb      	ldr	r3, [r7, #8]
 8013706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013708:	6a3b      	ldr	r3, [r7, #32]
 801370a:	fa93 f3a3 	rbit	r3, r3
 801370e:	61fb      	str	r3, [r7, #28]
  return result;
 8013710:	69fb      	ldr	r3, [r7, #28]
 8013712:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8013714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013716:	2b00      	cmp	r3, #0
 8013718:	d101      	bne.n	801371e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 801371a:	2320      	movs	r3, #32
 801371c:	e003      	b.n	8013726 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013720:	fab3 f383 	clz	r3, r3
 8013724:	b2db      	uxtb	r3, r3
 8013726:	005b      	lsls	r3, r3, #1
 8013728:	6879      	ldr	r1, [r7, #4]
 801372a:	fa01 f303 	lsl.w	r3, r1, r3
 801372e:	431a      	orrs	r2, r3
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	60da      	str	r2, [r3, #12]
}
 8013734:	bf00      	nop
 8013736:	372c      	adds	r7, #44	@ 0x2c
 8013738:	46bd      	mov	sp, r7
 801373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373e:	4770      	bx	lr

08013740 <LL_UCPD_Enable>:
{
 8013740:	b480      	push	{r7}
 8013742:	b083      	sub	sp, #12
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	601a      	str	r2, [r3, #0]
}
 8013754:	bf00      	nop
 8013756:	370c      	adds	r7, #12
 8013758:	46bd      	mov	sp, r7
 801375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375e:	4770      	bx	lr

08013760 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 8013760:	b480      	push	{r7}
 8013762:	b083      	sub	sp, #12
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8013772:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013776:	683a      	ldr	r2, [r7, #0]
 8013778:	431a      	orrs	r2, r3
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	601a      	str	r2, [r3, #0]
}
 801377e:	bf00      	nop
 8013780:	370c      	adds	r7, #12
 8013782:	46bd      	mov	sp, r7
 8013784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013788:	4770      	bx	lr

0801378a <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 801378a:	b480      	push	{r7}
 801378c:	b083      	sub	sp, #12
 801378e:	af00      	add	r7, sp, #0
 8013790:	6078      	str	r0, [r7, #4]
 8013792:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	68db      	ldr	r3, [r3, #12]
 8013798:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	431a      	orrs	r2, r3
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	60da      	str	r2, [r3, #12]
}
 80137a4:	bf00      	nop
 80137a6:	370c      	adds	r7, #12
 80137a8:	46bd      	mov	sp, r7
 80137aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ae:	4770      	bx	lr

080137b0 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 80137b0:	b480      	push	{r7}
 80137b2:	b083      	sub	sp, #12
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	691b      	ldr	r3, [r3, #16]
 80137bc:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	611a      	str	r2, [r3, #16]
}
 80137c4:	bf00      	nop
 80137c6:	370c      	adds	r7, #12
 80137c8:	46bd      	mov	sp, r7
 80137ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ce:	4770      	bx	lr

080137d0 <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 80137d0:	b480      	push	{r7}
 80137d2:	b083      	sub	sp, #12
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	691b      	ldr	r3, [r3, #16]
 80137dc:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	611a      	str	r2, [r3, #16]
}
 80137e4:	bf00      	nop
 80137e6:	370c      	adds	r7, #12
 80137e8:	46bd      	mov	sp, r7
 80137ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ee:	4770      	bx	lr

080137f0 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80137f0:	b480      	push	{r7}
 80137f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80137f4:	4b05      	ldr	r3, [pc, #20]	@ (801380c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80137f6:	689b      	ldr	r3, [r3, #8]
 80137f8:	4a04      	ldr	r2, [pc, #16]	@ (801380c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80137fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80137fe:	6093      	str	r3, [r2, #8]
}
 8013800:	bf00      	nop
 8013802:	46bd      	mov	sp, r7
 8013804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013808:	4770      	bx	lr
 801380a:	bf00      	nop
 801380c:	40007000 	.word	0x40007000

08013810 <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 8013810:	b590      	push	{r4, r7, lr}
 8013812:	b08b      	sub	sp, #44	@ 0x2c
 8013814:	af00      	add	r7, sp, #0
 8013816:	60b9      	str	r1, [r7, #8]
 8013818:	607a      	str	r2, [r7, #4]
 801381a:	603b      	str	r3, [r7, #0]
 801381c:	4603      	mov	r3, r0
 801381e:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8013820:	7bfa      	ldrb	r2, [r7, #15]
 8013822:	4613      	mov	r3, r2
 8013824:	005b      	lsls	r3, r3, #1
 8013826:	4413      	add	r3, r2
 8013828:	009b      	lsls	r3, r3, #2
 801382a:	4a66      	ldr	r2, [pc, #408]	@ (80139c4 <CAD_Init+0x1b4>)
 801382c:	4413      	add	r3, r2
 801382e:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 8013830:	7bfa      	ldrb	r2, [r7, #15]
 8013832:	4965      	ldr	r1, [pc, #404]	@ (80139c8 <CAD_Init+0x1b8>)
 8013834:	4613      	mov	r3, r2
 8013836:	011b      	lsls	r3, r3, #4
 8013838:	1a9b      	subs	r3, r3, r2
 801383a:	009b      	lsls	r3, r3, #2
 801383c:	440b      	add	r3, r1
 801383e:	3310      	adds	r3, #16
 8013840:	687a      	ldr	r2, [r7, #4]
 8013842:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 8013844:	7bfa      	ldrb	r2, [r7, #15]
 8013846:	4960      	ldr	r1, [pc, #384]	@ (80139c8 <CAD_Init+0x1b8>)
 8013848:	4613      	mov	r3, r2
 801384a:	011b      	lsls	r3, r3, #4
 801384c:	1a9b      	subs	r3, r3, r2
 801384e:	009b      	lsls	r3, r3, #2
 8013850:	440b      	add	r3, r1
 8013852:	330c      	adds	r3, #12
 8013854:	68ba      	ldr	r2, [r7, #8]
 8013856:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 8013858:	7bfa      	ldrb	r2, [r7, #15]
 801385a:	495b      	ldr	r1, [pc, #364]	@ (80139c8 <CAD_Init+0x1b8>)
 801385c:	4613      	mov	r3, r2
 801385e:	011b      	lsls	r3, r3, #4
 8013860:	1a9b      	subs	r3, r3, r2
 8013862:	009b      	lsls	r3, r3, #2
 8013864:	440b      	add	r3, r1
 8013866:	330c      	adds	r3, #12
 8013868:	6819      	ldr	r1, [r3, #0]
 801386a:	7bfa      	ldrb	r2, [r7, #15]
 801386c:	4856      	ldr	r0, [pc, #344]	@ (80139c8 <CAD_Init+0x1b8>)
 801386e:	4613      	mov	r3, r2
 8013870:	011b      	lsls	r3, r3, #4
 8013872:	1a9b      	subs	r3, r3, r2
 8013874:	009b      	lsls	r3, r3, #2
 8013876:	4403      	add	r3, r0
 8013878:	3310      	adds	r3, #16
 801387a:	681a      	ldr	r2, [r3, #0]
 801387c:	794b      	ldrb	r3, [r1, #5]
 801387e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8013882:	b2d9      	uxtb	r1, r3
 8013884:	7893      	ldrb	r3, [r2, #2]
 8013886:	f361 0301 	bfi	r3, r1, #0, #2
 801388a:	7093      	strb	r3, [r2, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 801388c:	7bfa      	ldrb	r2, [r7, #15]
 801388e:	494e      	ldr	r1, [pc, #312]	@ (80139c8 <CAD_Init+0x1b8>)
 8013890:	4613      	mov	r3, r2
 8013892:	011b      	lsls	r3, r3, #4
 8013894:	1a9b      	subs	r3, r3, r2
 8013896:	009b      	lsls	r3, r3, #2
 8013898:	440b      	add	r3, r1
 801389a:	3310      	adds	r3, #16
 801389c:	681a      	ldr	r2, [r3, #0]
 801389e:	7893      	ldrb	r3, [r2, #2]
 80138a0:	f36f 0383 	bfc	r3, #2, #2
 80138a4:	7093      	strb	r3, [r2, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 80138a6:	220c      	movs	r2, #12
 80138a8:	2100      	movs	r1, #0
 80138aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80138ac:	f005 f8ce 	bl	8018a4c <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 80138b0:	7bfa      	ldrb	r2, [r7, #15]
 80138b2:	4945      	ldr	r1, [pc, #276]	@ (80139c8 <CAD_Init+0x1b8>)
 80138b4:	4613      	mov	r3, r2
 80138b6:	011b      	lsls	r3, r3, #4
 80138b8:	1a9b      	subs	r3, r3, r2
 80138ba:	009b      	lsls	r3, r3, #2
 80138bc:	440b      	add	r3, r1
 80138be:	332c      	adds	r3, #44	@ 0x2c
 80138c0:	683a      	ldr	r2, [r7, #0]
 80138c2:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 80138c4:	7bfc      	ldrb	r4, [r7, #15]
 80138c6:	7bfb      	ldrb	r3, [r7, #15]
 80138c8:	4618      	mov	r0, r3
 80138ca:	f000 fbb1 	bl	8014030 <USBPD_HW_GetUSPDInstance>
 80138ce:	4602      	mov	r2, r0
 80138d0:	493d      	ldr	r1, [pc, #244]	@ (80139c8 <CAD_Init+0x1b8>)
 80138d2:	4623      	mov	r3, r4
 80138d4:	011b      	lsls	r3, r3, #4
 80138d6:	1b1b      	subs	r3, r3, r4
 80138d8:	009b      	lsls	r3, r3, #2
 80138da:	440b      	add	r3, r1
 80138dc:	601a      	str	r2, [r3, #0]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 80138de:	f107 0314 	add.w	r3, r7, #20
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7fd fac0 	bl	8010e68 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 80138e8:	7bfa      	ldrb	r2, [r7, #15]
 80138ea:	4937      	ldr	r1, [pc, #220]	@ (80139c8 <CAD_Init+0x1b8>)
 80138ec:	4613      	mov	r3, r2
 80138ee:	011b      	lsls	r3, r3, #4
 80138f0:	1a9b      	subs	r3, r3, r2
 80138f2:	009b      	lsls	r3, r3, #2
 80138f4:	440b      	add	r3, r1
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	f107 0214 	add.w	r2, r7, #20
 80138fc:	4611      	mov	r1, r2
 80138fe:	4618      	mov	r0, r3
 8013900:	f7fd fa84 	bl	8010e0c <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 8013904:	7bfa      	ldrb	r2, [r7, #15]
 8013906:	4930      	ldr	r1, [pc, #192]	@ (80139c8 <CAD_Init+0x1b8>)
 8013908:	4613      	mov	r3, r2
 801390a:	011b      	lsls	r3, r3, #4
 801390c:	1a9b      	subs	r3, r3, r2
 801390e:	009b      	lsls	r3, r3, #2
 8013910:	440b      	add	r3, r1
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8013918:	4618      	mov	r0, r3
 801391a:	f7ff ff21 	bl	8013760 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 801391e:	7bfa      	ldrb	r2, [r7, #15]
 8013920:	4929      	ldr	r1, [pc, #164]	@ (80139c8 <CAD_Init+0x1b8>)
 8013922:	4613      	mov	r3, r2
 8013924:	011b      	lsls	r3, r3, #4
 8013926:	1a9b      	subs	r3, r3, r2
 8013928:	009b      	lsls	r3, r3, #2
 801392a:	440b      	add	r3, r1
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8013932:	4618      	mov	r0, r3
 8013934:	f7ff ff29 	bl	801378a <LL_UCPD_SetccEnable>

#ifdef _LOW_POWER
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */

  LL_PWR_DisableUCPDDeadBattery(); /* PWR->CR3 |= (1 << 14); */
 8013938:	f7ff ff5a 	bl	80137f0 <LL_PWR_DisableUCPDDeadBattery>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB); /* GPIOB enable RCC->AHB2ENR |= 2; */
 801393c:	2002      	movs	r0, #2
 801393e:	f7ff fe6d 	bl	801361c <LL_AHB2_GRP1_EnableClock>

  /* Set by default UCPD1_CC1 & UCPD1_CC2 in analog mode */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ANALOG); /* PB6 mode = GP analog => CC1 */
 8013942:	2203      	movs	r2, #3
 8013944:	2140      	movs	r1, #64	@ 0x40
 8013946:	4821      	ldr	r0, [pc, #132]	@ (80139cc <CAD_Init+0x1bc>)
 8013948:	f7ff fe80 	bl	801364c <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_ANALOG); /* PB4 mode = GP analog => CC2 */
 801394c:	2203      	movs	r2, #3
 801394e:	2110      	movs	r1, #16
 8013950:	481e      	ldr	r0, [pc, #120]	@ (80139cc <CAD_Init+0x1bc>)
 8013952:	f7ff fe7b 	bl	801364c <LL_GPIO_SetPinMode>

  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 8013956:	2200      	movs	r2, #0
 8013958:	2140      	movs	r1, #64	@ 0x40
 801395a:	481c      	ldr	r0, [pc, #112]	@ (80139cc <CAD_Init+0x1bc>)
 801395c:	f7ff feb3 	bl	80136c6 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8013960:	2200      	movs	r2, #0
 8013962:	2110      	movs	r1, #16
 8013964:	4819      	ldr	r0, [pc, #100]	@ (80139cc <CAD_Init+0x1bc>)
 8013966:	f7ff feae 	bl	80136c6 <LL_GPIO_SetPinPull>

  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 801396a:	7bfb      	ldrb	r3, [r7, #15]
 801396c:	4618      	mov	r0, r3
 801396e:	f004 fa7b 	bl	8017e68 <BSP_USBPD_PWR_Init>
  /* Register VBUS detect callback */
  BSP_USBPD_PWR_RegisterVBUSDetectCallback(PortNum, CAD_HW_IF_VBUSDetectCallback);
#endif /* TCPP0203_SUPPORT */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8013972:	7bfa      	ldrb	r2, [r7, #15]
 8013974:	4914      	ldr	r1, [pc, #80]	@ (80139c8 <CAD_Init+0x1b8>)
 8013976:	4613      	mov	r3, r2
 8013978:	011b      	lsls	r3, r3, #4
 801397a:	1a9b      	subs	r3, r3, r2
 801397c:	009b      	lsls	r3, r3, #2
 801397e:	440b      	add	r3, r1
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	4618      	mov	r0, r3
 8013984:	f7ff fedc 	bl	8013740 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 8013988:	7bfb      	ldrb	r3, [r7, #15]
 801398a:	4618      	mov	r0, r3
 801398c:	f001 fc64 	bl	8015258 <USBPDM1_AssertRd>
    }
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 8013990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013992:	4a0f      	ldr	r2, [pc, #60]	@ (80139d0 <CAD_Init+0x1c0>)
 8013994:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 8013996:	7bfa      	ldrb	r2, [r7, #15]
 8013998:	490b      	ldr	r1, [pc, #44]	@ (80139c8 <CAD_Init+0x1b8>)
 801399a:	4613      	mov	r3, r2
 801399c:	011b      	lsls	r3, r3, #4
 801399e:	1a9b      	subs	r3, r3, r2
 80139a0:	009b      	lsls	r3, r3, #2
 80139a2:	440b      	add	r3, r1
 80139a4:	330c      	adds	r3, #12
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	795b      	ldrb	r3, [r3, #5]
 80139aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80139ae:	b2d9      	uxtb	r1, r3
 80139b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80139b2:	7853      	ldrb	r3, [r2, #1]
 80139b4:	f361 13c7 	bfi	r3, r1, #7, #1
 80139b8:	7053      	strb	r3, [r2, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 80139ba:	bf00      	nop
 80139bc:	372c      	adds	r7, #44	@ 0x2c
 80139be:	46bd      	mov	sp, r7
 80139c0:	bd90      	pop	{r4, r7, pc}
 80139c2:	bf00      	nop
 80139c4:	200006fc 	.word	0x200006fc
 80139c8:	20000714 	.word	0x20000714
 80139cc:	48000400 	.word	0x48000400
 80139d0:	08013aad 	.word	0x08013aad

080139d4 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b082      	sub	sp, #8
 80139d8:	af00      	add	r7, sp, #0
 80139da:	4603      	mov	r3, r0
 80139dc:	71fb      	strb	r3, [r7, #7]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 80139de:	79fb      	ldrb	r3, [r7, #7]
 80139e0:	4618      	mov	r0, r3
 80139e2:	f001 fccb 	bl	801537c <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 80139e6:	79fa      	ldrb	r2, [r7, #7]
 80139e8:	490b      	ldr	r1, [pc, #44]	@ (8013a18 <CAD_Enter_ErrorRecovery+0x44>)
 80139ea:	4613      	mov	r3, r2
 80139ec:	005b      	lsls	r3, r3, #1
 80139ee:	4413      	add	r3, r2
 80139f0:	009b      	lsls	r3, r3, #2
 80139f2:	18ca      	adds	r2, r1, r3
 80139f4:	7813      	ldrb	r3, [r2, #0]
 80139f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80139fa:	7013      	strb	r3, [r2, #0]
  Ports[PortNum].USBPD_CAD_WakeUp();
 80139fc:	79fa      	ldrb	r2, [r7, #7]
 80139fe:	4907      	ldr	r1, [pc, #28]	@ (8013a1c <CAD_Enter_ErrorRecovery+0x48>)
 8013a00:	4613      	mov	r3, r2
 8013a02:	011b      	lsls	r3, r3, #4
 8013a04:	1a9b      	subs	r3, r3, r2
 8013a06:	009b      	lsls	r3, r3, #2
 8013a08:	440b      	add	r3, r1
 8013a0a:	332c      	adds	r3, #44	@ 0x2c
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	4798      	blx	r3
}
 8013a10:	bf00      	nop
 8013a12:	3708      	adds	r7, #8
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}
 8013a18:	200006fc 	.word	0x200006fc
 8013a1c:	20000714 	.word	0x20000714

08013a20 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b082      	sub	sp, #8
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	4603      	mov	r3, r0
 8013a28:	6039      	str	r1, [r7, #0]
 8013a2a:	71fb      	strb	r3, [r7, #7]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 8013a2c:	79fa      	ldrb	r2, [r7, #7]
 8013a2e:	4915      	ldr	r1, [pc, #84]	@ (8013a84 <CAD_SRC_Set_ResistorRp+0x64>)
 8013a30:	4613      	mov	r3, r2
 8013a32:	011b      	lsls	r3, r3, #4
 8013a34:	1a9b      	subs	r3, r3, r2
 8013a36:	009b      	lsls	r3, r3, #2
 8013a38:	440b      	add	r3, r1
 8013a3a:	3310      	adds	r3, #16
 8013a3c:	681a      	ldr	r2, [r3, #0]
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	f003 0303 	and.w	r3, r3, #3
 8013a44:	b2d9      	uxtb	r1, r3
 8013a46:	7893      	ldrb	r3, [r2, #2]
 8013a48:	f361 0301 	bfi	r3, r1, #0, #2
 8013a4c:	7093      	strb	r3, [r2, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 8013a4e:	79fa      	ldrb	r2, [r7, #7]
 8013a50:	490d      	ldr	r1, [pc, #52]	@ (8013a88 <CAD_SRC_Set_ResistorRp+0x68>)
 8013a52:	4613      	mov	r3, r2
 8013a54:	005b      	lsls	r3, r3, #1
 8013a56:	4413      	add	r3, r2
 8013a58:	009b      	lsls	r3, r3, #2
 8013a5a:	18ca      	adds	r2, r1, r3
 8013a5c:	7853      	ldrb	r3, [r2, #1]
 8013a5e:	f043 0301 	orr.w	r3, r3, #1
 8013a62:	7053      	strb	r3, [r2, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8013a64:	79fa      	ldrb	r2, [r7, #7]
 8013a66:	4907      	ldr	r1, [pc, #28]	@ (8013a84 <CAD_SRC_Set_ResistorRp+0x64>)
 8013a68:	4613      	mov	r3, r2
 8013a6a:	011b      	lsls	r3, r3, #4
 8013a6c:	1a9b      	subs	r3, r3, r2
 8013a6e:	009b      	lsls	r3, r3, #2
 8013a70:	440b      	add	r3, r1
 8013a72:	332c      	adds	r3, #44	@ 0x2c
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	4798      	blx	r3
  return 0;
 8013a78:	2300      	movs	r3, #0
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3708      	adds	r7, #8
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}
 8013a82:	bf00      	nop
 8013a84:	20000714 	.word	0x20000714
 8013a88:	200006fc 	.word	0x200006fc

08013a8c <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	4603      	mov	r3, r0
 8013a94:	6039      	str	r1, [r7, #0]
 8013a96:	71fb      	strb	r3, [r7, #7]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 8013a98:	79fb      	ldrb	r3, [r7, #7]
 8013a9a:	6839      	ldr	r1, [r7, #0]
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f7ff ffbf 	bl	8013a20 <CAD_SRC_Set_ResistorRp>
 8013aa2:	4603      	mov	r3, r0
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3708      	adds	r7, #8
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}

08013aac <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b086      	sub	sp, #24
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	60b9      	str	r1, [r7, #8]
 8013ab6:	607a      	str	r2, [r7, #4]
 8013ab8:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8013aba:	7bfa      	ldrb	r2, [r7, #15]
 8013abc:	4613      	mov	r3, r2
 8013abe:	005b      	lsls	r3, r3, #1
 8013ac0:	4413      	add	r3, r2
 8013ac2:	009b      	lsls	r3, r3, #2
 8013ac4:	4a17      	ldr	r2, [pc, #92]	@ (8013b24 <CAD_StateMachine_SNK+0x78>)
 8013ac6:	4413      	add	r3, r2
 8013ac8:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8013aca:	2302      	movs	r3, #2
 8013acc:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 8013ace:	693b      	ldr	r3, [r7, #16]
 8013ad0:	785b      	ldrb	r3, [r3, #1]
 8013ad2:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8013ad6:	b2db      	uxtb	r3, r3
 8013ad8:	2b03      	cmp	r3, #3
 8013ada:	d014      	beq.n	8013b06 <CAD_StateMachine_SNK+0x5a>
 8013adc:	2b03      	cmp	r3, #3
 8013ade:	dc1a      	bgt.n	8013b16 <CAD_StateMachine_SNK+0x6a>
 8013ae0:	2b01      	cmp	r3, #1
 8013ae2:	d002      	beq.n	8013aea <CAD_StateMachine_SNK+0x3e>
 8013ae4:	2b02      	cmp	r3, #2
 8013ae6:	d006      	beq.n	8013af6 <CAD_StateMachine_SNK+0x4a>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 8013ae8:	e015      	b.n	8013b16 <CAD_StateMachine_SNK+0x6a>
      _timing = ManageStateDetached_SNK(PortNum);
 8013aea:	7bfb      	ldrb	r3, [r7, #15]
 8013aec:	4618      	mov	r0, r3
 8013aee:	f000 f955 	bl	8013d9c <ManageStateDetached_SNK>
 8013af2:	6178      	str	r0, [r7, #20]
      break;
 8013af4:	e010      	b.n	8013b18 <CAD_StateMachine_SNK+0x6c>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 8013af6:	7bfb      	ldrb	r3, [r7, #15]
 8013af8:	687a      	ldr	r2, [r7, #4]
 8013afa:	68b9      	ldr	r1, [r7, #8]
 8013afc:	4618      	mov	r0, r3
 8013afe:	f000 f997 	bl	8013e30 <ManageStateAttachedWait_SNK>
 8013b02:	6178      	str	r0, [r7, #20]
      break;
 8013b04:	e008      	b.n	8013b18 <CAD_StateMachine_SNK+0x6c>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 8013b06:	7bfb      	ldrb	r3, [r7, #15]
 8013b08:	687a      	ldr	r2, [r7, #4]
 8013b0a:	68b9      	ldr	r1, [r7, #8]
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f000 fa11 	bl	8013f34 <ManageStateAttached_SNK>
 8013b12:	6178      	str	r0, [r7, #20]
      break;
 8013b14:	e000      	b.n	8013b18 <CAD_StateMachine_SNK+0x6c>
      break;
 8013b16:	bf00      	nop
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8013b18:	697b      	ldr	r3, [r7, #20]
}
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	3718      	adds	r7, #24
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}
 8013b22:	bf00      	nop
 8013b24:	200006fc 	.word	0x200006fc

08013b28 <CAD_StateMachine>:
}
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b086      	sub	sp, #24
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	4603      	mov	r3, r0
 8013b30:	60b9      	str	r1, [r7, #8]
 8013b32:	607a      	str	r2, [r7, #4]
 8013b34:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8013b36:	7bfa      	ldrb	r2, [r7, #15]
 8013b38:	4613      	mov	r3, r2
 8013b3a:	005b      	lsls	r3, r3, #1
 8013b3c:	4413      	add	r3, r2
 8013b3e:	009b      	lsls	r3, r3, #2
 8013b40:	4a52      	ldr	r2, [pc, #328]	@ (8013c8c <CAD_StateMachine+0x164>)
 8013b42:	4413      	add	r3, r2
 8013b44:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8013b46:	2302      	movs	r3, #2
 8013b48:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 8013b4a:	68bb      	ldr	r3, [r7, #8]
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 8013b50:	7bfa      	ldrb	r2, [r7, #15]
 8013b52:	494f      	ldr	r1, [pc, #316]	@ (8013c90 <CAD_StateMachine+0x168>)
 8013b54:	4613      	mov	r3, r2
 8013b56:	011b      	lsls	r3, r3, #4
 8013b58:	1a9b      	subs	r3, r3, r2
 8013b5a:	009b      	lsls	r3, r3, #2
 8013b5c:	440b      	add	r3, r1
 8013b5e:	3310      	adds	r3, #16
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	781b      	ldrb	r3, [r3, #0]
 8013b64:	f003 0310 	and.w	r3, r3, #16
 8013b68:	b2db      	uxtb	r3, r3
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d001      	beq.n	8013b72 <CAD_StateMachine+0x4a>
  {
    return _timing;
 8013b6e:	697b      	ldr	r3, [r7, #20]
 8013b70:	e087      	b.n	8013c82 <CAD_StateMachine+0x15a>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	781b      	ldrb	r3, [r3, #0]
 8013b76:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013b7a:	b2db      	uxtb	r3, r3
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d00a      	beq.n	8013b96 <CAD_StateMachine+0x6e>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 8013b80:	693a      	ldr	r2, [r7, #16]
 8013b82:	7813      	ldrb	r3, [r2, #0]
 8013b84:	f36f 13c7 	bfc	r3, #7, #1
 8013b88:	7013      	strb	r3, [r2, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 8013b8a:	693a      	ldr	r2, [r7, #16]
 8013b8c:	7853      	ldrb	r3, [r2, #1]
 8013b8e:	210c      	movs	r1, #12
 8013b90:	f361 0345 	bfi	r3, r1, #1, #5
 8013b94:	7053      	strb	r3, [r2, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	785b      	ldrb	r3, [r3, #1]
 8013b9a:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8013b9e:	b2db      	uxtb	r3, r3
 8013ba0:	2b0d      	cmp	r3, #13
 8013ba2:	d051      	beq.n	8013c48 <CAD_StateMachine+0x120>
 8013ba4:	2b0d      	cmp	r3, #13
 8013ba6:	dc62      	bgt.n	8013c6e <CAD_StateMachine+0x146>
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d002      	beq.n	8013bb2 <CAD_StateMachine+0x8a>
 8013bac:	2b0c      	cmp	r3, #12
 8013bae:	d024      	beq.n	8013bfa <CAD_StateMachine+0xd2>
 8013bb0:	e05d      	b.n	8013c6e <CAD_StateMachine+0x146>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 8013bb2:	7bfa      	ldrb	r2, [r7, #15]
 8013bb4:	4936      	ldr	r1, [pc, #216]	@ (8013c90 <CAD_StateMachine+0x168>)
 8013bb6:	4613      	mov	r3, r2
 8013bb8:	011b      	lsls	r3, r3, #4
 8013bba:	1a9b      	subs	r3, r3, r2
 8013bbc:	009b      	lsls	r3, r3, #2
 8013bbe:	440b      	add	r3, r1
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7ff fdf4 	bl	80137b0 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 8013bc8:	7bfa      	ldrb	r2, [r7, #15]
 8013bca:	4931      	ldr	r1, [pc, #196]	@ (8013c90 <CAD_StateMachine+0x168>)
 8013bcc:	4613      	mov	r3, r2
 8013bce:	011b      	lsls	r3, r3, #4
 8013bd0:	1a9b      	subs	r3, r3, r2
 8013bd2:	009b      	lsls	r3, r3, #2
 8013bd4:	440b      	add	r3, r1
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f7ff fdf9 	bl	80137d0 <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      UCPD_INSTANCE0_ENABLEIRQ;
 8013bde:	2104      	movs	r1, #4
 8013be0:	203f      	movs	r0, #63	@ 0x3f
 8013be2:	f7ff fcf1 	bl	80135c8 <__NVIC_SetPriority>
 8013be6:	203f      	movs	r0, #63	@ 0x3f
 8013be8:	f7ff fcd0 	bl	801358c <__NVIC_EnableIRQ>
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8013bec:	693a      	ldr	r2, [r7, #16]
 8013bee:	7853      	ldrb	r3, [r2, #1]
 8013bf0:	2101      	movs	r1, #1
 8013bf2:	f361 0345 	bfi	r3, r1, #1, #5
 8013bf6:	7053      	strb	r3, [r2, #1]
      break;
 8013bf8:	e042      	b.n	8013c80 <CAD_StateMachine+0x158>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 8013bfa:	7bfb      	ldrb	r3, [r7, #15]
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f001 fbbd 	bl	801537c <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 8013c02:	7bfa      	ldrb	r2, [r7, #15]
 8013c04:	4922      	ldr	r1, [pc, #136]	@ (8013c90 <CAD_StateMachine+0x168>)
 8013c06:	4613      	mov	r3, r2
 8013c08:	011b      	lsls	r3, r3, #4
 8013c0a:	1a9b      	subs	r3, r3, r2
 8013c0c:	009b      	lsls	r3, r3, #2
 8013c0e:	440b      	add	r3, r1
 8013c10:	3334      	adds	r3, #52	@ 0x34
 8013c12:	2200      	movs	r2, #0
 8013c14:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	2200      	movs	r2, #0
 8013c1a:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 8013c1c:	693a      	ldr	r2, [r7, #16]
 8013c1e:	7813      	ldrb	r3, [r2, #0]
 8013c20:	f36f 0301 	bfc	r3, #0, #2
 8013c24:	7013      	strb	r3, [r2, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	2201      	movs	r2, #1
 8013c2a:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8013c2c:	f7f4 fd96 	bl	800875c <HAL_GetTick>
 8013c30:	4602      	mov	r2, r0
 8013c32:	693b      	ldr	r3, [r7, #16]
 8013c34:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 8013c36:	231a      	movs	r3, #26
 8013c38:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 8013c3a:	693a      	ldr	r2, [r7, #16]
 8013c3c:	7853      	ldrb	r3, [r2, #1]
 8013c3e:	210d      	movs	r1, #13
 8013c40:	f361 0345 	bfi	r3, r1, #1, #5
 8013c44:	7053      	strb	r3, [r2, #1]
      break;
 8013c46:	e01b      	b.n	8013c80 <CAD_StateMachine+0x158>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 8013c48:	f7f4 fd88 	bl	800875c <HAL_GetTick>
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	685b      	ldr	r3, [r3, #4]
 8013c52:	1ad3      	subs	r3, r2, r3
 8013c54:	2b1a      	cmp	r3, #26
 8013c56:	d912      	bls.n	8013c7e <CAD_StateMachine+0x156>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 8013c58:	7bfb      	ldrb	r3, [r7, #15]
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f001 fafc 	bl	8015258 <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8013c60:	693a      	ldr	r2, [r7, #16]
 8013c62:	7853      	ldrb	r3, [r2, #1]
 8013c64:	2101      	movs	r1, #1
 8013c66:	f361 0345 	bfi	r3, r1, #1, #5
 8013c6a:	7053      	strb	r3, [r2, #1]
      }
      break;
 8013c6c:	e007      	b.n	8013c7e <CAD_StateMachine+0x156>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	689b      	ldr	r3, [r3, #8]
 8013c72:	7bf8      	ldrb	r0, [r7, #15]
 8013c74:	687a      	ldr	r2, [r7, #4]
 8013c76:	68b9      	ldr	r1, [r7, #8]
 8013c78:	4798      	blx	r3
 8013c7a:	6178      	str	r0, [r7, #20]
      break;
 8013c7c:	e000      	b.n	8013c80 <CAD_StateMachine+0x158>
      break;
 8013c7e:	bf00      	nop
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 8013c80:	697b      	ldr	r3, [r7, #20]
}
 8013c82:	4618      	mov	r0, r3
 8013c84:	3718      	adds	r7, #24
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}
 8013c8a:	bf00      	nop
 8013c8c:	200006fc 	.word	0x200006fc
 8013c90:	20000714 	.word	0x20000714

08013c94 <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 8013c94:	b480      	push	{r7}
 8013c96:	b087      	sub	sp, #28
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8013c9e:	79fa      	ldrb	r2, [r7, #7]
 8013ca0:	4613      	mov	r3, r2
 8013ca2:	005b      	lsls	r3, r3, #1
 8013ca4:	4413      	add	r3, r2
 8013ca6:	009b      	lsls	r3, r3, #2
 8013ca8:	4a3a      	ldr	r2, [pc, #232]	@ (8013d94 <CAD_Check_HW_SNK+0x100>)
 8013caa:	4413      	add	r3, r2
 8013cac:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 8013cae:	79fa      	ldrb	r2, [r7, #7]
 8013cb0:	4939      	ldr	r1, [pc, #228]	@ (8013d98 <CAD_Check_HW_SNK+0x104>)
 8013cb2:	4613      	mov	r3, r2
 8013cb4:	011b      	lsls	r3, r3, #4
 8013cb6:	1a9b      	subs	r3, r3, r2
 8013cb8:	009b      	lsls	r3, r3, #2
 8013cba:	440b      	add	r3, r1
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	695b      	ldr	r3, [r3, #20]
 8013cc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013cc4:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 8013cc6:	79fa      	ldrb	r2, [r7, #7]
 8013cc8:	4933      	ldr	r1, [pc, #204]	@ (8013d98 <CAD_Check_HW_SNK+0x104>)
 8013cca:	4613      	mov	r3, r2
 8013ccc:	011b      	lsls	r3, r3, #4
 8013cce:	1a9b      	subs	r3, r3, r2
 8013cd0:	009b      	lsls	r3, r3, #2
 8013cd2:	440b      	add	r3, r1
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	695b      	ldr	r3, [r3, #20]
 8013cd8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8013cdc:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 8013cde:	697a      	ldr	r2, [r7, #20]
 8013ce0:	7813      	ldrb	r3, [r2, #0]
 8013ce2:	f36f 0301 	bfc	r3, #0, #2
 8013ce6:	7013      	strb	r3, [r2, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 8013ce8:	697a      	ldr	r2, [r7, #20]
 8013cea:	7813      	ldrb	r3, [r2, #0]
 8013cec:	f36f 0384 	bfc	r3, #2, #3
 8013cf0:	7013      	strb	r3, [r2, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d021      	beq.n	8013d3c <CAD_Check_HW_SNK+0xa8>
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d11e      	bne.n	8013d3c <CAD_Check_HW_SNK+0xa8>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 8013cfe:	697a      	ldr	r2, [r7, #20]
 8013d00:	7813      	ldrb	r3, [r2, #0]
 8013d02:	2101      	movs	r1, #1
 8013d04:	f361 0384 	bfi	r3, r1, #2, #3
 8013d08:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC1;
 8013d0a:	697a      	ldr	r2, [r7, #20]
 8013d0c:	7813      	ldrb	r3, [r2, #0]
 8013d0e:	2101      	movs	r1, #1
 8013d10:	f361 0301 	bfi	r3, r1, #0, #2
 8013d14:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 8013d16:	693b      	ldr	r3, [r7, #16]
 8013d18:	0c18      	lsrs	r0, r3, #16
 8013d1a:	79fa      	ldrb	r2, [r7, #7]
 8013d1c:	491e      	ldr	r1, [pc, #120]	@ (8013d98 <CAD_Check_HW_SNK+0x104>)
 8013d1e:	4613      	mov	r3, r2
 8013d20:	011b      	lsls	r3, r3, #4
 8013d22:	1a9b      	subs	r3, r3, r2
 8013d24:	009b      	lsls	r3, r3, #2
 8013d26:	440b      	add	r3, r1
 8013d28:	3310      	adds	r3, #16
 8013d2a:	681a      	ldr	r2, [r3, #0]
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	f003 0303 	and.w	r3, r3, #3
 8013d32:	b2d9      	uxtb	r1, r3
 8013d34:	7893      	ldrb	r3, [r2, #2]
 8013d36:	f361 0383 	bfi	r3, r1, #2, #2
 8013d3a:	7093      	strb	r3, [r2, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 8013d3c:	693b      	ldr	r3, [r7, #16]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d121      	bne.n	8013d86 <CAD_Check_HW_SNK+0xf2>
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d01e      	beq.n	8013d86 <CAD_Check_HW_SNK+0xf2>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 8013d48:	697a      	ldr	r2, [r7, #20]
 8013d4a:	7813      	ldrb	r3, [r2, #0]
 8013d4c:	2101      	movs	r1, #1
 8013d4e:	f361 0384 	bfi	r3, r1, #2, #3
 8013d52:	7013      	strb	r3, [r2, #0]
    _handle->cc = CC2;
 8013d54:	697a      	ldr	r2, [r7, #20]
 8013d56:	7813      	ldrb	r3, [r2, #0]
 8013d58:	2102      	movs	r1, #2
 8013d5a:	f361 0301 	bfi	r3, r1, #0, #2
 8013d5e:	7013      	strb	r3, [r2, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	0c98      	lsrs	r0, r3, #18
 8013d64:	79fa      	ldrb	r2, [r7, #7]
 8013d66:	490c      	ldr	r1, [pc, #48]	@ (8013d98 <CAD_Check_HW_SNK+0x104>)
 8013d68:	4613      	mov	r3, r2
 8013d6a:	011b      	lsls	r3, r3, #4
 8013d6c:	1a9b      	subs	r3, r3, r2
 8013d6e:	009b      	lsls	r3, r3, #2
 8013d70:	440b      	add	r3, r1
 8013d72:	3310      	adds	r3, #16
 8013d74:	681a      	ldr	r2, [r3, #0]
 8013d76:	4603      	mov	r3, r0
 8013d78:	f003 0303 	and.w	r3, r3, #3
 8013d7c:	b2d9      	uxtb	r1, r3
 8013d7e:	7893      	ldrb	r3, [r2, #2]
 8013d80:	f361 0383 	bfi	r3, r1, #2, #2
 8013d84:	7093      	strb	r3, [r2, #2]
  }
}
 8013d86:	bf00      	nop
 8013d88:	371c      	adds	r7, #28
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d90:	4770      	bx	lr
 8013d92:	bf00      	nop
 8013d94:	200006fc 	.word	0x200006fc
 8013d98:	20000714 	.word	0x20000714

08013d9c <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b084      	sub	sp, #16
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	4603      	mov	r3, r0
 8013da4:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8013da6:	79fa      	ldrb	r2, [r7, #7]
 8013da8:	4613      	mov	r3, r2
 8013daa:	005b      	lsls	r3, r3, #1
 8013dac:	4413      	add	r3, r2
 8013dae:	009b      	lsls	r3, r3, #2
 8013db0:	4a1e      	ldr	r2, [pc, #120]	@ (8013e2c <ManageStateDetached_SNK+0x90>)
 8013db2:	4413      	add	r3, r2
 8013db4:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8013db6:	2302      	movs	r3, #2
 8013db8:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 8013dba:	79fb      	ldrb	r3, [r7, #7]
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f7ff ff69 	bl	8013c94 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	781b      	ldrb	r3, [r3, #0]
 8013dc6:	f003 031c 	and.w	r3, r3, #28
 8013dca:	b2db      	uxtb	r3, r3
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d103      	bne.n	8013dd8 <ManageStateDetached_SNK+0x3c>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 8013dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8013dd4:	60fb      	str	r3, [r7, #12]
 8013dd6:	e023      	b.n	8013e20 <ManageStateDetached_SNK+0x84>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 8013dd8:	f7f4 fcc0 	bl	800875c <HAL_GetTick>
 8013ddc:	4602      	mov	r2, r0
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 8013de2:	68ba      	ldr	r2, [r7, #8]
 8013de4:	7853      	ldrb	r3, [r2, #1]
 8013de6:	2102      	movs	r1, #2
 8013de8:	f361 0345 	bfi	r3, r1, #1, #5
 8013dec:	7053      	strb	r3, [r2, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 8013dee:	2001      	movs	r0, #1
 8013df0:	f7f4 fcc0 	bl	8008774 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 8013df4:	79fb      	ldrb	r3, [r7, #7]
 8013df6:	4618      	mov	r0, r3
 8013df8:	f7ff ff4c 	bl	8013c94 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 8013dfc:	68bb      	ldr	r3, [r7, #8]
 8013dfe:	781b      	ldrb	r3, [r3, #0]
 8013e00:	f003 031c 	and.w	r3, r3, #28
 8013e04:	b2db      	uxtb	r3, r3
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d106      	bne.n	8013e18 <ManageStateDetached_SNK+0x7c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8013e0a:	68ba      	ldr	r2, [r7, #8]
 8013e0c:	7853      	ldrb	r3, [r2, #1]
 8013e0e:	2101      	movs	r1, #1
 8013e10:	f361 0345 	bfi	r3, r1, #1, #5
 8013e14:	7053      	strb	r3, [r2, #1]
 8013e16:	e003      	b.n	8013e20 <ManageStateDetached_SNK+0x84>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 8013e18:	79fb      	ldrb	r3, [r7, #7]
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f004 f837 	bl	8017e8e <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 8013e20:	68fb      	ldr	r3, [r7, #12]
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	3710      	adds	r7, #16
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}
 8013e2a:	bf00      	nop
 8013e2c:	200006fc 	.word	0x200006fc

08013e30 <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b088      	sub	sp, #32
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	4603      	mov	r3, r0
 8013e38:	60b9      	str	r1, [r7, #8]
 8013e3a:	607a      	str	r2, [r7, #4]
 8013e3c:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8013e3e:	7bfa      	ldrb	r2, [r7, #15]
 8013e40:	4613      	mov	r3, r2
 8013e42:	005b      	lsls	r3, r3, #1
 8013e44:	4413      	add	r3, r2
 8013e46:	009b      	lsls	r3, r3, #2
 8013e48:	4a39      	ldr	r2, [pc, #228]	@ (8013f30 <ManageStateAttachedWait_SNK+0x100>)
 8013e4a:	4413      	add	r3, r2
 8013e4c:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8013e4e:	2302      	movs	r3, #2
 8013e50:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8013e52:	f7f4 fc83 	bl	800875c <HAL_GetTick>
 8013e56:	4602      	mov	r2, r0
 8013e58:	69bb      	ldr	r3, [r7, #24]
 8013e5a:	685b      	ldr	r3, [r3, #4]
 8013e5c:	1ad3      	subs	r3, r2, r3
 8013e5e:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 8013e60:	7bfb      	ldrb	r3, [r7, #15]
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7ff ff16 	bl	8013c94 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 8013e68:	69bb      	ldr	r3, [r7, #24]
 8013e6a:	781b      	ldrb	r3, [r3, #0]
 8013e6c:	f003 031c 	and.w	r3, r3, #28
 8013e70:	b2db      	uxtb	r3, r3
 8013e72:	2b04      	cmp	r3, #4
 8013e74:	d12c      	bne.n	8013ed0 <ManageStateAttachedWait_SNK+0xa0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 8013e76:	697b      	ldr	r3, [r7, #20]
 8013e78:	2b78      	cmp	r3, #120	@ 0x78
 8013e7a:	d923      	bls.n	8013ec4 <ManageStateAttachedWait_SNK+0x94>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 8013e7c:	7bfb      	ldrb	r3, [r7, #15]
 8013e7e:	2101      	movs	r1, #1
 8013e80:	4618      	mov	r0, r3
 8013e82:	f003 ffb5 	bl	8017df0 <USBPD_PWR_IF_GetVBUSStatus>
 8013e86:	4603      	mov	r3, r0
 8013e88:	2b01      	cmp	r3, #1
 8013e8a:	d11b      	bne.n	8013ec4 <ManageStateAttachedWait_SNK+0x94>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 8013e8c:	69bb      	ldr	r3, [r7, #24]
 8013e8e:	781b      	ldrb	r3, [r3, #0]
 8013e90:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8013e94:	b2db      	uxtb	r3, r3
 8013e96:	461a      	mov	r2, r3
 8013e98:	7bfb      	ldrb	r3, [r7, #15]
 8013e9a:	4611      	mov	r1, r2
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f001 fae1 	bl	8015464 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8013ea2:	69ba      	ldr	r2, [r7, #24]
 8013ea4:	7853      	ldrb	r3, [r2, #1]
 8013ea6:	2103      	movs	r1, #3
 8013ea8:	f361 0345 	bfi	r3, r1, #1, #5
 8013eac:	7053      	strb	r3, [r2, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	2202      	movs	r2, #2
 8013eb2:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 8013eb4:	69bb      	ldr	r3, [r7, #24]
 8013eb6:	781b      	ldrb	r3, [r3, #0]
 8013eb8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8013ebc:	b2db      	uxtb	r3, r3
 8013ebe:	461a      	mov	r2, r3
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8013ec4:	69ba      	ldr	r2, [r7, #24]
 8013ec6:	7813      	ldrb	r3, [r2, #0]
 8013ec8:	f36f 1345 	bfc	r3, #5, #1
 8013ecc:	7013      	strb	r3, [r2, #0]
 8013ece:	e02a      	b.n	8013f26 <ManageStateAttachedWait_SNK+0xf6>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8013ed0:	69bb      	ldr	r3, [r7, #24]
 8013ed2:	781b      	ldrb	r3, [r3, #0]
 8013ed4:	f003 0320 	and.w	r3, r3, #32
 8013ed8:	b2db      	uxtb	r3, r3
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d10c      	bne.n	8013ef8 <ManageStateAttachedWait_SNK+0xc8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8013ede:	f7f4 fc3d 	bl	800875c <HAL_GetTick>
 8013ee2:	4602      	mov	r2, r0
 8013ee4:	69bb      	ldr	r3, [r7, #24]
 8013ee6:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 8013ee8:	69ba      	ldr	r2, [r7, #24]
 8013eea:	7813      	ldrb	r3, [r2, #0]
 8013eec:	f043 0320 	orr.w	r3, r3, #32
 8013ef0:	7013      	strb	r3, [r2, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 8013ef2:	230c      	movs	r3, #12
 8013ef4:	61fb      	str	r3, [r7, #28]
 8013ef6:	e016      	b.n	8013f26 <ManageStateAttachedWait_SNK+0xf6>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 8013ef8:	f7f4 fc30 	bl	800875c <HAL_GetTick>
 8013efc:	4602      	mov	r2, r0
 8013efe:	69bb      	ldr	r3, [r7, #24]
 8013f00:	685b      	ldr	r3, [r3, #4]
 8013f02:	1ad3      	subs	r3, r2, r3
 8013f04:	2b0c      	cmp	r3, #12
 8013f06:	d90e      	bls.n	8013f26 <ManageStateAttachedWait_SNK+0xf6>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8013f08:	69ba      	ldr	r2, [r7, #24]
 8013f0a:	7813      	ldrb	r3, [r2, #0]
 8013f0c:	f36f 1345 	bfc	r3, #5, #1
 8013f10:	7013      	strb	r3, [r2, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8013f12:	69ba      	ldr	r2, [r7, #24]
 8013f14:	7853      	ldrb	r3, [r2, #1]
 8013f16:	2101      	movs	r1, #1
 8013f18:	f361 0345 	bfi	r3, r1, #1, #5
 8013f1c:	7053      	strb	r3, [r2, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8013f1e:	7bfb      	ldrb	r3, [r7, #15]
 8013f20:	4618      	mov	r0, r3
 8013f22:	f003 ffc7 	bl	8017eb4 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 8013f26:	69fb      	ldr	r3, [r7, #28]
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3720      	adds	r7, #32
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}
 8013f30:	200006fc 	.word	0x200006fc

08013f34 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b088      	sub	sp, #32
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	60b9      	str	r1, [r7, #8]
 8013f3e:	607a      	str	r2, [r7, #4]
 8013f40:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8013f42:	7bfa      	ldrb	r2, [r7, #15]
 8013f44:	4613      	mov	r3, r2
 8013f46:	005b      	lsls	r3, r3, #1
 8013f48:	4413      	add	r3, r2
 8013f4a:	009b      	lsls	r3, r3, #2
 8013f4c:	4a2a      	ldr	r2, [pc, #168]	@ (8013ff8 <ManageStateAttached_SNK+0xc4>)
 8013f4e:	4413      	add	r3, r2
 8013f50:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8013f52:	2302      	movs	r3, #2
 8013f54:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 8013f56:	2300      	movs	r3, #0
 8013f58:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8013f5a:	7bfa      	ldrb	r2, [r7, #15]
 8013f5c:	4927      	ldr	r1, [pc, #156]	@ (8013ffc <ManageStateAttached_SNK+0xc8>)
 8013f5e:	4613      	mov	r3, r2
 8013f60:	011b      	lsls	r3, r3, #4
 8013f62:	1a9b      	subs	r3, r3, r2
 8013f64:	009b      	lsls	r3, r3, #2
 8013f66:	440b      	add	r3, r1
 8013f68:	3334      	adds	r3, #52	@ 0x34
 8013f6a:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8013f6c:	2b01      	cmp	r3, #1
 8013f6e:	d10b      	bne.n	8013f88 <ManageStateAttached_SNK+0x54>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8013f70:	7bfa      	ldrb	r2, [r7, #15]
 8013f72:	4922      	ldr	r1, [pc, #136]	@ (8013ffc <ManageStateAttached_SNK+0xc8>)
 8013f74:	4613      	mov	r3, r2
 8013f76:	011b      	lsls	r3, r3, #4
 8013f78:	1a9b      	subs	r3, r3, r2
 8013f7a:	009b      	lsls	r3, r3, #2
 8013f7c:	440b      	add	r3, r1
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	695b      	ldr	r3, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8013f82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013f86:	e00a      	b.n	8013f9e <ManageStateAttached_SNK+0x6a>
 8013f88:	7bfa      	ldrb	r2, [r7, #15]
 8013f8a:	491c      	ldr	r1, [pc, #112]	@ (8013ffc <ManageStateAttached_SNK+0xc8>)
 8013f8c:	4613      	mov	r3, r2
 8013f8e:	011b      	lsls	r3, r3, #4
 8013f90:	1a9b      	subs	r3, r3, r2
 8013f92:	009b      	lsls	r3, r3, #2
 8013f94:	440b      	add	r3, r1
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	695b      	ldr	r3, [r3, #20]
 8013f9a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8013f9e:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 8013fa0:	7bfb      	ldrb	r3, [r7, #15]
 8013fa2:	2102      	movs	r1, #2
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f003 ff23 	bl	8017df0 <USBPD_PWR_IF_GetVBUSStatus>
 8013faa:	4603      	mov	r3, r0
 8013fac:	2b01      	cmp	r3, #1
 8013fae:	d11b      	bne.n	8013fe8 <ManageStateAttached_SNK+0xb4>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 8013fb0:	697a      	ldr	r2, [r7, #20]
 8013fb2:	693b      	ldr	r3, [r7, #16]
 8013fb4:	429a      	cmp	r2, r3
 8013fb6:	d117      	bne.n	8013fe8 <ManageStateAttached_SNK+0xb4>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 8013fb8:	7bfb      	ldrb	r3, [r7, #15]
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f001 fb9e 	bl	80156fc <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 8013fc0:	69ba      	ldr	r2, [r7, #24]
 8013fc2:	7813      	ldrb	r3, [r2, #0]
 8013fc4:	f36f 0384 	bfc	r3, #2, #3
 8013fc8:	7013      	strb	r3, [r2, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8013fca:	69ba      	ldr	r2, [r7, #24]
 8013fcc:	7853      	ldrb	r3, [r2, #1]
 8013fce:	2101      	movs	r1, #1
 8013fd0:	f361 0345 	bfi	r3, r1, #1, #5
 8013fd4:	7053      	strb	r3, [r2, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	2201      	movs	r2, #1
 8013fda:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	2200      	movs	r2, #0
 8013fe0:	601a      	str	r2, [r3, #0]
    _timing = 0;
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	61fb      	str	r3, [r7, #28]
 8013fe6:	e001      	b.n	8013fec <ManageStateAttached_SNK+0xb8>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 8013fe8:	230a      	movs	r3, #10
 8013fea:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8013fec:	69fb      	ldr	r3, [r7, #28]
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3720      	adds	r7, #32
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}
 8013ff6:	bf00      	nop
 8013ff8:	200006fc 	.word	0x200006fc
 8013ffc:	20000714 	.word	0x20000714

08014000 <LL_AHB1_GRP1_EnableClock>:
{
 8014000:	b480      	push	{r7}
 8014002:	b085      	sub	sp, #20
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8014008:	4b08      	ldr	r3, [pc, #32]	@ (801402c <LL_AHB1_GRP1_EnableClock+0x2c>)
 801400a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801400c:	4907      	ldr	r1, [pc, #28]	@ (801402c <LL_AHB1_GRP1_EnableClock+0x2c>)
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	4313      	orrs	r3, r2
 8014012:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8014014:	4b05      	ldr	r3, [pc, #20]	@ (801402c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8014016:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	4013      	ands	r3, r2
 801401c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801401e:	68fb      	ldr	r3, [r7, #12]
}
 8014020:	bf00      	nop
 8014022:	3714      	adds	r7, #20
 8014024:	46bd      	mov	sp, r7
 8014026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402a:	4770      	bx	lr
 801402c:	40021000 	.word	0x40021000

08014030 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 8014030:	b480      	push	{r7}
 8014032:	b083      	sub	sp, #12
 8014034:	af00      	add	r7, sp, #0
 8014036:	4603      	mov	r3, r0
 8014038:	71fb      	strb	r3, [r7, #7]
  return UCPD_INSTANCE0;
 801403a:	4b03      	ldr	r3, [pc, #12]	@ (8014048 <USBPD_HW_GetUSPDInstance+0x18>)
}
 801403c:	4618      	mov	r0, r3
 801403e:	370c      	adds	r7, #12
 8014040:	46bd      	mov	sp, r7
 8014042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014046:	4770      	bx	lr
 8014048:	4000a000 	.word	0x4000a000

0801404c <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b08e      	sub	sp, #56	@ 0x38
 8014050:	af00      	add	r7, sp, #0
 8014052:	4603      	mov	r3, r0
 8014054:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8014056:	f107 030c 	add.w	r3, r7, #12
 801405a:	4618      	mov	r0, r3
 801405c:	f7fc fcca 	bl	80109f4 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8014060:	2300      	movs	r3, #0
 8014062:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8014064:	2300      	movs	r3, #0
 8014066:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8014068:	2300      	movs	r3, #0
 801406a:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 801406c:	2380      	movs	r3, #128	@ 0x80
 801406e:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8014070:	2300      	movs	r3, #0
 8014072:	627b      	str	r3, [r7, #36]	@ 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8014074:	2300      	movs	r3, #0
 8014076:	62bb      	str	r3, [r7, #40]	@ 0x28
  DMA_InitStruct.NbData = 0;
 8014078:	2300      	movs	r3, #0
 801407a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 801407c:	2300      	movs	r3, #0
 801407e:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8014080:	2300      	movs	r3, #0
 8014082:	60fb      	str	r3, [r7, #12]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 8014084:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8014088:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 801408a:	2001      	movs	r0, #1
 801408c:	f7ff ffb8 	bl	8014000 <LL_AHB1_GRP1_EnableClock>

  /* Initialise the DMA */
  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 8014090:	2372      	movs	r3, #114	@ 0x72
 8014092:	633b      	str	r3, [r7, #48]	@ 0x30

  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 8014094:	f107 030c 	add.w	r3, r7, #12
 8014098:	461a      	mov	r2, r3
 801409a:	2100      	movs	r1, #0
 801409c:	4803      	ldr	r0, [pc, #12]	@ (80140ac <USBPD_HW_Init_DMARxInstance+0x60>)
 801409e:	f7fc fc69 	bl	8010974 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 80140a2:	4b03      	ldr	r3, [pc, #12]	@ (80140b0 <USBPD_HW_Init_DMARxInstance+0x64>)
}
 80140a4:	4618      	mov	r0, r3
 80140a6:	3738      	adds	r7, #56	@ 0x38
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}
 80140ac:	40020000 	.word	0x40020000
 80140b0:	40020008 	.word	0x40020008

080140b4 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 80140b4:	b480      	push	{r7}
 80140b6:	b083      	sub	sp, #12
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	4603      	mov	r3, r0
 80140bc:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 80140be:	bf00      	nop
 80140c0:	370c      	adds	r7, #12
 80140c2:	46bd      	mov	sp, r7
 80140c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c8:	4770      	bx	lr
	...

080140cc <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b08e      	sub	sp, #56	@ 0x38
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	4603      	mov	r3, r0
 80140d4:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 80140d6:	f107 030c 	add.w	r3, r7, #12
 80140da:	4618      	mov	r0, r3
 80140dc:	f7fc fc8a 	bl	80109f4 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 80140e0:	2310      	movs	r3, #16
 80140e2:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 80140e4:	2300      	movs	r3, #0
 80140e6:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 80140e8:	2300      	movs	r3, #0
 80140ea:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 80140ec:	2380      	movs	r3, #128	@ 0x80
 80140ee:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80140f0:	2300      	movs	r3, #0
 80140f2:	627b      	str	r3, [r7, #36]	@ 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80140f4:	2300      	movs	r3, #0
 80140f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  DMA_InitStruct.NbData = 0;
 80140f8:	2300      	movs	r3, #0
 80140fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 80140fc:	2300      	movs	r3, #0
 80140fe:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8014100:	2300      	movs	r3, #0
 8014102:	60fb      	str	r3, [r7, #12]

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 8014104:	2001      	movs	r0, #1
 8014106:	f7ff ff7b 	bl	8014000 <LL_AHB1_GRP1_EnableClock>

  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 801410a:	2373      	movs	r3, #115	@ 0x73
 801410c:	633b      	str	r3, [r7, #48]	@ 0x30
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 801410e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014112:	637b      	str	r3, [r7, #52]	@ 0x34
  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 8014114:	f107 030c 	add.w	r3, r7, #12
 8014118:	461a      	mov	r2, r3
 801411a:	2101      	movs	r1, #1
 801411c:	4803      	ldr	r0, [pc, #12]	@ (801412c <USBPD_HW_Init_DMATxInstance+0x60>)
 801411e:	f7fc fc29 	bl	8010974 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 8014122:	4b03      	ldr	r3, [pc, #12]	@ (8014130 <USBPD_HW_Init_DMATxInstance+0x64>)
}
 8014124:	4618      	mov	r0, r3
 8014126:	3738      	adds	r7, #56	@ 0x38
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}
 801412c:	40020000 	.word	0x40020000
 8014130:	4002001c 	.word	0x4002001c

08014134 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 8014134:	b480      	push	{r7}
 8014136:	b083      	sub	sp, #12
 8014138:	af00      	add	r7, sp, #0
 801413a:	4603      	mov	r3, r0
 801413c:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 801413e:	bf00      	nop
 8014140:	370c      	adds	r7, #12
 8014142:	46bd      	mov	sp, r7
 8014144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014148:	4770      	bx	lr

0801414a <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 801414a:	b480      	push	{r7}
 801414c:	b083      	sub	sp, #12
 801414e:	af00      	add	r7, sp, #0
 8014150:	4603      	mov	r3, r0
 8014152:	460a      	mov	r2, r1
 8014154:	71fb      	strb	r3, [r7, #7]
 8014156:	4613      	mov	r3, r2
 8014158:	71bb      	strb	r3, [r7, #6]
  else
  {
    /* FRS_TX common */
    UCPDFRS_INSTANCE0_FRSCC2;
  }
}
 801415a:	bf00      	nop
 801415c:	370c      	adds	r7, #12
 801415e:	46bd      	mov	sp, r7
 8014160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014164:	4770      	bx	lr

08014166 <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8014166:	b480      	push	{r7}
 8014168:	b083      	sub	sp, #12
 801416a:	af00      	add	r7, sp, #0
 801416c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	699b      	ldr	r3, [r3, #24]
 8014172:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	619a      	str	r2, [r3, #24]
}
 801417a:	bf00      	nop
 801417c:	370c      	adds	r7, #12
 801417e:	46bd      	mov	sp, r7
 8014180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014184:	4770      	bx	lr

08014186 <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8014186:	b480      	push	{r7}
 8014188:	b083      	sub	sp, #12
 801418a:	af00      	add	r7, sp, #0
 801418c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	699b      	ldr	r3, [r3, #24]
 8014192:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	619a      	str	r2, [r3, #24]
}
 801419a:	bf00      	nop
 801419c:	370c      	adds	r7, #12
 801419e:	46bd      	mov	sp, r7
 80141a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a4:	4770      	bx	lr

080141a6 <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 80141a6:	b480      	push	{r7}
 80141a8:	b083      	sub	sp, #12
 80141aa:	af00      	add	r7, sp, #0
 80141ac:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	699b      	ldr	r3, [r3, #24]
 80141b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	619a      	str	r2, [r3, #24]
}
 80141ba:	bf00      	nop
 80141bc:	370c      	adds	r7, #12
 80141be:	46bd      	mov	sp, r7
 80141c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c4:	4770      	bx	lr

080141c6 <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 80141c6:	b480      	push	{r7}
 80141c8:	b083      	sub	sp, #12
 80141ca:	af00      	add	r7, sp, #0
 80141cc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	699b      	ldr	r3, [r3, #24]
 80141d2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	619a      	str	r2, [r3, #24]
}
 80141da:	bf00      	nop
 80141dc:	370c      	adds	r7, #12
 80141de:	46bd      	mov	sp, r7
 80141e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e4:	4770      	bx	lr

080141e6 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 80141e6:	b480      	push	{r7}
 80141e8:	b083      	sub	sp, #12
 80141ea:	af00      	add	r7, sp, #0
 80141ec:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	699b      	ldr	r3, [r3, #24]
 80141f2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	619a      	str	r2, [r3, #24]
}
 80141fa:	bf00      	nop
 80141fc:	370c      	adds	r7, #12
 80141fe:	46bd      	mov	sp, r7
 8014200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014204:	4770      	bx	lr

08014206 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 8014206:	b480      	push	{r7}
 8014208:	b083      	sub	sp, #12
 801420a:	af00      	add	r7, sp, #0
 801420c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	699b      	ldr	r3, [r3, #24]
 8014212:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	619a      	str	r2, [r3, #24]
}
 801421a:	bf00      	nop
 801421c:	370c      	adds	r7, #12
 801421e:	46bd      	mov	sp, r7
 8014220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014224:	4770      	bx	lr

08014226 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 8014226:	b480      	push	{r7}
 8014228:	b083      	sub	sp, #12
 801422a:	af00      	add	r7, sp, #0
 801422c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	699b      	ldr	r3, [r3, #24]
 8014232:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	619a      	str	r2, [r3, #24]
}
 801423a:	bf00      	nop
 801423c:	370c      	adds	r7, #12
 801423e:	46bd      	mov	sp, r7
 8014240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014244:	4770      	bx	lr

08014246 <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 8014246:	b480      	push	{r7}
 8014248:	b083      	sub	sp, #12
 801424a:	af00      	add	r7, sp, #0
 801424c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	699b      	ldr	r3, [r3, #24]
 8014252:	f043 0220 	orr.w	r2, r3, #32
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	619a      	str	r2, [r3, #24]
}
 801425a:	bf00      	nop
 801425c:	370c      	adds	r7, #12
 801425e:	46bd      	mov	sp, r7
 8014260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014264:	4770      	bx	lr

08014266 <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 8014266:	b480      	push	{r7}
 8014268:	b083      	sub	sp, #12
 801426a:	af00      	add	r7, sp, #0
 801426c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	699b      	ldr	r3, [r3, #24]
 8014272:	f043 0210 	orr.w	r2, r3, #16
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	619a      	str	r2, [r3, #24]
}
 801427a:	bf00      	nop
 801427c:	370c      	adds	r7, #12
 801427e:	46bd      	mov	sp, r7
 8014280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014284:	4770      	bx	lr

08014286 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 8014286:	b480      	push	{r7}
 8014288:	b083      	sub	sp, #12
 801428a:	af00      	add	r7, sp, #0
 801428c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	699b      	ldr	r3, [r3, #24]
 8014292:	f043 0208 	orr.w	r2, r3, #8
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	619a      	str	r2, [r3, #24]
}
 801429a:	bf00      	nop
 801429c:	370c      	adds	r7, #12
 801429e:	46bd      	mov	sp, r7
 80142a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a4:	4770      	bx	lr

080142a6 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 80142a6:	b480      	push	{r7}
 80142a8:	b083      	sub	sp, #12
 80142aa:	af00      	add	r7, sp, #0
 80142ac:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	699b      	ldr	r3, [r3, #24]
 80142b2:	f043 0204 	orr.w	r2, r3, #4
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	619a      	str	r2, [r3, #24]
}
 80142ba:	bf00      	nop
 80142bc:	370c      	adds	r7, #12
 80142be:	46bd      	mov	sp, r7
 80142c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c4:	4770      	bx	lr

080142c6 <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 80142c6:	b480      	push	{r7}
 80142c8:	b083      	sub	sp, #12
 80142ca:	af00      	add	r7, sp, #0
 80142cc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	699b      	ldr	r3, [r3, #24]
 80142d2:	f043 0202 	orr.w	r2, r3, #2
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	619a      	str	r2, [r3, #24]
}
 80142da:	bf00      	nop
 80142dc:	370c      	adds	r7, #12
 80142de:	46bd      	mov	sp, r7
 80142e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e4:	4770      	bx	lr

080142e6 <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 80142e6:	b580      	push	{r7, lr}
 80142e8:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 80142ea:	2000      	movs	r0, #0
 80142ec:	f000 f802 	bl	80142f4 <PORTx_IRQHandler>
}
 80142f0:	bf00      	nop
 80142f2:	bd80      	pop	{r7, pc}

080142f4 <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b084      	sub	sp, #16
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	4603      	mov	r3, r0
 80142fc:	71fb      	strb	r3, [r7, #7]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 80142fe:	79fa      	ldrb	r2, [r7, #7]
 8014300:	4998      	ldr	r1, [pc, #608]	@ (8014564 <PORTx_IRQHandler+0x270>)
 8014302:	4613      	mov	r3, r2
 8014304:	011b      	lsls	r3, r3, #4
 8014306:	1a9b      	subs	r3, r3, r2
 8014308:	009b      	lsls	r3, r3, #2
 801430a:	440b      	add	r3, r1
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	695b      	ldr	r3, [r3, #20]
 8014314:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag = 0;

  if ((hucpd->IMR & _interrupt) != 0u)
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	691a      	ldr	r2, [r3, #16]
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	4013      	ands	r3, r2
 801431e:	2b00      	cmp	r3, #0
 8014320:	f000 81ca 	beq.w	80146b8 <PORTx_IRQHandler+0x3c4>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	f003 0302 	and.w	r3, r3, #2
 801432a:	2b00      	cmp	r3, #0
 801432c:	d035      	beq.n	801439a <PORTx_IRQHandler+0xa6>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 801432e:	68f8      	ldr	r0, [r7, #12]
 8014330:	f7ff ffc9 	bl	80142c6 <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8014334:	79fa      	ldrb	r2, [r7, #7]
 8014336:	498b      	ldr	r1, [pc, #556]	@ (8014564 <PORTx_IRQHandler+0x270>)
 8014338:	4613      	mov	r3, r2
 801433a:	011b      	lsls	r3, r3, #4
 801433c:	1a9b      	subs	r3, r3, r2
 801433e:	009b      	lsls	r3, r3, #2
 8014340:	440b      	add	r3, r1
 8014342:	3304      	adds	r3, #4
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	6819      	ldr	r1, [r3, #0]
 8014348:	79fa      	ldrb	r2, [r7, #7]
 801434a:	4886      	ldr	r0, [pc, #536]	@ (8014564 <PORTx_IRQHandler+0x270>)
 801434c:	4613      	mov	r3, r2
 801434e:	011b      	lsls	r3, r3, #4
 8014350:	1a9b      	subs	r3, r3, r2
 8014352:	009b      	lsls	r3, r3, #2
 8014354:	4403      	add	r3, r0
 8014356:	3304      	adds	r3, #4
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	f021 0201 	bic.w	r2, r1, #1
 801435e:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8014360:	bf00      	nop
 8014362:	79fa      	ldrb	r2, [r7, #7]
 8014364:	497f      	ldr	r1, [pc, #508]	@ (8014564 <PORTx_IRQHandler+0x270>)
 8014366:	4613      	mov	r3, r2
 8014368:	011b      	lsls	r3, r3, #4
 801436a:	1a9b      	subs	r3, r3, r2
 801436c:	009b      	lsls	r3, r3, #2
 801436e:	440b      	add	r3, r1
 8014370:	3304      	adds	r3, #4
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	f003 0301 	and.w	r3, r3, #1
 801437a:	2b01      	cmp	r3, #1
 801437c:	d0f1      	beq.n	8014362 <PORTx_IRQHandler+0x6e>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 801437e:	79fa      	ldrb	r2, [r7, #7]
 8014380:	4978      	ldr	r1, [pc, #480]	@ (8014564 <PORTx_IRQHandler+0x270>)
 8014382:	4613      	mov	r3, r2
 8014384:	011b      	lsls	r3, r3, #4
 8014386:	1a9b      	subs	r3, r3, r2
 8014388:	009b      	lsls	r3, r3, #2
 801438a:	440b      	add	r3, r1
 801438c:	3314      	adds	r3, #20
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	79fa      	ldrb	r2, [r7, #7]
 8014392:	2101      	movs	r1, #1
 8014394:	4610      	mov	r0, r2
 8014396:	4798      	blx	r3
      return;
 8014398:	e18e      	b.n	80146b8 <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	f003 0304 	and.w	r3, r3, #4
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d035      	beq.n	8014410 <PORTx_IRQHandler+0x11c>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 80143a4:	68f8      	ldr	r0, [r7, #12]
 80143a6:	f7ff ff7e 	bl	80142a6 <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 80143aa:	79fa      	ldrb	r2, [r7, #7]
 80143ac:	496d      	ldr	r1, [pc, #436]	@ (8014564 <PORTx_IRQHandler+0x270>)
 80143ae:	4613      	mov	r3, r2
 80143b0:	011b      	lsls	r3, r3, #4
 80143b2:	1a9b      	subs	r3, r3, r2
 80143b4:	009b      	lsls	r3, r3, #2
 80143b6:	440b      	add	r3, r1
 80143b8:	3304      	adds	r3, #4
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	6819      	ldr	r1, [r3, #0]
 80143be:	79fa      	ldrb	r2, [r7, #7]
 80143c0:	4868      	ldr	r0, [pc, #416]	@ (8014564 <PORTx_IRQHandler+0x270>)
 80143c2:	4613      	mov	r3, r2
 80143c4:	011b      	lsls	r3, r3, #4
 80143c6:	1a9b      	subs	r3, r3, r2
 80143c8:	009b      	lsls	r3, r3, #2
 80143ca:	4403      	add	r3, r0
 80143cc:	3304      	adds	r3, #4
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	f021 0201 	bic.w	r2, r1, #1
 80143d4:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 80143d6:	bf00      	nop
 80143d8:	79fa      	ldrb	r2, [r7, #7]
 80143da:	4962      	ldr	r1, [pc, #392]	@ (8014564 <PORTx_IRQHandler+0x270>)
 80143dc:	4613      	mov	r3, r2
 80143de:	011b      	lsls	r3, r3, #4
 80143e0:	1a9b      	subs	r3, r3, r2
 80143e2:	009b      	lsls	r3, r3, #2
 80143e4:	440b      	add	r3, r1
 80143e6:	3304      	adds	r3, #4
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	f003 0301 	and.w	r3, r3, #1
 80143f0:	2b01      	cmp	r3, #1
 80143f2:	d0f1      	beq.n	80143d8 <PORTx_IRQHandler+0xe4>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 80143f4:	79fa      	ldrb	r2, [r7, #7]
 80143f6:	495b      	ldr	r1, [pc, #364]	@ (8014564 <PORTx_IRQHandler+0x270>)
 80143f8:	4613      	mov	r3, r2
 80143fa:	011b      	lsls	r3, r3, #4
 80143fc:	1a9b      	subs	r3, r3, r2
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	440b      	add	r3, r1
 8014402:	3314      	adds	r3, #20
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	79fa      	ldrb	r2, [r7, #7]
 8014408:	2100      	movs	r1, #0
 801440a:	4610      	mov	r0, r2
 801440c:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 801440e:	e153      	b.n	80146b8 <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 8014410:	68bb      	ldr	r3, [r7, #8]
 8014412:	f003 0308 	and.w	r3, r3, #8
 8014416:	2b00      	cmp	r3, #0
 8014418:	d035      	beq.n	8014486 <PORTx_IRQHandler+0x192>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 801441a:	68f8      	ldr	r0, [r7, #12]
 801441c:	f7ff ff33 	bl	8014286 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8014420:	79fa      	ldrb	r2, [r7, #7]
 8014422:	4950      	ldr	r1, [pc, #320]	@ (8014564 <PORTx_IRQHandler+0x270>)
 8014424:	4613      	mov	r3, r2
 8014426:	011b      	lsls	r3, r3, #4
 8014428:	1a9b      	subs	r3, r3, r2
 801442a:	009b      	lsls	r3, r3, #2
 801442c:	440b      	add	r3, r1
 801442e:	3304      	adds	r3, #4
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	6819      	ldr	r1, [r3, #0]
 8014434:	79fa      	ldrb	r2, [r7, #7]
 8014436:	484b      	ldr	r0, [pc, #300]	@ (8014564 <PORTx_IRQHandler+0x270>)
 8014438:	4613      	mov	r3, r2
 801443a:	011b      	lsls	r3, r3, #4
 801443c:	1a9b      	subs	r3, r3, r2
 801443e:	009b      	lsls	r3, r3, #2
 8014440:	4403      	add	r3, r0
 8014442:	3304      	adds	r3, #4
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	f021 0201 	bic.w	r2, r1, #1
 801444a:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 801444c:	bf00      	nop
 801444e:	79fa      	ldrb	r2, [r7, #7]
 8014450:	4944      	ldr	r1, [pc, #272]	@ (8014564 <PORTx_IRQHandler+0x270>)
 8014452:	4613      	mov	r3, r2
 8014454:	011b      	lsls	r3, r3, #4
 8014456:	1a9b      	subs	r3, r3, r2
 8014458:	009b      	lsls	r3, r3, #2
 801445a:	440b      	add	r3, r1
 801445c:	3304      	adds	r3, #4
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	f003 0301 	and.w	r3, r3, #1
 8014466:	2b01      	cmp	r3, #1
 8014468:	d0f1      	beq.n	801444e <PORTx_IRQHandler+0x15a>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 801446a:	79fa      	ldrb	r2, [r7, #7]
 801446c:	493d      	ldr	r1, [pc, #244]	@ (8014564 <PORTx_IRQHandler+0x270>)
 801446e:	4613      	mov	r3, r2
 8014470:	011b      	lsls	r3, r3, #4
 8014472:	1a9b      	subs	r3, r3, r2
 8014474:	009b      	lsls	r3, r3, #2
 8014476:	440b      	add	r3, r1
 8014478:	3314      	adds	r3, #20
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	79fa      	ldrb	r2, [r7, #7]
 801447e:	2102      	movs	r1, #2
 8014480:	4610      	mov	r0, r2
 8014482:	4798      	blx	r3
      return;
 8014484:	e118      	b.n	80146b8 <PORTx_IRQHandler+0x3c4>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 8014486:	68bb      	ldr	r3, [r7, #8]
 8014488:	f003 0310 	and.w	r3, r3, #16
 801448c:	2b00      	cmp	r3, #0
 801448e:	d003      	beq.n	8014498 <PORTx_IRQHandler+0x1a4>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 8014490:	68f8      	ldr	r0, [r7, #12]
 8014492:	f7ff fee8 	bl	8014266 <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 8014496:	e10f      	b.n	80146b8 <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 8014498:	68bb      	ldr	r3, [r7, #8]
 801449a:	f003 0320 	and.w	r3, r3, #32
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d010      	beq.n	80144c4 <PORTx_IRQHandler+0x1d0>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 80144a2:	68f8      	ldr	r0, [r7, #12]
 80144a4:	f7ff fecf 	bl	8014246 <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 80144a8:	79fa      	ldrb	r2, [r7, #7]
 80144aa:	492e      	ldr	r1, [pc, #184]	@ (8014564 <PORTx_IRQHandler+0x270>)
 80144ac:	4613      	mov	r3, r2
 80144ae:	011b      	lsls	r3, r3, #4
 80144b0:	1a9b      	subs	r3, r3, r2
 80144b2:	009b      	lsls	r3, r3, #2
 80144b4:	440b      	add	r3, r1
 80144b6:	3324      	adds	r3, #36	@ 0x24
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	79fa      	ldrb	r2, [r7, #7]
 80144bc:	2105      	movs	r1, #5
 80144be:	4610      	mov	r0, r2
 80144c0:	4798      	blx	r3
      return;
 80144c2:	e0f9      	b.n	80146b8 <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d003      	beq.n	80144d6 <PORTx_IRQHandler+0x1e2>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 80144ce:	68f8      	ldr	r0, [r7, #12]
 80144d0:	f7ff fea9 	bl	8014226 <LL_UCPD_ClearFlag_TxUND>
      return;
 80144d4:	e0f0      	b.n	80146b8 <PORTx_IRQHandler+0x3c4>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d01e      	beq.n	801451e <PORTx_IRQHandler+0x22a>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144e4:	2b05      	cmp	r3, #5
 80144e6:	d10c      	bne.n	8014502 <PORTx_IRQHandler+0x20e>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 80144e8:	79fa      	ldrb	r2, [r7, #7]
 80144ea:	491e      	ldr	r1, [pc, #120]	@ (8014564 <PORTx_IRQHandler+0x270>)
 80144ec:	4613      	mov	r3, r2
 80144ee:	011b      	lsls	r3, r3, #4
 80144f0:	1a9b      	subs	r3, r3, r2
 80144f2:	009b      	lsls	r3, r3, #2
 80144f4:	440b      	add	r3, r1
 80144f6:	331c      	adds	r3, #28
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	79fa      	ldrb	r2, [r7, #7]
 80144fc:	2106      	movs	r1, #6
 80144fe:	4610      	mov	r0, r2
 8014500:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 8014502:	68f8      	ldr	r0, [r7, #12]
 8014504:	f7ff fe7f 	bl	8014206 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 8014508:	79fa      	ldrb	r2, [r7, #7]
 801450a:	4916      	ldr	r1, [pc, #88]	@ (8014564 <PORTx_IRQHandler+0x270>)
 801450c:	4613      	mov	r3, r2
 801450e:	011b      	lsls	r3, r3, #4
 8014510:	1a9b      	subs	r3, r3, r2
 8014512:	009b      	lsls	r3, r3, #2
 8014514:	440b      	add	r3, r1
 8014516:	3338      	adds	r3, #56	@ 0x38
 8014518:	2201      	movs	r2, #1
 801451a:	701a      	strb	r2, [r3, #0]
      return;
 801451c:	e0cc      	b.n	80146b8 <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8014524:	2b00      	cmp	r3, #0
 8014526:	d010      	beq.n	801454a <PORTx_IRQHandler+0x256>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8014528:	79fa      	ldrb	r2, [r7, #7]
 801452a:	490e      	ldr	r1, [pc, #56]	@ (8014564 <PORTx_IRQHandler+0x270>)
 801452c:	4613      	mov	r3, r2
 801452e:	011b      	lsls	r3, r3, #4
 8014530:	1a9b      	subs	r3, r3, r2
 8014532:	009b      	lsls	r3, r3, #2
 8014534:	440b      	add	r3, r1
 8014536:	331c      	adds	r3, #28
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	79fa      	ldrb	r2, [r7, #7]
 801453c:	2105      	movs	r1, #5
 801453e:	4610      	mov	r0, r2
 8014540:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 8014542:	68f8      	ldr	r0, [r7, #12]
 8014544:	f7ff fe4f 	bl	80141e6 <LL_UCPD_ClearFlag_RxHRST>
      return;
 8014548:	e0b6      	b.n	80146b8 <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 801454a:	68bb      	ldr	r3, [r7, #8]
 801454c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014550:	2b00      	cmp	r3, #0
 8014552:	d00b      	beq.n	801456c <PORTx_IRQHandler+0x278>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag = 1;
 8014554:	4b04      	ldr	r3, [pc, #16]	@ (8014568 <PORTx_IRQHandler+0x274>)
 8014556:	2201      	movs	r2, #1
 8014558:	701a      	strb	r2, [r3, #0]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 801455a:	68f8      	ldr	r0, [r7, #12]
 801455c:	f7ff fe33 	bl	80141c6 <LL_UCPD_ClearFlag_RxOvr>
      return;
 8014560:	e0aa      	b.n	80146b8 <PORTx_IRQHandler+0x3c4>
 8014562:	bf00      	nop
 8014564:	20000714 	.word	0x20000714
 8014568:	20000708 	.word	0x20000708
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8014572:	2b00      	cmp	r3, #0
 8014574:	f000 8085 	beq.w	8014682 <PORTx_IRQHandler+0x38e>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 8014578:	79fa      	ldrb	r2, [r7, #7]
 801457a:	4951      	ldr	r1, [pc, #324]	@ (80146c0 <PORTx_IRQHandler+0x3cc>)
 801457c:	4613      	mov	r3, r2
 801457e:	011b      	lsls	r3, r3, #4
 8014580:	1a9b      	subs	r3, r3, r2
 8014582:	009b      	lsls	r3, r3, #2
 8014584:	440b      	add	r3, r1
 8014586:	3338      	adds	r3, #56	@ 0x38
 8014588:	2200      	movs	r2, #0
 801458a:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 801458c:	68f8      	ldr	r0, [r7, #12]
 801458e:	f7ff fe0a 	bl	80141a6 <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8014592:	79fa      	ldrb	r2, [r7, #7]
 8014594:	494a      	ldr	r1, [pc, #296]	@ (80146c0 <PORTx_IRQHandler+0x3cc>)
 8014596:	4613      	mov	r3, r2
 8014598:	011b      	lsls	r3, r3, #4
 801459a:	1a9b      	subs	r3, r3, r2
 801459c:	009b      	lsls	r3, r3, #2
 801459e:	440b      	add	r3, r1
 80145a0:	3308      	adds	r3, #8
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	6819      	ldr	r1, [r3, #0]
 80145a6:	79fa      	ldrb	r2, [r7, #7]
 80145a8:	4845      	ldr	r0, [pc, #276]	@ (80146c0 <PORTx_IRQHandler+0x3cc>)
 80145aa:	4613      	mov	r3, r2
 80145ac:	011b      	lsls	r3, r3, #4
 80145ae:	1a9b      	subs	r3, r3, r2
 80145b0:	009b      	lsls	r3, r3, #2
 80145b2:	4403      	add	r3, r0
 80145b4:	3308      	adds	r3, #8
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	f021 0201 	bic.w	r2, r1, #1
 80145bc:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 80145be:	bf00      	nop
 80145c0:	79fa      	ldrb	r2, [r7, #7]
 80145c2:	493f      	ldr	r1, [pc, #252]	@ (80146c0 <PORTx_IRQHandler+0x3cc>)
 80145c4:	4613      	mov	r3, r2
 80145c6:	011b      	lsls	r3, r3, #4
 80145c8:	1a9b      	subs	r3, r3, r2
 80145ca:	009b      	lsls	r3, r3, #2
 80145cc:	440b      	add	r3, r1
 80145ce:	3308      	adds	r3, #8
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	f003 0301 	and.w	r3, r3, #1
 80145d8:	2b01      	cmp	r3, #1
 80145da:	d0f1      	beq.n	80145c0 <PORTx_IRQHandler+0x2cc>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 80145dc:	79fa      	ldrb	r2, [r7, #7]
 80145de:	4938      	ldr	r1, [pc, #224]	@ (80146c0 <PORTx_IRQHandler+0x3cc>)
 80145e0:	4613      	mov	r3, r2
 80145e2:	011b      	lsls	r3, r3, #4
 80145e4:	1a9b      	subs	r3, r3, r2
 80145e6:	009b      	lsls	r3, r3, #2
 80145e8:	440b      	add	r3, r1
 80145ea:	3330      	adds	r3, #48	@ 0x30
 80145ec:	6818      	ldr	r0, [r3, #0]
 80145ee:	79fa      	ldrb	r2, [r7, #7]
 80145f0:	4933      	ldr	r1, [pc, #204]	@ (80146c0 <PORTx_IRQHandler+0x3cc>)
 80145f2:	4613      	mov	r3, r2
 80145f4:	011b      	lsls	r3, r3, #4
 80145f6:	1a9b      	subs	r3, r3, r2
 80145f8:	009b      	lsls	r3, r3, #2
 80145fa:	440b      	add	r3, r1
 80145fc:	3308      	adds	r3, #8
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	4602      	mov	r2, r0
 8014602:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 8014604:	79fa      	ldrb	r2, [r7, #7]
 8014606:	492e      	ldr	r1, [pc, #184]	@ (80146c0 <PORTx_IRQHandler+0x3cc>)
 8014608:	4613      	mov	r3, r2
 801460a:	011b      	lsls	r3, r3, #4
 801460c:	1a9b      	subs	r3, r3, r2
 801460e:	009b      	lsls	r3, r3, #2
 8014610:	440b      	add	r3, r1
 8014612:	3308      	adds	r3, #8
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	f44f 7284 	mov.w	r2, #264	@ 0x108
 801461a:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 801461c:	79fa      	ldrb	r2, [r7, #7]
 801461e:	4928      	ldr	r1, [pc, #160]	@ (80146c0 <PORTx_IRQHandler+0x3cc>)
 8014620:	4613      	mov	r3, r2
 8014622:	011b      	lsls	r3, r3, #4
 8014624:	1a9b      	subs	r3, r3, r2
 8014626:	009b      	lsls	r3, r3, #2
 8014628:	440b      	add	r3, r1
 801462a:	3308      	adds	r3, #8
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	6819      	ldr	r1, [r3, #0]
 8014630:	79fa      	ldrb	r2, [r7, #7]
 8014632:	4823      	ldr	r0, [pc, #140]	@ (80146c0 <PORTx_IRQHandler+0x3cc>)
 8014634:	4613      	mov	r3, r2
 8014636:	011b      	lsls	r3, r3, #4
 8014638:	1a9b      	subs	r3, r3, r2
 801463a:	009b      	lsls	r3, r3, #2
 801463c:	4403      	add	r3, r0
 801463e:	3308      	adds	r3, #8
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	f041 0201 	orr.w	r2, r1, #1
 8014646:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag == 0u))
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801464e:	2b00      	cmp	r3, #0
 8014650:	d113      	bne.n	801467a <PORTx_IRQHandler+0x386>
 8014652:	4b1c      	ldr	r3, [pc, #112]	@ (80146c4 <PORTx_IRQHandler+0x3d0>)
 8014654:	781b      	ldrb	r3, [r3, #0]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d10f      	bne.n	801467a <PORTx_IRQHandler+0x386>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 801465a:	79fa      	ldrb	r2, [r7, #7]
 801465c:	4918      	ldr	r1, [pc, #96]	@ (80146c0 <PORTx_IRQHandler+0x3cc>)
 801465e:	4613      	mov	r3, r2
 8014660:	011b      	lsls	r3, r3, #4
 8014662:	1a9b      	subs	r3, r3, r2
 8014664:	009b      	lsls	r3, r3, #2
 8014666:	440b      	add	r3, r1
 8014668:	3320      	adds	r3, #32
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	68fa      	ldr	r2, [r7, #12]
 801466e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8014670:	f002 0107 	and.w	r1, r2, #7
 8014674:	79fa      	ldrb	r2, [r7, #7]
 8014676:	4610      	mov	r0, r2
 8014678:	4798      	blx	r3
      }
      ovrflag = 0;
 801467a:	4b12      	ldr	r3, [pc, #72]	@ (80146c4 <PORTx_IRQHandler+0x3d0>)
 801467c:	2200      	movs	r2, #0
 801467e:	701a      	strb	r2, [r3, #0]
      return;
 8014680:	e01a      	b.n	80146b8 <PORTx_IRQHandler+0x3c4>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 8014682:	68bb      	ldr	r3, [r7, #8]
 8014684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014688:	2b00      	cmp	r3, #0
 801468a:	d104      	bne.n	8014696 <PORTx_IRQHandler+0x3a2>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 801468c:	68bb      	ldr	r3, [r7, #8]
 801468e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014692:	2b00      	cmp	r3, #0
 8014694:	d010      	beq.n	80146b8 <PORTx_IRQHandler+0x3c4>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 8014696:	68f8      	ldr	r0, [r7, #12]
 8014698:	f7ff fd75 	bl	8014186 <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 801469c:	68f8      	ldr	r0, [r7, #12]
 801469e:	f7ff fd62 	bl	8014166 <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 80146a2:	79fa      	ldrb	r2, [r7, #7]
 80146a4:	4906      	ldr	r1, [pc, #24]	@ (80146c0 <PORTx_IRQHandler+0x3cc>)
 80146a6:	4613      	mov	r3, r2
 80146a8:	011b      	lsls	r3, r3, #4
 80146aa:	1a9b      	subs	r3, r3, r2
 80146ac:	009b      	lsls	r3, r3, #2
 80146ae:	440b      	add	r3, r1
 80146b0:	332c      	adds	r3, #44	@ 0x2c
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 80146b6:	bf00      	nop
        }
      }
    }
#endif /* _FRS */
  }
}
 80146b8:	3710      	adds	r7, #16
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}
 80146be:	bf00      	nop
 80146c0:	20000714 	.word	0x20000714
 80146c4:	20000708 	.word	0x20000708

080146c8 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 80146c8:	b480      	push	{r7}
 80146ca:	b085      	sub	sp, #20
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	60b9      	str	r1, [r7, #8]
 80146d0:	607a      	str	r2, [r7, #4]
 80146d2:	603b      	str	r3, [r7, #0]
 80146d4:	4603      	mov	r3, r0
 80146d6:	73fb      	strb	r3, [r7, #15]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 80146d8:	7bfa      	ldrb	r2, [r7, #15]
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	6919      	ldr	r1, [r3, #16]
 80146de:	482d      	ldr	r0, [pc, #180]	@ (8014794 <USBPD_PHY_Init+0xcc>)
 80146e0:	4613      	mov	r3, r2
 80146e2:	011b      	lsls	r3, r3, #4
 80146e4:	1a9b      	subs	r3, r3, r2
 80146e6:	009b      	lsls	r3, r3, #2
 80146e8:	4403      	add	r3, r0
 80146ea:	3314      	adds	r3, #20
 80146ec:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 80146ee:	7bfa      	ldrb	r2, [r7, #15]
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	68d9      	ldr	r1, [r3, #12]
 80146f4:	4827      	ldr	r0, [pc, #156]	@ (8014794 <USBPD_PHY_Init+0xcc>)
 80146f6:	4613      	mov	r3, r2
 80146f8:	011b      	lsls	r3, r3, #4
 80146fa:	1a9b      	subs	r3, r3, r2
 80146fc:	009b      	lsls	r3, r3, #2
 80146fe:	4403      	add	r3, r0
 8014700:	3318      	adds	r3, #24
 8014702:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 8014704:	7bfa      	ldrb	r2, [r7, #15]
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	6859      	ldr	r1, [r3, #4]
 801470a:	4822      	ldr	r0, [pc, #136]	@ (8014794 <USBPD_PHY_Init+0xcc>)
 801470c:	4613      	mov	r3, r2
 801470e:	011b      	lsls	r3, r3, #4
 8014710:	1a9b      	subs	r3, r3, r2
 8014712:	009b      	lsls	r3, r3, #2
 8014714:	4403      	add	r3, r0
 8014716:	331c      	adds	r3, #28
 8014718:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 801471a:	7bfa      	ldrb	r2, [r7, #15]
 801471c:	491d      	ldr	r1, [pc, #116]	@ (8014794 <USBPD_PHY_Init+0xcc>)
 801471e:	4613      	mov	r3, r2
 8014720:	011b      	lsls	r3, r3, #4
 8014722:	1a9b      	subs	r3, r3, r2
 8014724:	009b      	lsls	r3, r3, #2
 8014726:	440b      	add	r3, r1
 8014728:	3320      	adds	r3, #32
 801472a:	4a1b      	ldr	r2, [pc, #108]	@ (8014798 <USBPD_PHY_Init+0xd0>)
 801472c:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 801472e:	7bfa      	ldrb	r2, [r7, #15]
 8014730:	68bb      	ldr	r3, [r7, #8]
 8014732:	6899      	ldr	r1, [r3, #8]
 8014734:	4817      	ldr	r0, [pc, #92]	@ (8014794 <USBPD_PHY_Init+0xcc>)
 8014736:	4613      	mov	r3, r2
 8014738:	011b      	lsls	r3, r3, #4
 801473a:	1a9b      	subs	r3, r3, r2
 801473c:	009b      	lsls	r3, r3, #2
 801473e:	4403      	add	r3, r0
 8014740:	3324      	adds	r3, #36	@ 0x24
 8014742:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 8014744:	7bfa      	ldrb	r2, [r7, #15]
 8014746:	68bb      	ldr	r3, [r7, #8]
 8014748:	6959      	ldr	r1, [r3, #20]
 801474a:	4812      	ldr	r0, [pc, #72]	@ (8014794 <USBPD_PHY_Init+0xcc>)
 801474c:	4613      	mov	r3, r2
 801474e:	011b      	lsls	r3, r3, #4
 8014750:	1a9b      	subs	r3, r3, r2
 8014752:	009b      	lsls	r3, r3, #2
 8014754:	4403      	add	r3, r0
 8014756:	3328      	adds	r3, #40	@ 0x28
 8014758:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 801475a:	7bfa      	ldrb	r2, [r7, #15]
 801475c:	490d      	ldr	r1, [pc, #52]	@ (8014794 <USBPD_PHY_Init+0xcc>)
 801475e:	4613      	mov	r3, r2
 8014760:	011b      	lsls	r3, r3, #4
 8014762:	1a9b      	subs	r3, r3, r2
 8014764:	009b      	lsls	r3, r3, #2
 8014766:	440b      	add	r3, r1
 8014768:	3330      	adds	r3, #48	@ 0x30
 801476a:	687a      	ldr	r2, [r7, #4]
 801476c:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 801476e:	7bfb      	ldrb	r3, [r7, #15]
 8014770:	4a0a      	ldr	r2, [pc, #40]	@ (801479c <USBPD_PHY_Init+0xd4>)
 8014772:	00db      	lsls	r3, r3, #3
 8014774:	4413      	add	r3, r2
 8014776:	69ba      	ldr	r2, [r7, #24]
 8014778:	605a      	str	r2, [r3, #4]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 801477a:	7bfb      	ldrb	r3, [r7, #15]
 801477c:	68ba      	ldr	r2, [r7, #8]
 801477e:	6812      	ldr	r2, [r2, #0]
 8014780:	4906      	ldr	r1, [pc, #24]	@ (801479c <USBPD_PHY_Init+0xd4>)
 8014782:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

  return USBPD_OK;
 8014786:	2300      	movs	r3, #0
}
 8014788:	4618      	mov	r0, r3
 801478a:	3714      	adds	r7, #20
 801478c:	46bd      	mov	sp, r7
 801478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014792:	4770      	bx	lr
 8014794:	20000714 	.word	0x20000714
 8014798:	08014949 	.word	0x08014949
 801479c:	2000070c 	.word	0x2000070c

080147a0 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 80147a0:	b480      	push	{r7}
 80147a2:	b083      	sub	sp, #12
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	4603      	mov	r3, r0
 80147a8:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  return 905u;
 80147aa:	f240 3389 	movw	r3, #905	@ 0x389
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	370c      	adds	r7, #12
 80147b2:	46bd      	mov	sp, r7
 80147b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b8:	4770      	bx	lr

080147ba <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 80147ba:	b480      	push	{r7}
 80147bc:	b083      	sub	sp, #12
 80147be:	af00      	add	r7, sp, #0
 80147c0:	4603      	mov	r3, r0
 80147c2:	71fb      	strb	r3, [r7, #7]
  return 30u;
 80147c4:	231e      	movs	r3, #30
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	370c      	adds	r7, #12
 80147ca:	46bd      	mov	sp, r7
 80147cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d0:	4770      	bx	lr

080147d2 <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 80147d2:	b480      	push	{r7}
 80147d4:	b083      	sub	sp, #12
 80147d6:	af00      	add	r7, sp, #0
 80147d8:	4603      	mov	r3, r0
 80147da:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 80147dc:	bf00      	nop
 80147de:	370c      	adds	r7, #12
 80147e0:	46bd      	mov	sp, r7
 80147e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e6:	4770      	bx	lr

080147e8 <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b082      	sub	sp, #8
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	4603      	mov	r3, r0
 80147f0:	460a      	mov	r2, r1
 80147f2:	71fb      	strb	r3, [r7, #7]
 80147f4:	4613      	mov	r3, r2
 80147f6:	71bb      	strb	r3, [r7, #6]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 80147f8:	79b9      	ldrb	r1, [r7, #6]
 80147fa:	79f8      	ldrb	r0, [r7, #7]
 80147fc:	2300      	movs	r3, #0
 80147fe:	2200      	movs	r2, #0
 8014800:	f000 f805 	bl	801480e <USBPD_PHY_SendMessage>
 8014804:	4603      	mov	r3, r0
}
 8014806:	4618      	mov	r0, r3
 8014808:	3708      	adds	r7, #8
 801480a:	46bd      	mov	sp, r7
 801480c:	bd80      	pop	{r7, pc}

0801480e <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 801480e:	b580      	push	{r7, lr}
 8014810:	b082      	sub	sp, #8
 8014812:	af00      	add	r7, sp, #0
 8014814:	603a      	str	r2, [r7, #0]
 8014816:	461a      	mov	r2, r3
 8014818:	4603      	mov	r3, r0
 801481a:	71fb      	strb	r3, [r7, #7]
 801481c:	460b      	mov	r3, r1
 801481e:	71bb      	strb	r3, [r7, #6]
 8014820:	4613      	mov	r3, r2
 8014822:	80bb      	strh	r3, [r7, #4]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 8014824:	88bb      	ldrh	r3, [r7, #4]
 8014826:	79b9      	ldrb	r1, [r7, #6]
 8014828:	79f8      	ldrb	r0, [r7, #7]
 801482a:	683a      	ldr	r2, [r7, #0]
 801482c:	f000 fb0a 	bl	8014e44 <USBPD_HW_IF_SendBuffer>
 8014830:	4603      	mov	r3, r0
}
 8014832:	4618      	mov	r0, r3
 8014834:	3708      	adds	r7, #8
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}

0801483a <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 801483a:	b580      	push	{r7, lr}
 801483c:	b082      	sub	sp, #8
 801483e:	af00      	add	r7, sp, #0
 8014840:	4603      	mov	r3, r0
 8014842:	71fb      	strb	r3, [r7, #7]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 8014844:	79fb      	ldrb	r3, [r7, #7]
 8014846:	4618      	mov	r0, r3
 8014848:	f000 fc42 	bl	80150d0 <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 801484c:	2300      	movs	r3, #0
}
 801484e:	4618      	mov	r0, r3
 8014850:	3708      	adds	r7, #8
 8014852:	46bd      	mov	sp, r7
 8014854:	bd80      	pop	{r7, pc}

08014856 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 8014856:	b580      	push	{r7, lr}
 8014858:	b082      	sub	sp, #8
 801485a:	af00      	add	r7, sp, #0
 801485c:	4603      	mov	r3, r0
 801485e:	460a      	mov	r2, r1
 8014860:	71fb      	strb	r3, [r7, #7]
 8014862:	4613      	mov	r3, r2
 8014864:	71bb      	strb	r3, [r7, #6]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 8014866:	79bb      	ldrb	r3, [r7, #6]
 8014868:	2b07      	cmp	r3, #7
 801486a:	d103      	bne.n	8014874 <USBPD_PHY_ExitTransmit+0x1e>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 801486c:	79fb      	ldrb	r3, [r7, #7]
 801486e:	4618      	mov	r0, r3
 8014870:	f000 fab0 	bl	8014dd4 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 8014874:	2300      	movs	r3, #0
}
 8014876:	4618      	mov	r0, r3
 8014878:	3708      	adds	r7, #8
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}

0801487e <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 801487e:	b580      	push	{r7, lr}
 8014880:	b082      	sub	sp, #8
 8014882:	af00      	add	r7, sp, #0
 8014884:	4603      	mov	r3, r0
 8014886:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 8014888:	79fb      	ldrb	r3, [r7, #7]
 801488a:	4618      	mov	r0, r3
 801488c:	f000 ffbc 	bl	8015808 <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 8014890:	bf00      	nop
 8014892:	3708      	adds	r7, #8
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}

08014898 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b082      	sub	sp, #8
 801489c:	af00      	add	r7, sp, #0
 801489e:	4603      	mov	r3, r0
 80148a0:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 80148a2:	79fb      	ldrb	r3, [r7, #7]
 80148a4:	4618      	mov	r0, r3
 80148a6:	f000 ffc7 	bl	8015838 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 80148aa:	bf00      	nop
 80148ac:	3708      	adds	r7, #8
 80148ae:	46bd      	mov	sp, r7
 80148b0:	bd80      	pop	{r7, pc}
	...

080148b4 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 80148b4:	b480      	push	{r7}
 80148b6:	b083      	sub	sp, #12
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	4603      	mov	r3, r0
 80148bc:	6039      	str	r1, [r7, #0]
 80148be:	71fb      	strb	r3, [r7, #7]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 80148c0:	79fb      	ldrb	r3, [r7, #7]
 80148c2:	4a05      	ldr	r2, [pc, #20]	@ (80148d8 <USBPD_PHY_SOPSupported+0x24>)
 80148c4:	00db      	lsls	r3, r3, #3
 80148c6:	4413      	add	r3, r2
 80148c8:	683a      	ldr	r2, [r7, #0]
 80148ca:	605a      	str	r2, [r3, #4]
}
 80148cc:	bf00      	nop
 80148ce:	370c      	adds	r7, #12
 80148d0:	46bd      	mov	sp, r7
 80148d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d6:	4770      	bx	lr
 80148d8:	2000070c 	.word	0x2000070c

080148dc <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	4603      	mov	r3, r0
 80148e4:	71fb      	strb	r3, [r7, #7]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 80148e6:	79fb      	ldrb	r3, [r7, #7]
 80148e8:	4618      	mov	r0, r3
 80148ea:	f000 ffbd 	bl	8015868 <USBPD_HW_IF_IsResistor_SinkTxOk>
 80148ee:	4603      	mov	r3, r0
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3708      	adds	r7, #8
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}

080148f8 <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b082      	sub	sp, #8
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	4603      	mov	r3, r0
 8014900:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 8014902:	79fb      	ldrb	r3, [r7, #7]
 8014904:	4618      	mov	r0, r3
 8014906:	f000 ffef 	bl	80158e8 <USBPD_HW_IF_FastRoleSwapSignalling>
}
 801490a:	bf00      	nop
 801490c:	3708      	adds	r7, #8
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}

08014912 <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 8014912:	b580      	push	{r7, lr}
 8014914:	b082      	sub	sp, #8
 8014916:	af00      	add	r7, sp, #0
 8014918:	4603      	mov	r3, r0
 801491a:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_EnableRX(PortNum);
 801491c:	79fb      	ldrb	r3, [r7, #7]
 801491e:	4618      	mov	r0, r3
 8014920:	f000 fd74 	bl	801540c <USBPD_HW_IF_EnableRX>
}
 8014924:	bf00      	nop
 8014926:	3708      	adds	r7, #8
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}

0801492c <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b082      	sub	sp, #8
 8014930:	af00      	add	r7, sp, #0
 8014932:	4603      	mov	r3, r0
 8014934:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_DisableRX(PortNum);
 8014936:	79fb      	ldrb	r3, [r7, #7]
 8014938:	4618      	mov	r0, r3
 801493a:	f000 fd7d 	bl	8015438 <USBPD_HW_IF_DisableRX>
}
 801493e:	bf00      	nop
 8014940:	3708      	adds	r7, #8
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}
	...

08014948 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b084      	sub	sp, #16
 801494c:	af00      	add	r7, sp, #0
 801494e:	4603      	mov	r3, r0
 8014950:	6039      	str	r1, [r7, #0]
 8014952:	71fb      	strb	r3, [r7, #7]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 8014954:	4a28      	ldr	r2, [pc, #160]	@ (80149f8 <PHY_Rx_Completed+0xb0>)
 8014956:	f107 0308 	add.w	r3, r7, #8
 801495a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801495e:	6018      	str	r0, [r3, #0]
 8014960:	3304      	adds	r3, #4
 8014962:	8019      	strh	r1, [r3, #0]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 8014964:	f107 0208 	add.w	r2, r7, #8
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	4413      	add	r3, r2
 801496c:	781b      	ldrb	r3, [r3, #0]
 801496e:	73fb      	strb	r3, [r7, #15]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 8014970:	7bfb      	ldrb	r3, [r7, #15]
 8014972:	2b04      	cmp	r3, #4
 8014974:	dc02      	bgt.n	801497c <PHY_Rx_Completed+0x34>
 8014976:	2b00      	cmp	r3, #0
 8014978:	da19      	bge.n	80149ae <PHY_Rx_Completed+0x66>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 801497a:	e034      	b.n	80149e6 <PHY_Rx_Completed+0x9e>
  switch (_msgtype)
 801497c:	2b06      	cmp	r3, #6
 801497e:	d132      	bne.n	80149e6 <PHY_Rx_Completed+0x9e>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 8014980:	79fb      	ldrb	r3, [r7, #7]
 8014982:	4a1e      	ldr	r2, [pc, #120]	@ (80149fc <PHY_Rx_Completed+0xb4>)
 8014984:	00db      	lsls	r3, r3, #3
 8014986:	4413      	add	r3, r2
 8014988:	685b      	ldr	r3, [r3, #4]
 801498a:	f003 031e 	and.w	r3, r3, #30
 801498e:	2b1e      	cmp	r3, #30
 8014990:	d12b      	bne.n	80149ea <PHY_Rx_Completed+0xa2>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8014992:	79fa      	ldrb	r2, [r7, #7]
 8014994:	491a      	ldr	r1, [pc, #104]	@ (8014a00 <PHY_Rx_Completed+0xb8>)
 8014996:	4613      	mov	r3, r2
 8014998:	011b      	lsls	r3, r3, #4
 801499a:	1a9b      	subs	r3, r3, r2
 801499c:	009b      	lsls	r3, r3, #2
 801499e:	440b      	add	r3, r1
 80149a0:	331c      	adds	r3, #28
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	79fa      	ldrb	r2, [r7, #7]
 80149a6:	2106      	movs	r1, #6
 80149a8:	4610      	mov	r0, r2
 80149aa:	4798      	blx	r3
      break;
 80149ac:	e01d      	b.n	80149ea <PHY_Rx_Completed+0xa2>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 80149ae:	7bfb      	ldrb	r3, [r7, #15]
 80149b0:	2201      	movs	r2, #1
 80149b2:	fa02 f303 	lsl.w	r3, r2, r3
 80149b6:	b2db      	uxtb	r3, r3
 80149b8:	4618      	mov	r0, r3
 80149ba:	79fb      	ldrb	r3, [r7, #7]
 80149bc:	4a0f      	ldr	r2, [pc, #60]	@ (80149fc <PHY_Rx_Completed+0xb4>)
 80149be:	00db      	lsls	r3, r3, #3
 80149c0:	4413      	add	r3, r2
 80149c2:	685b      	ldr	r3, [r3, #4]
 80149c4:	7bfa      	ldrb	r2, [r7, #15]
 80149c6:	2101      	movs	r1, #1
 80149c8:	fa01 f202 	lsl.w	r2, r1, r2
 80149cc:	b2d2      	uxtb	r2, r2
 80149ce:	4013      	ands	r3, r2
 80149d0:	4298      	cmp	r0, r3
 80149d2:	d10c      	bne.n	80149ee <PHY_Rx_Completed+0xa6>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 80149d4:	79fb      	ldrb	r3, [r7, #7]
 80149d6:	4a09      	ldr	r2, [pc, #36]	@ (80149fc <PHY_Rx_Completed+0xb4>)
 80149d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80149dc:	7bf9      	ldrb	r1, [r7, #15]
 80149de:	79fa      	ldrb	r2, [r7, #7]
 80149e0:	4610      	mov	r0, r2
 80149e2:	4798      	blx	r3
      break;
 80149e4:	e003      	b.n	80149ee <PHY_Rx_Completed+0xa6>
      break;
 80149e6:	bf00      	nop
 80149e8:	e002      	b.n	80149f0 <PHY_Rx_Completed+0xa8>
      break;
 80149ea:	bf00      	nop
 80149ec:	e000      	b.n	80149f0 <PHY_Rx_Completed+0xa8>
      break;
 80149ee:	bf00      	nop
  }
}
 80149f0:	bf00      	nop
 80149f2:	3710      	adds	r7, #16
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}
 80149f8:	0801a9d0 	.word	0x0801a9d0
 80149fc:	2000070c 	.word	0x2000070c
 8014a00:	20000714 	.word	0x20000714

08014a04 <LL_AHB1_GRP1_EnableClock>:
{
 8014a04:	b480      	push	{r7}
 8014a06:	b085      	sub	sp, #20
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8014a0c:	4b08      	ldr	r3, [pc, #32]	@ (8014a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8014a0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014a10:	4907      	ldr	r1, [pc, #28]	@ (8014a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	4313      	orrs	r3, r2
 8014a16:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8014a18:	4b05      	ldr	r3, [pc, #20]	@ (8014a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8014a1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	4013      	ands	r3, r2
 8014a20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014a22:	68fb      	ldr	r3, [r7, #12]
}
 8014a24:	bf00      	nop
 8014a26:	3714      	adds	r7, #20
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2e:	4770      	bx	lr
 8014a30:	40021000 	.word	0x40021000

08014a34 <LL_APB1_GRP1_EnableClock>:
{
 8014a34:	b480      	push	{r7}
 8014a36:	b085      	sub	sp, #20
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8014a3c:	4b08      	ldr	r3, [pc, #32]	@ (8014a60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8014a3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014a40:	4907      	ldr	r1, [pc, #28]	@ (8014a60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	4313      	orrs	r3, r2
 8014a46:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8014a48:	4b05      	ldr	r3, [pc, #20]	@ (8014a60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8014a4a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	4013      	ands	r3, r2
 8014a50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014a52:	68fb      	ldr	r3, [r7, #12]
}
 8014a54:	bf00      	nop
 8014a56:	3714      	adds	r7, #20
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5e:	4770      	bx	lr
 8014a60:	40021000 	.word	0x40021000

08014a64 <LL_UCPD_Enable>:
{
 8014a64:	b480      	push	{r7}
 8014a66:	b083      	sub	sp, #12
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	601a      	str	r2, [r3, #0]
}
 8014a78:	bf00      	nop
 8014a7a:	370c      	adds	r7, #12
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a82:	4770      	bx	lr

08014a84 <LL_UCPD_Disable>:
{
 8014a84:	b480      	push	{r7}
 8014a86:	b083      	sub	sp, #12
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	601a      	str	r2, [r3, #0]
}
 8014a98:	bf00      	nop
 8014a9a:	370c      	adds	r7, #12
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa2:	4770      	bx	lr

08014aa4 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b083      	sub	sp, #12
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	68db      	ldr	r3, [r3, #12]
 8014ab0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	60da      	str	r2, [r3, #12]
}
 8014ab8:	bf00      	nop
 8014aba:	370c      	adds	r7, #12
 8014abc:	46bd      	mov	sp, r7
 8014abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac2:	4770      	bx	lr

08014ac4 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 8014ac4:	b480      	push	{r7}
 8014ac6:	b083      	sub	sp, #12
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	68db      	ldr	r3, [r3, #12]
 8014ad0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	60da      	str	r2, [r3, #12]
}
 8014ad8:	bf00      	nop
 8014ada:	370c      	adds	r7, #12
 8014adc:	46bd      	mov	sp, r7
 8014ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae2:	4770      	bx	lr

08014ae4 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 8014ae4:	b480      	push	{r7}
 8014ae6:	b083      	sub	sp, #12
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	68db      	ldr	r3, [r3, #12]
 8014af0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	60da      	str	r2, [r3, #12]
}
 8014af8:	bf00      	nop
 8014afa:	370c      	adds	r7, #12
 8014afc:	46bd      	mov	sp, r7
 8014afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b02:	4770      	bx	lr

08014b04 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 8014b04:	b480      	push	{r7}
 8014b06:	b083      	sub	sp, #12
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	68db      	ldr	r3, [r3, #12]
 8014b10:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	60da      	str	r2, [r3, #12]
}
 8014b18:	bf00      	nop
 8014b1a:	370c      	adds	r7, #12
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b22:	4770      	bx	lr

08014b24 <LL_UCPD_SignalFRSTX>:
{
 8014b24:	b480      	push	{r7}
 8014b26:	b083      	sub	sp, #12
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	68db      	ldr	r3, [r3, #12]
 8014b30:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	60da      	str	r2, [r3, #12]
}
 8014b38:	bf00      	nop
 8014b3a:	370c      	adds	r7, #12
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b42:	4770      	bx	lr

08014b44 <LL_UCPD_FRSDetectionEnable>:
{
 8014b44:	b480      	push	{r7}
 8014b46:	b083      	sub	sp, #12
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	68db      	ldr	r3, [r3, #12]
 8014b50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	60da      	str	r2, [r3, #12]
}
 8014b58:	bf00      	nop
 8014b5a:	370c      	adds	r7, #12
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b62:	4770      	bx	lr

08014b64 <LL_UCPD_FRSDetectionDisable>:
{
 8014b64:	b480      	push	{r7}
 8014b66:	b083      	sub	sp, #12
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	68db      	ldr	r3, [r3, #12]
 8014b70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	60da      	str	r2, [r3, #12]
}
 8014b78:	bf00      	nop
 8014b7a:	370c      	adds	r7, #12
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b82:	4770      	bx	lr

08014b84 <LL_UCPD_SetccEnable>:
{
 8014b84:	b480      	push	{r7}
 8014b86:	b083      	sub	sp, #12
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
 8014b8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	68db      	ldr	r3, [r3, #12]
 8014b92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	431a      	orrs	r2, r3
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	60da      	str	r2, [r3, #12]
}
 8014b9e:	bf00      	nop
 8014ba0:	370c      	adds	r7, #12
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba8:	4770      	bx	lr

08014baa <LL_UCPD_SetSNKRole>:
{
 8014baa:	b480      	push	{r7}
 8014bac:	b083      	sub	sp, #12
 8014bae:	af00      	add	r7, sp, #0
 8014bb0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	68db      	ldr	r3, [r3, #12]
 8014bb6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	60da      	str	r2, [r3, #12]
}
 8014bbe:	bf00      	nop
 8014bc0:	370c      	adds	r7, #12
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc8:	4770      	bx	lr

08014bca <LL_UCPD_SetSRCRole>:
{
 8014bca:	b480      	push	{r7}
 8014bcc:	b083      	sub	sp, #12
 8014bce:	af00      	add	r7, sp, #0
 8014bd0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	68db      	ldr	r3, [r3, #12]
 8014bd6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	60da      	str	r2, [r3, #12]
}
 8014bde:	bf00      	nop
 8014be0:	370c      	adds	r7, #12
 8014be2:	46bd      	mov	sp, r7
 8014be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be8:	4770      	bx	lr

08014bea <LL_UCPD_SetRpResistor>:
{
 8014bea:	b480      	push	{r7}
 8014bec:	b083      	sub	sp, #12
 8014bee:	af00      	add	r7, sp, #0
 8014bf0:	6078      	str	r0, [r7, #4]
 8014bf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	68db      	ldr	r3, [r3, #12]
 8014bf8:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
 8014bfc:	683b      	ldr	r3, [r7, #0]
 8014bfe:	431a      	orrs	r2, r3
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	60da      	str	r2, [r3, #12]
}
 8014c04:	bf00      	nop
 8014c06:	370c      	adds	r7, #12
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0e:	4770      	bx	lr

08014c10 <LL_UCPD_SetCCPin>:
{
 8014c10:	b480      	push	{r7}
 8014c12:	b083      	sub	sp, #12
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
 8014c18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	68db      	ldr	r3, [r3, #12]
 8014c1e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8014c22:	683b      	ldr	r3, [r7, #0]
 8014c24:	431a      	orrs	r2, r3
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	60da      	str	r2, [r3, #12]
}
 8014c2a:	bf00      	nop
 8014c2c:	370c      	adds	r7, #12
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c34:	4770      	bx	lr

08014c36 <LL_UCPD_RxEnable>:
{
 8014c36:	b480      	push	{r7}
 8014c38:	b083      	sub	sp, #12
 8014c3a:	af00      	add	r7, sp, #0
 8014c3c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	68db      	ldr	r3, [r3, #12]
 8014c42:	f043 0220 	orr.w	r2, r3, #32
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	60da      	str	r2, [r3, #12]
}
 8014c4a:	bf00      	nop
 8014c4c:	370c      	adds	r7, #12
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c54:	4770      	bx	lr

08014c56 <LL_UCPD_RxDisable>:
{
 8014c56:	b480      	push	{r7}
 8014c58:	b083      	sub	sp, #12
 8014c5a:	af00      	add	r7, sp, #0
 8014c5c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	68db      	ldr	r3, [r3, #12]
 8014c62:	f023 0220 	bic.w	r2, r3, #32
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	60da      	str	r2, [r3, #12]
}
 8014c6a:	bf00      	nop
 8014c6c:	370c      	adds	r7, #12
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c74:	4770      	bx	lr

08014c76 <LL_UCPD_SetRxMode>:
{
 8014c76:	b480      	push	{r7}
 8014c78:	b083      	sub	sp, #12
 8014c7a:	af00      	add	r7, sp, #0
 8014c7c:	6078      	str	r0, [r7, #4]
 8014c7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	68db      	ldr	r3, [r3, #12]
 8014c84:	f023 0210 	bic.w	r2, r3, #16
 8014c88:	683b      	ldr	r3, [r7, #0]
 8014c8a:	431a      	orrs	r2, r3
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	60da      	str	r2, [r3, #12]
}
 8014c90:	bf00      	nop
 8014c92:	370c      	adds	r7, #12
 8014c94:	46bd      	mov	sp, r7
 8014c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9a:	4770      	bx	lr

08014c9c <LL_UCPD_SendHardReset>:
{
 8014c9c:	b480      	push	{r7}
 8014c9e:	b083      	sub	sp, #12
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	68db      	ldr	r3, [r3, #12]
 8014ca8:	f043 0208 	orr.w	r2, r3, #8
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	60da      	str	r2, [r3, #12]
}
 8014cb0:	bf00      	nop
 8014cb2:	370c      	adds	r7, #12
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cba:	4770      	bx	lr

08014cbc <LL_UCPD_SendMessage>:
{
 8014cbc:	b480      	push	{r7}
 8014cbe:	b083      	sub	sp, #12
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	68db      	ldr	r3, [r3, #12]
 8014cc8:	f043 0204 	orr.w	r2, r3, #4
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	60da      	str	r2, [r3, #12]
}
 8014cd0:	bf00      	nop
 8014cd2:	370c      	adds	r7, #12
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cda:	4770      	bx	lr

08014cdc <LL_UCPD_SetTxMode>:
{
 8014cdc:	b480      	push	{r7}
 8014cde:	b083      	sub	sp, #12
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	6078      	str	r0, [r7, #4]
 8014ce4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	68db      	ldr	r3, [r3, #12]
 8014cea:	f023 0203 	bic.w	r2, r3, #3
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	431a      	orrs	r2, r3
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	60da      	str	r2, [r3, #12]
}
 8014cf6:	bf00      	nop
 8014cf8:	370c      	adds	r7, #12
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d00:	4770      	bx	lr

08014d02 <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8014d02:	b480      	push	{r7}
 8014d04:	b083      	sub	sp, #12
 8014d06:	af00      	add	r7, sp, #0
 8014d08:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	601a      	str	r2, [r3, #0]
}
 8014d16:	bf00      	nop
 8014d18:	370c      	adds	r7, #12
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d20:	4770      	bx	lr

08014d22 <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 8014d22:	b480      	push	{r7}
 8014d24:	b083      	sub	sp, #12
 8014d26:	af00      	add	r7, sp, #0
 8014d28:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	601a      	str	r2, [r3, #0]
}
 8014d36:	bf00      	nop
 8014d38:	370c      	adds	r7, #12
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d40:	4770      	bx	lr

08014d42 <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8014d42:	b480      	push	{r7}
 8014d44:	b083      	sub	sp, #12
 8014d46:	af00      	add	r7, sp, #0
 8014d48:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	601a      	str	r2, [r3, #0]
}
 8014d56:	bf00      	nop
 8014d58:	370c      	adds	r7, #12
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d60:	4770      	bx	lr

08014d62 <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 8014d62:	b480      	push	{r7}
 8014d64:	b083      	sub	sp, #12
 8014d66:	af00      	add	r7, sp, #0
 8014d68:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	601a      	str	r2, [r3, #0]
}
 8014d76:	bf00      	nop
 8014d78:	370c      	adds	r7, #12
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d80:	4770      	bx	lr

08014d82 <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 8014d82:	b480      	push	{r7}
 8014d84:	b083      	sub	sp, #12
 8014d86:	af00      	add	r7, sp, #0
 8014d88:	6078      	str	r0, [r7, #4]
 8014d8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	683a      	ldr	r2, [r7, #0]
 8014d90:	61da      	str	r2, [r3, #28]
}
 8014d92:	bf00      	nop
 8014d94:	370c      	adds	r7, #12
 8014d96:	46bd      	mov	sp, r7
 8014d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9c:	4770      	bx	lr

08014d9e <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 8014d9e:	b480      	push	{r7}
 8014da0:	b083      	sub	sp, #12
 8014da2:	af00      	add	r7, sp, #0
 8014da4:	6078      	str	r0, [r7, #4]
 8014da6:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	683a      	ldr	r2, [r7, #0]
 8014dac:	621a      	str	r2, [r3, #32]
}
 8014dae:	bf00      	nop
 8014db0:	370c      	adds	r7, #12
 8014db2:	46bd      	mov	sp, r7
 8014db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db8:	4770      	bx	lr

08014dba <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 8014dba:	b580      	push	{r7, lr}
 8014dbc:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8014dbe:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8014dc2:	f7ff fe37 	bl	8014a34 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8014dc6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8014dca:	f7ff fe1b 	bl	8014a04 <LL_AHB1_GRP1_EnableClock>
}
 8014dce:	bf00      	nop
 8014dd0:	bd80      	pop	{r7, pc}
	...

08014dd4 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b084      	sub	sp, #16
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	4603      	mov	r3, r0
 8014ddc:	71fb      	strb	r3, [r7, #7]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 8014dde:	79fa      	ldrb	r2, [r7, #7]
 8014de0:	4917      	ldr	r1, [pc, #92]	@ (8014e40 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8014de2:	4613      	mov	r3, r2
 8014de4:	011b      	lsls	r3, r3, #4
 8014de6:	1a9b      	subs	r3, r3, r2
 8014de8:	009b      	lsls	r3, r3, #2
 8014dea:	440b      	add	r3, r1
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	68db      	ldr	r3, [r3, #12]
 8014df0:	f023 0307 	bic.w	r3, r3, #7
 8014df4:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 8014df6:	79fa      	ldrb	r2, [r7, #7]
 8014df8:	4911      	ldr	r1, [pc, #68]	@ (8014e40 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8014dfa:	4613      	mov	r3, r2
 8014dfc:	011b      	lsls	r3, r3, #4
 8014dfe:	1a9b      	subs	r3, r3, r2
 8014e00:	009b      	lsls	r3, r3, #2
 8014e02:	440b      	add	r3, r1
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	4618      	mov	r0, r3
 8014e08:	f7ff fe3c 	bl	8014a84 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8014e0c:	79fa      	ldrb	r2, [r7, #7]
 8014e0e:	490c      	ldr	r1, [pc, #48]	@ (8014e40 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8014e10:	4613      	mov	r3, r2
 8014e12:	011b      	lsls	r3, r3, #4
 8014e14:	1a9b      	subs	r3, r3, r2
 8014e16:	009b      	lsls	r3, r3, #2
 8014e18:	440b      	add	r3, r1
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f7ff fe21 	bl	8014a64 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 8014e22:	79fa      	ldrb	r2, [r7, #7]
 8014e24:	4906      	ldr	r1, [pc, #24]	@ (8014e40 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8014e26:	4613      	mov	r3, r2
 8014e28:	011b      	lsls	r3, r3, #4
 8014e2a:	1a9b      	subs	r3, r3, r2
 8014e2c:	009b      	lsls	r3, r3, #2
 8014e2e:	440b      	add	r3, r1
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	68fa      	ldr	r2, [r7, #12]
 8014e34:	60da      	str	r2, [r3, #12]
}
 8014e36:	bf00      	nop
 8014e38:	3710      	adds	r7, #16
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd80      	pop	{r7, pc}
 8014e3e:	bf00      	nop
 8014e40:	20000714 	.word	0x20000714

08014e44 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b08a      	sub	sp, #40	@ 0x28
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	60ba      	str	r2, [r7, #8]
 8014e4c:	607b      	str	r3, [r7, #4]
 8014e4e:	4603      	mov	r3, r0
 8014e50:	73fb      	strb	r3, [r7, #15]
 8014e52:	460b      	mov	r3, r1
 8014e54:	73bb      	strb	r3, [r7, #14]
  USBPD_StatusTypeDef _status = USBPD_OK;
 8014e56:	2300      	movs	r3, #0
 8014e58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 8014e5c:	7bbb      	ldrb	r3, [r7, #14]
 8014e5e:	2b05      	cmp	r3, #5
 8014e60:	d10b      	bne.n	8014e7a <USBPD_HW_IF_SendBuffer+0x36>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 8014e62:	7bfa      	ldrb	r2, [r7, #15]
 8014e64:	4996      	ldr	r1, [pc, #600]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8014e66:	4613      	mov	r3, r2
 8014e68:	011b      	lsls	r3, r3, #4
 8014e6a:	1a9b      	subs	r3, r3, r2
 8014e6c:	009b      	lsls	r3, r3, #2
 8014e6e:	440b      	add	r3, r1
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	4618      	mov	r0, r3
 8014e74:	f7ff ff12 	bl	8014c9c <LL_UCPD_SendHardReset>
 8014e78:	e11b      	b.n	80150b2 <USBPD_HW_IF_SendBuffer+0x26e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8014e7e:	61fb      	str	r3, [r7, #28]
  return(result);
 8014e80:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 8014e82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8014e84:	b672      	cpsid	i
}
 8014e86:	bf00      	nop

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 8014e88:	7bfa      	ldrb	r2, [r7, #15]
 8014e8a:	498d      	ldr	r1, [pc, #564]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8014e8c:	4613      	mov	r3, r2
 8014e8e:	011b      	lsls	r3, r3, #4
 8014e90:	1a9b      	subs	r3, r3, r2
 8014e92:	009b      	lsls	r3, r3, #2
 8014e94:	440b      	add	r3, r1
 8014e96:	3338      	adds	r3, #56	@ 0x38
 8014e98:	781b      	ldrb	r3, [r3, #0]
 8014e9a:	b2db      	uxtb	r3, r3
 8014e9c:	2b01      	cmp	r3, #1
 8014e9e:	d00d      	beq.n	8014ebc <USBPD_HW_IF_SendBuffer+0x78>
 8014ea0:	7bfa      	ldrb	r2, [r7, #15]
 8014ea2:	4987      	ldr	r1, [pc, #540]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8014ea4:	4613      	mov	r3, r2
 8014ea6:	011b      	lsls	r3, r3, #4
 8014ea8:	1a9b      	subs	r3, r3, r2
 8014eaa:	009b      	lsls	r3, r3, #2
 8014eac:	440b      	add	r3, r1
 8014eae:	3304      	adds	r3, #4
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	f003 0301 	and.w	r3, r3, #1
 8014eb8:	2b01      	cmp	r3, #1
 8014eba:	d109      	bne.n	8014ed0 <USBPD_HW_IF_SendBuffer+0x8c>
 8014ebc:	6a3b      	ldr	r3, [r7, #32]
 8014ebe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ec0:	69bb      	ldr	r3, [r7, #24]
 8014ec2:	f383 8810 	msr	PRIMASK, r3
}
 8014ec6:	bf00      	nop
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 8014ec8:	2302      	movs	r3, #2
 8014eca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014ece:	e0f0      	b.n	80150b2 <USBPD_HW_IF_SendBuffer+0x26e>
 8014ed0:	6a3b      	ldr	r3, [r7, #32]
 8014ed2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ed4:	697b      	ldr	r3, [r7, #20]
 8014ed6:	f383 8810 	msr	PRIMASK, r3
}
 8014eda:	bf00      	nop
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 8014edc:	7bbb      	ldrb	r3, [r7, #14]
 8014ede:	2b07      	cmp	r3, #7
 8014ee0:	d877      	bhi.n	8014fd2 <USBPD_HW_IF_SendBuffer+0x18e>
 8014ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8014ee8 <USBPD_HW_IF_SendBuffer+0xa4>)
 8014ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ee8:	08014f09 	.word	0x08014f09
 8014eec:	08014f3b 	.word	0x08014f3b
 8014ef0:	08014f6d 	.word	0x08014f6d
 8014ef4:	08014fd3 	.word	0x08014fd3
 8014ef8:	08014fd3 	.word	0x08014fd3
 8014efc:	08014fd3 	.word	0x08014fd3
 8014f00:	08014f9f 	.word	0x08014f9f
 8014f04:	08014fb9 	.word	0x08014fb9
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 8014f08:	7bfa      	ldrb	r2, [r7, #15]
 8014f0a:	496d      	ldr	r1, [pc, #436]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8014f0c:	4613      	mov	r3, r2
 8014f0e:	011b      	lsls	r3, r3, #4
 8014f10:	1a9b      	subs	r3, r3, r2
 8014f12:	009b      	lsls	r3, r3, #2
 8014f14:	440b      	add	r3, r1
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	496a      	ldr	r1, [pc, #424]	@ (80150c4 <USBPD_HW_IF_SendBuffer+0x280>)
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f7ff ff31 	bl	8014d82 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8014f20:	7bfa      	ldrb	r2, [r7, #15]
 8014f22:	4967      	ldr	r1, [pc, #412]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8014f24:	4613      	mov	r3, r2
 8014f26:	011b      	lsls	r3, r3, #4
 8014f28:	1a9b      	subs	r3, r3, r2
 8014f2a:	009b      	lsls	r3, r3, #2
 8014f2c:	440b      	add	r3, r1
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	2100      	movs	r1, #0
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7ff fed2 	bl	8014cdc <LL_UCPD_SetTxMode>
          break;
 8014f38:	e04f      	b.n	8014fda <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 8014f3a:	7bfa      	ldrb	r2, [r7, #15]
 8014f3c:	4960      	ldr	r1, [pc, #384]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8014f3e:	4613      	mov	r3, r2
 8014f40:	011b      	lsls	r3, r3, #4
 8014f42:	1a9b      	subs	r3, r3, r2
 8014f44:	009b      	lsls	r3, r3, #2
 8014f46:	440b      	add	r3, r1
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	495f      	ldr	r1, [pc, #380]	@ (80150c8 <USBPD_HW_IF_SendBuffer+0x284>)
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7ff ff18 	bl	8014d82 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8014f52:	7bfa      	ldrb	r2, [r7, #15]
 8014f54:	495a      	ldr	r1, [pc, #360]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8014f56:	4613      	mov	r3, r2
 8014f58:	011b      	lsls	r3, r3, #4
 8014f5a:	1a9b      	subs	r3, r3, r2
 8014f5c:	009b      	lsls	r3, r3, #2
 8014f5e:	440b      	add	r3, r1
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	2100      	movs	r1, #0
 8014f64:	4618      	mov	r0, r3
 8014f66:	f7ff feb9 	bl	8014cdc <LL_UCPD_SetTxMode>
          break;
 8014f6a:	e036      	b.n	8014fda <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 8014f6c:	7bfa      	ldrb	r2, [r7, #15]
 8014f6e:	4954      	ldr	r1, [pc, #336]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8014f70:	4613      	mov	r3, r2
 8014f72:	011b      	lsls	r3, r3, #4
 8014f74:	1a9b      	subs	r3, r3, r2
 8014f76:	009b      	lsls	r3, r3, #2
 8014f78:	440b      	add	r3, r1
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	4953      	ldr	r1, [pc, #332]	@ (80150cc <USBPD_HW_IF_SendBuffer+0x288>)
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f7ff feff 	bl	8014d82 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8014f84:	7bfa      	ldrb	r2, [r7, #15]
 8014f86:	494e      	ldr	r1, [pc, #312]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8014f88:	4613      	mov	r3, r2
 8014f8a:	011b      	lsls	r3, r3, #4
 8014f8c:	1a9b      	subs	r3, r3, r2
 8014f8e:	009b      	lsls	r3, r3, #2
 8014f90:	440b      	add	r3, r1
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	2100      	movs	r1, #0
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7ff fea0 	bl	8014cdc <LL_UCPD_SetTxMode>
          break;
 8014f9c:	e01d      	b.n	8014fda <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 8014f9e:	7bfa      	ldrb	r2, [r7, #15]
 8014fa0:	4947      	ldr	r1, [pc, #284]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8014fa2:	4613      	mov	r3, r2
 8014fa4:	011b      	lsls	r3, r3, #4
 8014fa6:	1a9b      	subs	r3, r3, r2
 8014fa8:	009b      	lsls	r3, r3, #2
 8014faa:	440b      	add	r3, r1
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	2101      	movs	r1, #1
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f7ff fe93 	bl	8014cdc <LL_UCPD_SetTxMode>
          break;
 8014fb6:	e010      	b.n	8014fda <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8014fb8:	7bfa      	ldrb	r2, [r7, #15]
 8014fba:	4941      	ldr	r1, [pc, #260]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8014fbc:	4613      	mov	r3, r2
 8014fbe:	011b      	lsls	r3, r3, #4
 8014fc0:	1a9b      	subs	r3, r3, r2
 8014fc2:	009b      	lsls	r3, r3, #2
 8014fc4:	440b      	add	r3, r1
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	2102      	movs	r1, #2
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f7ff fe86 	bl	8014cdc <LL_UCPD_SetTxMode>
          break;
 8014fd0:	e003      	b.n	8014fda <USBPD_HW_IF_SendBuffer+0x196>
        }
        default :
          _status = USBPD_ERROR;
 8014fd2:	2302      	movs	r3, #2
 8014fd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8014fd8:	bf00      	nop
      }

      if (USBPD_OK == _status)
 8014fda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d167      	bne.n	80150b2 <USBPD_HW_IF_SendBuffer+0x26e>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8014fe2:	7bfa      	ldrb	r2, [r7, #15]
 8014fe4:	4936      	ldr	r1, [pc, #216]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8014fe6:	4613      	mov	r3, r2
 8014fe8:	011b      	lsls	r3, r3, #4
 8014fea:	1a9b      	subs	r3, r3, r2
 8014fec:	009b      	lsls	r3, r3, #2
 8014fee:	440b      	add	r3, r1
 8014ff0:	3304      	adds	r3, #4
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	6819      	ldr	r1, [r3, #0]
 8014ff6:	7bfa      	ldrb	r2, [r7, #15]
 8014ff8:	4831      	ldr	r0, [pc, #196]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8014ffa:	4613      	mov	r3, r2
 8014ffc:	011b      	lsls	r3, r3, #4
 8014ffe:	1a9b      	subs	r3, r3, r2
 8015000:	009b      	lsls	r3, r3, #2
 8015002:	4403      	add	r3, r0
 8015004:	3304      	adds	r3, #4
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	f021 0201 	bic.w	r2, r1, #1
 801500c:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 801500e:	bf00      	nop
 8015010:	7bfa      	ldrb	r2, [r7, #15]
 8015012:	492b      	ldr	r1, [pc, #172]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8015014:	4613      	mov	r3, r2
 8015016:	011b      	lsls	r3, r3, #4
 8015018:	1a9b      	subs	r3, r3, r2
 801501a:	009b      	lsls	r3, r3, #2
 801501c:	440b      	add	r3, r1
 801501e:	3304      	adds	r3, #4
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	f003 0301 	and.w	r3, r3, #1
 8015028:	2b01      	cmp	r3, #1
 801502a:	d0f1      	beq.n	8015010 <USBPD_HW_IF_SendBuffer+0x1cc>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 801502c:	7bfa      	ldrb	r2, [r7, #15]
 801502e:	4924      	ldr	r1, [pc, #144]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8015030:	4613      	mov	r3, r2
 8015032:	011b      	lsls	r3, r3, #4
 8015034:	1a9b      	subs	r3, r3, r2
 8015036:	009b      	lsls	r3, r3, #2
 8015038:	440b      	add	r3, r1
 801503a:	3304      	adds	r3, #4
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	68ba      	ldr	r2, [r7, #8]
 8015040:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 8015042:	7bfa      	ldrb	r2, [r7, #15]
 8015044:	491e      	ldr	r1, [pc, #120]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8015046:	4613      	mov	r3, r2
 8015048:	011b      	lsls	r3, r3, #4
 801504a:	1a9b      	subs	r3, r3, r2
 801504c:	009b      	lsls	r3, r3, #2
 801504e:	440b      	add	r3, r1
 8015050:	3304      	adds	r3, #4
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	687a      	ldr	r2, [r7, #4]
 8015056:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8015058:	7bfa      	ldrb	r2, [r7, #15]
 801505a:	4919      	ldr	r1, [pc, #100]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 801505c:	4613      	mov	r3, r2
 801505e:	011b      	lsls	r3, r3, #4
 8015060:	1a9b      	subs	r3, r3, r2
 8015062:	009b      	lsls	r3, r3, #2
 8015064:	440b      	add	r3, r1
 8015066:	3304      	adds	r3, #4
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	6819      	ldr	r1, [r3, #0]
 801506c:	7bfa      	ldrb	r2, [r7, #15]
 801506e:	4814      	ldr	r0, [pc, #80]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8015070:	4613      	mov	r3, r2
 8015072:	011b      	lsls	r3, r3, #4
 8015074:	1a9b      	subs	r3, r3, r2
 8015076:	009b      	lsls	r3, r3, #2
 8015078:	4403      	add	r3, r0
 801507a:	3304      	adds	r3, #4
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	f041 0201 	orr.w	r2, r1, #1
 8015082:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 8015084:	7bfa      	ldrb	r2, [r7, #15]
 8015086:	490e      	ldr	r1, [pc, #56]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 8015088:	4613      	mov	r3, r2
 801508a:	011b      	lsls	r3, r3, #4
 801508c:	1a9b      	subs	r3, r3, r2
 801508e:	009b      	lsls	r3, r3, #2
 8015090:	440b      	add	r3, r1
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	6879      	ldr	r1, [r7, #4]
 8015096:	4618      	mov	r0, r3
 8015098:	f7ff fe81 	bl	8014d9e <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 801509c:	7bfa      	ldrb	r2, [r7, #15]
 801509e:	4908      	ldr	r1, [pc, #32]	@ (80150c0 <USBPD_HW_IF_SendBuffer+0x27c>)
 80150a0:	4613      	mov	r3, r2
 80150a2:	011b      	lsls	r3, r3, #4
 80150a4:	1a9b      	subs	r3, r3, r2
 80150a6:	009b      	lsls	r3, r3, #2
 80150a8:	440b      	add	r3, r1
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	4618      	mov	r0, r3
 80150ae:	f7ff fe05 	bl	8014cbc <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 80150b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3728      	adds	r7, #40	@ 0x28
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}
 80150be:	bf00      	nop
 80150c0:	20000714 	.word	0x20000714
 80150c4:	0008e318 	.word	0x0008e318
 80150c8:	00031b18 	.word	0x00031b18
 80150cc:	000360d8 	.word	0x000360d8

080150d0 <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b082      	sub	sp, #8
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	4603      	mov	r3, r0
 80150d8:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 80150da:	79fa      	ldrb	r2, [r7, #7]
 80150dc:	490c      	ldr	r1, [pc, #48]	@ (8015110 <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 80150de:	4613      	mov	r3, r2
 80150e0:	011b      	lsls	r3, r3, #4
 80150e2:	1a9b      	subs	r3, r3, r2
 80150e4:	009b      	lsls	r3, r3, #2
 80150e6:	440b      	add	r3, r1
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	2102      	movs	r1, #2
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7ff fdf5 	bl	8014cdc <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 80150f2:	79fa      	ldrb	r2, [r7, #7]
 80150f4:	4906      	ldr	r1, [pc, #24]	@ (8015110 <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 80150f6:	4613      	mov	r3, r2
 80150f8:	011b      	lsls	r3, r3, #4
 80150fa:	1a9b      	subs	r3, r3, r2
 80150fc:	009b      	lsls	r3, r3, #2
 80150fe:	440b      	add	r3, r1
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	4618      	mov	r0, r3
 8015104:	f7ff fdda 	bl	8014cbc <LL_UCPD_SendMessage>
}
 8015108:	bf00      	nop
 801510a:	3708      	adds	r7, #8
 801510c:	46bd      	mov	sp, r7
 801510e:	bd80      	pop	{r7, pc}
 8015110:	20000714 	.word	0x20000714

08015114 <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b082      	sub	sp, #8
 8015118:	af00      	add	r7, sp, #0
 801511a:	4603      	mov	r3, r0
 801511c:	71fb      	strb	r3, [r7, #7]
  switch (Ports[PortNum].params->RpResistor)
 801511e:	79fa      	ldrb	r2, [r7, #7]
 8015120:	4946      	ldr	r1, [pc, #280]	@ (801523c <USBPDM1_AssertRp+0x128>)
 8015122:	4613      	mov	r3, r2
 8015124:	011b      	lsls	r3, r3, #4
 8015126:	1a9b      	subs	r3, r3, r2
 8015128:	009b      	lsls	r3, r3, #2
 801512a:	440b      	add	r3, r1
 801512c:	3310      	adds	r3, #16
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	789b      	ldrb	r3, [r3, #2]
 8015132:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8015136:	b2db      	uxtb	r3, r3
 8015138:	2b02      	cmp	r3, #2
 801513a:	d021      	beq.n	8015180 <USBPDM1_AssertRp+0x6c>
 801513c:	2b02      	cmp	r3, #2
 801513e:	dc2d      	bgt.n	801519c <USBPDM1_AssertRp+0x88>
 8015140:	2b00      	cmp	r3, #0
 8015142:	d002      	beq.n	801514a <USBPDM1_AssertRp+0x36>
 8015144:	2b01      	cmp	r3, #1
 8015146:	d00d      	beq.n	8015164 <USBPDM1_AssertRp+0x50>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 8015148:	e028      	b.n	801519c <USBPDM1_AssertRp+0x88>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 801514a:	79fa      	ldrb	r2, [r7, #7]
 801514c:	493b      	ldr	r1, [pc, #236]	@ (801523c <USBPDM1_AssertRp+0x128>)
 801514e:	4613      	mov	r3, r2
 8015150:	011b      	lsls	r3, r3, #4
 8015152:	1a9b      	subs	r3, r3, r2
 8015154:	009b      	lsls	r3, r3, #2
 8015156:	440b      	add	r3, r1
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	2180      	movs	r1, #128	@ 0x80
 801515c:	4618      	mov	r0, r3
 801515e:	f7ff fd44 	bl	8014bea <LL_UCPD_SetRpResistor>
      break;
 8015162:	e01c      	b.n	801519e <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8015164:	79fa      	ldrb	r2, [r7, #7]
 8015166:	4935      	ldr	r1, [pc, #212]	@ (801523c <USBPDM1_AssertRp+0x128>)
 8015168:	4613      	mov	r3, r2
 801516a:	011b      	lsls	r3, r3, #4
 801516c:	1a9b      	subs	r3, r3, r2
 801516e:	009b      	lsls	r3, r3, #2
 8015170:	440b      	add	r3, r1
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015178:	4618      	mov	r0, r3
 801517a:	f7ff fd36 	bl	8014bea <LL_UCPD_SetRpResistor>
      break;
 801517e:	e00e      	b.n	801519e <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8015180:	79fa      	ldrb	r2, [r7, #7]
 8015182:	492e      	ldr	r1, [pc, #184]	@ (801523c <USBPDM1_AssertRp+0x128>)
 8015184:	4613      	mov	r3, r2
 8015186:	011b      	lsls	r3, r3, #4
 8015188:	1a9b      	subs	r3, r3, r2
 801518a:	009b      	lsls	r3, r3, #2
 801518c:	440b      	add	r3, r1
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8015194:	4618      	mov	r0, r3
 8015196:	f7ff fd28 	bl	8014bea <LL_UCPD_SetRpResistor>
      break;
 801519a:	e000      	b.n	801519e <USBPDM1_AssertRp+0x8a>
      break;
 801519c:	bf00      	nop
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 801519e:	79fa      	ldrb	r2, [r7, #7]
 80151a0:	4926      	ldr	r1, [pc, #152]	@ (801523c <USBPDM1_AssertRp+0x128>)
 80151a2:	4613      	mov	r3, r2
 80151a4:	011b      	lsls	r3, r3, #4
 80151a6:	1a9b      	subs	r3, r3, r2
 80151a8:	009b      	lsls	r3, r3, #2
 80151aa:	440b      	add	r3, r1
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	2100      	movs	r1, #0
 80151b0:	4618      	mov	r0, r3
 80151b2:	f7ff fce7 	bl	8014b84 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 80151b6:	79fa      	ldrb	r2, [r7, #7]
 80151b8:	4920      	ldr	r1, [pc, #128]	@ (801523c <USBPDM1_AssertRp+0x128>)
 80151ba:	4613      	mov	r3, r2
 80151bc:	011b      	lsls	r3, r3, #4
 80151be:	1a9b      	subs	r3, r3, r2
 80151c0:	009b      	lsls	r3, r3, #2
 80151c2:	440b      	add	r3, r1
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7ff fcff 	bl	8014bca <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 80151cc:	79fa      	ldrb	r2, [r7, #7]
 80151ce:	491b      	ldr	r1, [pc, #108]	@ (801523c <USBPDM1_AssertRp+0x128>)
 80151d0:	4613      	mov	r3, r2
 80151d2:	011b      	lsls	r3, r3, #4
 80151d4:	1a9b      	subs	r3, r3, r2
 80151d6:	009b      	lsls	r3, r3, #2
 80151d8:	440b      	add	r3, r1
 80151da:	3334      	adds	r3, #52	@ 0x34
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d10d      	bne.n	80151fe <USBPDM1_AssertRp+0xea>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80151e2:	79fa      	ldrb	r2, [r7, #7]
 80151e4:	4915      	ldr	r1, [pc, #84]	@ (801523c <USBPDM1_AssertRp+0x128>)
 80151e6:	4613      	mov	r3, r2
 80151e8:	011b      	lsls	r3, r3, #4
 80151ea:	1a9b      	subs	r3, r3, r2
 80151ec:	009b      	lsls	r3, r3, #2
 80151ee:	440b      	add	r3, r1
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80151f6:	4618      	mov	r0, r3
 80151f8:	f7ff fcc4 	bl	8014b84 <LL_UCPD_SetccEnable>
  }

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 80151fc:	e01a      	b.n	8015234 <USBPDM1_AssertRp+0x120>
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80151fe:	79fa      	ldrb	r2, [r7, #7]
 8015200:	490e      	ldr	r1, [pc, #56]	@ (801523c <USBPDM1_AssertRp+0x128>)
 8015202:	4613      	mov	r3, r2
 8015204:	011b      	lsls	r3, r3, #4
 8015206:	1a9b      	subs	r3, r3, r2
 8015208:	009b      	lsls	r3, r3, #2
 801520a:	440b      	add	r3, r1
 801520c:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 801520e:	79fa      	ldrb	r2, [r7, #7]
 8015210:	490a      	ldr	r1, [pc, #40]	@ (801523c <USBPDM1_AssertRp+0x128>)
 8015212:	4613      	mov	r3, r2
 8015214:	011b      	lsls	r3, r3, #4
 8015216:	1a9b      	subs	r3, r3, r2
 8015218:	009b      	lsls	r3, r3, #2
 801521a:	440b      	add	r3, r1
 801521c:	3334      	adds	r3, #52	@ 0x34
 801521e:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8015220:	2b01      	cmp	r3, #1
 8015222:	d102      	bne.n	801522a <USBPDM1_AssertRp+0x116>
 8015224:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015228:	e001      	b.n	801522e <USBPDM1_AssertRp+0x11a>
 801522a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801522e:	4619      	mov	r1, r3
 8015230:	f7ff fca8 	bl	8014b84 <LL_UCPD_SetccEnable>
}
 8015234:	bf00      	nop
 8015236:	3708      	adds	r7, #8
 8015238:	46bd      	mov	sp, r7
 801523a:	bd80      	pop	{r7, pc}
 801523c:	20000714 	.word	0x20000714

08015240 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8015240:	b480      	push	{r7}
 8015242:	b083      	sub	sp, #12
 8015244:	af00      	add	r7, sp, #0
 8015246:	4603      	mov	r3, r0
 8015248:	71fb      	strb	r3, [r7, #7]
  /* not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 801524a:	bf00      	nop
 801524c:	370c      	adds	r7, #12
 801524e:	46bd      	mov	sp, r7
 8015250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015254:	4770      	bx	lr
	...

08015258 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b082      	sub	sp, #8
 801525c:	af00      	add	r7, sp, #0
 801525e:	4603      	mov	r3, r0
 8015260:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 8015262:	79fa      	ldrb	r2, [r7, #7]
 8015264:	493e      	ldr	r1, [pc, #248]	@ (8015360 <USBPDM1_AssertRd+0x108>)
 8015266:	4613      	mov	r3, r2
 8015268:	011b      	lsls	r3, r3, #4
 801526a:	1a9b      	subs	r3, r3, r2
 801526c:	009b      	lsls	r3, r3, #2
 801526e:	440b      	add	r3, r1
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	4618      	mov	r0, r3
 8015274:	f7ff fc26 	bl	8014ac4 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 8015278:	79fa      	ldrb	r2, [r7, #7]
 801527a:	4939      	ldr	r1, [pc, #228]	@ (8015360 <USBPDM1_AssertRd+0x108>)
 801527c:	4613      	mov	r3, r2
 801527e:	011b      	lsls	r3, r3, #4
 8015280:	1a9b      	subs	r3, r3, r2
 8015282:	009b      	lsls	r3, r3, #2
 8015284:	440b      	add	r3, r1
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	4618      	mov	r0, r3
 801528a:	f7ff fc3b 	bl	8014b04 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 801528e:	79fa      	ldrb	r2, [r7, #7]
 8015290:	4933      	ldr	r1, [pc, #204]	@ (8015360 <USBPDM1_AssertRd+0x108>)
 8015292:	4613      	mov	r3, r2
 8015294:	011b      	lsls	r3, r3, #4
 8015296:	1a9b      	subs	r3, r3, r2
 8015298:	009b      	lsls	r3, r3, #2
 801529a:	440b      	add	r3, r1
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	2100      	movs	r1, #0
 80152a0:	4618      	mov	r0, r3
 80152a2:	f7ff fc6f 	bl	8014b84 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 80152a6:	79fa      	ldrb	r2, [r7, #7]
 80152a8:	492d      	ldr	r1, [pc, #180]	@ (8015360 <USBPDM1_AssertRd+0x108>)
 80152aa:	4613      	mov	r3, r2
 80152ac:	011b      	lsls	r3, r3, #4
 80152ae:	1a9b      	subs	r3, r3, r2
 80152b0:	009b      	lsls	r3, r3, #2
 80152b2:	440b      	add	r3, r1
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	4618      	mov	r0, r3
 80152b8:	f7ff fc77 	bl	8014baa <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 80152bc:	79fa      	ldrb	r2, [r7, #7]
 80152be:	4928      	ldr	r1, [pc, #160]	@ (8015360 <USBPDM1_AssertRd+0x108>)
 80152c0:	4613      	mov	r3, r2
 80152c2:	011b      	lsls	r3, r3, #4
 80152c4:	1a9b      	subs	r3, r3, r2
 80152c6:	009b      	lsls	r3, r3, #2
 80152c8:	440b      	add	r3, r1
 80152ca:	3334      	adds	r3, #52	@ 0x34
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d10d      	bne.n	80152ee <USBPDM1_AssertRd+0x96>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80152d2:	79fa      	ldrb	r2, [r7, #7]
 80152d4:	4922      	ldr	r1, [pc, #136]	@ (8015360 <USBPDM1_AssertRd+0x108>)
 80152d6:	4613      	mov	r3, r2
 80152d8:	011b      	lsls	r3, r3, #4
 80152da:	1a9b      	subs	r3, r3, r2
 80152dc:	009b      	lsls	r3, r3, #2
 80152de:	440b      	add	r3, r1
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80152e6:	4618      	mov	r0, r3
 80152e8:	f7ff fc4c 	bl	8014b84 <LL_UCPD_SetccEnable>
 80152ec:	e01a      	b.n	8015324 <USBPDM1_AssertRd+0xcc>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80152ee:	79fa      	ldrb	r2, [r7, #7]
 80152f0:	491b      	ldr	r1, [pc, #108]	@ (8015360 <USBPDM1_AssertRd+0x108>)
 80152f2:	4613      	mov	r3, r2
 80152f4:	011b      	lsls	r3, r3, #4
 80152f6:	1a9b      	subs	r3, r3, r2
 80152f8:	009b      	lsls	r3, r3, #2
 80152fa:	440b      	add	r3, r1
 80152fc:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 80152fe:	79fa      	ldrb	r2, [r7, #7]
 8015300:	4917      	ldr	r1, [pc, #92]	@ (8015360 <USBPDM1_AssertRd+0x108>)
 8015302:	4613      	mov	r3, r2
 8015304:	011b      	lsls	r3, r3, #4
 8015306:	1a9b      	subs	r3, r3, r2
 8015308:	009b      	lsls	r3, r3, #2
 801530a:	440b      	add	r3, r1
 801530c:	3334      	adds	r3, #52	@ 0x34
 801530e:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8015310:	2b01      	cmp	r3, #1
 8015312:	d102      	bne.n	801531a <USBPDM1_AssertRd+0xc2>
 8015314:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015318:	e001      	b.n	801531e <USBPDM1_AssertRd+0xc6>
 801531a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801531e:	4619      	mov	r1, r3
 8015320:	f7ff fc30 	bl	8014b84 <LL_UCPD_SetccEnable>
  }

  HAL_Delay(1);
 8015324:	2001      	movs	r0, #1
 8015326:	f7f3 fa25 	bl	8008774 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 801532a:	79fa      	ldrb	r2, [r7, #7]
 801532c:	490c      	ldr	r1, [pc, #48]	@ (8015360 <USBPDM1_AssertRd+0x108>)
 801532e:	4613      	mov	r3, r2
 8015330:	011b      	lsls	r3, r3, #4
 8015332:	1a9b      	subs	r3, r3, r2
 8015334:	009b      	lsls	r3, r3, #2
 8015336:	440b      	add	r3, r1
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	4618      	mov	r0, r3
 801533c:	f7ff fbb2 	bl	8014aa4 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8015340:	79fa      	ldrb	r2, [r7, #7]
 8015342:	4907      	ldr	r1, [pc, #28]	@ (8015360 <USBPDM1_AssertRd+0x108>)
 8015344:	4613      	mov	r3, r2
 8015346:	011b      	lsls	r3, r3, #4
 8015348:	1a9b      	subs	r3, r3, r2
 801534a:	009b      	lsls	r3, r3, #2
 801534c:	440b      	add	r3, r1
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	4618      	mov	r0, r3
 8015352:	f7ff fbc7 	bl	8014ae4 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 8015356:	bf00      	nop
 8015358:	3708      	adds	r7, #8
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}
 801535e:	bf00      	nop
 8015360:	20000714 	.word	0x20000714

08015364 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8015364:	b480      	push	{r7}
 8015366:	b083      	sub	sp, #12
 8015368:	af00      	add	r7, sp, #0
 801536a:	4603      	mov	r3, r0
 801536c:	71fb      	strb	r3, [r7, #7]
  /* not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 801536e:	bf00      	nop
 8015370:	370c      	adds	r7, #12
 8015372:	46bd      	mov	sp, r7
 8015374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015378:	4770      	bx	lr
	...

0801537c <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b082      	sub	sp, #8
 8015380:	af00      	add	r7, sp, #0
 8015382:	4603      	mov	r3, r0
 8015384:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8015386:	79fa      	ldrb	r2, [r7, #7]
 8015388:	491f      	ldr	r1, [pc, #124]	@ (8015408 <USBPDM1_EnterErrorRecovery+0x8c>)
 801538a:	4613      	mov	r3, r2
 801538c:	011b      	lsls	r3, r3, #4
 801538e:	1a9b      	subs	r3, r3, r2
 8015390:	009b      	lsls	r3, r3, #2
 8015392:	440b      	add	r3, r1
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	4618      	mov	r0, r3
 8015398:	f7ff fc17 	bl	8014bca <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 801539c:	79fa      	ldrb	r2, [r7, #7]
 801539e:	491a      	ldr	r1, [pc, #104]	@ (8015408 <USBPDM1_EnterErrorRecovery+0x8c>)
 80153a0:	4613      	mov	r3, r2
 80153a2:	011b      	lsls	r3, r3, #4
 80153a4:	1a9b      	subs	r3, r3, r2
 80153a6:	009b      	lsls	r3, r3, #2
 80153a8:	440b      	add	r3, r1
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	2100      	movs	r1, #0
 80153ae:	4618      	mov	r0, r3
 80153b0:	f7ff fc1b 	bl	8014bea <LL_UCPD_SetRpResistor>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80153b4:	79fa      	ldrb	r2, [r7, #7]
 80153b6:	4914      	ldr	r1, [pc, #80]	@ (8015408 <USBPDM1_EnterErrorRecovery+0x8c>)
 80153b8:	4613      	mov	r3, r2
 80153ba:	011b      	lsls	r3, r3, #4
 80153bc:	1a9b      	subs	r3, r3, r2
 80153be:	009b      	lsls	r3, r3, #2
 80153c0:	440b      	add	r3, r1
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	4618      	mov	r0, r3
 80153c6:	f7ff fc46 	bl	8014c56 <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 80153ca:	79fa      	ldrb	r2, [r7, #7]
 80153cc:	490e      	ldr	r1, [pc, #56]	@ (8015408 <USBPDM1_EnterErrorRecovery+0x8c>)
 80153ce:	4613      	mov	r3, r2
 80153d0:	011b      	lsls	r3, r3, #4
 80153d2:	1a9b      	subs	r3, r3, r2
 80153d4:	009b      	lsls	r3, r3, #2
 80153d6:	440b      	add	r3, r1
 80153d8:	330c      	adds	r3, #12
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	7a1b      	ldrb	r3, [r3, #8]
 80153de:	f003 0302 	and.w	r3, r3, #2
 80153e2:	b2db      	uxtb	r3, r3
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d00a      	beq.n	80153fe <USBPDM1_EnterErrorRecovery+0x82>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 80153e8:	79fa      	ldrb	r2, [r7, #7]
 80153ea:	4907      	ldr	r1, [pc, #28]	@ (8015408 <USBPDM1_EnterErrorRecovery+0x8c>)
 80153ec:	4613      	mov	r3, r2
 80153ee:	011b      	lsls	r3, r3, #4
 80153f0:	1a9b      	subs	r3, r3, r2
 80153f2:	009b      	lsls	r3, r3, #2
 80153f4:	440b      	add	r3, r1
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	4618      	mov	r0, r3
 80153fa:	f7ff fbb3 	bl	8014b64 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 80153fe:	bf00      	nop
 8015400:	3708      	adds	r7, #8
 8015402:	46bd      	mov	sp, r7
 8015404:	bd80      	pop	{r7, pc}
 8015406:	bf00      	nop
 8015408:	20000714 	.word	0x20000714

0801540c <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b082      	sub	sp, #8
 8015410:	af00      	add	r7, sp, #0
 8015412:	4603      	mov	r3, r0
 8015414:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8015416:	79fa      	ldrb	r2, [r7, #7]
 8015418:	4906      	ldr	r1, [pc, #24]	@ (8015434 <USBPD_HW_IF_EnableRX+0x28>)
 801541a:	4613      	mov	r3, r2
 801541c:	011b      	lsls	r3, r3, #4
 801541e:	1a9b      	subs	r3, r3, r2
 8015420:	009b      	lsls	r3, r3, #2
 8015422:	440b      	add	r3, r1
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	4618      	mov	r0, r3
 8015428:	f7ff fc05 	bl	8014c36 <LL_UCPD_RxEnable>
}
 801542c:	bf00      	nop
 801542e:	3708      	adds	r7, #8
 8015430:	46bd      	mov	sp, r7
 8015432:	bd80      	pop	{r7, pc}
 8015434:	20000714 	.word	0x20000714

08015438 <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
 801543e:	4603      	mov	r3, r0
 8015440:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8015442:	79fa      	ldrb	r2, [r7, #7]
 8015444:	4906      	ldr	r1, [pc, #24]	@ (8015460 <USBPD_HW_IF_DisableRX+0x28>)
 8015446:	4613      	mov	r3, r2
 8015448:	011b      	lsls	r3, r3, #4
 801544a:	1a9b      	subs	r3, r3, r2
 801544c:	009b      	lsls	r3, r3, #2
 801544e:	440b      	add	r3, r1
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	4618      	mov	r0, r3
 8015454:	f7ff fbff 	bl	8014c56 <LL_UCPD_RxDisable>
}
 8015458:	bf00      	nop
 801545a:	3708      	adds	r7, #8
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}
 8015460:	20000714 	.word	0x20000714

08015464 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 8015464:	b590      	push	{r4, r7, lr}
 8015466:	b085      	sub	sp, #20
 8015468:	af00      	add	r7, sp, #0
 801546a:	4603      	mov	r3, r0
 801546c:	6039      	str	r1, [r7, #0]
 801546e:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 8015470:	f000 fc4e 	bl	8015d10 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 8015474:	79fc      	ldrb	r4, [r7, #7]
 8015476:	79fb      	ldrb	r3, [r7, #7]
 8015478:	4618      	mov	r0, r3
 801547a:	f7fe fe27 	bl	80140cc <USBPD_HW_Init_DMATxInstance>
 801547e:	4602      	mov	r2, r0
 8015480:	499d      	ldr	r1, [pc, #628]	@ (80156f8 <HW_SignalAttachement+0x294>)
 8015482:	4623      	mov	r3, r4
 8015484:	011b      	lsls	r3, r3, #4
 8015486:	1b1b      	subs	r3, r3, r4
 8015488:	009b      	lsls	r3, r3, #2
 801548a:	440b      	add	r3, r1
 801548c:	3304      	adds	r3, #4
 801548e:	601a      	str	r2, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 8015490:	79fc      	ldrb	r4, [r7, #7]
 8015492:	79fb      	ldrb	r3, [r7, #7]
 8015494:	4618      	mov	r0, r3
 8015496:	f7fe fdd9 	bl	801404c <USBPD_HW_Init_DMARxInstance>
 801549a:	4602      	mov	r2, r0
 801549c:	4996      	ldr	r1, [pc, #600]	@ (80156f8 <HW_SignalAttachement+0x294>)
 801549e:	4623      	mov	r3, r4
 80154a0:	011b      	lsls	r3, r3, #4
 80154a2:	1b1b      	subs	r3, r3, r4
 80154a4:	009b      	lsls	r3, r3, #2
 80154a6:	440b      	add	r3, r1
 80154a8:	3308      	adds	r3, #8
 80154aa:	601a      	str	r2, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 80154ac:	79fa      	ldrb	r2, [r7, #7]
 80154ae:	4992      	ldr	r1, [pc, #584]	@ (80156f8 <HW_SignalAttachement+0x294>)
 80154b0:	4613      	mov	r3, r2
 80154b2:	011b      	lsls	r3, r3, #4
 80154b4:	1a9b      	subs	r3, r3, r2
 80154b6:	009b      	lsls	r3, r3, #2
 80154b8:	440b      	add	r3, r1
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	3330      	adds	r3, #48	@ 0x30
 80154be:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 80154c0:	79fa      	ldrb	r2, [r7, #7]
 80154c2:	498d      	ldr	r1, [pc, #564]	@ (80156f8 <HW_SignalAttachement+0x294>)
 80154c4:	4613      	mov	r3, r2
 80154c6:	011b      	lsls	r3, r3, #4
 80154c8:	1a9b      	subs	r3, r3, r2
 80154ca:	009b      	lsls	r3, r3, #2
 80154cc:	440b      	add	r3, r1
 80154ce:	3308      	adds	r3, #8
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	68fa      	ldr	r2, [r7, #12]
 80154d4:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 80154d6:	79fa      	ldrb	r2, [r7, #7]
 80154d8:	4987      	ldr	r1, [pc, #540]	@ (80156f8 <HW_SignalAttachement+0x294>)
 80154da:	4613      	mov	r3, r2
 80154dc:	011b      	lsls	r3, r3, #4
 80154de:	1a9b      	subs	r3, r3, r2
 80154e0:	009b      	lsls	r3, r3, #2
 80154e2:	440b      	add	r3, r1
 80154e4:	3330      	adds	r3, #48	@ 0x30
 80154e6:	6818      	ldr	r0, [r3, #0]
 80154e8:	79fa      	ldrb	r2, [r7, #7]
 80154ea:	4983      	ldr	r1, [pc, #524]	@ (80156f8 <HW_SignalAttachement+0x294>)
 80154ec:	4613      	mov	r3, r2
 80154ee:	011b      	lsls	r3, r3, #4
 80154f0:	1a9b      	subs	r3, r3, r2
 80154f2:	009b      	lsls	r3, r3, #2
 80154f4:	440b      	add	r3, r1
 80154f6:	3308      	adds	r3, #8
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	4602      	mov	r2, r0
 80154fc:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 80154fe:	79fa      	ldrb	r2, [r7, #7]
 8015500:	497d      	ldr	r1, [pc, #500]	@ (80156f8 <HW_SignalAttachement+0x294>)
 8015502:	4613      	mov	r3, r2
 8015504:	011b      	lsls	r3, r3, #4
 8015506:	1a9b      	subs	r3, r3, r2
 8015508:	009b      	lsls	r3, r3, #2
 801550a:	440b      	add	r3, r1
 801550c:	3308      	adds	r3, #8
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8015514:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 8015516:	79fa      	ldrb	r2, [r7, #7]
 8015518:	4977      	ldr	r1, [pc, #476]	@ (80156f8 <HW_SignalAttachement+0x294>)
 801551a:	4613      	mov	r3, r2
 801551c:	011b      	lsls	r3, r3, #4
 801551e:	1a9b      	subs	r3, r3, r2
 8015520:	009b      	lsls	r3, r3, #2
 8015522:	440b      	add	r3, r1
 8015524:	3308      	adds	r3, #8
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	6819      	ldr	r1, [r3, #0]
 801552a:	79fa      	ldrb	r2, [r7, #7]
 801552c:	4872      	ldr	r0, [pc, #456]	@ (80156f8 <HW_SignalAttachement+0x294>)
 801552e:	4613      	mov	r3, r2
 8015530:	011b      	lsls	r3, r3, #4
 8015532:	1a9b      	subs	r3, r3, r2
 8015534:	009b      	lsls	r3, r3, #2
 8015536:	4403      	add	r3, r0
 8015538:	3308      	adds	r3, #8
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	f041 0201 	orr.w	r2, r1, #1
 8015540:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 8015542:	79fa      	ldrb	r2, [r7, #7]
 8015544:	496c      	ldr	r1, [pc, #432]	@ (80156f8 <HW_SignalAttachement+0x294>)
 8015546:	4613      	mov	r3, r2
 8015548:	011b      	lsls	r3, r3, #4
 801554a:	1a9b      	subs	r3, r3, r2
 801554c:	009b      	lsls	r3, r3, #2
 801554e:	440b      	add	r3, r1
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	3324      	adds	r3, #36	@ 0x24
 8015554:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 8015556:	79fa      	ldrb	r2, [r7, #7]
 8015558:	4967      	ldr	r1, [pc, #412]	@ (80156f8 <HW_SignalAttachement+0x294>)
 801555a:	4613      	mov	r3, r2
 801555c:	011b      	lsls	r3, r3, #4
 801555e:	1a9b      	subs	r3, r3, r2
 8015560:	009b      	lsls	r3, r3, #2
 8015562:	440b      	add	r3, r1
 8015564:	3304      	adds	r3, #4
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	68fa      	ldr	r2, [r7, #12]
 801556a:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 801556c:	79fa      	ldrb	r2, [r7, #7]
 801556e:	4962      	ldr	r1, [pc, #392]	@ (80156f8 <HW_SignalAttachement+0x294>)
 8015570:	4613      	mov	r3, r2
 8015572:	011b      	lsls	r3, r3, #4
 8015574:	1a9b      	subs	r3, r3, r2
 8015576:	009b      	lsls	r3, r3, #2
 8015578:	440b      	add	r3, r1
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	6919      	ldr	r1, [r3, #16]
 801557e:	79fa      	ldrb	r2, [r7, #7]
 8015580:	485d      	ldr	r0, [pc, #372]	@ (80156f8 <HW_SignalAttachement+0x294>)
 8015582:	4613      	mov	r3, r2
 8015584:	011b      	lsls	r3, r3, #4
 8015586:	1a9b      	subs	r3, r3, r2
 8015588:	009b      	lsls	r3, r3, #2
 801558a:	4403      	add	r3, r0
 801558c:	681a      	ldr	r2, [r3, #0]
 801558e:	f441 53f3 	orr.w	r3, r1, #7776	@ 0x1e60
 8015592:	f043 031e 	orr.w	r3, r3, #30
 8015596:	6113      	str	r3, [r2, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 8015598:	79fa      	ldrb	r2, [r7, #7]
 801559a:	4957      	ldr	r1, [pc, #348]	@ (80156f8 <HW_SignalAttachement+0x294>)
 801559c:	4613      	mov	r3, r2
 801559e:	011b      	lsls	r3, r3, #4
 80155a0:	1a9b      	subs	r3, r3, r2
 80155a2:	009b      	lsls	r3, r3, #2
 80155a4:	440b      	add	r3, r1
 80155a6:	3334      	adds	r3, #52	@ 0x34
 80155a8:	683a      	ldr	r2, [r7, #0]
 80155aa:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 80155ac:	79fa      	ldrb	r2, [r7, #7]
 80155ae:	4952      	ldr	r1, [pc, #328]	@ (80156f8 <HW_SignalAttachement+0x294>)
 80155b0:	4613      	mov	r3, r2
 80155b2:	011b      	lsls	r3, r3, #4
 80155b4:	1a9b      	subs	r3, r3, r2
 80155b6:	009b      	lsls	r3, r3, #2
 80155b8:	440b      	add	r3, r1
 80155ba:	6818      	ldr	r0, [r3, #0]
 80155bc:	79fa      	ldrb	r2, [r7, #7]
 80155be:	494e      	ldr	r1, [pc, #312]	@ (80156f8 <HW_SignalAttachement+0x294>)
 80155c0:	4613      	mov	r3, r2
 80155c2:	011b      	lsls	r3, r3, #4
 80155c4:	1a9b      	subs	r3, r3, r2
 80155c6:	009b      	lsls	r3, r3, #2
 80155c8:	440b      	add	r3, r1
 80155ca:	3334      	adds	r3, #52	@ 0x34
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	2b01      	cmp	r3, #1
 80155d0:	d101      	bne.n	80155d6 <HW_SignalAttachement+0x172>
 80155d2:	2300      	movs	r3, #0
 80155d4:	e000      	b.n	80155d8 <HW_SignalAttachement+0x174>
 80155d6:	2340      	movs	r3, #64	@ 0x40
 80155d8:	4619      	mov	r1, r3
 80155da:	f7ff fb19 	bl	8014c10 <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 80155de:	79fa      	ldrb	r2, [r7, #7]
 80155e0:	4945      	ldr	r1, [pc, #276]	@ (80156f8 <HW_SignalAttachement+0x294>)
 80155e2:	4613      	mov	r3, r2
 80155e4:	011b      	lsls	r3, r3, #4
 80155e6:	1a9b      	subs	r3, r3, r2
 80155e8:	009b      	lsls	r3, r3, #2
 80155ea:	440b      	add	r3, r1
 80155ec:	330c      	adds	r3, #12
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	7a1b      	ldrb	r3, [r3, #8]
 80155f2:	f003 0302 	and.w	r3, r3, #2
 80155f6:	b2db      	uxtb	r3, r3
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d031      	beq.n	8015660 <HW_SignalAttachement+0x1fc>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 80155fc:	79fa      	ldrb	r2, [r7, #7]
 80155fe:	493e      	ldr	r1, [pc, #248]	@ (80156f8 <HW_SignalAttachement+0x294>)
 8015600:	4613      	mov	r3, r2
 8015602:	011b      	lsls	r3, r3, #4
 8015604:	1a9b      	subs	r3, r3, r2
 8015606:	009b      	lsls	r3, r3, #2
 8015608:	440b      	add	r3, r1
 801560a:	3334      	adds	r3, #52	@ 0x34
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	2b01      	cmp	r3, #1
 8015610:	d101      	bne.n	8015616 <HW_SignalAttachement+0x1b2>
 8015612:	2201      	movs	r2, #1
 8015614:	e000      	b.n	8015618 <HW_SignalAttachement+0x1b4>
 8015616:	2202      	movs	r2, #2
 8015618:	79fb      	ldrb	r3, [r7, #7]
 801561a:	4611      	mov	r1, r2
 801561c:	4618      	mov	r0, r3
 801561e:	f7fe fd94 	bl	801414a <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 8015622:	79fa      	ldrb	r2, [r7, #7]
 8015624:	4934      	ldr	r1, [pc, #208]	@ (80156f8 <HW_SignalAttachement+0x294>)
 8015626:	4613      	mov	r3, r2
 8015628:	011b      	lsls	r3, r3, #4
 801562a:	1a9b      	subs	r3, r3, r2
 801562c:	009b      	lsls	r3, r3, #2
 801562e:	440b      	add	r3, r1
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	4618      	mov	r0, r3
 8015634:	f7ff fa86 	bl	8014b44 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 8015638:	79fa      	ldrb	r2, [r7, #7]
 801563a:	492f      	ldr	r1, [pc, #188]	@ (80156f8 <HW_SignalAttachement+0x294>)
 801563c:	4613      	mov	r3, r2
 801563e:	011b      	lsls	r3, r3, #4
 8015640:	1a9b      	subs	r3, r3, r2
 8015642:	009b      	lsls	r3, r3, #2
 8015644:	440b      	add	r3, r1
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	6919      	ldr	r1, [r3, #16]
 801564a:	79fa      	ldrb	r2, [r7, #7]
 801564c:	482a      	ldr	r0, [pc, #168]	@ (80156f8 <HW_SignalAttachement+0x294>)
 801564e:	4613      	mov	r3, r2
 8015650:	011b      	lsls	r3, r3, #4
 8015652:	1a9b      	subs	r3, r3, r2
 8015654:	009b      	lsls	r3, r3, #2
 8015656:	4403      	add	r3, r0
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	f441 1280 	orr.w	r2, r1, #1048576	@ 0x100000
 801565e:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 8015660:	79fa      	ldrb	r2, [r7, #7]
 8015662:	4925      	ldr	r1, [pc, #148]	@ (80156f8 <HW_SignalAttachement+0x294>)
 8015664:	4613      	mov	r3, r2
 8015666:	011b      	lsls	r3, r3, #4
 8015668:	1a9b      	subs	r3, r3, r2
 801566a:	009b      	lsls	r3, r3, #2
 801566c:	440b      	add	r3, r1
 801566e:	3334      	adds	r3, #52	@ 0x34
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	2b01      	cmp	r3, #1
 8015674:	d10d      	bne.n	8015692 <HW_SignalAttachement+0x22e>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 8015676:	79fa      	ldrb	r2, [r7, #7]
 8015678:	491f      	ldr	r1, [pc, #124]	@ (80156f8 <HW_SignalAttachement+0x294>)
 801567a:	4613      	mov	r3, r2
 801567c:	011b      	lsls	r3, r3, #4
 801567e:	1a9b      	subs	r3, r3, r2
 8015680:	009b      	lsls	r3, r3, #2
 8015682:	440b      	add	r3, r1
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801568a:	4618      	mov	r0, r3
 801568c:	f7ff fa7a 	bl	8014b84 <LL_UCPD_SetccEnable>
 8015690:	e00c      	b.n	80156ac <HW_SignalAttachement+0x248>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 8015692:	79fa      	ldrb	r2, [r7, #7]
 8015694:	4918      	ldr	r1, [pc, #96]	@ (80156f8 <HW_SignalAttachement+0x294>)
 8015696:	4613      	mov	r3, r2
 8015698:	011b      	lsls	r3, r3, #4
 801569a:	1a9b      	subs	r3, r3, r2
 801569c:	009b      	lsls	r3, r3, #2
 801569e:	440b      	add	r3, r1
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80156a6:	4618      	mov	r0, r3
 80156a8:	f7ff fa6c 	bl	8014b84 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 80156ac:	79fa      	ldrb	r2, [r7, #7]
 80156ae:	4912      	ldr	r1, [pc, #72]	@ (80156f8 <HW_SignalAttachement+0x294>)
 80156b0:	4613      	mov	r3, r2
 80156b2:	011b      	lsls	r3, r3, #4
 80156b4:	1a9b      	subs	r3, r3, r2
 80156b6:	009b      	lsls	r3, r3, #2
 80156b8:	440b      	add	r3, r1
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	2100      	movs	r1, #0
 80156be:	4618      	mov	r0, r3
 80156c0:	f7ff fad9 	bl	8014c76 <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 80156c4:	79fa      	ldrb	r2, [r7, #7]
 80156c6:	490c      	ldr	r1, [pc, #48]	@ (80156f8 <HW_SignalAttachement+0x294>)
 80156c8:	4613      	mov	r3, r2
 80156ca:	011b      	lsls	r3, r3, #4
 80156cc:	1a9b      	subs	r3, r3, r2
 80156ce:	009b      	lsls	r3, r3, #2
 80156d0:	440b      	add	r3, r1
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	4618      	mov	r0, r3
 80156d6:	f7ff fb14 	bl	8014d02 <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 80156da:	79fa      	ldrb	r2, [r7, #7]
 80156dc:	4906      	ldr	r1, [pc, #24]	@ (80156f8 <HW_SignalAttachement+0x294>)
 80156de:	4613      	mov	r3, r2
 80156e0:	011b      	lsls	r3, r3, #4
 80156e2:	1a9b      	subs	r3, r3, r2
 80156e4:	009b      	lsls	r3, r3, #2
 80156e6:	440b      	add	r3, r1
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	4618      	mov	r0, r3
 80156ec:	f7ff fb29 	bl	8014d42 <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80156f0:	bf00      	nop
 80156f2:	3714      	adds	r7, #20
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd90      	pop	{r4, r7, pc}
 80156f8:	20000714 	.word	0x20000714

080156fc <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b082      	sub	sp, #8
 8015700:	af00      	add	r7, sp, #0
 8015702:	4603      	mov	r3, r0
 8015704:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 8015706:	79fa      	ldrb	r2, [r7, #7]
 8015708:	493e      	ldr	r1, [pc, #248]	@ (8015804 <HW_SignalDetachment+0x108>)
 801570a:	4613      	mov	r3, r2
 801570c:	011b      	lsls	r3, r3, #4
 801570e:	1a9b      	subs	r3, r3, r2
 8015710:	009b      	lsls	r3, r3, #2
 8015712:	440b      	add	r3, r1
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	4618      	mov	r0, r3
 8015718:	f7ff fb03 	bl	8014d22 <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 801571c:	79fa      	ldrb	r2, [r7, #7]
 801571e:	4939      	ldr	r1, [pc, #228]	@ (8015804 <HW_SignalDetachment+0x108>)
 8015720:	4613      	mov	r3, r2
 8015722:	011b      	lsls	r3, r3, #4
 8015724:	1a9b      	subs	r3, r3, r2
 8015726:	009b      	lsls	r3, r3, #2
 8015728:	440b      	add	r3, r1
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	4618      	mov	r0, r3
 801572e:	f7ff fb18 	bl	8014d62 <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8015732:	79fa      	ldrb	r2, [r7, #7]
 8015734:	4933      	ldr	r1, [pc, #204]	@ (8015804 <HW_SignalDetachment+0x108>)
 8015736:	4613      	mov	r3, r2
 8015738:	011b      	lsls	r3, r3, #4
 801573a:	1a9b      	subs	r3, r3, r2
 801573c:	009b      	lsls	r3, r3, #2
 801573e:	440b      	add	r3, r1
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	4618      	mov	r0, r3
 8015744:	f7ff fa87 	bl	8014c56 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 8015748:	79fa      	ldrb	r2, [r7, #7]
 801574a:	492e      	ldr	r1, [pc, #184]	@ (8015804 <HW_SignalDetachment+0x108>)
 801574c:	4613      	mov	r3, r2
 801574e:	011b      	lsls	r3, r3, #4
 8015750:	1a9b      	subs	r3, r3, r2
 8015752:	009b      	lsls	r3, r3, #2
 8015754:	440b      	add	r3, r1
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801575c:	611a      	str	r2, [r3, #16]
    /* Enable detection interrupt */
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 801575e:	79fb      	ldrb	r3, [r7, #7]
 8015760:	4618      	mov	r0, r3
 8015762:	f7fe fce7 	bl	8014134 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 8015766:	79fb      	ldrb	r3, [r7, #7]
 8015768:	4618      	mov	r0, r3
 801576a:	f7fe fca3 	bl	80140b4 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 801576e:	79fa      	ldrb	r2, [r7, #7]
 8015770:	4924      	ldr	r1, [pc, #144]	@ (8015804 <HW_SignalDetachment+0x108>)
 8015772:	4613      	mov	r3, r2
 8015774:	011b      	lsls	r3, r3, #4
 8015776:	1a9b      	subs	r3, r3, r2
 8015778:	009b      	lsls	r3, r3, #2
 801577a:	440b      	add	r3, r1
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8015782:	4618      	mov	r0, r3
 8015784:	f7ff f9fe 	bl	8014b84 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 8015788:	79fa      	ldrb	r2, [r7, #7]
 801578a:	491e      	ldr	r1, [pc, #120]	@ (8015804 <HW_SignalDetachment+0x108>)
 801578c:	4613      	mov	r3, r2
 801578e:	011b      	lsls	r3, r3, #4
 8015790:	1a9b      	subs	r3, r3, r2
 8015792:	009b      	lsls	r3, r3, #2
 8015794:	440b      	add	r3, r1
 8015796:	3310      	adds	r3, #16
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	781b      	ldrb	r3, [r3, #0]
 801579c:	f003 0304 	and.w	r3, r3, #4
 80157a0:	b2db      	uxtb	r3, r3
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d103      	bne.n	80157ae <HW_SignalDetachment+0xb2>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 80157a6:	79fb      	ldrb	r3, [r7, #7]
 80157a8:	4618      	mov	r0, r3
 80157aa:	f002 fb83 	bl	8017eb4 <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 80157ae:	79fa      	ldrb	r2, [r7, #7]
 80157b0:	4914      	ldr	r1, [pc, #80]	@ (8015804 <HW_SignalDetachment+0x108>)
 80157b2:	4613      	mov	r3, r2
 80157b4:	011b      	lsls	r3, r3, #4
 80157b6:	1a9b      	subs	r3, r3, r2
 80157b8:	009b      	lsls	r3, r3, #2
 80157ba:	440b      	add	r3, r1
 80157bc:	330c      	adds	r3, #12
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	7a1b      	ldrb	r3, [r3, #8]
 80157c2:	f003 0302 	and.w	r3, r3, #2
 80157c6:	b2db      	uxtb	r3, r3
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d00a      	beq.n	80157e2 <HW_SignalDetachment+0xe6>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 80157cc:	79fa      	ldrb	r2, [r7, #7]
 80157ce:	490d      	ldr	r1, [pc, #52]	@ (8015804 <HW_SignalDetachment+0x108>)
 80157d0:	4613      	mov	r3, r2
 80157d2:	011b      	lsls	r3, r3, #4
 80157d4:	1a9b      	subs	r3, r3, r2
 80157d6:	009b      	lsls	r3, r3, #2
 80157d8:	440b      	add	r3, r1
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	4618      	mov	r0, r3
 80157de:	f7ff f9c1 	bl	8014b64 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 80157e2:	79fa      	ldrb	r2, [r7, #7]
 80157e4:	4907      	ldr	r1, [pc, #28]	@ (8015804 <HW_SignalDetachment+0x108>)
 80157e6:	4613      	mov	r3, r2
 80157e8:	011b      	lsls	r3, r3, #4
 80157ea:	1a9b      	subs	r3, r3, r2
 80157ec:	009b      	lsls	r3, r3, #2
 80157ee:	440b      	add	r3, r1
 80157f0:	3334      	adds	r3, #52	@ 0x34
 80157f2:	2200      	movs	r2, #0
 80157f4:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 80157f6:	f000 fb13 	bl	8015e20 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80157fa:	bf00      	nop
 80157fc:	3708      	adds	r7, #8
 80157fe:	46bd      	mov	sp, r7
 8015800:	bd80      	pop	{r7, pc}
 8015802:	bf00      	nop
 8015804:	20000714 	.word	0x20000714

08015808 <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b082      	sub	sp, #8
 801580c:	af00      	add	r7, sp, #0
 801580e:	4603      	mov	r3, r0
 8015810:	71fb      	strb	r3, [r7, #7]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8015812:	79fa      	ldrb	r2, [r7, #7]
 8015814:	4907      	ldr	r1, [pc, #28]	@ (8015834 <USBPD_HW_IF_SetResistor_SinkTxNG+0x2c>)
 8015816:	4613      	mov	r3, r2
 8015818:	011b      	lsls	r3, r3, #4
 801581a:	1a9b      	subs	r3, r3, r2
 801581c:	009b      	lsls	r3, r3, #2
 801581e:	440b      	add	r3, r1
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015826:	4618      	mov	r0, r3
 8015828:	f7ff f9df 	bl	8014bea <LL_UCPD_SetRpResistor>
}
 801582c:	bf00      	nop
 801582e:	3708      	adds	r7, #8
 8015830:	46bd      	mov	sp, r7
 8015832:	bd80      	pop	{r7, pc}
 8015834:	20000714 	.word	0x20000714

08015838 <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b082      	sub	sp, #8
 801583c:	af00      	add	r7, sp, #0
 801583e:	4603      	mov	r3, r0
 8015840:	71fb      	strb	r3, [r7, #7]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8015842:	79fa      	ldrb	r2, [r7, #7]
 8015844:	4907      	ldr	r1, [pc, #28]	@ (8015864 <USBPD_HW_IF_SetResistor_SinkTxOK+0x2c>)
 8015846:	4613      	mov	r3, r2
 8015848:	011b      	lsls	r3, r3, #4
 801584a:	1a9b      	subs	r3, r3, r2
 801584c:	009b      	lsls	r3, r3, #2
 801584e:	440b      	add	r3, r1
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8015856:	4618      	mov	r0, r3
 8015858:	f7ff f9c7 	bl	8014bea <LL_UCPD_SetRpResistor>
}
 801585c:	bf00      	nop
 801585e:	3708      	adds	r7, #8
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}
 8015864:	20000714 	.word	0x20000714

08015868 <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8015868:	b480      	push	{r7}
 801586a:	b083      	sub	sp, #12
 801586c:	af00      	add	r7, sp, #0
 801586e:	4603      	mov	r3, r0
 8015870:	71fb      	strb	r3, [r7, #7]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 8015872:	79fa      	ldrb	r2, [r7, #7]
 8015874:	491b      	ldr	r1, [pc, #108]	@ (80158e4 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 8015876:	4613      	mov	r3, r2
 8015878:	011b      	lsls	r3, r3, #4
 801587a:	1a9b      	subs	r3, r3, r2
 801587c:	009b      	lsls	r3, r3, #2
 801587e:	440b      	add	r3, r1
 8015880:	3334      	adds	r3, #52	@ 0x34
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	2b01      	cmp	r3, #1
 8015886:	d002      	beq.n	801588e <USBPD_HW_IF_IsResistor_SinkTxOk+0x26>
 8015888:	2b02      	cmp	r3, #2
 801588a:	d010      	beq.n	80158ae <USBPD_HW_IF_IsResistor_SinkTxOk+0x46>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 801588c:	e022      	b.n	80158d4 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 801588e:	79fa      	ldrb	r2, [r7, #7]
 8015890:	4914      	ldr	r1, [pc, #80]	@ (80158e4 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 8015892:	4613      	mov	r3, r2
 8015894:	011b      	lsls	r3, r3, #4
 8015896:	1a9b      	subs	r3, r3, r2
 8015898:	009b      	lsls	r3, r3, #2
 801589a:	440b      	add	r3, r1
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	695b      	ldr	r3, [r3, #20]
 80158a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80158a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80158a8:	d111      	bne.n	80158ce <USBPD_HW_IF_IsResistor_SinkTxOk+0x66>
        return USBPD_TRUE;
 80158aa:	2301      	movs	r3, #1
 80158ac:	e013      	b.n	80158d6 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 80158ae:	79fa      	ldrb	r2, [r7, #7]
 80158b0:	490c      	ldr	r1, [pc, #48]	@ (80158e4 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 80158b2:	4613      	mov	r3, r2
 80158b4:	011b      	lsls	r3, r3, #4
 80158b6:	1a9b      	subs	r3, r3, r2
 80158b8:	009b      	lsls	r3, r3, #2
 80158ba:	440b      	add	r3, r1
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	695b      	ldr	r3, [r3, #20]
 80158c0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80158c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80158c8:	d103      	bne.n	80158d2 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6a>
        return USBPD_TRUE;
 80158ca:	2301      	movs	r3, #1
 80158cc:	e003      	b.n	80158d6 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      break;
 80158ce:	bf00      	nop
 80158d0:	e000      	b.n	80158d4 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      break;
 80158d2:	bf00      	nop
  }

  return USBPD_FALSE;
 80158d4:	2300      	movs	r3, #0
}
 80158d6:	4618      	mov	r0, r3
 80158d8:	370c      	adds	r7, #12
 80158da:	46bd      	mov	sp, r7
 80158dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e0:	4770      	bx	lr
 80158e2:	bf00      	nop
 80158e4:	20000714 	.word	0x20000714

080158e8 <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b082      	sub	sp, #8
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	4603      	mov	r3, r0
 80158f0:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 80158f2:	79fa      	ldrb	r2, [r7, #7]
 80158f4:	4906      	ldr	r1, [pc, #24]	@ (8015910 <USBPD_HW_IF_FastRoleSwapSignalling+0x28>)
 80158f6:	4613      	mov	r3, r2
 80158f8:	011b      	lsls	r3, r3, #4
 80158fa:	1a9b      	subs	r3, r3, r2
 80158fc:	009b      	lsls	r3, r3, #2
 80158fe:	440b      	add	r3, r1
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	4618      	mov	r0, r3
 8015904:	f7ff f90e 	bl	8014b24 <LL_UCPD_SignalFRSTX>
}
 8015908:	bf00      	nop
 801590a:	3708      	adds	r7, #8
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}
 8015910:	20000714 	.word	0x20000714

08015914 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b084      	sub	sp, #16
 8015918:	af00      	add	r7, sp, #0
 801591a:	4603      	mov	r3, r0
 801591c:	71fb      	strb	r3, [r7, #7]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 801591e:	79fb      	ldrb	r3, [r7, #7]
 8015920:	f107 020c 	add.w	r2, r7, #12
 8015924:	4611      	mov	r1, r2
 8015926:	4618      	mov	r0, r3
 8015928:	f002 fad8 	bl	8017edc <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	b29b      	uxth	r3, r3
}
 8015930:	4618      	mov	r0, r3
 8015932:	3710      	adds	r7, #16
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}

08015938 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8015938:	b480      	push	{r7}
 801593a:	b085      	sub	sp, #20
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8015940:	4b08      	ldr	r3, [pc, #32]	@ (8015964 <LL_APB2_GRP1_EnableClock+0x2c>)
 8015942:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8015944:	4907      	ldr	r1, [pc, #28]	@ (8015964 <LL_APB2_GRP1_EnableClock+0x2c>)
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	4313      	orrs	r3, r2
 801594a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 801594c:	4b05      	ldr	r3, [pc, #20]	@ (8015964 <LL_APB2_GRP1_EnableClock+0x2c>)
 801594e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	4013      	ands	r3, r2
 8015954:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015956:	68fb      	ldr	r3, [r7, #12]
}
 8015958:	bf00      	nop
 801595a:	3714      	adds	r7, #20
 801595c:	46bd      	mov	sp, r7
 801595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015962:	4770      	bx	lr
 8015964:	40021000 	.word	0x40021000

08015968 <LL_APB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8015968:	b480      	push	{r7}
 801596a:	b083      	sub	sp, #12
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8015970:	4b06      	ldr	r3, [pc, #24]	@ (801598c <LL_APB2_GRP1_DisableClock+0x24>)
 8015972:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	43db      	mvns	r3, r3
 8015978:	4904      	ldr	r1, [pc, #16]	@ (801598c <LL_APB2_GRP1_DisableClock+0x24>)
 801597a:	4013      	ands	r3, r2
 801597c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 801597e:	bf00      	nop
 8015980:	370c      	adds	r7, #12
 8015982:	46bd      	mov	sp, r7
 8015984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015988:	4770      	bx	lr
 801598a:	bf00      	nop
 801598c:	40021000 	.word	0x40021000

08015990 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8015990:	b480      	push	{r7}
 8015992:	b083      	sub	sp, #12
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	f043 0201 	orr.w	r2, r3, #1
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	601a      	str	r2, [r3, #0]
}
 80159a4:	bf00      	nop
 80159a6:	370c      	adds	r7, #12
 80159a8:	46bd      	mov	sp, r7
 80159aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ae:	4770      	bx	lr

080159b0 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 80159b0:	b480      	push	{r7}
 80159b2:	b083      	sub	sp, #12
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
 80159b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80159c2:	683b      	ldr	r3, [r7, #0]
 80159c4:	431a      	orrs	r2, r3
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	601a      	str	r2, [r3, #0]
}
 80159ca:	bf00      	nop
 80159cc:	370c      	adds	r7, #12
 80159ce:	46bd      	mov	sp, r7
 80159d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d4:	4770      	bx	lr

080159d6 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80159d6:	b480      	push	{r7}
 80159d8:	b083      	sub	sp, #12
 80159da:	af00      	add	r7, sp, #0
 80159dc:	6078      	str	r0, [r7, #4]
 80159de:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	683a      	ldr	r2, [r7, #0]
 80159e4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80159e6:	bf00      	nop
 80159e8:	370c      	adds	r7, #12
 80159ea:	46bd      	mov	sp, r7
 80159ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f0:	4770      	bx	lr

080159f2 <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 80159f2:	b480      	push	{r7}
 80159f4:	b083      	sub	sp, #12
 80159f6:	af00      	add	r7, sp, #0
 80159f8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 80159fe:	4618      	mov	r0, r3
 8015a00:	370c      	adds	r7, #12
 8015a02:	46bd      	mov	sp, r7
 8015a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a08:	4770      	bx	lr

08015a0a <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8015a0a:	b480      	push	{r7}
 8015a0c:	b083      	sub	sp, #12
 8015a0e:	af00      	add	r7, sp, #0
 8015a10:	6078      	str	r0, [r7, #4]
 8015a12:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	683a      	ldr	r2, [r7, #0]
 8015a18:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8015a1a:	bf00      	nop
 8015a1c:	370c      	adds	r7, #12
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a24:	4770      	bx	lr
	...

08015a28 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PULSE_ON_COMPARE   (for channel 3 or channel 4 only)
  *         @arg @ref LL_TIM_OCMODE_DIRECTION_OUTPUT   (for channel 3 or channel 4 only)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8015a28:	b480      	push	{r7}
 8015a2a:	b087      	sub	sp, #28
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	60f8      	str	r0, [r7, #12]
 8015a30:	60b9      	str	r1, [r7, #8]
 8015a32:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8015a34:	68bb      	ldr	r3, [r7, #8]
 8015a36:	2b01      	cmp	r3, #1
 8015a38:	d02e      	beq.n	8015a98 <LL_TIM_OC_SetMode+0x70>
 8015a3a:	68bb      	ldr	r3, [r7, #8]
 8015a3c:	2b04      	cmp	r3, #4
 8015a3e:	d029      	beq.n	8015a94 <LL_TIM_OC_SetMode+0x6c>
 8015a40:	68bb      	ldr	r3, [r7, #8]
 8015a42:	2b10      	cmp	r3, #16
 8015a44:	d024      	beq.n	8015a90 <LL_TIM_OC_SetMode+0x68>
 8015a46:	68bb      	ldr	r3, [r7, #8]
 8015a48:	2b40      	cmp	r3, #64	@ 0x40
 8015a4a:	d01f      	beq.n	8015a8c <LL_TIM_OC_SetMode+0x64>
 8015a4c:	68bb      	ldr	r3, [r7, #8]
 8015a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015a52:	d019      	beq.n	8015a88 <LL_TIM_OC_SetMode+0x60>
 8015a54:	68bb      	ldr	r3, [r7, #8]
 8015a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015a5a:	d013      	beq.n	8015a84 <LL_TIM_OC_SetMode+0x5c>
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015a62:	d00d      	beq.n	8015a80 <LL_TIM_OC_SetMode+0x58>
 8015a64:	68bb      	ldr	r3, [r7, #8]
 8015a66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015a6a:	d007      	beq.n	8015a7c <LL_TIM_OC_SetMode+0x54>
 8015a6c:	68bb      	ldr	r3, [r7, #8]
 8015a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015a72:	d101      	bne.n	8015a78 <LL_TIM_OC_SetMode+0x50>
 8015a74:	2308      	movs	r3, #8
 8015a76:	e010      	b.n	8015a9a <LL_TIM_OC_SetMode+0x72>
 8015a78:	2309      	movs	r3, #9
 8015a7a:	e00e      	b.n	8015a9a <LL_TIM_OC_SetMode+0x72>
 8015a7c:	2307      	movs	r3, #7
 8015a7e:	e00c      	b.n	8015a9a <LL_TIM_OC_SetMode+0x72>
 8015a80:	2306      	movs	r3, #6
 8015a82:	e00a      	b.n	8015a9a <LL_TIM_OC_SetMode+0x72>
 8015a84:	2305      	movs	r3, #5
 8015a86:	e008      	b.n	8015a9a <LL_TIM_OC_SetMode+0x72>
 8015a88:	2304      	movs	r3, #4
 8015a8a:	e006      	b.n	8015a9a <LL_TIM_OC_SetMode+0x72>
 8015a8c:	2303      	movs	r3, #3
 8015a8e:	e004      	b.n	8015a9a <LL_TIM_OC_SetMode+0x72>
 8015a90:	2302      	movs	r3, #2
 8015a92:	e002      	b.n	8015a9a <LL_TIM_OC_SetMode+0x72>
 8015a94:	2301      	movs	r3, #1
 8015a96:	e000      	b.n	8015a9a <LL_TIM_OC_SetMode+0x72>
 8015a98:	2300      	movs	r3, #0
 8015a9a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	3318      	adds	r3, #24
 8015aa0:	4619      	mov	r1, r3
 8015aa2:	7dfb      	ldrb	r3, [r7, #23]
 8015aa4:	4a0e      	ldr	r2, [pc, #56]	@ (8015ae0 <LL_TIM_OC_SetMode+0xb8>)
 8015aa6:	5cd3      	ldrb	r3, [r2, r3]
 8015aa8:	440b      	add	r3, r1
 8015aaa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8015aac:	693b      	ldr	r3, [r7, #16]
 8015aae:	681a      	ldr	r2, [r3, #0]
 8015ab0:	7dfb      	ldrb	r3, [r7, #23]
 8015ab2:	490c      	ldr	r1, [pc, #48]	@ (8015ae4 <LL_TIM_OC_SetMode+0xbc>)
 8015ab4:	5ccb      	ldrb	r3, [r1, r3]
 8015ab6:	4619      	mov	r1, r3
 8015ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8015ae8 <LL_TIM_OC_SetMode+0xc0>)
 8015aba:	408b      	lsls	r3, r1
 8015abc:	43db      	mvns	r3, r3
 8015abe:	401a      	ands	r2, r3
 8015ac0:	7dfb      	ldrb	r3, [r7, #23]
 8015ac2:	4908      	ldr	r1, [pc, #32]	@ (8015ae4 <LL_TIM_OC_SetMode+0xbc>)
 8015ac4:	5ccb      	ldrb	r3, [r1, r3]
 8015ac6:	4619      	mov	r1, r3
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	408b      	lsls	r3, r1
 8015acc:	431a      	orrs	r2, r3
 8015ace:	693b      	ldr	r3, [r7, #16]
 8015ad0:	601a      	str	r2, [r3, #0]
}
 8015ad2:	bf00      	nop
 8015ad4:	371c      	adds	r7, #28
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015adc:	4770      	bx	lr
 8015ade:	bf00      	nop
 8015ae0:	0801aabc 	.word	0x0801aabc
 8015ae4:	0801aac8 	.word	0x0801aac8
 8015ae8:	00010073 	.word	0x00010073

08015aec <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 8015aec:	b480      	push	{r7}
 8015aee:	b087      	sub	sp, #28
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	60f8      	str	r0, [r7, #12]
 8015af4:	60b9      	str	r1, [r7, #8]
 8015af6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8015af8:	68bb      	ldr	r3, [r7, #8]
 8015afa:	2b01      	cmp	r3, #1
 8015afc:	d02e      	beq.n	8015b5c <LL_TIM_OC_SetPolarity+0x70>
 8015afe:	68bb      	ldr	r3, [r7, #8]
 8015b00:	2b04      	cmp	r3, #4
 8015b02:	d029      	beq.n	8015b58 <LL_TIM_OC_SetPolarity+0x6c>
 8015b04:	68bb      	ldr	r3, [r7, #8]
 8015b06:	2b10      	cmp	r3, #16
 8015b08:	d024      	beq.n	8015b54 <LL_TIM_OC_SetPolarity+0x68>
 8015b0a:	68bb      	ldr	r3, [r7, #8]
 8015b0c:	2b40      	cmp	r3, #64	@ 0x40
 8015b0e:	d01f      	beq.n	8015b50 <LL_TIM_OC_SetPolarity+0x64>
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015b16:	d019      	beq.n	8015b4c <LL_TIM_OC_SetPolarity+0x60>
 8015b18:	68bb      	ldr	r3, [r7, #8]
 8015b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015b1e:	d013      	beq.n	8015b48 <LL_TIM_OC_SetPolarity+0x5c>
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015b26:	d00d      	beq.n	8015b44 <LL_TIM_OC_SetPolarity+0x58>
 8015b28:	68bb      	ldr	r3, [r7, #8]
 8015b2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015b2e:	d007      	beq.n	8015b40 <LL_TIM_OC_SetPolarity+0x54>
 8015b30:	68bb      	ldr	r3, [r7, #8]
 8015b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015b36:	d101      	bne.n	8015b3c <LL_TIM_OC_SetPolarity+0x50>
 8015b38:	2308      	movs	r3, #8
 8015b3a:	e010      	b.n	8015b5e <LL_TIM_OC_SetPolarity+0x72>
 8015b3c:	2309      	movs	r3, #9
 8015b3e:	e00e      	b.n	8015b5e <LL_TIM_OC_SetPolarity+0x72>
 8015b40:	2307      	movs	r3, #7
 8015b42:	e00c      	b.n	8015b5e <LL_TIM_OC_SetPolarity+0x72>
 8015b44:	2306      	movs	r3, #6
 8015b46:	e00a      	b.n	8015b5e <LL_TIM_OC_SetPolarity+0x72>
 8015b48:	2305      	movs	r3, #5
 8015b4a:	e008      	b.n	8015b5e <LL_TIM_OC_SetPolarity+0x72>
 8015b4c:	2304      	movs	r3, #4
 8015b4e:	e006      	b.n	8015b5e <LL_TIM_OC_SetPolarity+0x72>
 8015b50:	2303      	movs	r3, #3
 8015b52:	e004      	b.n	8015b5e <LL_TIM_OC_SetPolarity+0x72>
 8015b54:	2302      	movs	r3, #2
 8015b56:	e002      	b.n	8015b5e <LL_TIM_OC_SetPolarity+0x72>
 8015b58:	2301      	movs	r3, #1
 8015b5a:	e000      	b.n	8015b5e <LL_TIM_OC_SetPolarity+0x72>
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	6a1a      	ldr	r2, [r3, #32]
 8015b64:	7dfb      	ldrb	r3, [r7, #23]
 8015b66:	490b      	ldr	r1, [pc, #44]	@ (8015b94 <LL_TIM_OC_SetPolarity+0xa8>)
 8015b68:	5ccb      	ldrb	r3, [r1, r3]
 8015b6a:	4619      	mov	r1, r3
 8015b6c:	2302      	movs	r3, #2
 8015b6e:	408b      	lsls	r3, r1
 8015b70:	43db      	mvns	r3, r3
 8015b72:	401a      	ands	r2, r3
 8015b74:	7dfb      	ldrb	r3, [r7, #23]
 8015b76:	4907      	ldr	r1, [pc, #28]	@ (8015b94 <LL_TIM_OC_SetPolarity+0xa8>)
 8015b78:	5ccb      	ldrb	r3, [r1, r3]
 8015b7a:	4619      	mov	r1, r3
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	408b      	lsls	r3, r1
 8015b80:	431a      	orrs	r2, r3
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	621a      	str	r2, [r3, #32]
}
 8015b86:	bf00      	nop
 8015b88:	371c      	adds	r7, #28
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b90:	4770      	bx	lr
 8015b92:	bf00      	nop
 8015b94:	0801aad4 	.word	0x0801aad4

08015b98 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8015b98:	b480      	push	{r7}
 8015b9a:	b083      	sub	sp, #12
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	6078      	str	r0, [r7, #4]
 8015ba0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	683a      	ldr	r2, [r7, #0]
 8015ba6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8015ba8:	bf00      	nop
 8015baa:	370c      	adds	r7, #12
 8015bac:	46bd      	mov	sp, r7
 8015bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb2:	4770      	bx	lr

08015bb4 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8015bb4:	b480      	push	{r7}
 8015bb6:	b083      	sub	sp, #12
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
 8015bbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	683a      	ldr	r2, [r7, #0]
 8015bc2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8015bc4:	bf00      	nop
 8015bc6:	370c      	adds	r7, #12
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bce:	4770      	bx	lr

08015bd0 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8015bd0:	b480      	push	{r7}
 8015bd2:	b083      	sub	sp, #12
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
 8015bd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	683a      	ldr	r2, [r7, #0]
 8015bde:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8015be0:	bf00      	nop
 8015be2:	370c      	adds	r7, #12
 8015be4:	46bd      	mov	sp, r7
 8015be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bea:	4770      	bx	lr

08015bec <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8015bec:	b480      	push	{r7}
 8015bee:	b083      	sub	sp, #12
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
 8015bf4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	683a      	ldr	r2, [r7, #0]
 8015bfa:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8015bfc:	bf00      	nop
 8015bfe:	370c      	adds	r7, #12
 8015c00:	46bd      	mov	sp, r7
 8015c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c06:	4770      	bx	lr

08015c08 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8015c08:	b480      	push	{r7}
 8015c0a:	b083      	sub	sp, #12
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	f06f 0202 	mvn.w	r2, #2
 8015c16:	611a      	str	r2, [r3, #16]
}
 8015c18:	bf00      	nop
 8015c1a:	370c      	adds	r7, #12
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c22:	4770      	bx	lr

08015c24 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 8015c24:	b480      	push	{r7}
 8015c26:	b083      	sub	sp, #12
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	691b      	ldr	r3, [r3, #16]
 8015c30:	f003 0302 	and.w	r3, r3, #2
 8015c34:	2b02      	cmp	r3, #2
 8015c36:	d101      	bne.n	8015c3c <LL_TIM_IsActiveFlag_CC1+0x18>
 8015c38:	2301      	movs	r3, #1
 8015c3a:	e000      	b.n	8015c3e <LL_TIM_IsActiveFlag_CC1+0x1a>
 8015c3c:	2300      	movs	r3, #0
}
 8015c3e:	4618      	mov	r0, r3
 8015c40:	370c      	adds	r7, #12
 8015c42:	46bd      	mov	sp, r7
 8015c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c48:	4770      	bx	lr

08015c4a <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 8015c4a:	b480      	push	{r7}
 8015c4c:	b083      	sub	sp, #12
 8015c4e:	af00      	add	r7, sp, #0
 8015c50:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	f06f 0204 	mvn.w	r2, #4
 8015c58:	611a      	str	r2, [r3, #16]
}
 8015c5a:	bf00      	nop
 8015c5c:	370c      	adds	r7, #12
 8015c5e:	46bd      	mov	sp, r7
 8015c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c64:	4770      	bx	lr

08015c66 <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 8015c66:	b480      	push	{r7}
 8015c68:	b083      	sub	sp, #12
 8015c6a:	af00      	add	r7, sp, #0
 8015c6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	691b      	ldr	r3, [r3, #16]
 8015c72:	f003 0304 	and.w	r3, r3, #4
 8015c76:	2b04      	cmp	r3, #4
 8015c78:	d101      	bne.n	8015c7e <LL_TIM_IsActiveFlag_CC2+0x18>
 8015c7a:	2301      	movs	r3, #1
 8015c7c:	e000      	b.n	8015c80 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8015c7e:	2300      	movs	r3, #0
}
 8015c80:	4618      	mov	r0, r3
 8015c82:	370c      	adds	r7, #12
 8015c84:	46bd      	mov	sp, r7
 8015c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8a:	4770      	bx	lr

08015c8c <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 8015c8c:	b480      	push	{r7}
 8015c8e:	b083      	sub	sp, #12
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	f06f 0208 	mvn.w	r2, #8
 8015c9a:	611a      	str	r2, [r3, #16]
}
 8015c9c:	bf00      	nop
 8015c9e:	370c      	adds	r7, #12
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca6:	4770      	bx	lr

08015ca8 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 8015ca8:	b480      	push	{r7}
 8015caa:	b083      	sub	sp, #12
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	691b      	ldr	r3, [r3, #16]
 8015cb4:	f003 0308 	and.w	r3, r3, #8
 8015cb8:	2b08      	cmp	r3, #8
 8015cba:	d101      	bne.n	8015cc0 <LL_TIM_IsActiveFlag_CC3+0x18>
 8015cbc:	2301      	movs	r3, #1
 8015cbe:	e000      	b.n	8015cc2 <LL_TIM_IsActiveFlag_CC3+0x1a>
 8015cc0:	2300      	movs	r3, #0
}
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	370c      	adds	r7, #12
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ccc:	4770      	bx	lr

08015cce <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 8015cce:	b480      	push	{r7}
 8015cd0:	b083      	sub	sp, #12
 8015cd2:	af00      	add	r7, sp, #0
 8015cd4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	f06f 0210 	mvn.w	r2, #16
 8015cdc:	611a      	str	r2, [r3, #16]
}
 8015cde:	bf00      	nop
 8015ce0:	370c      	adds	r7, #12
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce8:	4770      	bx	lr

08015cea <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 8015cea:	b480      	push	{r7}
 8015cec:	b083      	sub	sp, #12
 8015cee:	af00      	add	r7, sp, #0
 8015cf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	691b      	ldr	r3, [r3, #16]
 8015cf6:	f003 0310 	and.w	r3, r3, #16
 8015cfa:	2b10      	cmp	r3, #16
 8015cfc:	d101      	bne.n	8015d02 <LL_TIM_IsActiveFlag_CC4+0x18>
 8015cfe:	2301      	movs	r3, #1
 8015d00:	e000      	b.n	8015d04 <LL_TIM_IsActiveFlag_CC4+0x1a>
 8015d02:	2300      	movs	r3, #0
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	370c      	adds	r7, #12
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0e:	4770      	bx	lr

08015d10 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 8015d10:	b598      	push	{r3, r4, r7, lr}
 8015d12:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 8015d14:	4b3d      	ldr	r3, [pc, #244]	@ (8015e0c <USBPD_TIM_Init+0xfc>)
 8015d16:	f993 3000 	ldrsb.w	r3, [r3]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d16a      	bne.n	8015df4 <USBPD_TIM_Init+0xe4>
  {
    TIMX_CLK_ENABLE;
 8015d1e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8015d22:	f7ff fe09 	bl	8015938 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 8015d26:	2100      	movs	r1, #0
 8015d28:	4839      	ldr	r0, [pc, #228]	@ (8015e10 <USBPD_TIM_Init+0x100>)
 8015d2a:	f7ff fe41 	bl	80159b0 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 8015d2e:	4b39      	ldr	r3, [pc, #228]	@ (8015e14 <USBPD_TIM_Init+0x104>)
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	4a39      	ldr	r2, [pc, #228]	@ (8015e18 <USBPD_TIM_Init+0x108>)
 8015d34:	4293      	cmp	r3, r2
 8015d36:	d90b      	bls.n	8015d50 <USBPD_TIM_Init+0x40>
 8015d38:	4b36      	ldr	r3, [pc, #216]	@ (8015e14 <USBPD_TIM_Init+0x104>)
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	f503 23f4 	add.w	r3, r3, #499712	@ 0x7a000
 8015d40:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8015d44:	4a35      	ldr	r2, [pc, #212]	@ (8015e1c <USBPD_TIM_Init+0x10c>)
 8015d46:	fba2 2303 	umull	r2, r3, r2, r3
 8015d4a:	0c9b      	lsrs	r3, r3, #18
 8015d4c:	3b01      	subs	r3, #1
 8015d4e:	e000      	b.n	8015d52 <USBPD_TIM_Init+0x42>
 8015d50:	2300      	movs	r3, #0
 8015d52:	4619      	mov	r1, r3
 8015d54:	482e      	ldr	r0, [pc, #184]	@ (8015e10 <USBPD_TIM_Init+0x100>)
 8015d56:	f7ff fe3e 	bl	80159d6 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 8015d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8015e14 <USBPD_TIM_Init+0x104>)
 8015d5c:	681c      	ldr	r4, [r3, #0]
 8015d5e:	482c      	ldr	r0, [pc, #176]	@ (8015e10 <USBPD_TIM_Init+0x100>)
 8015d60:	f7ff fe47 	bl	80159f2 <LL_TIM_GetPrescaler>
 8015d64:	4603      	mov	r3, r0
 8015d66:	3301      	adds	r3, #1
 8015d68:	fbb4 f3f3 	udiv	r3, r4, r3
 8015d6c:	2b63      	cmp	r3, #99	@ 0x63
 8015d6e:	d90d      	bls.n	8015d8c <USBPD_TIM_Init+0x7c>
 8015d70:	4b28      	ldr	r3, [pc, #160]	@ (8015e14 <USBPD_TIM_Init+0x104>)
 8015d72:	681c      	ldr	r4, [r3, #0]
 8015d74:	4826      	ldr	r0, [pc, #152]	@ (8015e10 <USBPD_TIM_Init+0x100>)
 8015d76:	f7ff fe3c 	bl	80159f2 <LL_TIM_GetPrescaler>
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	3301      	adds	r3, #1
 8015d7e:	2264      	movs	r2, #100	@ 0x64
 8015d80:	fb02 f303 	mul.w	r3, r2, r3
 8015d84:	fbb4 f3f3 	udiv	r3, r4, r3
 8015d88:	3b01      	subs	r3, #1
 8015d8a:	e000      	b.n	8015d8e <USBPD_TIM_Init+0x7e>
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	4619      	mov	r1, r3
 8015d90:	481f      	ldr	r0, [pc, #124]	@ (8015e10 <USBPD_TIM_Init+0x100>)
 8015d92:	f7ff fe3a 	bl	8015a0a <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 8015d96:	2230      	movs	r2, #48	@ 0x30
 8015d98:	2101      	movs	r1, #1
 8015d9a:	481d      	ldr	r0, [pc, #116]	@ (8015e10 <USBPD_TIM_Init+0x100>)
 8015d9c:	f7ff fe44 	bl	8015a28 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 8015da0:	2230      	movs	r2, #48	@ 0x30
 8015da2:	2110      	movs	r1, #16
 8015da4:	481a      	ldr	r0, [pc, #104]	@ (8015e10 <USBPD_TIM_Init+0x100>)
 8015da6:	f7ff fe3f 	bl	8015a28 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 8015daa:	2230      	movs	r2, #48	@ 0x30
 8015dac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015db0:	4817      	ldr	r0, [pc, #92]	@ (8015e10 <USBPD_TIM_Init+0x100>)
 8015db2:	f7ff fe39 	bl	8015a28 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 8015db6:	2230      	movs	r2, #48	@ 0x30
 8015db8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8015dbc:	4814      	ldr	r0, [pc, #80]	@ (8015e10 <USBPD_TIM_Init+0x100>)
 8015dbe:	f7ff fe33 	bl	8015a28 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	2101      	movs	r1, #1
 8015dc6:	4812      	ldr	r0, [pc, #72]	@ (8015e10 <USBPD_TIM_Init+0x100>)
 8015dc8:	f7ff fe90 	bl	8015aec <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 8015dcc:	2200      	movs	r2, #0
 8015dce:	2110      	movs	r1, #16
 8015dd0:	480f      	ldr	r0, [pc, #60]	@ (8015e10 <USBPD_TIM_Init+0x100>)
 8015dd2:	f7ff fe8b 	bl	8015aec <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015ddc:	480c      	ldr	r0, [pc, #48]	@ (8015e10 <USBPD_TIM_Init+0x100>)
 8015dde:	f7ff fe85 	bl	8015aec <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 8015de2:	2200      	movs	r2, #0
 8015de4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8015de8:	4809      	ldr	r0, [pc, #36]	@ (8015e10 <USBPD_TIM_Init+0x100>)
 8015dea:	f7ff fe7f 	bl	8015aec <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 8015dee:	4808      	ldr	r0, [pc, #32]	@ (8015e10 <USBPD_TIM_Init+0x100>)
 8015df0:	f7ff fdce 	bl	8015990 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 8015df4:	4b05      	ldr	r3, [pc, #20]	@ (8015e0c <USBPD_TIM_Init+0xfc>)
 8015df6:	f993 3000 	ldrsb.w	r3, [r3]
 8015dfa:	b2db      	uxtb	r3, r3
 8015dfc:	3301      	adds	r3, #1
 8015dfe:	b2db      	uxtb	r3, r3
 8015e00:	b25a      	sxtb	r2, r3
 8015e02:	4b02      	ldr	r3, [pc, #8]	@ (8015e0c <USBPD_TIM_Init+0xfc>)
 8015e04:	701a      	strb	r2, [r3, #0]
}
 8015e06:	bf00      	nop
 8015e08:	bd98      	pop	{r3, r4, r7, pc}
 8015e0a:	bf00      	nop
 8015e0c:	20000750 	.word	0x20000750
 8015e10:	40012c00 	.word	0x40012c00
 8015e14:	20000004 	.word	0x20000004
 8015e18:	000f423f 	.word	0x000f423f
 8015e1c:	431bde83 	.word	0x431bde83

08015e20 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	af00      	add	r7, sp, #0
  timer_initcounter--;
 8015e24:	4b09      	ldr	r3, [pc, #36]	@ (8015e4c <USBPD_TIM_DeInit+0x2c>)
 8015e26:	f993 3000 	ldrsb.w	r3, [r3]
 8015e2a:	b2db      	uxtb	r3, r3
 8015e2c:	3b01      	subs	r3, #1
 8015e2e:	b2db      	uxtb	r3, r3
 8015e30:	b25a      	sxtb	r2, r3
 8015e32:	4b06      	ldr	r3, [pc, #24]	@ (8015e4c <USBPD_TIM_DeInit+0x2c>)
 8015e34:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 8015e36:	4b05      	ldr	r3, [pc, #20]	@ (8015e4c <USBPD_TIM_DeInit+0x2c>)
 8015e38:	f993 3000 	ldrsb.w	r3, [r3]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d103      	bne.n	8015e48 <USBPD_TIM_DeInit+0x28>
  {
    TIMX_CLK_DISABLE;
 8015e40:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8015e44:	f7ff fd90 	bl	8015968 <LL_APB2_GRP1_DisableClock>
  }
}
 8015e48:	bf00      	nop
 8015e4a:	bd80      	pop	{r7, pc}
 8015e4c:	20000750 	.word	0x20000750

08015e50 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b082      	sub	sp, #8
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	4603      	mov	r3, r0
 8015e58:	6039      	str	r1, [r7, #0]
 8015e5a:	71fb      	strb	r3, [r7, #7]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 8015e5c:	79fb      	ldrb	r3, [r7, #7]
 8015e5e:	2b03      	cmp	r3, #3
 8015e60:	d85e      	bhi.n	8015f20 <USBPD_TIM_Start+0xd0>
 8015e62:	a201      	add	r2, pc, #4	@ (adr r2, 8015e68 <USBPD_TIM_Start+0x18>)
 8015e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e68:	08015e79 	.word	0x08015e79
 8015e6c:	08015ea3 	.word	0x08015ea3
 8015e70:	08015ecd 	.word	0x08015ecd
 8015e74:	08015ef7 	.word	0x08015ef7
  {
    case TIM_PORT0_CRC:
      TIMX_CHANNEL1_SETEVENT;
 8015e78:	4b2c      	ldr	r3, [pc, #176]	@ (8015f2c <USBPD_TIM_Start+0xdc>)
 8015e7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	441a      	add	r2, r3
 8015e80:	4b2b      	ldr	r3, [pc, #172]	@ (8015f30 <USBPD_TIM_Start+0xe0>)
 8015e82:	fba3 1302 	umull	r1, r3, r3, r2
 8015e86:	0b5b      	lsrs	r3, r3, #13
 8015e88:	f242 7110 	movw	r1, #10000	@ 0x2710
 8015e8c:	fb01 f303 	mul.w	r3, r1, r3
 8015e90:	1ad3      	subs	r3, r2, r3
 8015e92:	4619      	mov	r1, r3
 8015e94:	4825      	ldr	r0, [pc, #148]	@ (8015f2c <USBPD_TIM_Start+0xdc>)
 8015e96:	f7ff fe7f 	bl	8015b98 <LL_TIM_OC_SetCompareCH1>
 8015e9a:	4824      	ldr	r0, [pc, #144]	@ (8015f2c <USBPD_TIM_Start+0xdc>)
 8015e9c:	f7ff feb4 	bl	8015c08 <LL_TIM_ClearFlag_CC1>
      break;
 8015ea0:	e03f      	b.n	8015f22 <USBPD_TIM_Start+0xd2>
    case TIM_PORT0_RETRY:
      TIMX_CHANNEL2_SETEVENT;
 8015ea2:	4b22      	ldr	r3, [pc, #136]	@ (8015f2c <USBPD_TIM_Start+0xdc>)
 8015ea4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015ea6:	683b      	ldr	r3, [r7, #0]
 8015ea8:	441a      	add	r2, r3
 8015eaa:	4b21      	ldr	r3, [pc, #132]	@ (8015f30 <USBPD_TIM_Start+0xe0>)
 8015eac:	fba3 1302 	umull	r1, r3, r3, r2
 8015eb0:	0b5b      	lsrs	r3, r3, #13
 8015eb2:	f242 7110 	movw	r1, #10000	@ 0x2710
 8015eb6:	fb01 f303 	mul.w	r3, r1, r3
 8015eba:	1ad3      	subs	r3, r2, r3
 8015ebc:	4619      	mov	r1, r3
 8015ebe:	481b      	ldr	r0, [pc, #108]	@ (8015f2c <USBPD_TIM_Start+0xdc>)
 8015ec0:	f7ff fe78 	bl	8015bb4 <LL_TIM_OC_SetCompareCH2>
 8015ec4:	4819      	ldr	r0, [pc, #100]	@ (8015f2c <USBPD_TIM_Start+0xdc>)
 8015ec6:	f7ff fec0 	bl	8015c4a <LL_TIM_ClearFlag_CC2>
      break;
 8015eca:	e02a      	b.n	8015f22 <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_CRC:
      TIMX_CHANNEL3_SETEVENT;
 8015ecc:	4b17      	ldr	r3, [pc, #92]	@ (8015f2c <USBPD_TIM_Start+0xdc>)
 8015ece:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	441a      	add	r2, r3
 8015ed4:	4b16      	ldr	r3, [pc, #88]	@ (8015f30 <USBPD_TIM_Start+0xe0>)
 8015ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8015eda:	0b5b      	lsrs	r3, r3, #13
 8015edc:	f242 7110 	movw	r1, #10000	@ 0x2710
 8015ee0:	fb01 f303 	mul.w	r3, r1, r3
 8015ee4:	1ad3      	subs	r3, r2, r3
 8015ee6:	4619      	mov	r1, r3
 8015ee8:	4810      	ldr	r0, [pc, #64]	@ (8015f2c <USBPD_TIM_Start+0xdc>)
 8015eea:	f7ff fe71 	bl	8015bd0 <LL_TIM_OC_SetCompareCH3>
 8015eee:	480f      	ldr	r0, [pc, #60]	@ (8015f2c <USBPD_TIM_Start+0xdc>)
 8015ef0:	f7ff fecc 	bl	8015c8c <LL_TIM_ClearFlag_CC3>
      break;
 8015ef4:	e015      	b.n	8015f22 <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
 8015ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8015f2c <USBPD_TIM_Start+0xdc>)
 8015ef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	441a      	add	r2, r3
 8015efe:	4b0c      	ldr	r3, [pc, #48]	@ (8015f30 <USBPD_TIM_Start+0xe0>)
 8015f00:	fba3 1302 	umull	r1, r3, r3, r2
 8015f04:	0b5b      	lsrs	r3, r3, #13
 8015f06:	f242 7110 	movw	r1, #10000	@ 0x2710
 8015f0a:	fb01 f303 	mul.w	r3, r1, r3
 8015f0e:	1ad3      	subs	r3, r2, r3
 8015f10:	4619      	mov	r1, r3
 8015f12:	4806      	ldr	r0, [pc, #24]	@ (8015f2c <USBPD_TIM_Start+0xdc>)
 8015f14:	f7ff fe6a 	bl	8015bec <LL_TIM_OC_SetCompareCH4>
 8015f18:	4804      	ldr	r0, [pc, #16]	@ (8015f2c <USBPD_TIM_Start+0xdc>)
 8015f1a:	f7ff fed8 	bl	8015cce <LL_TIM_ClearFlag_CC4>
      break;
 8015f1e:	e000      	b.n	8015f22 <USBPD_TIM_Start+0xd2>
    default:
      break;
 8015f20:	bf00      	nop
  }
}
 8015f22:	bf00      	nop
 8015f24:	3708      	adds	r7, #8
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bd80      	pop	{r7, pc}
 8015f2a:	bf00      	nop
 8015f2c:	40012c00 	.word	0x40012c00
 8015f30:	d1b71759 	.word	0xd1b71759

08015f34 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b084      	sub	sp, #16
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	71fb      	strb	r3, [r7, #7]
  uint32_t _expired = 1u;
 8015f3e:	2301      	movs	r3, #1
 8015f40:	60fb      	str	r3, [r7, #12]
  switch (Id)
 8015f42:	79fb      	ldrb	r3, [r7, #7]
 8015f44:	2b03      	cmp	r3, #3
 8015f46:	d81f      	bhi.n	8015f88 <USBPD_TIM_IsExpired+0x54>
 8015f48:	a201      	add	r2, pc, #4	@ (adr r2, 8015f50 <USBPD_TIM_IsExpired+0x1c>)
 8015f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f4e:	bf00      	nop
 8015f50:	08015f61 	.word	0x08015f61
 8015f54:	08015f6b 	.word	0x08015f6b
 8015f58:	08015f75 	.word	0x08015f75
 8015f5c:	08015f7f 	.word	0x08015f7f
  {
    case TIM_PORT0_CRC:
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8015f60:	480c      	ldr	r0, [pc, #48]	@ (8015f94 <USBPD_TIM_IsExpired+0x60>)
 8015f62:	f7ff fe5f 	bl	8015c24 <LL_TIM_IsActiveFlag_CC1>
 8015f66:	60f8      	str	r0, [r7, #12]
      break;
 8015f68:	e00f      	b.n	8015f8a <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT0_RETRY:
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 8015f6a:	480a      	ldr	r0, [pc, #40]	@ (8015f94 <USBPD_TIM_IsExpired+0x60>)
 8015f6c:	f7ff fe7b 	bl	8015c66 <LL_TIM_IsActiveFlag_CC2>
 8015f70:	60f8      	str	r0, [r7, #12]
      break;
 8015f72:	e00a      	b.n	8015f8a <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_CRC:
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 8015f74:	4807      	ldr	r0, [pc, #28]	@ (8015f94 <USBPD_TIM_IsExpired+0x60>)
 8015f76:	f7ff fe97 	bl	8015ca8 <LL_TIM_IsActiveFlag_CC3>
 8015f7a:	60f8      	str	r0, [r7, #12]
      break;
 8015f7c:	e005      	b.n	8015f8a <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 8015f7e:	4805      	ldr	r0, [pc, #20]	@ (8015f94 <USBPD_TIM_IsExpired+0x60>)
 8015f80:	f7ff feb3 	bl	8015cea <LL_TIM_IsActiveFlag_CC4>
 8015f84:	60f8      	str	r0, [r7, #12]
      break;
 8015f86:	e000      	b.n	8015f8a <USBPD_TIM_IsExpired+0x56>
    default:
      break;
 8015f88:	bf00      	nop
  }
  return _expired;
 8015f8a:	68fb      	ldr	r3, [r7, #12]
}
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	3710      	adds	r7, #16
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bd80      	pop	{r7, pc}
 8015f94:	40012c00 	.word	0x40012c00

08015f98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b084      	sub	sp, #16
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
 8015fa0:	460b      	mov	r3, r1
 8015fa2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015fa4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8015fa8:	f002 fc50 	bl	801884c <USBD_static_malloc>
 8015fac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d105      	bne.n	8015fc0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8015fbc:	2302      	movs	r3, #2
 8015fbe:	e066      	b.n	801608e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	68fa      	ldr	r2, [r7, #12]
 8015fc4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	7c1b      	ldrb	r3, [r3, #16]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d119      	bne.n	8016004 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8015fd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015fd4:	2202      	movs	r2, #2
 8015fd6:	2181      	movs	r1, #129	@ 0x81
 8015fd8:	6878      	ldr	r0, [r7, #4]
 8015fda:	f002 fade 	bl	801859a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	2201      	movs	r2, #1
 8015fe2:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015fe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015fe8:	2202      	movs	r2, #2
 8015fea:	2101      	movs	r1, #1
 8015fec:	6878      	ldr	r0, [r7, #4]
 8015fee:	f002 fad4 	bl	801859a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	2201      	movs	r2, #1
 8015ff6:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	2210      	movs	r2, #16
 8015ffe:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8016002:	e016      	b.n	8016032 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8016004:	2340      	movs	r3, #64	@ 0x40
 8016006:	2202      	movs	r2, #2
 8016008:	2181      	movs	r1, #129	@ 0x81
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	f002 fac5 	bl	801859a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	2201      	movs	r2, #1
 8016014:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8016016:	2340      	movs	r3, #64	@ 0x40
 8016018:	2202      	movs	r2, #2
 801601a:	2101      	movs	r1, #1
 801601c:	6878      	ldr	r0, [r7, #4]
 801601e:	f002 fabc 	bl	801859a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	2201      	movs	r2, #1
 8016026:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	2210      	movs	r2, #16
 801602e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8016032:	2308      	movs	r3, #8
 8016034:	2203      	movs	r2, #3
 8016036:	2182      	movs	r1, #130	@ 0x82
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f002 faae 	bl	801859a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	2201      	movs	r2, #1
 8016042:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	2200      	movs	r2, #0
 8016054:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	2200      	movs	r2, #0
 801605c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	7c1b      	ldrb	r3, [r3, #16]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d109      	bne.n	801607c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801606e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016072:	2101      	movs	r1, #1
 8016074:	6878      	ldr	r0, [r7, #4]
 8016076:	f002 fb7f 	bl	8018778 <USBD_LL_PrepareReceive>
 801607a:	e007      	b.n	801608c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016082:	2340      	movs	r3, #64	@ 0x40
 8016084:	2101      	movs	r1, #1
 8016086:	6878      	ldr	r0, [r7, #4]
 8016088:	f002 fb76 	bl	8018778 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801608c:	2300      	movs	r3, #0
}
 801608e:	4618      	mov	r0, r3
 8016090:	3710      	adds	r7, #16
 8016092:	46bd      	mov	sp, r7
 8016094:	bd80      	pop	{r7, pc}

08016096 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016096:	b580      	push	{r7, lr}
 8016098:	b082      	sub	sp, #8
 801609a:	af00      	add	r7, sp, #0
 801609c:	6078      	str	r0, [r7, #4]
 801609e:	460b      	mov	r3, r1
 80160a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80160a2:	2181      	movs	r1, #129	@ 0x81
 80160a4:	6878      	ldr	r0, [r7, #4]
 80160a6:	f002 fa9e 	bl	80185e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	2200      	movs	r2, #0
 80160ae:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80160b0:	2101      	movs	r1, #1
 80160b2:	6878      	ldr	r0, [r7, #4]
 80160b4:	f002 fa97 	bl	80185e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	2200      	movs	r2, #0
 80160bc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80160c0:	2182      	movs	r1, #130	@ 0x82
 80160c2:	6878      	ldr	r0, [r7, #4]
 80160c4:	f002 fa8f 	bl	80185e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	2200      	movs	r2, #0
 80160cc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	2200      	movs	r2, #0
 80160d4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d00e      	beq.n	8016100 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80160e8:	685b      	ldr	r3, [r3, #4]
 80160ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80160f2:	4618      	mov	r0, r3
 80160f4:	f002 fbb8 	bl	8018868 <USBD_static_free>
    pdev->pClassData = NULL;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	2200      	movs	r2, #0
 80160fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8016100:	2300      	movs	r3, #0
}
 8016102:	4618      	mov	r0, r3
 8016104:	3708      	adds	r7, #8
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}
	...

0801610c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b086      	sub	sp, #24
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
 8016114:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801611c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801611e:	2300      	movs	r3, #0
 8016120:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8016122:	2300      	movs	r3, #0
 8016124:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8016126:	2300      	movs	r3, #0
 8016128:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d101      	bne.n	8016134 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8016130:	2303      	movs	r3, #3
 8016132:	e0af      	b.n	8016294 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016134:	683b      	ldr	r3, [r7, #0]
 8016136:	781b      	ldrb	r3, [r3, #0]
 8016138:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801613c:	2b00      	cmp	r3, #0
 801613e:	d03f      	beq.n	80161c0 <USBD_CDC_Setup+0xb4>
 8016140:	2b20      	cmp	r3, #32
 8016142:	f040 809f 	bne.w	8016284 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8016146:	683b      	ldr	r3, [r7, #0]
 8016148:	88db      	ldrh	r3, [r3, #6]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d02e      	beq.n	80161ac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801614e:	683b      	ldr	r3, [r7, #0]
 8016150:	781b      	ldrb	r3, [r3, #0]
 8016152:	b25b      	sxtb	r3, r3
 8016154:	2b00      	cmp	r3, #0
 8016156:	da16      	bge.n	8016186 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801615e:	689b      	ldr	r3, [r3, #8]
 8016160:	683a      	ldr	r2, [r7, #0]
 8016162:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8016164:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016166:	683a      	ldr	r2, [r7, #0]
 8016168:	88d2      	ldrh	r2, [r2, #6]
 801616a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801616c:	683b      	ldr	r3, [r7, #0]
 801616e:	88db      	ldrh	r3, [r3, #6]
 8016170:	2b07      	cmp	r3, #7
 8016172:	bf28      	it	cs
 8016174:	2307      	movcs	r3, #7
 8016176:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8016178:	693b      	ldr	r3, [r7, #16]
 801617a:	89fa      	ldrh	r2, [r7, #14]
 801617c:	4619      	mov	r1, r3
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f001 fa9d 	bl	80176be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8016184:	e085      	b.n	8016292 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8016186:	683b      	ldr	r3, [r7, #0]
 8016188:	785a      	ldrb	r2, [r3, #1]
 801618a:	693b      	ldr	r3, [r7, #16]
 801618c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8016190:	683b      	ldr	r3, [r7, #0]
 8016192:	88db      	ldrh	r3, [r3, #6]
 8016194:	b2da      	uxtb	r2, r3
 8016196:	693b      	ldr	r3, [r7, #16]
 8016198:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801619c:	6939      	ldr	r1, [r7, #16]
 801619e:	683b      	ldr	r3, [r7, #0]
 80161a0:	88db      	ldrh	r3, [r3, #6]
 80161a2:	461a      	mov	r2, r3
 80161a4:	6878      	ldr	r0, [r7, #4]
 80161a6:	f001 fab6 	bl	8017716 <USBD_CtlPrepareRx>
      break;
 80161aa:	e072      	b.n	8016292 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80161b2:	689b      	ldr	r3, [r3, #8]
 80161b4:	683a      	ldr	r2, [r7, #0]
 80161b6:	7850      	ldrb	r0, [r2, #1]
 80161b8:	2200      	movs	r2, #0
 80161ba:	6839      	ldr	r1, [r7, #0]
 80161bc:	4798      	blx	r3
      break;
 80161be:	e068      	b.n	8016292 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80161c0:	683b      	ldr	r3, [r7, #0]
 80161c2:	785b      	ldrb	r3, [r3, #1]
 80161c4:	2b0b      	cmp	r3, #11
 80161c6:	d852      	bhi.n	801626e <USBD_CDC_Setup+0x162>
 80161c8:	a201      	add	r2, pc, #4	@ (adr r2, 80161d0 <USBD_CDC_Setup+0xc4>)
 80161ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161ce:	bf00      	nop
 80161d0:	08016201 	.word	0x08016201
 80161d4:	0801627d 	.word	0x0801627d
 80161d8:	0801626f 	.word	0x0801626f
 80161dc:	0801626f 	.word	0x0801626f
 80161e0:	0801626f 	.word	0x0801626f
 80161e4:	0801626f 	.word	0x0801626f
 80161e8:	0801626f 	.word	0x0801626f
 80161ec:	0801626f 	.word	0x0801626f
 80161f0:	0801626f 	.word	0x0801626f
 80161f4:	0801626f 	.word	0x0801626f
 80161f8:	0801622b 	.word	0x0801622b
 80161fc:	08016255 	.word	0x08016255
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016206:	b2db      	uxtb	r3, r3
 8016208:	2b03      	cmp	r3, #3
 801620a:	d107      	bne.n	801621c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801620c:	f107 030a 	add.w	r3, r7, #10
 8016210:	2202      	movs	r2, #2
 8016212:	4619      	mov	r1, r3
 8016214:	6878      	ldr	r0, [r7, #4]
 8016216:	f001 fa52 	bl	80176be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801621a:	e032      	b.n	8016282 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801621c:	6839      	ldr	r1, [r7, #0]
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	f001 f9dc 	bl	80175dc <USBD_CtlError>
            ret = USBD_FAIL;
 8016224:	2303      	movs	r3, #3
 8016226:	75fb      	strb	r3, [r7, #23]
          break;
 8016228:	e02b      	b.n	8016282 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016230:	b2db      	uxtb	r3, r3
 8016232:	2b03      	cmp	r3, #3
 8016234:	d107      	bne.n	8016246 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8016236:	f107 030d 	add.w	r3, r7, #13
 801623a:	2201      	movs	r2, #1
 801623c:	4619      	mov	r1, r3
 801623e:	6878      	ldr	r0, [r7, #4]
 8016240:	f001 fa3d 	bl	80176be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016244:	e01d      	b.n	8016282 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8016246:	6839      	ldr	r1, [r7, #0]
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f001 f9c7 	bl	80175dc <USBD_CtlError>
            ret = USBD_FAIL;
 801624e:	2303      	movs	r3, #3
 8016250:	75fb      	strb	r3, [r7, #23]
          break;
 8016252:	e016      	b.n	8016282 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801625a:	b2db      	uxtb	r3, r3
 801625c:	2b03      	cmp	r3, #3
 801625e:	d00f      	beq.n	8016280 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8016260:	6839      	ldr	r1, [r7, #0]
 8016262:	6878      	ldr	r0, [r7, #4]
 8016264:	f001 f9ba 	bl	80175dc <USBD_CtlError>
            ret = USBD_FAIL;
 8016268:	2303      	movs	r3, #3
 801626a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801626c:	e008      	b.n	8016280 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801626e:	6839      	ldr	r1, [r7, #0]
 8016270:	6878      	ldr	r0, [r7, #4]
 8016272:	f001 f9b3 	bl	80175dc <USBD_CtlError>
          ret = USBD_FAIL;
 8016276:	2303      	movs	r3, #3
 8016278:	75fb      	strb	r3, [r7, #23]
          break;
 801627a:	e002      	b.n	8016282 <USBD_CDC_Setup+0x176>
          break;
 801627c:	bf00      	nop
 801627e:	e008      	b.n	8016292 <USBD_CDC_Setup+0x186>
          break;
 8016280:	bf00      	nop
      }
      break;
 8016282:	e006      	b.n	8016292 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8016284:	6839      	ldr	r1, [r7, #0]
 8016286:	6878      	ldr	r0, [r7, #4]
 8016288:	f001 f9a8 	bl	80175dc <USBD_CtlError>
      ret = USBD_FAIL;
 801628c:	2303      	movs	r3, #3
 801628e:	75fb      	strb	r3, [r7, #23]
      break;
 8016290:	bf00      	nop
  }

  return (uint8_t)ret;
 8016292:	7dfb      	ldrb	r3, [r7, #23]
}
 8016294:	4618      	mov	r0, r3
 8016296:	3718      	adds	r7, #24
 8016298:	46bd      	mov	sp, r7
 801629a:	bd80      	pop	{r7, pc}

0801629c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b084      	sub	sp, #16
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
 80162a4:	460b      	mov	r3, r1
 80162a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80162ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d101      	bne.n	80162be <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80162ba:	2303      	movs	r3, #3
 80162bc:	e04f      	b.n	801635e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80162c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80162c6:	78fa      	ldrb	r2, [r7, #3]
 80162c8:	6879      	ldr	r1, [r7, #4]
 80162ca:	4613      	mov	r3, r2
 80162cc:	009b      	lsls	r3, r3, #2
 80162ce:	4413      	add	r3, r2
 80162d0:	009b      	lsls	r3, r3, #2
 80162d2:	440b      	add	r3, r1
 80162d4:	3318      	adds	r3, #24
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d029      	beq.n	8016330 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80162dc:	78fa      	ldrb	r2, [r7, #3]
 80162de:	6879      	ldr	r1, [r7, #4]
 80162e0:	4613      	mov	r3, r2
 80162e2:	009b      	lsls	r3, r3, #2
 80162e4:	4413      	add	r3, r2
 80162e6:	009b      	lsls	r3, r3, #2
 80162e8:	440b      	add	r3, r1
 80162ea:	3318      	adds	r3, #24
 80162ec:	681a      	ldr	r2, [r3, #0]
 80162ee:	78f9      	ldrb	r1, [r7, #3]
 80162f0:	68f8      	ldr	r0, [r7, #12]
 80162f2:	460b      	mov	r3, r1
 80162f4:	009b      	lsls	r3, r3, #2
 80162f6:	440b      	add	r3, r1
 80162f8:	00db      	lsls	r3, r3, #3
 80162fa:	4403      	add	r3, r0
 80162fc:	3320      	adds	r3, #32
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	fbb2 f1f3 	udiv	r1, r2, r3
 8016304:	fb01 f303 	mul.w	r3, r1, r3
 8016308:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801630a:	2b00      	cmp	r3, #0
 801630c:	d110      	bne.n	8016330 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801630e:	78fa      	ldrb	r2, [r7, #3]
 8016310:	6879      	ldr	r1, [r7, #4]
 8016312:	4613      	mov	r3, r2
 8016314:	009b      	lsls	r3, r3, #2
 8016316:	4413      	add	r3, r2
 8016318:	009b      	lsls	r3, r3, #2
 801631a:	440b      	add	r3, r1
 801631c:	3318      	adds	r3, #24
 801631e:	2200      	movs	r2, #0
 8016320:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8016322:	78f9      	ldrb	r1, [r7, #3]
 8016324:	2300      	movs	r3, #0
 8016326:	2200      	movs	r2, #0
 8016328:	6878      	ldr	r0, [r7, #4]
 801632a:	f002 fa04 	bl	8018736 <USBD_LL_Transmit>
 801632e:	e015      	b.n	801635c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8016330:	68bb      	ldr	r3, [r7, #8]
 8016332:	2200      	movs	r2, #0
 8016334:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801633e:	691b      	ldr	r3, [r3, #16]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d00b      	beq.n	801635c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801634a:	691b      	ldr	r3, [r3, #16]
 801634c:	68ba      	ldr	r2, [r7, #8]
 801634e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8016352:	68ba      	ldr	r2, [r7, #8]
 8016354:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8016358:	78fa      	ldrb	r2, [r7, #3]
 801635a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801635c:	2300      	movs	r3, #0
}
 801635e:	4618      	mov	r0, r3
 8016360:	3710      	adds	r7, #16
 8016362:	46bd      	mov	sp, r7
 8016364:	bd80      	pop	{r7, pc}

08016366 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016366:	b580      	push	{r7, lr}
 8016368:	b084      	sub	sp, #16
 801636a:	af00      	add	r7, sp, #0
 801636c:	6078      	str	r0, [r7, #4]
 801636e:	460b      	mov	r3, r1
 8016370:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016378:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016380:	2b00      	cmp	r3, #0
 8016382:	d101      	bne.n	8016388 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016384:	2303      	movs	r3, #3
 8016386:	e015      	b.n	80163b4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016388:	78fb      	ldrb	r3, [r7, #3]
 801638a:	4619      	mov	r1, r3
 801638c:	6878      	ldr	r0, [r7, #4]
 801638e:	f002 fa14 	bl	80187ba <USBD_LL_GetRxDataSize>
 8016392:	4602      	mov	r2, r0
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80163a0:	68db      	ldr	r3, [r3, #12]
 80163a2:	68fa      	ldr	r2, [r7, #12]
 80163a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80163a8:	68fa      	ldr	r2, [r7, #12]
 80163aa:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80163ae:	4611      	mov	r1, r2
 80163b0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80163b2:	2300      	movs	r3, #0
}
 80163b4:	4618      	mov	r0, r3
 80163b6:	3710      	adds	r7, #16
 80163b8:	46bd      	mov	sp, r7
 80163ba:	bd80      	pop	{r7, pc}

080163bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80163bc:	b580      	push	{r7, lr}
 80163be:	b084      	sub	sp, #16
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80163ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d101      	bne.n	80163d6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80163d2:	2303      	movs	r3, #3
 80163d4:	e01a      	b.n	801640c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d014      	beq.n	801640a <USBD_CDC_EP0_RxReady+0x4e>
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80163e6:	2bff      	cmp	r3, #255	@ 0xff
 80163e8:	d00f      	beq.n	801640a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80163f0:	689b      	ldr	r3, [r3, #8]
 80163f2:	68fa      	ldr	r2, [r7, #12]
 80163f4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 80163f8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80163fa:	68fa      	ldr	r2, [r7, #12]
 80163fc:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016400:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	22ff      	movs	r2, #255	@ 0xff
 8016406:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801640a:	2300      	movs	r3, #0
}
 801640c:	4618      	mov	r0, r3
 801640e:	3710      	adds	r7, #16
 8016410:	46bd      	mov	sp, r7
 8016412:	bd80      	pop	{r7, pc}

08016414 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016414:	b480      	push	{r7}
 8016416:	b083      	sub	sp, #12
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	2243      	movs	r2, #67	@ 0x43
 8016420:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8016422:	4b03      	ldr	r3, [pc, #12]	@ (8016430 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8016424:	4618      	mov	r0, r3
 8016426:	370c      	adds	r7, #12
 8016428:	46bd      	mov	sp, r7
 801642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801642e:	4770      	bx	lr
 8016430:	20000098 	.word	0x20000098

08016434 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016434:	b480      	push	{r7}
 8016436:	b083      	sub	sp, #12
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	2243      	movs	r2, #67	@ 0x43
 8016440:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8016442:	4b03      	ldr	r3, [pc, #12]	@ (8016450 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8016444:	4618      	mov	r0, r3
 8016446:	370c      	adds	r7, #12
 8016448:	46bd      	mov	sp, r7
 801644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644e:	4770      	bx	lr
 8016450:	20000054 	.word	0x20000054

08016454 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016454:	b480      	push	{r7}
 8016456:	b083      	sub	sp, #12
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	2243      	movs	r2, #67	@ 0x43
 8016460:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8016462:	4b03      	ldr	r3, [pc, #12]	@ (8016470 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8016464:	4618      	mov	r0, r3
 8016466:	370c      	adds	r7, #12
 8016468:	46bd      	mov	sp, r7
 801646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801646e:	4770      	bx	lr
 8016470:	200000dc 	.word	0x200000dc

08016474 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016474:	b480      	push	{r7}
 8016476:	b083      	sub	sp, #12
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	220a      	movs	r2, #10
 8016480:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8016482:	4b03      	ldr	r3, [pc, #12]	@ (8016490 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016484:	4618      	mov	r0, r3
 8016486:	370c      	adds	r7, #12
 8016488:	46bd      	mov	sp, r7
 801648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801648e:	4770      	bx	lr
 8016490:	20000010 	.word	0x20000010

08016494 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016494:	b480      	push	{r7}
 8016496:	b083      	sub	sp, #12
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
 801649c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801649e:	683b      	ldr	r3, [r7, #0]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d101      	bne.n	80164a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80164a4:	2303      	movs	r3, #3
 80164a6:	e004      	b.n	80164b2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	683a      	ldr	r2, [r7, #0]
 80164ac:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80164b0:	2300      	movs	r3, #0
}
 80164b2:	4618      	mov	r0, r3
 80164b4:	370c      	adds	r7, #12
 80164b6:	46bd      	mov	sp, r7
 80164b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164bc:	4770      	bx	lr

080164be <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80164be:	b480      	push	{r7}
 80164c0:	b087      	sub	sp, #28
 80164c2:	af00      	add	r7, sp, #0
 80164c4:	60f8      	str	r0, [r7, #12]
 80164c6:	60b9      	str	r1, [r7, #8]
 80164c8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80164d0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80164d2:	697b      	ldr	r3, [r7, #20]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d101      	bne.n	80164dc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80164d8:	2303      	movs	r3, #3
 80164da:	e008      	b.n	80164ee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80164dc:	697b      	ldr	r3, [r7, #20]
 80164de:	68ba      	ldr	r2, [r7, #8]
 80164e0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80164e4:	697b      	ldr	r3, [r7, #20]
 80164e6:	687a      	ldr	r2, [r7, #4]
 80164e8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80164ec:	2300      	movs	r3, #0
}
 80164ee:	4618      	mov	r0, r3
 80164f0:	371c      	adds	r7, #28
 80164f2:	46bd      	mov	sp, r7
 80164f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f8:	4770      	bx	lr

080164fa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80164fa:	b480      	push	{r7}
 80164fc:	b085      	sub	sp, #20
 80164fe:	af00      	add	r7, sp, #0
 8016500:	6078      	str	r0, [r7, #4]
 8016502:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801650a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d101      	bne.n	8016516 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8016512:	2303      	movs	r3, #3
 8016514:	e004      	b.n	8016520 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	683a      	ldr	r2, [r7, #0]
 801651a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801651e:	2300      	movs	r3, #0
}
 8016520:	4618      	mov	r0, r3
 8016522:	3714      	adds	r7, #20
 8016524:	46bd      	mov	sp, r7
 8016526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801652a:	4770      	bx	lr

0801652c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b084      	sub	sp, #16
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801653a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8016542:	2b00      	cmp	r3, #0
 8016544:	d101      	bne.n	801654a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016546:	2303      	movs	r3, #3
 8016548:	e016      	b.n	8016578 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	7c1b      	ldrb	r3, [r3, #16]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d109      	bne.n	8016566 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016558:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801655c:	2101      	movs	r1, #1
 801655e:	6878      	ldr	r0, [r7, #4]
 8016560:	f002 f90a 	bl	8018778 <USBD_LL_PrepareReceive>
 8016564:	e007      	b.n	8016576 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801656c:	2340      	movs	r3, #64	@ 0x40
 801656e:	2101      	movs	r1, #1
 8016570:	6878      	ldr	r0, [r7, #4]
 8016572:	f002 f901 	bl	8018778 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016576:	2300      	movs	r3, #0
}
 8016578:	4618      	mov	r0, r3
 801657a:	3710      	adds	r7, #16
 801657c:	46bd      	mov	sp, r7
 801657e:	bd80      	pop	{r7, pc}

08016580 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b086      	sub	sp, #24
 8016584:	af00      	add	r7, sp, #0
 8016586:	60f8      	str	r0, [r7, #12]
 8016588:	60b9      	str	r1, [r7, #8]
 801658a:	4613      	mov	r3, r2
 801658c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	2b00      	cmp	r3, #0
 8016592:	d101      	bne.n	8016598 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8016594:	2303      	movs	r3, #3
 8016596:	e01f      	b.n	80165d8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	2200      	movs	r2, #0
 801659c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	2200      	movs	r2, #0
 80165a4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	2200      	movs	r2, #0
 80165ac:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80165b0:	68bb      	ldr	r3, [r7, #8]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d003      	beq.n	80165be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	68ba      	ldr	r2, [r7, #8]
 80165ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	2201      	movs	r2, #1
 80165c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	79fa      	ldrb	r2, [r7, #7]
 80165ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80165cc:	68f8      	ldr	r0, [r7, #12]
 80165ce:	f001 ff69 	bl	80184a4 <USBD_LL_Init>
 80165d2:	4603      	mov	r3, r0
 80165d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80165d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80165d8:	4618      	mov	r0, r3
 80165da:	3718      	adds	r7, #24
 80165dc:	46bd      	mov	sp, r7
 80165de:	bd80      	pop	{r7, pc}

080165e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b084      	sub	sp, #16
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
 80165e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80165ea:	2300      	movs	r3, #0
 80165ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80165ee:	683b      	ldr	r3, [r7, #0]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d101      	bne.n	80165f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80165f4:	2303      	movs	r3, #3
 80165f6:	e016      	b.n	8016626 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	683a      	ldr	r2, [r7, #0]
 80165fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016608:	2b00      	cmp	r3, #0
 801660a:	d00b      	beq.n	8016624 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016614:	f107 020e 	add.w	r2, r7, #14
 8016618:	4610      	mov	r0, r2
 801661a:	4798      	blx	r3
 801661c:	4602      	mov	r2, r0
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8016624:	2300      	movs	r3, #0
}
 8016626:	4618      	mov	r0, r3
 8016628:	3710      	adds	r7, #16
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}

0801662e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801662e:	b580      	push	{r7, lr}
 8016630:	b082      	sub	sp, #8
 8016632:	af00      	add	r7, sp, #0
 8016634:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016636:	6878      	ldr	r0, [r7, #4]
 8016638:	f001 ff94 	bl	8018564 <USBD_LL_Start>
 801663c:	4603      	mov	r3, r0
}
 801663e:	4618      	mov	r0, r3
 8016640:	3708      	adds	r7, #8
 8016642:	46bd      	mov	sp, r7
 8016644:	bd80      	pop	{r7, pc}

08016646 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8016646:	b480      	push	{r7}
 8016648:	b083      	sub	sp, #12
 801664a:	af00      	add	r7, sp, #0
 801664c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801664e:	2300      	movs	r3, #0
}
 8016650:	4618      	mov	r0, r3
 8016652:	370c      	adds	r7, #12
 8016654:	46bd      	mov	sp, r7
 8016656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665a:	4770      	bx	lr

0801665c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b084      	sub	sp, #16
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
 8016664:	460b      	mov	r3, r1
 8016666:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8016668:	2303      	movs	r3, #3
 801666a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016672:	2b00      	cmp	r3, #0
 8016674:	d009      	beq.n	801668a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	78fa      	ldrb	r2, [r7, #3]
 8016680:	4611      	mov	r1, r2
 8016682:	6878      	ldr	r0, [r7, #4]
 8016684:	4798      	blx	r3
 8016686:	4603      	mov	r3, r0
 8016688:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801668a:	7bfb      	ldrb	r3, [r7, #15]
}
 801668c:	4618      	mov	r0, r3
 801668e:	3710      	adds	r7, #16
 8016690:	46bd      	mov	sp, r7
 8016692:	bd80      	pop	{r7, pc}

08016694 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016694:	b580      	push	{r7, lr}
 8016696:	b082      	sub	sp, #8
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
 801669c:	460b      	mov	r3, r1
 801669e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d007      	beq.n	80166ba <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80166b0:	685b      	ldr	r3, [r3, #4]
 80166b2:	78fa      	ldrb	r2, [r7, #3]
 80166b4:	4611      	mov	r1, r2
 80166b6:	6878      	ldr	r0, [r7, #4]
 80166b8:	4798      	blx	r3
  }

  return USBD_OK;
 80166ba:	2300      	movs	r3, #0
}
 80166bc:	4618      	mov	r0, r3
 80166be:	3708      	adds	r7, #8
 80166c0:	46bd      	mov	sp, r7
 80166c2:	bd80      	pop	{r7, pc}

080166c4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b084      	sub	sp, #16
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
 80166cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80166d4:	6839      	ldr	r1, [r7, #0]
 80166d6:	4618      	mov	r0, r3
 80166d8:	f000 ff46 	bl	8017568 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	2201      	movs	r2, #1
 80166e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80166ea:	461a      	mov	r2, r3
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80166f8:	f003 031f 	and.w	r3, r3, #31
 80166fc:	2b02      	cmp	r3, #2
 80166fe:	d01a      	beq.n	8016736 <USBD_LL_SetupStage+0x72>
 8016700:	2b02      	cmp	r3, #2
 8016702:	d822      	bhi.n	801674a <USBD_LL_SetupStage+0x86>
 8016704:	2b00      	cmp	r3, #0
 8016706:	d002      	beq.n	801670e <USBD_LL_SetupStage+0x4a>
 8016708:	2b01      	cmp	r3, #1
 801670a:	d00a      	beq.n	8016722 <USBD_LL_SetupStage+0x5e>
 801670c:	e01d      	b.n	801674a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016714:	4619      	mov	r1, r3
 8016716:	6878      	ldr	r0, [r7, #4]
 8016718:	f000 f9ee 	bl	8016af8 <USBD_StdDevReq>
 801671c:	4603      	mov	r3, r0
 801671e:	73fb      	strb	r3, [r7, #15]
      break;
 8016720:	e020      	b.n	8016764 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016728:	4619      	mov	r1, r3
 801672a:	6878      	ldr	r0, [r7, #4]
 801672c:	f000 fa52 	bl	8016bd4 <USBD_StdItfReq>
 8016730:	4603      	mov	r3, r0
 8016732:	73fb      	strb	r3, [r7, #15]
      break;
 8016734:	e016      	b.n	8016764 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801673c:	4619      	mov	r1, r3
 801673e:	6878      	ldr	r0, [r7, #4]
 8016740:	f000 fa91 	bl	8016c66 <USBD_StdEPReq>
 8016744:	4603      	mov	r3, r0
 8016746:	73fb      	strb	r3, [r7, #15]
      break;
 8016748:	e00c      	b.n	8016764 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016750:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8016754:	b2db      	uxtb	r3, r3
 8016756:	4619      	mov	r1, r3
 8016758:	6878      	ldr	r0, [r7, #4]
 801675a:	f001 ff63 	bl	8018624 <USBD_LL_StallEP>
 801675e:	4603      	mov	r3, r0
 8016760:	73fb      	strb	r3, [r7, #15]
      break;
 8016762:	bf00      	nop
  }

  return ret;
 8016764:	7bfb      	ldrb	r3, [r7, #15]
}
 8016766:	4618      	mov	r0, r3
 8016768:	3710      	adds	r7, #16
 801676a:	46bd      	mov	sp, r7
 801676c:	bd80      	pop	{r7, pc}

0801676e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801676e:	b580      	push	{r7, lr}
 8016770:	b086      	sub	sp, #24
 8016772:	af00      	add	r7, sp, #0
 8016774:	60f8      	str	r0, [r7, #12]
 8016776:	460b      	mov	r3, r1
 8016778:	607a      	str	r2, [r7, #4]
 801677a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801677c:	7afb      	ldrb	r3, [r7, #11]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d138      	bne.n	80167f4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8016788:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016790:	2b03      	cmp	r3, #3
 8016792:	d14a      	bne.n	801682a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8016794:	693b      	ldr	r3, [r7, #16]
 8016796:	689a      	ldr	r2, [r3, #8]
 8016798:	693b      	ldr	r3, [r7, #16]
 801679a:	68db      	ldr	r3, [r3, #12]
 801679c:	429a      	cmp	r2, r3
 801679e:	d913      	bls.n	80167c8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80167a0:	693b      	ldr	r3, [r7, #16]
 80167a2:	689a      	ldr	r2, [r3, #8]
 80167a4:	693b      	ldr	r3, [r7, #16]
 80167a6:	68db      	ldr	r3, [r3, #12]
 80167a8:	1ad2      	subs	r2, r2, r3
 80167aa:	693b      	ldr	r3, [r7, #16]
 80167ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80167ae:	693b      	ldr	r3, [r7, #16]
 80167b0:	68da      	ldr	r2, [r3, #12]
 80167b2:	693b      	ldr	r3, [r7, #16]
 80167b4:	689b      	ldr	r3, [r3, #8]
 80167b6:	4293      	cmp	r3, r2
 80167b8:	bf28      	it	cs
 80167ba:	4613      	movcs	r3, r2
 80167bc:	461a      	mov	r2, r3
 80167be:	6879      	ldr	r1, [r7, #4]
 80167c0:	68f8      	ldr	r0, [r7, #12]
 80167c2:	f000 ffc5 	bl	8017750 <USBD_CtlContinueRx>
 80167c6:	e030      	b.n	801682a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80167ce:	b2db      	uxtb	r3, r3
 80167d0:	2b03      	cmp	r3, #3
 80167d2:	d10b      	bne.n	80167ec <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167da:	691b      	ldr	r3, [r3, #16]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d005      	beq.n	80167ec <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167e6:	691b      	ldr	r3, [r3, #16]
 80167e8:	68f8      	ldr	r0, [r7, #12]
 80167ea:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80167ec:	68f8      	ldr	r0, [r7, #12]
 80167ee:	f000 ffc0 	bl	8017772 <USBD_CtlSendStatus>
 80167f2:	e01a      	b.n	801682a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80167fa:	b2db      	uxtb	r3, r3
 80167fc:	2b03      	cmp	r3, #3
 80167fe:	d114      	bne.n	801682a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016806:	699b      	ldr	r3, [r3, #24]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d00e      	beq.n	801682a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016812:	699b      	ldr	r3, [r3, #24]
 8016814:	7afa      	ldrb	r2, [r7, #11]
 8016816:	4611      	mov	r1, r2
 8016818:	68f8      	ldr	r0, [r7, #12]
 801681a:	4798      	blx	r3
 801681c:	4603      	mov	r3, r0
 801681e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8016820:	7dfb      	ldrb	r3, [r7, #23]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d001      	beq.n	801682a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8016826:	7dfb      	ldrb	r3, [r7, #23]
 8016828:	e000      	b.n	801682c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801682a:	2300      	movs	r3, #0
}
 801682c:	4618      	mov	r0, r3
 801682e:	3718      	adds	r7, #24
 8016830:	46bd      	mov	sp, r7
 8016832:	bd80      	pop	{r7, pc}

08016834 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b086      	sub	sp, #24
 8016838:	af00      	add	r7, sp, #0
 801683a:	60f8      	str	r0, [r7, #12]
 801683c:	460b      	mov	r3, r1
 801683e:	607a      	str	r2, [r7, #4]
 8016840:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8016842:	7afb      	ldrb	r3, [r7, #11]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d16b      	bne.n	8016920 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	3314      	adds	r3, #20
 801684c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016854:	2b02      	cmp	r3, #2
 8016856:	d156      	bne.n	8016906 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8016858:	693b      	ldr	r3, [r7, #16]
 801685a:	689a      	ldr	r2, [r3, #8]
 801685c:	693b      	ldr	r3, [r7, #16]
 801685e:	68db      	ldr	r3, [r3, #12]
 8016860:	429a      	cmp	r2, r3
 8016862:	d914      	bls.n	801688e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016864:	693b      	ldr	r3, [r7, #16]
 8016866:	689a      	ldr	r2, [r3, #8]
 8016868:	693b      	ldr	r3, [r7, #16]
 801686a:	68db      	ldr	r3, [r3, #12]
 801686c:	1ad2      	subs	r2, r2, r3
 801686e:	693b      	ldr	r3, [r7, #16]
 8016870:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016872:	693b      	ldr	r3, [r7, #16]
 8016874:	689b      	ldr	r3, [r3, #8]
 8016876:	461a      	mov	r2, r3
 8016878:	6879      	ldr	r1, [r7, #4]
 801687a:	68f8      	ldr	r0, [r7, #12]
 801687c:	f000 ff3a 	bl	80176f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016880:	2300      	movs	r3, #0
 8016882:	2200      	movs	r2, #0
 8016884:	2100      	movs	r1, #0
 8016886:	68f8      	ldr	r0, [r7, #12]
 8016888:	f001 ff76 	bl	8018778 <USBD_LL_PrepareReceive>
 801688c:	e03b      	b.n	8016906 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801688e:	693b      	ldr	r3, [r7, #16]
 8016890:	68da      	ldr	r2, [r3, #12]
 8016892:	693b      	ldr	r3, [r7, #16]
 8016894:	689b      	ldr	r3, [r3, #8]
 8016896:	429a      	cmp	r2, r3
 8016898:	d11c      	bne.n	80168d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801689a:	693b      	ldr	r3, [r7, #16]
 801689c:	685a      	ldr	r2, [r3, #4]
 801689e:	693b      	ldr	r3, [r7, #16]
 80168a0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80168a2:	429a      	cmp	r2, r3
 80168a4:	d316      	bcc.n	80168d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80168a6:	693b      	ldr	r3, [r7, #16]
 80168a8:	685a      	ldr	r2, [r3, #4]
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80168b0:	429a      	cmp	r2, r3
 80168b2:	d20f      	bcs.n	80168d4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80168b4:	2200      	movs	r2, #0
 80168b6:	2100      	movs	r1, #0
 80168b8:	68f8      	ldr	r0, [r7, #12]
 80168ba:	f000 ff1b 	bl	80176f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	2200      	movs	r2, #0
 80168c2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80168c6:	2300      	movs	r3, #0
 80168c8:	2200      	movs	r2, #0
 80168ca:	2100      	movs	r1, #0
 80168cc:	68f8      	ldr	r0, [r7, #12]
 80168ce:	f001 ff53 	bl	8018778 <USBD_LL_PrepareReceive>
 80168d2:	e018      	b.n	8016906 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80168da:	b2db      	uxtb	r3, r3
 80168dc:	2b03      	cmp	r3, #3
 80168de:	d10b      	bne.n	80168f8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80168e6:	68db      	ldr	r3, [r3, #12]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d005      	beq.n	80168f8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80168f2:	68db      	ldr	r3, [r3, #12]
 80168f4:	68f8      	ldr	r0, [r7, #12]
 80168f6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80168f8:	2180      	movs	r1, #128	@ 0x80
 80168fa:	68f8      	ldr	r0, [r7, #12]
 80168fc:	f001 fe92 	bl	8018624 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016900:	68f8      	ldr	r0, [r7, #12]
 8016902:	f000 ff49 	bl	8017798 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801690c:	2b01      	cmp	r3, #1
 801690e:	d122      	bne.n	8016956 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8016910:	68f8      	ldr	r0, [r7, #12]
 8016912:	f7ff fe98 	bl	8016646 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	2200      	movs	r2, #0
 801691a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801691e:	e01a      	b.n	8016956 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016926:	b2db      	uxtb	r3, r3
 8016928:	2b03      	cmp	r3, #3
 801692a:	d114      	bne.n	8016956 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016932:	695b      	ldr	r3, [r3, #20]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d00e      	beq.n	8016956 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801693e:	695b      	ldr	r3, [r3, #20]
 8016940:	7afa      	ldrb	r2, [r7, #11]
 8016942:	4611      	mov	r1, r2
 8016944:	68f8      	ldr	r0, [r7, #12]
 8016946:	4798      	blx	r3
 8016948:	4603      	mov	r3, r0
 801694a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801694c:	7dfb      	ldrb	r3, [r7, #23]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d001      	beq.n	8016956 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8016952:	7dfb      	ldrb	r3, [r7, #23]
 8016954:	e000      	b.n	8016958 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8016956:	2300      	movs	r3, #0
}
 8016958:	4618      	mov	r0, r3
 801695a:	3718      	adds	r7, #24
 801695c:	46bd      	mov	sp, r7
 801695e:	bd80      	pop	{r7, pc}

08016960 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b082      	sub	sp, #8
 8016964:	af00      	add	r7, sp, #0
 8016966:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	2201      	movs	r2, #1
 801696c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	2200      	movs	r2, #0
 8016974:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2200      	movs	r2, #0
 801697c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	2200      	movs	r2, #0
 8016982:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801698c:	2b00      	cmp	r3, #0
 801698e:	d101      	bne.n	8016994 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8016990:	2303      	movs	r3, #3
 8016992:	e02f      	b.n	80169f4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801699a:	2b00      	cmp	r3, #0
 801699c:	d00f      	beq.n	80169be <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80169a4:	685b      	ldr	r3, [r3, #4]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d009      	beq.n	80169be <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80169b0:	685b      	ldr	r3, [r3, #4]
 80169b2:	687a      	ldr	r2, [r7, #4]
 80169b4:	6852      	ldr	r2, [r2, #4]
 80169b6:	b2d2      	uxtb	r2, r2
 80169b8:	4611      	mov	r1, r2
 80169ba:	6878      	ldr	r0, [r7, #4]
 80169bc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80169be:	2340      	movs	r3, #64	@ 0x40
 80169c0:	2200      	movs	r2, #0
 80169c2:	2100      	movs	r1, #0
 80169c4:	6878      	ldr	r0, [r7, #4]
 80169c6:	f001 fde8 	bl	801859a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	2201      	movs	r2, #1
 80169ce:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2240      	movs	r2, #64	@ 0x40
 80169d6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80169da:	2340      	movs	r3, #64	@ 0x40
 80169dc:	2200      	movs	r2, #0
 80169de:	2180      	movs	r1, #128	@ 0x80
 80169e0:	6878      	ldr	r0, [r7, #4]
 80169e2:	f001 fdda 	bl	801859a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	2201      	movs	r2, #1
 80169ea:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	2240      	movs	r2, #64	@ 0x40
 80169f0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80169f2:	2300      	movs	r3, #0
}
 80169f4:	4618      	mov	r0, r3
 80169f6:	3708      	adds	r7, #8
 80169f8:	46bd      	mov	sp, r7
 80169fa:	bd80      	pop	{r7, pc}

080169fc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80169fc:	b480      	push	{r7}
 80169fe:	b083      	sub	sp, #12
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]
 8016a04:	460b      	mov	r3, r1
 8016a06:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	78fa      	ldrb	r2, [r7, #3]
 8016a0c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016a0e:	2300      	movs	r3, #0
}
 8016a10:	4618      	mov	r0, r3
 8016a12:	370c      	adds	r7, #12
 8016a14:	46bd      	mov	sp, r7
 8016a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1a:	4770      	bx	lr

08016a1c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016a1c:	b480      	push	{r7}
 8016a1e:	b083      	sub	sp, #12
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a2a:	b2da      	uxtb	r2, r3
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	2204      	movs	r2, #4
 8016a36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8016a3a:	2300      	movs	r3, #0
}
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	370c      	adds	r7, #12
 8016a40:	46bd      	mov	sp, r7
 8016a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a46:	4770      	bx	lr

08016a48 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016a48:	b480      	push	{r7}
 8016a4a:	b083      	sub	sp, #12
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a56:	b2db      	uxtb	r3, r3
 8016a58:	2b04      	cmp	r3, #4
 8016a5a:	d106      	bne.n	8016a6a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8016a62:	b2da      	uxtb	r2, r3
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8016a6a:	2300      	movs	r3, #0
}
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	370c      	adds	r7, #12
 8016a70:	46bd      	mov	sp, r7
 8016a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a76:	4770      	bx	lr

08016a78 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b082      	sub	sp, #8
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d101      	bne.n	8016a8e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8016a8a:	2303      	movs	r3, #3
 8016a8c:	e012      	b.n	8016ab4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a94:	b2db      	uxtb	r3, r3
 8016a96:	2b03      	cmp	r3, #3
 8016a98:	d10b      	bne.n	8016ab2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016aa0:	69db      	ldr	r3, [r3, #28]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d005      	beq.n	8016ab2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016aac:	69db      	ldr	r3, [r3, #28]
 8016aae:	6878      	ldr	r0, [r7, #4]
 8016ab0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016ab2:	2300      	movs	r3, #0
}
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	3708      	adds	r7, #8
 8016ab8:	46bd      	mov	sp, r7
 8016aba:	bd80      	pop	{r7, pc}

08016abc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016abc:	b480      	push	{r7}
 8016abe:	b087      	sub	sp, #28
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016ac8:	697b      	ldr	r3, [r7, #20]
 8016aca:	781b      	ldrb	r3, [r3, #0]
 8016acc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016ace:	697b      	ldr	r3, [r7, #20]
 8016ad0:	3301      	adds	r3, #1
 8016ad2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016ad4:	697b      	ldr	r3, [r7, #20]
 8016ad6:	781b      	ldrb	r3, [r3, #0]
 8016ad8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016ada:	8a3b      	ldrh	r3, [r7, #16]
 8016adc:	021b      	lsls	r3, r3, #8
 8016ade:	b21a      	sxth	r2, r3
 8016ae0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016ae4:	4313      	orrs	r3, r2
 8016ae6:	b21b      	sxth	r3, r3
 8016ae8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016aea:	89fb      	ldrh	r3, [r7, #14]
}
 8016aec:	4618      	mov	r0, r3
 8016aee:	371c      	adds	r7, #28
 8016af0:	46bd      	mov	sp, r7
 8016af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af6:	4770      	bx	lr

08016af8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	b084      	sub	sp, #16
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
 8016b00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016b02:	2300      	movs	r3, #0
 8016b04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016b06:	683b      	ldr	r3, [r7, #0]
 8016b08:	781b      	ldrb	r3, [r3, #0]
 8016b0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016b0e:	2b40      	cmp	r3, #64	@ 0x40
 8016b10:	d005      	beq.n	8016b1e <USBD_StdDevReq+0x26>
 8016b12:	2b40      	cmp	r3, #64	@ 0x40
 8016b14:	d853      	bhi.n	8016bbe <USBD_StdDevReq+0xc6>
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d00b      	beq.n	8016b32 <USBD_StdDevReq+0x3a>
 8016b1a:	2b20      	cmp	r3, #32
 8016b1c:	d14f      	bne.n	8016bbe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016b24:	689b      	ldr	r3, [r3, #8]
 8016b26:	6839      	ldr	r1, [r7, #0]
 8016b28:	6878      	ldr	r0, [r7, #4]
 8016b2a:	4798      	blx	r3
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8016b30:	e04a      	b.n	8016bc8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016b32:	683b      	ldr	r3, [r7, #0]
 8016b34:	785b      	ldrb	r3, [r3, #1]
 8016b36:	2b09      	cmp	r3, #9
 8016b38:	d83b      	bhi.n	8016bb2 <USBD_StdDevReq+0xba>
 8016b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8016b40 <USBD_StdDevReq+0x48>)
 8016b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b40:	08016b95 	.word	0x08016b95
 8016b44:	08016ba9 	.word	0x08016ba9
 8016b48:	08016bb3 	.word	0x08016bb3
 8016b4c:	08016b9f 	.word	0x08016b9f
 8016b50:	08016bb3 	.word	0x08016bb3
 8016b54:	08016b73 	.word	0x08016b73
 8016b58:	08016b69 	.word	0x08016b69
 8016b5c:	08016bb3 	.word	0x08016bb3
 8016b60:	08016b8b 	.word	0x08016b8b
 8016b64:	08016b7d 	.word	0x08016b7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016b68:	6839      	ldr	r1, [r7, #0]
 8016b6a:	6878      	ldr	r0, [r7, #4]
 8016b6c:	f000 f9de 	bl	8016f2c <USBD_GetDescriptor>
          break;
 8016b70:	e024      	b.n	8016bbc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016b72:	6839      	ldr	r1, [r7, #0]
 8016b74:	6878      	ldr	r0, [r7, #4]
 8016b76:	f000 fb6d 	bl	8017254 <USBD_SetAddress>
          break;
 8016b7a:	e01f      	b.n	8016bbc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016b7c:	6839      	ldr	r1, [r7, #0]
 8016b7e:	6878      	ldr	r0, [r7, #4]
 8016b80:	f000 fbac 	bl	80172dc <USBD_SetConfig>
 8016b84:	4603      	mov	r3, r0
 8016b86:	73fb      	strb	r3, [r7, #15]
          break;
 8016b88:	e018      	b.n	8016bbc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016b8a:	6839      	ldr	r1, [r7, #0]
 8016b8c:	6878      	ldr	r0, [r7, #4]
 8016b8e:	f000 fc4b 	bl	8017428 <USBD_GetConfig>
          break;
 8016b92:	e013      	b.n	8016bbc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016b94:	6839      	ldr	r1, [r7, #0]
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	f000 fc7c 	bl	8017494 <USBD_GetStatus>
          break;
 8016b9c:	e00e      	b.n	8016bbc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016b9e:	6839      	ldr	r1, [r7, #0]
 8016ba0:	6878      	ldr	r0, [r7, #4]
 8016ba2:	f000 fcab 	bl	80174fc <USBD_SetFeature>
          break;
 8016ba6:	e009      	b.n	8016bbc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016ba8:	6839      	ldr	r1, [r7, #0]
 8016baa:	6878      	ldr	r0, [r7, #4]
 8016bac:	f000 fcba 	bl	8017524 <USBD_ClrFeature>
          break;
 8016bb0:	e004      	b.n	8016bbc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8016bb2:	6839      	ldr	r1, [r7, #0]
 8016bb4:	6878      	ldr	r0, [r7, #4]
 8016bb6:	f000 fd11 	bl	80175dc <USBD_CtlError>
          break;
 8016bba:	bf00      	nop
      }
      break;
 8016bbc:	e004      	b.n	8016bc8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8016bbe:	6839      	ldr	r1, [r7, #0]
 8016bc0:	6878      	ldr	r0, [r7, #4]
 8016bc2:	f000 fd0b 	bl	80175dc <USBD_CtlError>
      break;
 8016bc6:	bf00      	nop
  }

  return ret;
 8016bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bca:	4618      	mov	r0, r3
 8016bcc:	3710      	adds	r7, #16
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	bd80      	pop	{r7, pc}
 8016bd2:	bf00      	nop

08016bd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b084      	sub	sp, #16
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
 8016bdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016bde:	2300      	movs	r3, #0
 8016be0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016be2:	683b      	ldr	r3, [r7, #0]
 8016be4:	781b      	ldrb	r3, [r3, #0]
 8016be6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016bea:	2b40      	cmp	r3, #64	@ 0x40
 8016bec:	d005      	beq.n	8016bfa <USBD_StdItfReq+0x26>
 8016bee:	2b40      	cmp	r3, #64	@ 0x40
 8016bf0:	d82f      	bhi.n	8016c52 <USBD_StdItfReq+0x7e>
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d001      	beq.n	8016bfa <USBD_StdItfReq+0x26>
 8016bf6:	2b20      	cmp	r3, #32
 8016bf8:	d12b      	bne.n	8016c52 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016c00:	b2db      	uxtb	r3, r3
 8016c02:	3b01      	subs	r3, #1
 8016c04:	2b02      	cmp	r3, #2
 8016c06:	d81d      	bhi.n	8016c44 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016c08:	683b      	ldr	r3, [r7, #0]
 8016c0a:	889b      	ldrh	r3, [r3, #4]
 8016c0c:	b2db      	uxtb	r3, r3
 8016c0e:	2b01      	cmp	r3, #1
 8016c10:	d813      	bhi.n	8016c3a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016c18:	689b      	ldr	r3, [r3, #8]
 8016c1a:	6839      	ldr	r1, [r7, #0]
 8016c1c:	6878      	ldr	r0, [r7, #4]
 8016c1e:	4798      	blx	r3
 8016c20:	4603      	mov	r3, r0
 8016c22:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016c24:	683b      	ldr	r3, [r7, #0]
 8016c26:	88db      	ldrh	r3, [r3, #6]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d110      	bne.n	8016c4e <USBD_StdItfReq+0x7a>
 8016c2c:	7bfb      	ldrb	r3, [r7, #15]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d10d      	bne.n	8016c4e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016c32:	6878      	ldr	r0, [r7, #4]
 8016c34:	f000 fd9d 	bl	8017772 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016c38:	e009      	b.n	8016c4e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8016c3a:	6839      	ldr	r1, [r7, #0]
 8016c3c:	6878      	ldr	r0, [r7, #4]
 8016c3e:	f000 fccd 	bl	80175dc <USBD_CtlError>
          break;
 8016c42:	e004      	b.n	8016c4e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8016c44:	6839      	ldr	r1, [r7, #0]
 8016c46:	6878      	ldr	r0, [r7, #4]
 8016c48:	f000 fcc8 	bl	80175dc <USBD_CtlError>
          break;
 8016c4c:	e000      	b.n	8016c50 <USBD_StdItfReq+0x7c>
          break;
 8016c4e:	bf00      	nop
      }
      break;
 8016c50:	e004      	b.n	8016c5c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8016c52:	6839      	ldr	r1, [r7, #0]
 8016c54:	6878      	ldr	r0, [r7, #4]
 8016c56:	f000 fcc1 	bl	80175dc <USBD_CtlError>
      break;
 8016c5a:	bf00      	nop
  }

  return ret;
 8016c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c5e:	4618      	mov	r0, r3
 8016c60:	3710      	adds	r7, #16
 8016c62:	46bd      	mov	sp, r7
 8016c64:	bd80      	pop	{r7, pc}

08016c66 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c66:	b580      	push	{r7, lr}
 8016c68:	b084      	sub	sp, #16
 8016c6a:	af00      	add	r7, sp, #0
 8016c6c:	6078      	str	r0, [r7, #4]
 8016c6e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8016c70:	2300      	movs	r3, #0
 8016c72:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8016c74:	683b      	ldr	r3, [r7, #0]
 8016c76:	889b      	ldrh	r3, [r3, #4]
 8016c78:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016c7a:	683b      	ldr	r3, [r7, #0]
 8016c7c:	781b      	ldrb	r3, [r3, #0]
 8016c7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016c82:	2b40      	cmp	r3, #64	@ 0x40
 8016c84:	d007      	beq.n	8016c96 <USBD_StdEPReq+0x30>
 8016c86:	2b40      	cmp	r3, #64	@ 0x40
 8016c88:	f200 8145 	bhi.w	8016f16 <USBD_StdEPReq+0x2b0>
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d00c      	beq.n	8016caa <USBD_StdEPReq+0x44>
 8016c90:	2b20      	cmp	r3, #32
 8016c92:	f040 8140 	bne.w	8016f16 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016c9c:	689b      	ldr	r3, [r3, #8]
 8016c9e:	6839      	ldr	r1, [r7, #0]
 8016ca0:	6878      	ldr	r0, [r7, #4]
 8016ca2:	4798      	blx	r3
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8016ca8:	e13a      	b.n	8016f20 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016caa:	683b      	ldr	r3, [r7, #0]
 8016cac:	785b      	ldrb	r3, [r3, #1]
 8016cae:	2b03      	cmp	r3, #3
 8016cb0:	d007      	beq.n	8016cc2 <USBD_StdEPReq+0x5c>
 8016cb2:	2b03      	cmp	r3, #3
 8016cb4:	f300 8129 	bgt.w	8016f0a <USBD_StdEPReq+0x2a4>
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d07f      	beq.n	8016dbc <USBD_StdEPReq+0x156>
 8016cbc:	2b01      	cmp	r3, #1
 8016cbe:	d03c      	beq.n	8016d3a <USBD_StdEPReq+0xd4>
 8016cc0:	e123      	b.n	8016f0a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016cc8:	b2db      	uxtb	r3, r3
 8016cca:	2b02      	cmp	r3, #2
 8016ccc:	d002      	beq.n	8016cd4 <USBD_StdEPReq+0x6e>
 8016cce:	2b03      	cmp	r3, #3
 8016cd0:	d016      	beq.n	8016d00 <USBD_StdEPReq+0x9a>
 8016cd2:	e02c      	b.n	8016d2e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016cd4:	7bbb      	ldrb	r3, [r7, #14]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d00d      	beq.n	8016cf6 <USBD_StdEPReq+0x90>
 8016cda:	7bbb      	ldrb	r3, [r7, #14]
 8016cdc:	2b80      	cmp	r3, #128	@ 0x80
 8016cde:	d00a      	beq.n	8016cf6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016ce0:	7bbb      	ldrb	r3, [r7, #14]
 8016ce2:	4619      	mov	r1, r3
 8016ce4:	6878      	ldr	r0, [r7, #4]
 8016ce6:	f001 fc9d 	bl	8018624 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016cea:	2180      	movs	r1, #128	@ 0x80
 8016cec:	6878      	ldr	r0, [r7, #4]
 8016cee:	f001 fc99 	bl	8018624 <USBD_LL_StallEP>
 8016cf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016cf4:	e020      	b.n	8016d38 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8016cf6:	6839      	ldr	r1, [r7, #0]
 8016cf8:	6878      	ldr	r0, [r7, #4]
 8016cfa:	f000 fc6f 	bl	80175dc <USBD_CtlError>
              break;
 8016cfe:	e01b      	b.n	8016d38 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016d00:	683b      	ldr	r3, [r7, #0]
 8016d02:	885b      	ldrh	r3, [r3, #2]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d10e      	bne.n	8016d26 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016d08:	7bbb      	ldrb	r3, [r7, #14]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d00b      	beq.n	8016d26 <USBD_StdEPReq+0xc0>
 8016d0e:	7bbb      	ldrb	r3, [r7, #14]
 8016d10:	2b80      	cmp	r3, #128	@ 0x80
 8016d12:	d008      	beq.n	8016d26 <USBD_StdEPReq+0xc0>
 8016d14:	683b      	ldr	r3, [r7, #0]
 8016d16:	88db      	ldrh	r3, [r3, #6]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d104      	bne.n	8016d26 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016d1c:	7bbb      	ldrb	r3, [r7, #14]
 8016d1e:	4619      	mov	r1, r3
 8016d20:	6878      	ldr	r0, [r7, #4]
 8016d22:	f001 fc7f 	bl	8018624 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016d26:	6878      	ldr	r0, [r7, #4]
 8016d28:	f000 fd23 	bl	8017772 <USBD_CtlSendStatus>

              break;
 8016d2c:	e004      	b.n	8016d38 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8016d2e:	6839      	ldr	r1, [r7, #0]
 8016d30:	6878      	ldr	r0, [r7, #4]
 8016d32:	f000 fc53 	bl	80175dc <USBD_CtlError>
              break;
 8016d36:	bf00      	nop
          }
          break;
 8016d38:	e0ec      	b.n	8016f14 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016d40:	b2db      	uxtb	r3, r3
 8016d42:	2b02      	cmp	r3, #2
 8016d44:	d002      	beq.n	8016d4c <USBD_StdEPReq+0xe6>
 8016d46:	2b03      	cmp	r3, #3
 8016d48:	d016      	beq.n	8016d78 <USBD_StdEPReq+0x112>
 8016d4a:	e030      	b.n	8016dae <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016d4c:	7bbb      	ldrb	r3, [r7, #14]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d00d      	beq.n	8016d6e <USBD_StdEPReq+0x108>
 8016d52:	7bbb      	ldrb	r3, [r7, #14]
 8016d54:	2b80      	cmp	r3, #128	@ 0x80
 8016d56:	d00a      	beq.n	8016d6e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016d58:	7bbb      	ldrb	r3, [r7, #14]
 8016d5a:	4619      	mov	r1, r3
 8016d5c:	6878      	ldr	r0, [r7, #4]
 8016d5e:	f001 fc61 	bl	8018624 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016d62:	2180      	movs	r1, #128	@ 0x80
 8016d64:	6878      	ldr	r0, [r7, #4]
 8016d66:	f001 fc5d 	bl	8018624 <USBD_LL_StallEP>
 8016d6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016d6c:	e025      	b.n	8016dba <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8016d6e:	6839      	ldr	r1, [r7, #0]
 8016d70:	6878      	ldr	r0, [r7, #4]
 8016d72:	f000 fc33 	bl	80175dc <USBD_CtlError>
              break;
 8016d76:	e020      	b.n	8016dba <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016d78:	683b      	ldr	r3, [r7, #0]
 8016d7a:	885b      	ldrh	r3, [r3, #2]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d11b      	bne.n	8016db8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016d80:	7bbb      	ldrb	r3, [r7, #14]
 8016d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d004      	beq.n	8016d94 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016d8a:	7bbb      	ldrb	r3, [r7, #14]
 8016d8c:	4619      	mov	r1, r3
 8016d8e:	6878      	ldr	r0, [r7, #4]
 8016d90:	f001 fc67 	bl	8018662 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016d94:	6878      	ldr	r0, [r7, #4]
 8016d96:	f000 fcec 	bl	8017772 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016da0:	689b      	ldr	r3, [r3, #8]
 8016da2:	6839      	ldr	r1, [r7, #0]
 8016da4:	6878      	ldr	r0, [r7, #4]
 8016da6:	4798      	blx	r3
 8016da8:	4603      	mov	r3, r0
 8016daa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8016dac:	e004      	b.n	8016db8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8016dae:	6839      	ldr	r1, [r7, #0]
 8016db0:	6878      	ldr	r0, [r7, #4]
 8016db2:	f000 fc13 	bl	80175dc <USBD_CtlError>
              break;
 8016db6:	e000      	b.n	8016dba <USBD_StdEPReq+0x154>
              break;
 8016db8:	bf00      	nop
          }
          break;
 8016dba:	e0ab      	b.n	8016f14 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016dc2:	b2db      	uxtb	r3, r3
 8016dc4:	2b02      	cmp	r3, #2
 8016dc6:	d002      	beq.n	8016dce <USBD_StdEPReq+0x168>
 8016dc8:	2b03      	cmp	r3, #3
 8016dca:	d032      	beq.n	8016e32 <USBD_StdEPReq+0x1cc>
 8016dcc:	e097      	b.n	8016efe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016dce:	7bbb      	ldrb	r3, [r7, #14]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d007      	beq.n	8016de4 <USBD_StdEPReq+0x17e>
 8016dd4:	7bbb      	ldrb	r3, [r7, #14]
 8016dd6:	2b80      	cmp	r3, #128	@ 0x80
 8016dd8:	d004      	beq.n	8016de4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8016dda:	6839      	ldr	r1, [r7, #0]
 8016ddc:	6878      	ldr	r0, [r7, #4]
 8016dde:	f000 fbfd 	bl	80175dc <USBD_CtlError>
                break;
 8016de2:	e091      	b.n	8016f08 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016de4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	da0b      	bge.n	8016e04 <USBD_StdEPReq+0x19e>
 8016dec:	7bbb      	ldrb	r3, [r7, #14]
 8016dee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016df2:	4613      	mov	r3, r2
 8016df4:	009b      	lsls	r3, r3, #2
 8016df6:	4413      	add	r3, r2
 8016df8:	009b      	lsls	r3, r3, #2
 8016dfa:	3310      	adds	r3, #16
 8016dfc:	687a      	ldr	r2, [r7, #4]
 8016dfe:	4413      	add	r3, r2
 8016e00:	3304      	adds	r3, #4
 8016e02:	e00b      	b.n	8016e1c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016e04:	7bbb      	ldrb	r3, [r7, #14]
 8016e06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016e0a:	4613      	mov	r3, r2
 8016e0c:	009b      	lsls	r3, r3, #2
 8016e0e:	4413      	add	r3, r2
 8016e10:	009b      	lsls	r3, r3, #2
 8016e12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016e16:	687a      	ldr	r2, [r7, #4]
 8016e18:	4413      	add	r3, r2
 8016e1a:	3304      	adds	r3, #4
 8016e1c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016e1e:	68bb      	ldr	r3, [r7, #8]
 8016e20:	2200      	movs	r2, #0
 8016e22:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016e24:	68bb      	ldr	r3, [r7, #8]
 8016e26:	2202      	movs	r2, #2
 8016e28:	4619      	mov	r1, r3
 8016e2a:	6878      	ldr	r0, [r7, #4]
 8016e2c:	f000 fc47 	bl	80176be <USBD_CtlSendData>
              break;
 8016e30:	e06a      	b.n	8016f08 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016e32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	da11      	bge.n	8016e5e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016e3a:	7bbb      	ldrb	r3, [r7, #14]
 8016e3c:	f003 020f 	and.w	r2, r3, #15
 8016e40:	6879      	ldr	r1, [r7, #4]
 8016e42:	4613      	mov	r3, r2
 8016e44:	009b      	lsls	r3, r3, #2
 8016e46:	4413      	add	r3, r2
 8016e48:	009b      	lsls	r3, r3, #2
 8016e4a:	440b      	add	r3, r1
 8016e4c:	3324      	adds	r3, #36	@ 0x24
 8016e4e:	881b      	ldrh	r3, [r3, #0]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d117      	bne.n	8016e84 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8016e54:	6839      	ldr	r1, [r7, #0]
 8016e56:	6878      	ldr	r0, [r7, #4]
 8016e58:	f000 fbc0 	bl	80175dc <USBD_CtlError>
                  break;
 8016e5c:	e054      	b.n	8016f08 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016e5e:	7bbb      	ldrb	r3, [r7, #14]
 8016e60:	f003 020f 	and.w	r2, r3, #15
 8016e64:	6879      	ldr	r1, [r7, #4]
 8016e66:	4613      	mov	r3, r2
 8016e68:	009b      	lsls	r3, r3, #2
 8016e6a:	4413      	add	r3, r2
 8016e6c:	009b      	lsls	r3, r3, #2
 8016e6e:	440b      	add	r3, r1
 8016e70:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016e74:	881b      	ldrh	r3, [r3, #0]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d104      	bne.n	8016e84 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8016e7a:	6839      	ldr	r1, [r7, #0]
 8016e7c:	6878      	ldr	r0, [r7, #4]
 8016e7e:	f000 fbad 	bl	80175dc <USBD_CtlError>
                  break;
 8016e82:	e041      	b.n	8016f08 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016e84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	da0b      	bge.n	8016ea4 <USBD_StdEPReq+0x23e>
 8016e8c:	7bbb      	ldrb	r3, [r7, #14]
 8016e8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016e92:	4613      	mov	r3, r2
 8016e94:	009b      	lsls	r3, r3, #2
 8016e96:	4413      	add	r3, r2
 8016e98:	009b      	lsls	r3, r3, #2
 8016e9a:	3310      	adds	r3, #16
 8016e9c:	687a      	ldr	r2, [r7, #4]
 8016e9e:	4413      	add	r3, r2
 8016ea0:	3304      	adds	r3, #4
 8016ea2:	e00b      	b.n	8016ebc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016ea4:	7bbb      	ldrb	r3, [r7, #14]
 8016ea6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016eaa:	4613      	mov	r3, r2
 8016eac:	009b      	lsls	r3, r3, #2
 8016eae:	4413      	add	r3, r2
 8016eb0:	009b      	lsls	r3, r3, #2
 8016eb2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016eb6:	687a      	ldr	r2, [r7, #4]
 8016eb8:	4413      	add	r3, r2
 8016eba:	3304      	adds	r3, #4
 8016ebc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016ebe:	7bbb      	ldrb	r3, [r7, #14]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d002      	beq.n	8016eca <USBD_StdEPReq+0x264>
 8016ec4:	7bbb      	ldrb	r3, [r7, #14]
 8016ec6:	2b80      	cmp	r3, #128	@ 0x80
 8016ec8:	d103      	bne.n	8016ed2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8016eca:	68bb      	ldr	r3, [r7, #8]
 8016ecc:	2200      	movs	r2, #0
 8016ece:	601a      	str	r2, [r3, #0]
 8016ed0:	e00e      	b.n	8016ef0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016ed2:	7bbb      	ldrb	r3, [r7, #14]
 8016ed4:	4619      	mov	r1, r3
 8016ed6:	6878      	ldr	r0, [r7, #4]
 8016ed8:	f001 fbe2 	bl	80186a0 <USBD_LL_IsStallEP>
 8016edc:	4603      	mov	r3, r0
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d003      	beq.n	8016eea <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	2201      	movs	r2, #1
 8016ee6:	601a      	str	r2, [r3, #0]
 8016ee8:	e002      	b.n	8016ef0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8016eea:	68bb      	ldr	r3, [r7, #8]
 8016eec:	2200      	movs	r2, #0
 8016eee:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016ef0:	68bb      	ldr	r3, [r7, #8]
 8016ef2:	2202      	movs	r2, #2
 8016ef4:	4619      	mov	r1, r3
 8016ef6:	6878      	ldr	r0, [r7, #4]
 8016ef8:	f000 fbe1 	bl	80176be <USBD_CtlSendData>
              break;
 8016efc:	e004      	b.n	8016f08 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8016efe:	6839      	ldr	r1, [r7, #0]
 8016f00:	6878      	ldr	r0, [r7, #4]
 8016f02:	f000 fb6b 	bl	80175dc <USBD_CtlError>
              break;
 8016f06:	bf00      	nop
          }
          break;
 8016f08:	e004      	b.n	8016f14 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8016f0a:	6839      	ldr	r1, [r7, #0]
 8016f0c:	6878      	ldr	r0, [r7, #4]
 8016f0e:	f000 fb65 	bl	80175dc <USBD_CtlError>
          break;
 8016f12:	bf00      	nop
      }
      break;
 8016f14:	e004      	b.n	8016f20 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8016f16:	6839      	ldr	r1, [r7, #0]
 8016f18:	6878      	ldr	r0, [r7, #4]
 8016f1a:	f000 fb5f 	bl	80175dc <USBD_CtlError>
      break;
 8016f1e:	bf00      	nop
  }

  return ret;
 8016f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f22:	4618      	mov	r0, r3
 8016f24:	3710      	adds	r7, #16
 8016f26:	46bd      	mov	sp, r7
 8016f28:	bd80      	pop	{r7, pc}
	...

08016f2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b084      	sub	sp, #16
 8016f30:	af00      	add	r7, sp, #0
 8016f32:	6078      	str	r0, [r7, #4]
 8016f34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016f36:	2300      	movs	r3, #0
 8016f38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016f3e:	2300      	movs	r3, #0
 8016f40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016f42:	683b      	ldr	r3, [r7, #0]
 8016f44:	885b      	ldrh	r3, [r3, #2]
 8016f46:	0a1b      	lsrs	r3, r3, #8
 8016f48:	b29b      	uxth	r3, r3
 8016f4a:	3b01      	subs	r3, #1
 8016f4c:	2b0e      	cmp	r3, #14
 8016f4e:	f200 8152 	bhi.w	80171f6 <USBD_GetDescriptor+0x2ca>
 8016f52:	a201      	add	r2, pc, #4	@ (adr r2, 8016f58 <USBD_GetDescriptor+0x2c>)
 8016f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f58:	08016fc9 	.word	0x08016fc9
 8016f5c:	08016fe1 	.word	0x08016fe1
 8016f60:	08017021 	.word	0x08017021
 8016f64:	080171f7 	.word	0x080171f7
 8016f68:	080171f7 	.word	0x080171f7
 8016f6c:	08017197 	.word	0x08017197
 8016f70:	080171c3 	.word	0x080171c3
 8016f74:	080171f7 	.word	0x080171f7
 8016f78:	080171f7 	.word	0x080171f7
 8016f7c:	080171f7 	.word	0x080171f7
 8016f80:	080171f7 	.word	0x080171f7
 8016f84:	080171f7 	.word	0x080171f7
 8016f88:	080171f7 	.word	0x080171f7
 8016f8c:	080171f7 	.word	0x080171f7
 8016f90:	08016f95 	.word	0x08016f95
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f9a:	69db      	ldr	r3, [r3, #28]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d00b      	beq.n	8016fb8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016fa6:	69db      	ldr	r3, [r3, #28]
 8016fa8:	687a      	ldr	r2, [r7, #4]
 8016faa:	7c12      	ldrb	r2, [r2, #16]
 8016fac:	f107 0108 	add.w	r1, r7, #8
 8016fb0:	4610      	mov	r0, r2
 8016fb2:	4798      	blx	r3
 8016fb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016fb6:	e126      	b.n	8017206 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016fb8:	6839      	ldr	r1, [r7, #0]
 8016fba:	6878      	ldr	r0, [r7, #4]
 8016fbc:	f000 fb0e 	bl	80175dc <USBD_CtlError>
        err++;
 8016fc0:	7afb      	ldrb	r3, [r7, #11]
 8016fc2:	3301      	adds	r3, #1
 8016fc4:	72fb      	strb	r3, [r7, #11]
      break;
 8016fc6:	e11e      	b.n	8017206 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016fce:	681b      	ldr	r3, [r3, #0]
 8016fd0:	687a      	ldr	r2, [r7, #4]
 8016fd2:	7c12      	ldrb	r2, [r2, #16]
 8016fd4:	f107 0108 	add.w	r1, r7, #8
 8016fd8:	4610      	mov	r0, r2
 8016fda:	4798      	blx	r3
 8016fdc:	60f8      	str	r0, [r7, #12]
      break;
 8016fde:	e112      	b.n	8017206 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	7c1b      	ldrb	r3, [r3, #16]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d10d      	bne.n	8017004 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ff0:	f107 0208 	add.w	r2, r7, #8
 8016ff4:	4610      	mov	r0, r2
 8016ff6:	4798      	blx	r3
 8016ff8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	3301      	adds	r3, #1
 8016ffe:	2202      	movs	r2, #2
 8017000:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017002:	e100      	b.n	8017206 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801700a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801700c:	f107 0208 	add.w	r2, r7, #8
 8017010:	4610      	mov	r0, r2
 8017012:	4798      	blx	r3
 8017014:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	3301      	adds	r3, #1
 801701a:	2202      	movs	r2, #2
 801701c:	701a      	strb	r2, [r3, #0]
      break;
 801701e:	e0f2      	b.n	8017206 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017020:	683b      	ldr	r3, [r7, #0]
 8017022:	885b      	ldrh	r3, [r3, #2]
 8017024:	b2db      	uxtb	r3, r3
 8017026:	2b05      	cmp	r3, #5
 8017028:	f200 80ac 	bhi.w	8017184 <USBD_GetDescriptor+0x258>
 801702c:	a201      	add	r2, pc, #4	@ (adr r2, 8017034 <USBD_GetDescriptor+0x108>)
 801702e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017032:	bf00      	nop
 8017034:	0801704d 	.word	0x0801704d
 8017038:	08017081 	.word	0x08017081
 801703c:	080170b5 	.word	0x080170b5
 8017040:	080170e9 	.word	0x080170e9
 8017044:	0801711d 	.word	0x0801711d
 8017048:	08017151 	.word	0x08017151
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017052:	685b      	ldr	r3, [r3, #4]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d00b      	beq.n	8017070 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801705e:	685b      	ldr	r3, [r3, #4]
 8017060:	687a      	ldr	r2, [r7, #4]
 8017062:	7c12      	ldrb	r2, [r2, #16]
 8017064:	f107 0108 	add.w	r1, r7, #8
 8017068:	4610      	mov	r0, r2
 801706a:	4798      	blx	r3
 801706c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801706e:	e091      	b.n	8017194 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017070:	6839      	ldr	r1, [r7, #0]
 8017072:	6878      	ldr	r0, [r7, #4]
 8017074:	f000 fab2 	bl	80175dc <USBD_CtlError>
            err++;
 8017078:	7afb      	ldrb	r3, [r7, #11]
 801707a:	3301      	adds	r3, #1
 801707c:	72fb      	strb	r3, [r7, #11]
          break;
 801707e:	e089      	b.n	8017194 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017086:	689b      	ldr	r3, [r3, #8]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d00b      	beq.n	80170a4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017092:	689b      	ldr	r3, [r3, #8]
 8017094:	687a      	ldr	r2, [r7, #4]
 8017096:	7c12      	ldrb	r2, [r2, #16]
 8017098:	f107 0108 	add.w	r1, r7, #8
 801709c:	4610      	mov	r0, r2
 801709e:	4798      	blx	r3
 80170a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80170a2:	e077      	b.n	8017194 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80170a4:	6839      	ldr	r1, [r7, #0]
 80170a6:	6878      	ldr	r0, [r7, #4]
 80170a8:	f000 fa98 	bl	80175dc <USBD_CtlError>
            err++;
 80170ac:	7afb      	ldrb	r3, [r7, #11]
 80170ae:	3301      	adds	r3, #1
 80170b0:	72fb      	strb	r3, [r7, #11]
          break;
 80170b2:	e06f      	b.n	8017194 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170ba:	68db      	ldr	r3, [r3, #12]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d00b      	beq.n	80170d8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170c6:	68db      	ldr	r3, [r3, #12]
 80170c8:	687a      	ldr	r2, [r7, #4]
 80170ca:	7c12      	ldrb	r2, [r2, #16]
 80170cc:	f107 0108 	add.w	r1, r7, #8
 80170d0:	4610      	mov	r0, r2
 80170d2:	4798      	blx	r3
 80170d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80170d6:	e05d      	b.n	8017194 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80170d8:	6839      	ldr	r1, [r7, #0]
 80170da:	6878      	ldr	r0, [r7, #4]
 80170dc:	f000 fa7e 	bl	80175dc <USBD_CtlError>
            err++;
 80170e0:	7afb      	ldrb	r3, [r7, #11]
 80170e2:	3301      	adds	r3, #1
 80170e4:	72fb      	strb	r3, [r7, #11]
          break;
 80170e6:	e055      	b.n	8017194 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170ee:	691b      	ldr	r3, [r3, #16]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d00b      	beq.n	801710c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170fa:	691b      	ldr	r3, [r3, #16]
 80170fc:	687a      	ldr	r2, [r7, #4]
 80170fe:	7c12      	ldrb	r2, [r2, #16]
 8017100:	f107 0108 	add.w	r1, r7, #8
 8017104:	4610      	mov	r0, r2
 8017106:	4798      	blx	r3
 8017108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801710a:	e043      	b.n	8017194 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801710c:	6839      	ldr	r1, [r7, #0]
 801710e:	6878      	ldr	r0, [r7, #4]
 8017110:	f000 fa64 	bl	80175dc <USBD_CtlError>
            err++;
 8017114:	7afb      	ldrb	r3, [r7, #11]
 8017116:	3301      	adds	r3, #1
 8017118:	72fb      	strb	r3, [r7, #11]
          break;
 801711a:	e03b      	b.n	8017194 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017122:	695b      	ldr	r3, [r3, #20]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d00b      	beq.n	8017140 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801712e:	695b      	ldr	r3, [r3, #20]
 8017130:	687a      	ldr	r2, [r7, #4]
 8017132:	7c12      	ldrb	r2, [r2, #16]
 8017134:	f107 0108 	add.w	r1, r7, #8
 8017138:	4610      	mov	r0, r2
 801713a:	4798      	blx	r3
 801713c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801713e:	e029      	b.n	8017194 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017140:	6839      	ldr	r1, [r7, #0]
 8017142:	6878      	ldr	r0, [r7, #4]
 8017144:	f000 fa4a 	bl	80175dc <USBD_CtlError>
            err++;
 8017148:	7afb      	ldrb	r3, [r7, #11]
 801714a:	3301      	adds	r3, #1
 801714c:	72fb      	strb	r3, [r7, #11]
          break;
 801714e:	e021      	b.n	8017194 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017156:	699b      	ldr	r3, [r3, #24]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d00b      	beq.n	8017174 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017162:	699b      	ldr	r3, [r3, #24]
 8017164:	687a      	ldr	r2, [r7, #4]
 8017166:	7c12      	ldrb	r2, [r2, #16]
 8017168:	f107 0108 	add.w	r1, r7, #8
 801716c:	4610      	mov	r0, r2
 801716e:	4798      	blx	r3
 8017170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017172:	e00f      	b.n	8017194 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017174:	6839      	ldr	r1, [r7, #0]
 8017176:	6878      	ldr	r0, [r7, #4]
 8017178:	f000 fa30 	bl	80175dc <USBD_CtlError>
            err++;
 801717c:	7afb      	ldrb	r3, [r7, #11]
 801717e:	3301      	adds	r3, #1
 8017180:	72fb      	strb	r3, [r7, #11]
          break;
 8017182:	e007      	b.n	8017194 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017184:	6839      	ldr	r1, [r7, #0]
 8017186:	6878      	ldr	r0, [r7, #4]
 8017188:	f000 fa28 	bl	80175dc <USBD_CtlError>
          err++;
 801718c:	7afb      	ldrb	r3, [r7, #11]
 801718e:	3301      	adds	r3, #1
 8017190:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8017192:	bf00      	nop
      }
      break;
 8017194:	e037      	b.n	8017206 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	7c1b      	ldrb	r3, [r3, #16]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d109      	bne.n	80171b2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80171a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80171a6:	f107 0208 	add.w	r2, r7, #8
 80171aa:	4610      	mov	r0, r2
 80171ac:	4798      	blx	r3
 80171ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80171b0:	e029      	b.n	8017206 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80171b2:	6839      	ldr	r1, [r7, #0]
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f000 fa11 	bl	80175dc <USBD_CtlError>
        err++;
 80171ba:	7afb      	ldrb	r3, [r7, #11]
 80171bc:	3301      	adds	r3, #1
 80171be:	72fb      	strb	r3, [r7, #11]
      break;
 80171c0:	e021      	b.n	8017206 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	7c1b      	ldrb	r3, [r3, #16]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d10d      	bne.n	80171e6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80171d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80171d2:	f107 0208 	add.w	r2, r7, #8
 80171d6:	4610      	mov	r0, r2
 80171d8:	4798      	blx	r3
 80171da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	3301      	adds	r3, #1
 80171e0:	2207      	movs	r2, #7
 80171e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80171e4:	e00f      	b.n	8017206 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80171e6:	6839      	ldr	r1, [r7, #0]
 80171e8:	6878      	ldr	r0, [r7, #4]
 80171ea:	f000 f9f7 	bl	80175dc <USBD_CtlError>
        err++;
 80171ee:	7afb      	ldrb	r3, [r7, #11]
 80171f0:	3301      	adds	r3, #1
 80171f2:	72fb      	strb	r3, [r7, #11]
      break;
 80171f4:	e007      	b.n	8017206 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80171f6:	6839      	ldr	r1, [r7, #0]
 80171f8:	6878      	ldr	r0, [r7, #4]
 80171fa:	f000 f9ef 	bl	80175dc <USBD_CtlError>
      err++;
 80171fe:	7afb      	ldrb	r3, [r7, #11]
 8017200:	3301      	adds	r3, #1
 8017202:	72fb      	strb	r3, [r7, #11]
      break;
 8017204:	bf00      	nop
  }

  if (err != 0U)
 8017206:	7afb      	ldrb	r3, [r7, #11]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d11e      	bne.n	801724a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	88db      	ldrh	r3, [r3, #6]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d016      	beq.n	8017242 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8017214:	893b      	ldrh	r3, [r7, #8]
 8017216:	2b00      	cmp	r3, #0
 8017218:	d00e      	beq.n	8017238 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801721a:	683b      	ldr	r3, [r7, #0]
 801721c:	88da      	ldrh	r2, [r3, #6]
 801721e:	893b      	ldrh	r3, [r7, #8]
 8017220:	4293      	cmp	r3, r2
 8017222:	bf28      	it	cs
 8017224:	4613      	movcs	r3, r2
 8017226:	b29b      	uxth	r3, r3
 8017228:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801722a:	893b      	ldrh	r3, [r7, #8]
 801722c:	461a      	mov	r2, r3
 801722e:	68f9      	ldr	r1, [r7, #12]
 8017230:	6878      	ldr	r0, [r7, #4]
 8017232:	f000 fa44 	bl	80176be <USBD_CtlSendData>
 8017236:	e009      	b.n	801724c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017238:	6839      	ldr	r1, [r7, #0]
 801723a:	6878      	ldr	r0, [r7, #4]
 801723c:	f000 f9ce 	bl	80175dc <USBD_CtlError>
 8017240:	e004      	b.n	801724c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017242:	6878      	ldr	r0, [r7, #4]
 8017244:	f000 fa95 	bl	8017772 <USBD_CtlSendStatus>
 8017248:	e000      	b.n	801724c <USBD_GetDescriptor+0x320>
    return;
 801724a:	bf00      	nop
  }
}
 801724c:	3710      	adds	r7, #16
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}
 8017252:	bf00      	nop

08017254 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b084      	sub	sp, #16
 8017258:	af00      	add	r7, sp, #0
 801725a:	6078      	str	r0, [r7, #4]
 801725c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801725e:	683b      	ldr	r3, [r7, #0]
 8017260:	889b      	ldrh	r3, [r3, #4]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d131      	bne.n	80172ca <USBD_SetAddress+0x76>
 8017266:	683b      	ldr	r3, [r7, #0]
 8017268:	88db      	ldrh	r3, [r3, #6]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d12d      	bne.n	80172ca <USBD_SetAddress+0x76>
 801726e:	683b      	ldr	r3, [r7, #0]
 8017270:	885b      	ldrh	r3, [r3, #2]
 8017272:	2b7f      	cmp	r3, #127	@ 0x7f
 8017274:	d829      	bhi.n	80172ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017276:	683b      	ldr	r3, [r7, #0]
 8017278:	885b      	ldrh	r3, [r3, #2]
 801727a:	b2db      	uxtb	r3, r3
 801727c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017280:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017288:	b2db      	uxtb	r3, r3
 801728a:	2b03      	cmp	r3, #3
 801728c:	d104      	bne.n	8017298 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801728e:	6839      	ldr	r1, [r7, #0]
 8017290:	6878      	ldr	r0, [r7, #4]
 8017292:	f000 f9a3 	bl	80175dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017296:	e01d      	b.n	80172d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	7bfa      	ldrb	r2, [r7, #15]
 801729c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80172a0:	7bfb      	ldrb	r3, [r7, #15]
 80172a2:	4619      	mov	r1, r3
 80172a4:	6878      	ldr	r0, [r7, #4]
 80172a6:	f001 fa27 	bl	80186f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80172aa:	6878      	ldr	r0, [r7, #4]
 80172ac:	f000 fa61 	bl	8017772 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80172b0:	7bfb      	ldrb	r3, [r7, #15]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d004      	beq.n	80172c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	2202      	movs	r2, #2
 80172ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80172be:	e009      	b.n	80172d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	2201      	movs	r2, #1
 80172c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80172c8:	e004      	b.n	80172d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80172ca:	6839      	ldr	r1, [r7, #0]
 80172cc:	6878      	ldr	r0, [r7, #4]
 80172ce:	f000 f985 	bl	80175dc <USBD_CtlError>
  }
}
 80172d2:	bf00      	nop
 80172d4:	bf00      	nop
 80172d6:	3710      	adds	r7, #16
 80172d8:	46bd      	mov	sp, r7
 80172da:	bd80      	pop	{r7, pc}

080172dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b084      	sub	sp, #16
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
 80172e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80172e6:	2300      	movs	r3, #0
 80172e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80172ea:	683b      	ldr	r3, [r7, #0]
 80172ec:	885b      	ldrh	r3, [r3, #2]
 80172ee:	b2da      	uxtb	r2, r3
 80172f0:	4b4c      	ldr	r3, [pc, #304]	@ (8017424 <USBD_SetConfig+0x148>)
 80172f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80172f4:	4b4b      	ldr	r3, [pc, #300]	@ (8017424 <USBD_SetConfig+0x148>)
 80172f6:	781b      	ldrb	r3, [r3, #0]
 80172f8:	2b01      	cmp	r3, #1
 80172fa:	d905      	bls.n	8017308 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80172fc:	6839      	ldr	r1, [r7, #0]
 80172fe:	6878      	ldr	r0, [r7, #4]
 8017300:	f000 f96c 	bl	80175dc <USBD_CtlError>
    return USBD_FAIL;
 8017304:	2303      	movs	r3, #3
 8017306:	e088      	b.n	801741a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801730e:	b2db      	uxtb	r3, r3
 8017310:	2b02      	cmp	r3, #2
 8017312:	d002      	beq.n	801731a <USBD_SetConfig+0x3e>
 8017314:	2b03      	cmp	r3, #3
 8017316:	d025      	beq.n	8017364 <USBD_SetConfig+0x88>
 8017318:	e071      	b.n	80173fe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801731a:	4b42      	ldr	r3, [pc, #264]	@ (8017424 <USBD_SetConfig+0x148>)
 801731c:	781b      	ldrb	r3, [r3, #0]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d01c      	beq.n	801735c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8017322:	4b40      	ldr	r3, [pc, #256]	@ (8017424 <USBD_SetConfig+0x148>)
 8017324:	781b      	ldrb	r3, [r3, #0]
 8017326:	461a      	mov	r2, r3
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801732c:	4b3d      	ldr	r3, [pc, #244]	@ (8017424 <USBD_SetConfig+0x148>)
 801732e:	781b      	ldrb	r3, [r3, #0]
 8017330:	4619      	mov	r1, r3
 8017332:	6878      	ldr	r0, [r7, #4]
 8017334:	f7ff f992 	bl	801665c <USBD_SetClassConfig>
 8017338:	4603      	mov	r3, r0
 801733a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801733c:	7bfb      	ldrb	r3, [r7, #15]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d004      	beq.n	801734c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8017342:	6839      	ldr	r1, [r7, #0]
 8017344:	6878      	ldr	r0, [r7, #4]
 8017346:	f000 f949 	bl	80175dc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801734a:	e065      	b.n	8017418 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801734c:	6878      	ldr	r0, [r7, #4]
 801734e:	f000 fa10 	bl	8017772 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	2203      	movs	r2, #3
 8017356:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801735a:	e05d      	b.n	8017418 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801735c:	6878      	ldr	r0, [r7, #4]
 801735e:	f000 fa08 	bl	8017772 <USBD_CtlSendStatus>
      break;
 8017362:	e059      	b.n	8017418 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017364:	4b2f      	ldr	r3, [pc, #188]	@ (8017424 <USBD_SetConfig+0x148>)
 8017366:	781b      	ldrb	r3, [r3, #0]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d112      	bne.n	8017392 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	2202      	movs	r2, #2
 8017370:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017374:	4b2b      	ldr	r3, [pc, #172]	@ (8017424 <USBD_SetConfig+0x148>)
 8017376:	781b      	ldrb	r3, [r3, #0]
 8017378:	461a      	mov	r2, r3
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801737e:	4b29      	ldr	r3, [pc, #164]	@ (8017424 <USBD_SetConfig+0x148>)
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	4619      	mov	r1, r3
 8017384:	6878      	ldr	r0, [r7, #4]
 8017386:	f7ff f985 	bl	8016694 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801738a:	6878      	ldr	r0, [r7, #4]
 801738c:	f000 f9f1 	bl	8017772 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017390:	e042      	b.n	8017418 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8017392:	4b24      	ldr	r3, [pc, #144]	@ (8017424 <USBD_SetConfig+0x148>)
 8017394:	781b      	ldrb	r3, [r3, #0]
 8017396:	461a      	mov	r2, r3
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	685b      	ldr	r3, [r3, #4]
 801739c:	429a      	cmp	r2, r3
 801739e:	d02a      	beq.n	80173f6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	685b      	ldr	r3, [r3, #4]
 80173a4:	b2db      	uxtb	r3, r3
 80173a6:	4619      	mov	r1, r3
 80173a8:	6878      	ldr	r0, [r7, #4]
 80173aa:	f7ff f973 	bl	8016694 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80173ae:	4b1d      	ldr	r3, [pc, #116]	@ (8017424 <USBD_SetConfig+0x148>)
 80173b0:	781b      	ldrb	r3, [r3, #0]
 80173b2:	461a      	mov	r2, r3
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80173b8:	4b1a      	ldr	r3, [pc, #104]	@ (8017424 <USBD_SetConfig+0x148>)
 80173ba:	781b      	ldrb	r3, [r3, #0]
 80173bc:	4619      	mov	r1, r3
 80173be:	6878      	ldr	r0, [r7, #4]
 80173c0:	f7ff f94c 	bl	801665c <USBD_SetClassConfig>
 80173c4:	4603      	mov	r3, r0
 80173c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80173c8:	7bfb      	ldrb	r3, [r7, #15]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d00f      	beq.n	80173ee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80173ce:	6839      	ldr	r1, [r7, #0]
 80173d0:	6878      	ldr	r0, [r7, #4]
 80173d2:	f000 f903 	bl	80175dc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	685b      	ldr	r3, [r3, #4]
 80173da:	b2db      	uxtb	r3, r3
 80173dc:	4619      	mov	r1, r3
 80173de:	6878      	ldr	r0, [r7, #4]
 80173e0:	f7ff f958 	bl	8016694 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	2202      	movs	r2, #2
 80173e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80173ec:	e014      	b.n	8017418 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80173ee:	6878      	ldr	r0, [r7, #4]
 80173f0:	f000 f9bf 	bl	8017772 <USBD_CtlSendStatus>
      break;
 80173f4:	e010      	b.n	8017418 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80173f6:	6878      	ldr	r0, [r7, #4]
 80173f8:	f000 f9bb 	bl	8017772 <USBD_CtlSendStatus>
      break;
 80173fc:	e00c      	b.n	8017418 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80173fe:	6839      	ldr	r1, [r7, #0]
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f000 f8eb 	bl	80175dc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017406:	4b07      	ldr	r3, [pc, #28]	@ (8017424 <USBD_SetConfig+0x148>)
 8017408:	781b      	ldrb	r3, [r3, #0]
 801740a:	4619      	mov	r1, r3
 801740c:	6878      	ldr	r0, [r7, #4]
 801740e:	f7ff f941 	bl	8016694 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017412:	2303      	movs	r3, #3
 8017414:	73fb      	strb	r3, [r7, #15]
      break;
 8017416:	bf00      	nop
  }

  return ret;
 8017418:	7bfb      	ldrb	r3, [r7, #15]
}
 801741a:	4618      	mov	r0, r3
 801741c:	3710      	adds	r7, #16
 801741e:	46bd      	mov	sp, r7
 8017420:	bd80      	pop	{r7, pc}
 8017422:	bf00      	nop
 8017424:	20000751 	.word	0x20000751

08017428 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017428:	b580      	push	{r7, lr}
 801742a:	b082      	sub	sp, #8
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
 8017430:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017432:	683b      	ldr	r3, [r7, #0]
 8017434:	88db      	ldrh	r3, [r3, #6]
 8017436:	2b01      	cmp	r3, #1
 8017438:	d004      	beq.n	8017444 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801743a:	6839      	ldr	r1, [r7, #0]
 801743c:	6878      	ldr	r0, [r7, #4]
 801743e:	f000 f8cd 	bl	80175dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017442:	e023      	b.n	801748c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801744a:	b2db      	uxtb	r3, r3
 801744c:	2b02      	cmp	r3, #2
 801744e:	dc02      	bgt.n	8017456 <USBD_GetConfig+0x2e>
 8017450:	2b00      	cmp	r3, #0
 8017452:	dc03      	bgt.n	801745c <USBD_GetConfig+0x34>
 8017454:	e015      	b.n	8017482 <USBD_GetConfig+0x5a>
 8017456:	2b03      	cmp	r3, #3
 8017458:	d00b      	beq.n	8017472 <USBD_GetConfig+0x4a>
 801745a:	e012      	b.n	8017482 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	2200      	movs	r2, #0
 8017460:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	3308      	adds	r3, #8
 8017466:	2201      	movs	r2, #1
 8017468:	4619      	mov	r1, r3
 801746a:	6878      	ldr	r0, [r7, #4]
 801746c:	f000 f927 	bl	80176be <USBD_CtlSendData>
        break;
 8017470:	e00c      	b.n	801748c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	3304      	adds	r3, #4
 8017476:	2201      	movs	r2, #1
 8017478:	4619      	mov	r1, r3
 801747a:	6878      	ldr	r0, [r7, #4]
 801747c:	f000 f91f 	bl	80176be <USBD_CtlSendData>
        break;
 8017480:	e004      	b.n	801748c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017482:	6839      	ldr	r1, [r7, #0]
 8017484:	6878      	ldr	r0, [r7, #4]
 8017486:	f000 f8a9 	bl	80175dc <USBD_CtlError>
        break;
 801748a:	bf00      	nop
}
 801748c:	bf00      	nop
 801748e:	3708      	adds	r7, #8
 8017490:	46bd      	mov	sp, r7
 8017492:	bd80      	pop	{r7, pc}

08017494 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b082      	sub	sp, #8
 8017498:	af00      	add	r7, sp, #0
 801749a:	6078      	str	r0, [r7, #4]
 801749c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80174a4:	b2db      	uxtb	r3, r3
 80174a6:	3b01      	subs	r3, #1
 80174a8:	2b02      	cmp	r3, #2
 80174aa:	d81e      	bhi.n	80174ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80174ac:	683b      	ldr	r3, [r7, #0]
 80174ae:	88db      	ldrh	r3, [r3, #6]
 80174b0:	2b02      	cmp	r3, #2
 80174b2:	d004      	beq.n	80174be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80174b4:	6839      	ldr	r1, [r7, #0]
 80174b6:	6878      	ldr	r0, [r7, #4]
 80174b8:	f000 f890 	bl	80175dc <USBD_CtlError>
        break;
 80174bc:	e01a      	b.n	80174f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	2201      	movs	r2, #1
 80174c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d005      	beq.n	80174da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	68db      	ldr	r3, [r3, #12]
 80174d2:	f043 0202 	orr.w	r2, r3, #2
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	330c      	adds	r3, #12
 80174de:	2202      	movs	r2, #2
 80174e0:	4619      	mov	r1, r3
 80174e2:	6878      	ldr	r0, [r7, #4]
 80174e4:	f000 f8eb 	bl	80176be <USBD_CtlSendData>
      break;
 80174e8:	e004      	b.n	80174f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80174ea:	6839      	ldr	r1, [r7, #0]
 80174ec:	6878      	ldr	r0, [r7, #4]
 80174ee:	f000 f875 	bl	80175dc <USBD_CtlError>
      break;
 80174f2:	bf00      	nop
  }
}
 80174f4:	bf00      	nop
 80174f6:	3708      	adds	r7, #8
 80174f8:	46bd      	mov	sp, r7
 80174fa:	bd80      	pop	{r7, pc}

080174fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b082      	sub	sp, #8
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
 8017504:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017506:	683b      	ldr	r3, [r7, #0]
 8017508:	885b      	ldrh	r3, [r3, #2]
 801750a:	2b01      	cmp	r3, #1
 801750c:	d106      	bne.n	801751c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	2201      	movs	r2, #1
 8017512:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017516:	6878      	ldr	r0, [r7, #4]
 8017518:	f000 f92b 	bl	8017772 <USBD_CtlSendStatus>
  }
}
 801751c:	bf00      	nop
 801751e:	3708      	adds	r7, #8
 8017520:	46bd      	mov	sp, r7
 8017522:	bd80      	pop	{r7, pc}

08017524 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017524:	b580      	push	{r7, lr}
 8017526:	b082      	sub	sp, #8
 8017528:	af00      	add	r7, sp, #0
 801752a:	6078      	str	r0, [r7, #4]
 801752c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017534:	b2db      	uxtb	r3, r3
 8017536:	3b01      	subs	r3, #1
 8017538:	2b02      	cmp	r3, #2
 801753a:	d80b      	bhi.n	8017554 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801753c:	683b      	ldr	r3, [r7, #0]
 801753e:	885b      	ldrh	r3, [r3, #2]
 8017540:	2b01      	cmp	r3, #1
 8017542:	d10c      	bne.n	801755e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	2200      	movs	r2, #0
 8017548:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801754c:	6878      	ldr	r0, [r7, #4]
 801754e:	f000 f910 	bl	8017772 <USBD_CtlSendStatus>
      }
      break;
 8017552:	e004      	b.n	801755e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017554:	6839      	ldr	r1, [r7, #0]
 8017556:	6878      	ldr	r0, [r7, #4]
 8017558:	f000 f840 	bl	80175dc <USBD_CtlError>
      break;
 801755c:	e000      	b.n	8017560 <USBD_ClrFeature+0x3c>
      break;
 801755e:	bf00      	nop
  }
}
 8017560:	bf00      	nop
 8017562:	3708      	adds	r7, #8
 8017564:	46bd      	mov	sp, r7
 8017566:	bd80      	pop	{r7, pc}

08017568 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017568:	b580      	push	{r7, lr}
 801756a:	b084      	sub	sp, #16
 801756c:	af00      	add	r7, sp, #0
 801756e:	6078      	str	r0, [r7, #4]
 8017570:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017572:	683b      	ldr	r3, [r7, #0]
 8017574:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	781a      	ldrb	r2, [r3, #0]
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	3301      	adds	r3, #1
 8017582:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	781a      	ldrb	r2, [r3, #0]
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	3301      	adds	r3, #1
 8017590:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017592:	68f8      	ldr	r0, [r7, #12]
 8017594:	f7ff fa92 	bl	8016abc <SWAPBYTE>
 8017598:	4603      	mov	r3, r0
 801759a:	461a      	mov	r2, r3
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	3301      	adds	r3, #1
 80175a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	3301      	adds	r3, #1
 80175aa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80175ac:	68f8      	ldr	r0, [r7, #12]
 80175ae:	f7ff fa85 	bl	8016abc <SWAPBYTE>
 80175b2:	4603      	mov	r3, r0
 80175b4:	461a      	mov	r2, r3
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	3301      	adds	r3, #1
 80175be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	3301      	adds	r3, #1
 80175c4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80175c6:	68f8      	ldr	r0, [r7, #12]
 80175c8:	f7ff fa78 	bl	8016abc <SWAPBYTE>
 80175cc:	4603      	mov	r3, r0
 80175ce:	461a      	mov	r2, r3
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	80da      	strh	r2, [r3, #6]
}
 80175d4:	bf00      	nop
 80175d6:	3710      	adds	r7, #16
 80175d8:	46bd      	mov	sp, r7
 80175da:	bd80      	pop	{r7, pc}

080175dc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b082      	sub	sp, #8
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	6078      	str	r0, [r7, #4]
 80175e4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80175e6:	2180      	movs	r1, #128	@ 0x80
 80175e8:	6878      	ldr	r0, [r7, #4]
 80175ea:	f001 f81b 	bl	8018624 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80175ee:	2100      	movs	r1, #0
 80175f0:	6878      	ldr	r0, [r7, #4]
 80175f2:	f001 f817 	bl	8018624 <USBD_LL_StallEP>
}
 80175f6:	bf00      	nop
 80175f8:	3708      	adds	r7, #8
 80175fa:	46bd      	mov	sp, r7
 80175fc:	bd80      	pop	{r7, pc}

080175fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80175fe:	b580      	push	{r7, lr}
 8017600:	b086      	sub	sp, #24
 8017602:	af00      	add	r7, sp, #0
 8017604:	60f8      	str	r0, [r7, #12]
 8017606:	60b9      	str	r1, [r7, #8]
 8017608:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801760a:	2300      	movs	r3, #0
 801760c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d036      	beq.n	8017682 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017618:	6938      	ldr	r0, [r7, #16]
 801761a:	f000 f836 	bl	801768a <USBD_GetLen>
 801761e:	4603      	mov	r3, r0
 8017620:	3301      	adds	r3, #1
 8017622:	b29b      	uxth	r3, r3
 8017624:	005b      	lsls	r3, r3, #1
 8017626:	b29a      	uxth	r2, r3
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801762c:	7dfb      	ldrb	r3, [r7, #23]
 801762e:	68ba      	ldr	r2, [r7, #8]
 8017630:	4413      	add	r3, r2
 8017632:	687a      	ldr	r2, [r7, #4]
 8017634:	7812      	ldrb	r2, [r2, #0]
 8017636:	701a      	strb	r2, [r3, #0]
  idx++;
 8017638:	7dfb      	ldrb	r3, [r7, #23]
 801763a:	3301      	adds	r3, #1
 801763c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801763e:	7dfb      	ldrb	r3, [r7, #23]
 8017640:	68ba      	ldr	r2, [r7, #8]
 8017642:	4413      	add	r3, r2
 8017644:	2203      	movs	r2, #3
 8017646:	701a      	strb	r2, [r3, #0]
  idx++;
 8017648:	7dfb      	ldrb	r3, [r7, #23]
 801764a:	3301      	adds	r3, #1
 801764c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801764e:	e013      	b.n	8017678 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017650:	7dfb      	ldrb	r3, [r7, #23]
 8017652:	68ba      	ldr	r2, [r7, #8]
 8017654:	4413      	add	r3, r2
 8017656:	693a      	ldr	r2, [r7, #16]
 8017658:	7812      	ldrb	r2, [r2, #0]
 801765a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801765c:	693b      	ldr	r3, [r7, #16]
 801765e:	3301      	adds	r3, #1
 8017660:	613b      	str	r3, [r7, #16]
    idx++;
 8017662:	7dfb      	ldrb	r3, [r7, #23]
 8017664:	3301      	adds	r3, #1
 8017666:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017668:	7dfb      	ldrb	r3, [r7, #23]
 801766a:	68ba      	ldr	r2, [r7, #8]
 801766c:	4413      	add	r3, r2
 801766e:	2200      	movs	r2, #0
 8017670:	701a      	strb	r2, [r3, #0]
    idx++;
 8017672:	7dfb      	ldrb	r3, [r7, #23]
 8017674:	3301      	adds	r3, #1
 8017676:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017678:	693b      	ldr	r3, [r7, #16]
 801767a:	781b      	ldrb	r3, [r3, #0]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d1e7      	bne.n	8017650 <USBD_GetString+0x52>
 8017680:	e000      	b.n	8017684 <USBD_GetString+0x86>
    return;
 8017682:	bf00      	nop
  }
}
 8017684:	3718      	adds	r7, #24
 8017686:	46bd      	mov	sp, r7
 8017688:	bd80      	pop	{r7, pc}

0801768a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801768a:	b480      	push	{r7}
 801768c:	b085      	sub	sp, #20
 801768e:	af00      	add	r7, sp, #0
 8017690:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017692:	2300      	movs	r3, #0
 8017694:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801769a:	e005      	b.n	80176a8 <USBD_GetLen+0x1e>
  {
    len++;
 801769c:	7bfb      	ldrb	r3, [r7, #15]
 801769e:	3301      	adds	r3, #1
 80176a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80176a2:	68bb      	ldr	r3, [r7, #8]
 80176a4:	3301      	adds	r3, #1
 80176a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80176a8:	68bb      	ldr	r3, [r7, #8]
 80176aa:	781b      	ldrb	r3, [r3, #0]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d1f5      	bne.n	801769c <USBD_GetLen+0x12>
  }

  return len;
 80176b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80176b2:	4618      	mov	r0, r3
 80176b4:	3714      	adds	r7, #20
 80176b6:	46bd      	mov	sp, r7
 80176b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176bc:	4770      	bx	lr

080176be <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80176be:	b580      	push	{r7, lr}
 80176c0:	b084      	sub	sp, #16
 80176c2:	af00      	add	r7, sp, #0
 80176c4:	60f8      	str	r0, [r7, #12]
 80176c6:	60b9      	str	r1, [r7, #8]
 80176c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	2202      	movs	r2, #2
 80176ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	687a      	ldr	r2, [r7, #4]
 80176d6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	687a      	ldr	r2, [r7, #4]
 80176dc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	68ba      	ldr	r2, [r7, #8]
 80176e2:	2100      	movs	r1, #0
 80176e4:	68f8      	ldr	r0, [r7, #12]
 80176e6:	f001 f826 	bl	8018736 <USBD_LL_Transmit>

  return USBD_OK;
 80176ea:	2300      	movs	r3, #0
}
 80176ec:	4618      	mov	r0, r3
 80176ee:	3710      	adds	r7, #16
 80176f0:	46bd      	mov	sp, r7
 80176f2:	bd80      	pop	{r7, pc}

080176f4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80176f4:	b580      	push	{r7, lr}
 80176f6:	b084      	sub	sp, #16
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	60f8      	str	r0, [r7, #12]
 80176fc:	60b9      	str	r1, [r7, #8]
 80176fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	68ba      	ldr	r2, [r7, #8]
 8017704:	2100      	movs	r1, #0
 8017706:	68f8      	ldr	r0, [r7, #12]
 8017708:	f001 f815 	bl	8018736 <USBD_LL_Transmit>

  return USBD_OK;
 801770c:	2300      	movs	r3, #0
}
 801770e:	4618      	mov	r0, r3
 8017710:	3710      	adds	r7, #16
 8017712:	46bd      	mov	sp, r7
 8017714:	bd80      	pop	{r7, pc}

08017716 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017716:	b580      	push	{r7, lr}
 8017718:	b084      	sub	sp, #16
 801771a:	af00      	add	r7, sp, #0
 801771c:	60f8      	str	r0, [r7, #12]
 801771e:	60b9      	str	r1, [r7, #8]
 8017720:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	2203      	movs	r2, #3
 8017726:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	687a      	ldr	r2, [r7, #4]
 801772e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	687a      	ldr	r2, [r7, #4]
 8017736:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	68ba      	ldr	r2, [r7, #8]
 801773e:	2100      	movs	r1, #0
 8017740:	68f8      	ldr	r0, [r7, #12]
 8017742:	f001 f819 	bl	8018778 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017746:	2300      	movs	r3, #0
}
 8017748:	4618      	mov	r0, r3
 801774a:	3710      	adds	r7, #16
 801774c:	46bd      	mov	sp, r7
 801774e:	bd80      	pop	{r7, pc}

08017750 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b084      	sub	sp, #16
 8017754:	af00      	add	r7, sp, #0
 8017756:	60f8      	str	r0, [r7, #12]
 8017758:	60b9      	str	r1, [r7, #8]
 801775a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	68ba      	ldr	r2, [r7, #8]
 8017760:	2100      	movs	r1, #0
 8017762:	68f8      	ldr	r0, [r7, #12]
 8017764:	f001 f808 	bl	8018778 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017768:	2300      	movs	r3, #0
}
 801776a:	4618      	mov	r0, r3
 801776c:	3710      	adds	r7, #16
 801776e:	46bd      	mov	sp, r7
 8017770:	bd80      	pop	{r7, pc}

08017772 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017772:	b580      	push	{r7, lr}
 8017774:	b082      	sub	sp, #8
 8017776:	af00      	add	r7, sp, #0
 8017778:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	2204      	movs	r2, #4
 801777e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017782:	2300      	movs	r3, #0
 8017784:	2200      	movs	r2, #0
 8017786:	2100      	movs	r1, #0
 8017788:	6878      	ldr	r0, [r7, #4]
 801778a:	f000 ffd4 	bl	8018736 <USBD_LL_Transmit>

  return USBD_OK;
 801778e:	2300      	movs	r3, #0
}
 8017790:	4618      	mov	r0, r3
 8017792:	3708      	adds	r7, #8
 8017794:	46bd      	mov	sp, r7
 8017796:	bd80      	pop	{r7, pc}

08017798 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017798:	b580      	push	{r7, lr}
 801779a:	b082      	sub	sp, #8
 801779c:	af00      	add	r7, sp, #0
 801779e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	2205      	movs	r2, #5
 80177a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80177a8:	2300      	movs	r3, #0
 80177aa:	2200      	movs	r2, #0
 80177ac:	2100      	movs	r1, #0
 80177ae:	6878      	ldr	r0, [r7, #4]
 80177b0:	f000 ffe2 	bl	8018778 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80177b4:	2300      	movs	r3, #0
}
 80177b6:	4618      	mov	r0, r3
 80177b8:	3708      	adds	r7, #8
 80177ba:	46bd      	mov	sp, r7
 80177bc:	bd80      	pop	{r7, pc}

080177be <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 80177be:	b580      	push	{r7, lr}
 80177c0:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 80177c2:	f7fd fafa 	bl	8014dba <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 80177c6:	f000 f817 	bl	80177f8 <USBPD_DPM_InitCore>
 80177ca:	4603      	mov	r3, r0
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d001      	beq.n	80177d4 <MX_USBPD_Init+0x16>
  {
    while(1);
 80177d0:	bf00      	nop
 80177d2:	e7fd      	b.n	80177d0 <MX_USBPD_Init+0x12>
  }

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 80177d4:	f000 f9ca 	bl	8017b6c <USBPD_DPM_UserInit>
 80177d8:	4603      	mov	r3, r0
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d001      	beq.n	80177e2 <MX_USBPD_Init+0x24>
  {
    while(1);
 80177de:	bf00      	nop
 80177e0:	e7fd      	b.n	80177de <MX_USBPD_Init+0x20>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 80177e2:	f000 f8b7 	bl	8017954 <USBPD_DPM_InitOS>
 80177e6:	4603      	mov	r3, r0
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d001      	beq.n	80177f0 <MX_USBPD_Init+0x32>
  {
    while(1);
 80177ec:	bf00      	nop
 80177ee:	e7fd      	b.n	80177ec <MX_USBPD_Init+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 80177f0:	b662      	cpsie	i
}
 80177f2:	bf00      	nop
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 80177f4:	bf00      	nop
 80177f6:	bd80      	pop	{r7, pc}

080177f8 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b082      	sub	sp, #8
 80177fc:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 80177fe:	2300      	movs	r3, #0
 8017800:	71fb      	strb	r3, [r7, #7]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(_LIB_ID))
 8017802:	484f      	ldr	r0, [pc, #316]	@ (8017940 <USBPD_DPM_InitCore+0x148>)
 8017804:	f7e9 fe15 	bl	8001432 <USBPD_PE_CheckLIB>
 8017808:	4603      	mov	r3, r0
 801780a:	2b01      	cmp	r3, #1
 801780c:	d001      	beq.n	8017812 <USBPD_DPM_InitCore+0x1a>
  {
    return USBPD_ERROR;
 801780e:	2302      	movs	r3, #2
 8017810:	e092      	b.n	8017938 <USBPD_DPM_InitCore+0x140>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 8017812:	f7e9 fe19 	bl	8001448 <USBPD_PE_GetMemoryConsumption>
 8017816:	6038      	str	r0, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8017818:	2300      	movs	r3, #0
 801781a:	71bb      	strb	r3, [r7, #6]
 801781c:	e087      	b.n	801792e <USBPD_DPM_InitCore+0x136>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 801781e:	79bb      	ldrb	r3, [r7, #6]
 8017820:	4a48      	ldr	r2, [pc, #288]	@ (8017944 <USBPD_DPM_InitCore+0x14c>)
 8017822:	009b      	lsls	r3, r3, #2
 8017824:	4413      	add	r3, r2
 8017826:	785a      	ldrb	r2, [r3, #1]
 8017828:	f36f 02c3 	bfc	r2, #3, #1
 801782c:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 801782e:	79b9      	ldrb	r1, [r7, #6]
 8017830:	79ba      	ldrb	r2, [r7, #6]
 8017832:	4845      	ldr	r0, [pc, #276]	@ (8017948 <USBPD_DPM_InitCore+0x150>)
 8017834:	460b      	mov	r3, r1
 8017836:	005b      	lsls	r3, r3, #1
 8017838:	440b      	add	r3, r1
 801783a:	009b      	lsls	r3, r3, #2
 801783c:	4403      	add	r3, r0
 801783e:	791b      	ldrb	r3, [r3, #4]
 8017840:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8017844:	b2d8      	uxtb	r0, r3
 8017846:	493f      	ldr	r1, [pc, #252]	@ (8017944 <USBPD_DPM_InitCore+0x14c>)
 8017848:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801784c:	f360 0301 	bfi	r3, r0, #0, #2
 8017850:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 8017854:	79b9      	ldrb	r1, [r7, #6]
 8017856:	79ba      	ldrb	r2, [r7, #6]
 8017858:	483b      	ldr	r0, [pc, #236]	@ (8017948 <USBPD_DPM_InitCore+0x150>)
 801785a:	460b      	mov	r3, r1
 801785c:	005b      	lsls	r3, r3, #1
 801785e:	440b      	add	r3, r1
 8017860:	009b      	lsls	r3, r3, #2
 8017862:	4403      	add	r3, r0
 8017864:	791b      	ldrb	r3, [r3, #4]
 8017866:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801786a:	b2d8      	uxtb	r0, r3
 801786c:	4935      	ldr	r1, [pc, #212]	@ (8017944 <USBPD_DPM_InitCore+0x14c>)
 801786e:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8017872:	f360 0382 	bfi	r3, r0, #2, #1
 8017876:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 801787a:	79ba      	ldrb	r2, [r7, #6]
 801787c:	4931      	ldr	r1, [pc, #196]	@ (8017944 <USBPD_DPM_InitCore+0x14c>)
 801787e:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8017882:	f36f 1304 	bfc	r3, #4, #1
 8017886:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 801788a:	79ba      	ldrb	r2, [r7, #6]
 801788c:	492d      	ldr	r1, [pc, #180]	@ (8017944 <USBPD_DPM_InitCore+0x14c>)
 801788e:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8017892:	f36f 1387 	bfc	r3, #6, #2
 8017896:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 801789a:	79bb      	ldrb	r3, [r7, #6]
 801789c:	4a29      	ldr	r2, [pc, #164]	@ (8017944 <USBPD_DPM_InitCore+0x14c>)
 801789e:	009b      	lsls	r3, r3, #2
 80178a0:	4413      	add	r3, r2
 80178a2:	785a      	ldrb	r2, [r3, #1]
 80178a4:	f36f 1246 	bfc	r2, #5, #2
 80178a8:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 80178aa:	79bb      	ldrb	r3, [r7, #6]
 80178ac:	4a25      	ldr	r2, [pc, #148]	@ (8017944 <USBPD_DPM_InitCore+0x14c>)
 80178ae:	009b      	lsls	r3, r3, #2
 80178b0:	4413      	add	r3, r2
 80178b2:	785a      	ldrb	r2, [r3, #1]
 80178b4:	f36f 12c7 	bfc	r2, #7, #1
 80178b8:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index, (USBPD_CAD_Callbacks *)&CAD_cbs,
 80178ba:	79ba      	ldrb	r2, [r7, #6]
 80178bc:	4613      	mov	r3, r2
 80178be:	005b      	lsls	r3, r3, #1
 80178c0:	4413      	add	r3, r2
 80178c2:	009b      	lsls	r3, r3, #2
 80178c4:	4a20      	ldr	r2, [pc, #128]	@ (8017948 <USBPD_DPM_InitCore+0x150>)
 80178c6:	441a      	add	r2, r3
 80178c8:	79bb      	ldrb	r3, [r7, #6]
 80178ca:	009b      	lsls	r3, r3, #2
 80178cc:	491d      	ldr	r1, [pc, #116]	@ (8017944 <USBPD_DPM_InitCore+0x14c>)
 80178ce:	440b      	add	r3, r1
 80178d0:	79b8      	ldrb	r0, [r7, #6]
 80178d2:	491e      	ldr	r1, [pc, #120]	@ (801794c <USBPD_DPM_InitCore+0x154>)
 80178d4:	f7e8 fca0 	bl	8000218 <USBPD_CAD_Init>
 80178d8:	4603      	mov	r3, r0
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d001      	beq.n	80178e2 <USBPD_DPM_InitCore+0xea>
 80178de:	2302      	movs	r3, #2
 80178e0:	e02a      	b.n	8017938 <USBPD_DPM_InitCore+0x140>
                                           (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index], &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 80178e2:	79ba      	ldrb	r2, [r7, #6]
 80178e4:	4613      	mov	r3, r2
 80178e6:	005b      	lsls	r3, r3, #1
 80178e8:	4413      	add	r3, r2
 80178ea:	009b      	lsls	r3, r3, #2
 80178ec:	4a16      	ldr	r2, [pc, #88]	@ (8017948 <USBPD_DPM_InitCore+0x150>)
 80178ee:	1899      	adds	r1, r3, r2
 80178f0:	79bb      	ldrb	r3, [r7, #6]
 80178f2:	009b      	lsls	r3, r3, #2
 80178f4:	4a13      	ldr	r2, [pc, #76]	@ (8017944 <USBPD_DPM_InitCore+0x14c>)
 80178f6:	441a      	add	r2, r3
 80178f8:	79b8      	ldrb	r0, [r7, #6]
 80178fa:	4b15      	ldr	r3, [pc, #84]	@ (8017950 <USBPD_DPM_InitCore+0x158>)
 80178fc:	f7e8 fd5a 	bl	80003b4 <USBPD_PE_Init>
 8017900:	4603      	mov	r3, r0
 8017902:	71fb      	strb	r3, [r7, #7]
 8017904:	79fb      	ldrb	r3, [r7, #7]
 8017906:	2b00      	cmp	r3, #0
 8017908:	d001      	beq.n	801790e <USBPD_DPM_InitCore+0x116>
 801790a:	79fb      	ldrb	r3, [r7, #7]
 801790c:	e014      	b.n	8017938 <USBPD_DPM_InitCore+0x140>
                                         &DPM_Params[_port_index], &dpmCallbacks));

  /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 801790e:	79bb      	ldrb	r3, [r7, #6]
 8017910:	4a0c      	ldr	r2, [pc, #48]	@ (8017944 <USBPD_DPM_InitCore+0x14c>)
 8017912:	009b      	lsls	r3, r3, #2
 8017914:	4413      	add	r3, r2
 8017916:	785a      	ldrb	r2, [r3, #1]
 8017918:	f042 0208 	orr.w	r2, r2, #8
 801791c:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
  USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 801791e:	79bb      	ldrb	r3, [r7, #6]
 8017920:	2101      	movs	r1, #1
 8017922:	4618      	mov	r0, r3
 8017924:	f7e8 fca0 	bl	8000268 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8017928:	79bb      	ldrb	r3, [r7, #6]
 801792a:	3301      	adds	r3, #1
 801792c:	71bb      	strb	r3, [r7, #6]
 801792e:	79bb      	ldrb	r3, [r7, #6]
 8017930:	2b00      	cmp	r3, #0
 8017932:	f43f af74 	beq.w	801781e <USBPD_DPM_InitCore+0x26>

  /* initialize the sequencer */
  UTIL_SEQ_Init();
#endif /* USE_STM32_UTILITY_OS */

  return _retr;
 8017936:	79fb      	ldrb	r3, [r7, #7]
}
 8017938:	4618      	mov	r0, r3
 801793a:	3708      	adds	r7, #8
 801793c:	46bd      	mov	sp, r7
 801793e:	bd80      	pop	{r7, pc}
 8017940:	30410001 	.word	0x30410001
 8017944:	20000764 	.word	0x20000764
 8017948:	20000120 	.word	0x20000120
 801794c:	0801aae0 	.word	0x0801aae0
 8017950:	0801aae8 	.word	0x0801aae8

08017954 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 8017954:	b480      	push	{r7}
 8017956:	af00      	add	r7, sp, #0

  return USBPD_OK;
 8017958:	2300      	movs	r3, #0
}
 801795a:	4618      	mov	r0, r3
 801795c:	46bd      	mov	sp, r7
 801795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017962:	4770      	bx	lr

08017964 <USBPD_DPM_Run>:
  USBPD_DPM_UserExecute(NULL);
}
#endif /* USE_STM32_UTILITY_OS */

void USBPD_DPM_Run(void)
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b082      	sub	sp, #8
 8017968:	af00      	add	r7, sp, #0
  } while (1u == 1u);
#else /* !USE_STM32_UTILITY_OS */
  do
  {

    if ((HAL_GetTick() - DPM_Sleep_start[USBPD_PORT_COUNT]) >= DPM_Sleep_time[USBPD_PORT_COUNT])
 801796a:	f7f0 fef7 	bl	800875c <HAL_GetTick>
 801796e:	4602      	mov	r2, r0
 8017970:	4b1f      	ldr	r3, [pc, #124]	@ (80179f0 <USBPD_DPM_Run+0x8c>)
 8017972:	685b      	ldr	r3, [r3, #4]
 8017974:	1ad2      	subs	r2, r2, r3
 8017976:	4b1f      	ldr	r3, [pc, #124]	@ (80179f4 <USBPD_DPM_Run+0x90>)
 8017978:	685b      	ldr	r3, [r3, #4]
 801797a:	429a      	cmp	r2, r3
 801797c:	d309      	bcc.n	8017992 <USBPD_DPM_Run+0x2e>
    {
      DPM_Sleep_time[USBPD_PORT_COUNT] = USBPD_CAD_Process();
 801797e:	f7e8 fc7a 	bl	8000276 <USBPD_CAD_Process>
 8017982:	4603      	mov	r3, r0
 8017984:	4a1b      	ldr	r2, [pc, #108]	@ (80179f4 <USBPD_DPM_Run+0x90>)
 8017986:	6053      	str	r3, [r2, #4]
      DPM_Sleep_start[USBPD_PORT_COUNT] = HAL_GetTick();
 8017988:	f7f0 fee8 	bl	800875c <HAL_GetTick>
 801798c:	4603      	mov	r3, r0
 801798e:	4a18      	ldr	r2, [pc, #96]	@ (80179f0 <USBPD_DPM_Run+0x8c>)
 8017990:	6053      	str	r3, [r2, #4]
    }

    uint32_t port = 0;
 8017992:	2300      	movs	r3, #0
 8017994:	607b      	str	r3, [r7, #4]

    for (port = 0; port < USBPD_PORT_COUNT; port++)
 8017996:	2300      	movs	r3, #0
 8017998:	607b      	str	r3, [r7, #4]
 801799a:	e021      	b.n	80179e0 <USBPD_DPM_Run+0x7c>
    {
      if ((HAL_GetTick() - DPM_Sleep_start[port]) >= DPM_Sleep_time[port])
 801799c:	f7f0 fede 	bl	800875c <HAL_GetTick>
 80179a0:	4602      	mov	r2, r0
 80179a2:	4913      	ldr	r1, [pc, #76]	@ (80179f0 <USBPD_DPM_Run+0x8c>)
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80179aa:	1ad2      	subs	r2, r2, r3
 80179ac:	4911      	ldr	r1, [pc, #68]	@ (80179f4 <USBPD_DPM_Run+0x90>)
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80179b4:	429a      	cmp	r2, r3
 80179b6:	d310      	bcc.n	80179da <USBPD_DPM_Run+0x76>
      {
        DPM_Sleep_time[port] =
          USBPD_PE_StateMachine_SNK(port);
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	b2db      	uxtb	r3, r3
 80179bc:	4618      	mov	r0, r3
 80179be:	f7ea f989 	bl	8001cd4 <USBPD_PE_StateMachine_SNK>
 80179c2:	4602      	mov	r2, r0
        DPM_Sleep_time[port] =
 80179c4:	490b      	ldr	r1, [pc, #44]	@ (80179f4 <USBPD_DPM_Run+0x90>)
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DPM_Sleep_start[port] = HAL_GetTick();
 80179cc:	f7f0 fec6 	bl	800875c <HAL_GetTick>
 80179d0:	4602      	mov	r2, r0
 80179d2:	4907      	ldr	r1, [pc, #28]	@ (80179f0 <USBPD_DPM_Run+0x8c>)
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (port = 0; port < USBPD_PORT_COUNT; port++)
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	3301      	adds	r3, #1
 80179de:	607b      	str	r3, [r7, #4]
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d0da      	beq.n	801799c <USBPD_DPM_Run+0x38>
      }
    }

    USBPD_DPM_UserExecute(NULL);
 80179e6:	2000      	movs	r0, #0
 80179e8:	f000 f8c8 	bl	8017b7c <USBPD_DPM_UserExecute>
  {
 80179ec:	e7bd      	b.n	801796a <USBPD_DPM_Run+0x6>
 80179ee:	bf00      	nop
 80179f0:	2000075c 	.word	0x2000075c
 80179f4:	20000754 	.word	0x20000754

080179f8 <USBPD_DPM_TimerCounter>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
void USBPD_DPM_TimerCounter(void)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	af00      	add	r7, sp, #0
  /* Call PE/PRL timers functions only if DPM is initialized */
  if (USBPD_TRUE == DPM_Params[USBPD_PORT_0].DPM_Initialized)
 80179fc:	4b08      	ldr	r3, [pc, #32]	@ (8017a20 <USBPD_DPM_TimerCounter+0x28>)
 80179fe:	785b      	ldrb	r3, [r3, #1]
 8017a00:	f003 0308 	and.w	r3, r3, #8
 8017a04:	b2db      	uxtb	r3, r3
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d008      	beq.n	8017a1c <USBPD_DPM_TimerCounter+0x24>
  {
    USBPD_DPM_UserTimerCounter(USBPD_PORT_0);
 8017a0a:	2000      	movs	r0, #0
 8017a0c:	f000 f8ce 	bl	8017bac <USBPD_DPM_UserTimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_0);
 8017a10:	2000      	movs	r0, #0
 8017a12:	f7e8 fd25 	bl	8000460 <USBPD_PE_TimerCounter>
    USBPD_PRL_TimerCounter(USBPD_PORT_0);
 8017a16:	2000      	movs	r0, #0
 8017a18:	f7ec ffb4 	bl	8004984 <USBPD_PRL_TimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_1);
    USBPD_PRL_TimerCounter(USBPD_PORT_1);
  }
#endif /* USBPD_PORT_COUNT == 2 */

}
 8017a1c:	bf00      	nop
 8017a1e:	bd80      	pop	{r7, pc}
 8017a20:	20000764 	.word	0x20000764

08017a24 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 8017a24:	b480      	push	{r7}
 8017a26:	b083      	sub	sp, #12
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	71fb      	strb	r3, [r7, #7]
#if defined(USE_STM32_UTILITY_OS)
  UTIL_SEQ_SetTask(PortNum == 0 ? TASK_PE_0 : TASK_PE_1, 0);
#else
  DPM_Sleep_time[PortNum] = 0;
 8017a2e:	79fb      	ldrb	r3, [r7, #7]
 8017a30:	4a04      	ldr	r2, [pc, #16]	@ (8017a44 <USBPD_PE_TaskWakeUp+0x20>)
 8017a32:	2100      	movs	r1, #0
 8017a34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#endif /* USE_STM32_UTILITY_OS */
}
 8017a38:	bf00      	nop
 8017a3a:	370c      	adds	r7, #12
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a42:	4770      	bx	lr
 8017a44:	20000754 	.word	0x20000754

08017a48 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 8017a48:	b480      	push	{r7}
 8017a4a:	af00      	add	r7, sp, #0
#if defined(USE_STM32_UTILITY_OS)
  UTIL_SEQ_SetTask(TASK_CAD, 0);
#else
  DPM_Sleep_time[USBPD_PORT_COUNT] = 0;
 8017a4c:	4b03      	ldr	r3, [pc, #12]	@ (8017a5c <USBPD_DPM_CADTaskWakeUp+0x14>)
 8017a4e:	2200      	movs	r2, #0
 8017a50:	605a      	str	r2, [r3, #4]
#endif /* USE_STM32_UTILITY_OS */
}
 8017a52:	bf00      	nop
 8017a54:	46bd      	mov	sp, r7
 8017a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a5a:	4770      	bx	lr
 8017a5c:	20000754 	.word	0x20000754

08017a60 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b082      	sub	sp, #8
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	4603      	mov	r3, r0
 8017a68:	603a      	str	r2, [r7, #0]
 8017a6a:	71fb      	strb	r3, [r7, #7]
 8017a6c:	460b      	mov	r3, r1
 8017a6e:	71bb      	strb	r3, [r7, #6]

  switch (State)
 8017a70:	79bb      	ldrb	r3, [r7, #6]
 8017a72:	3b01      	subs	r3, #1
 8017a74:	2b03      	cmp	r3, #3
 8017a76:	d843      	bhi.n	8017b00 <USBPD_DPM_CADCallback+0xa0>
 8017a78:	a201      	add	r2, pc, #4	@ (adr r2, 8017a80 <USBPD_DPM_CADCallback+0x20>)
 8017a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a7e:	bf00      	nop
 8017a80:	08017aad 	.word	0x08017aad
 8017a84:	08017a9f 	.word	0x08017a9f
 8017a88:	08017aad 	.word	0x08017aad
 8017a8c:	08017a91 	.word	0x08017a91
    case USBPD_CAD_EVENT_ATTEMC :
    {
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnStatus = USBPD_TRUE;
#endif /* _VCONN_SUPPORT */
      DPM_ManageAttachedState(PortNum, State, Cc);
 8017a90:	79b9      	ldrb	r1, [r7, #6]
 8017a92:	79fb      	ldrb	r3, [r7, #7]
 8017a94:	683a      	ldr	r2, [r7, #0]
 8017a96:	4618      	mov	r0, r3
 8017a98:	f000 f83c 	bl	8017b14 <DPM_ManageAttachedState>
#ifdef _VCONN_SUPPORT
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=TRUE");
#endif /* _VCONN_SUPPORT */
      break;
 8017a9c:	e031      	b.n	8017b02 <USBPD_DPM_CADCallback+0xa2>
    }
    case USBPD_CAD_EVENT_ATTACHED :
      DPM_ManageAttachedState(PortNum, State, Cc);
 8017a9e:	79b9      	ldrb	r1, [r7, #6]
 8017aa0:	79fb      	ldrb	r3, [r7, #7]
 8017aa2:	683a      	ldr	r2, [r7, #0]
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	f000 f835 	bl	8017b14 <DPM_ManageAttachedState>
      break;
 8017aaa:	e02a      	b.n	8017b02 <USBPD_DPM_CADCallback+0xa2>
    case USBPD_CAD_EVENT_DETACHED :
    case USBPD_CAD_EVENT_EMC :
    {
      /* The ufp is detached */
      (void)USBPD_PE_IsCableConnected(PortNum, 0);
 8017aac:	79fb      	ldrb	r3, [r7, #7]
 8017aae:	2100      	movs	r1, #0
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	f7e8 fd28 	bl	8000506 <USBPD_PE_IsCableConnected>
      /* Terminate PE task */
#if defined(USE_STM32_UTILITY_OS)
      UTIL_SEQ_PauseTask(PortNum == 0 ? TASK_PE_0 : TASK_PE_1);
#else
      DPM_Sleep_time[PortNum] = 0xFFFFFFFFU;
 8017ab6:	79fb      	ldrb	r3, [r7, #7]
 8017ab8:	4a14      	ldr	r2, [pc, #80]	@ (8017b0c <USBPD_DPM_CADCallback+0xac>)
 8017aba:	f04f 31ff 	mov.w	r1, #4294967295
 8017abe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#endif /* USE_STM32_UTILITY_OS */
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 8017ac2:	79fa      	ldrb	r2, [r7, #7]
 8017ac4:	4912      	ldr	r1, [pc, #72]	@ (8017b10 <USBPD_DPM_CADCallback+0xb0>)
 8017ac6:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8017aca:	f36f 1304 	bfc	r3, #4, #1
 8017ace:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].ActiveCCIs = CCNONE;
 8017ad2:	79fa      	ldrb	r2, [r7, #7]
 8017ad4:	490e      	ldr	r1, [pc, #56]	@ (8017b10 <USBPD_DPM_CADCallback+0xb0>)
 8017ad6:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8017ada:	f36f 1387 	bfc	r3, #6, #2
 8017ade:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 8017ae2:	79fb      	ldrb	r3, [r7, #7]
 8017ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8017b10 <USBPD_DPM_CADCallback+0xb0>)
 8017ae6:	009b      	lsls	r3, r3, #2
 8017ae8:	4413      	add	r3, r2
 8017aea:	785a      	ldrb	r2, [r3, #1]
 8017aec:	f36f 0202 	bfc	r2, #0, #3
 8017af0:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 8017af2:	79ba      	ldrb	r2, [r7, #6]
 8017af4:	79fb      	ldrb	r3, [r7, #7]
 8017af6:	4611      	mov	r1, r2
 8017af8:	4618      	mov	r0, r3
 8017afa:	f000 f849 	bl	8017b90 <USBPD_DPM_UserCableDetection>
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnCCIs = CCNONE;
      DPM_Params[PortNum].VconnStatus = USBPD_FALSE;
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=FALSE");
#endif /* _VCONN_SUPPORT */
      break;
 8017afe:	e000      	b.n	8017b02 <USBPD_DPM_CADCallback+0xa2>
    }
    default :
      /* nothing to do */
      break;
 8017b00:	bf00      	nop
  }
}
 8017b02:	bf00      	nop
 8017b04:	3708      	adds	r7, #8
 8017b06:	46bd      	mov	sp, r7
 8017b08:	bd80      	pop	{r7, pc}
 8017b0a:	bf00      	nop
 8017b0c:	20000754 	.word	0x20000754
 8017b10:	20000764 	.word	0x20000764

08017b14 <DPM_ManageAttachedState>:

static void DPM_ManageAttachedState(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b082      	sub	sp, #8
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	603a      	str	r2, [r7, #0]
 8017b1e:	71fb      	strb	r3, [r7, #7]
 8017b20:	460b      	mov	r3, r1
 8017b22:	71bb      	strb	r3, [r7, #6]
  if (CC2 == Cc)
  {
    DPM_Params[PortNum].VconnCCIs = CC1;
  }
#endif /* _VCONN_SUPPORT */
  DPM_Params[PortNum].ActiveCCIs = Cc;
 8017b24:	79fa      	ldrb	r2, [r7, #7]
 8017b26:	683b      	ldr	r3, [r7, #0]
 8017b28:	f003 0303 	and.w	r3, r3, #3
 8017b2c:	b2d8      	uxtb	r0, r3
 8017b2e:	490d      	ldr	r1, [pc, #52]	@ (8017b64 <DPM_ManageAttachedState+0x50>)
 8017b30:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8017b34:	f360 1387 	bfi	r3, r0, #6, #2
 8017b38:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
  (void)USBPD_PE_IsCableConnected(PortNum, 1);
 8017b3c:	79fb      	ldrb	r3, [r7, #7]
 8017b3e:	2101      	movs	r1, #1
 8017b40:	4618      	mov	r0, r3
 8017b42:	f7e8 fce0 	bl	8000506 <USBPD_PE_IsCableConnected>

  USBPD_DPM_UserCableDetection(PortNum, State);
 8017b46:	79ba      	ldrb	r2, [r7, #6]
 8017b48:	79fb      	ldrb	r3, [r7, #7]
 8017b4a:	4611      	mov	r1, r2
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	f000 f81f 	bl	8017b90 <USBPD_DPM_UserCableDetection>
  /* Resume the task */
  UTIL_SEQ_ResumeTask(PortNum == 0 ? TASK_PE_0 : TASK_PE_1);
  /* Enable task execution */
  UTIL_SEQ_SetTask(PortNum == 0 ? TASK_PE_0 : TASK_PE_1, 0);
#else
  DPM_Sleep_time[PortNum] = 0U;
 8017b52:	79fb      	ldrb	r3, [r7, #7]
 8017b54:	4a04      	ldr	r2, [pc, #16]	@ (8017b68 <DPM_ManageAttachedState+0x54>)
 8017b56:	2100      	movs	r1, #0
 8017b58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#endif /* USE_STM32_UTILITY_OS */
}
 8017b5c:	bf00      	nop
 8017b5e:	3708      	adds	r7, #8
 8017b60:	46bd      	mov	sp, r7
 8017b62:	bd80      	pop	{r7, pc}
 8017b64:	20000764 	.word	0x20000764
 8017b68:	20000754 	.word	0x20000754

08017b6c <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 8017b6c:	b480      	push	{r7}
 8017b6e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  return USBPD_OK;
 8017b70:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 8017b72:	4618      	mov	r0, r3
 8017b74:	46bd      	mov	sp, r7
 8017b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b7a:	4770      	bx	lr

08017b7c <USBPD_DPM_UserExecute>:
  * @brief  User processing time, it is recommended to avoid blocking task for long time
  * @param  argument  DPM User event
  * @retval None
  */
void USBPD_DPM_UserExecute(void const *argument)
{
 8017b7c:	b480      	push	{r7}
 8017b7e:	b083      	sub	sp, #12
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_UserExecute */

/* USER CODE END USBPD_DPM_UserExecute */
}
 8017b84:	bf00      	nop
 8017b86:	370c      	adds	r7, #12
 8017b88:	46bd      	mov	sp, r7
 8017b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8e:	4770      	bx	lr

08017b90 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 8017b90:	b480      	push	{r7}
 8017b92:	b083      	sub	sp, #12
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	4603      	mov	r3, r0
 8017b98:	460a      	mov	r2, r1
 8017b9a:	71fb      	strb	r3, [r7, #7]
 8017b9c:	4613      	mov	r3, r2
 8017b9e:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 8017ba0:	bf00      	nop
 8017ba2:	370c      	adds	r7, #12
 8017ba4:	46bd      	mov	sp, r7
 8017ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017baa:	4770      	bx	lr

08017bac <USBPD_DPM_UserTimerCounter>:
  * @brief  function used to manage user timer.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_UserTimerCounter(uint8_t PortNum)
{
 8017bac:	b480      	push	{r7}
 8017bae:	b083      	sub	sp, #12
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	4603      	mov	r3, r0
 8017bb4:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_UserTimerCounter */

/* USER CODE END USBPD_DPM_UserTimerCounter */
}
 8017bb6:	bf00      	nop
 8017bb8:	370c      	adds	r7, #12
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc0:	4770      	bx	lr

08017bc2 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 8017bc2:	b480      	push	{r7}
 8017bc4:	b083      	sub	sp, #12
 8017bc6:	af00      	add	r7, sp, #0
 8017bc8:	4603      	mov	r3, r0
 8017bca:	460a      	mov	r2, r1
 8017bcc:	71fb      	strb	r3, [r7, #7]
 8017bce:	4613      	mov	r3, r2
 8017bd0:	71bb      	strb	r3, [r7, #6]
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
      break;
 8017bd2:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_Notification */
}
 8017bd4:	bf00      	nop
 8017bd6:	370c      	adds	r7, #12
 8017bd8:	46bd      	mov	sp, r7
 8017bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bde:	4770      	bx	lr

08017be0 <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 8017be0:	b480      	push	{r7}
 8017be2:	b083      	sub	sp, #12
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	4603      	mov	r3, r0
 8017be8:	6039      	str	r1, [r7, #0]
 8017bea:	71fb      	strb	r3, [r7, #7]
 8017bec:	4613      	mov	r3, r2
 8017bee:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 8017bf0:	bf00      	nop
 8017bf2:	370c      	adds	r7, #12
 8017bf4:	46bd      	mov	sp, r7
 8017bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bfa:	4770      	bx	lr

08017bfc <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8017bfc:	b480      	push	{r7}
 8017bfe:	b085      	sub	sp, #20
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	60ba      	str	r2, [r7, #8]
 8017c04:	607b      	str	r3, [r7, #4]
 8017c06:	4603      	mov	r3, r0
 8017c08:	73fb      	strb	r3, [r7, #15]
 8017c0a:	460b      	mov	r3, r1
 8017c0c:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 8017c0e:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 8017c10:	bf00      	nop
 8017c12:	3714      	adds	r7, #20
 8017c14:	46bd      	mov	sp, r7
 8017c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c1a:	4770      	bx	lr

08017c1c <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 8017c1c:	b480      	push	{r7}
 8017c1e:	b085      	sub	sp, #20
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	60ba      	str	r2, [r7, #8]
 8017c24:	607b      	str	r3, [r7, #4]
 8017c26:	4603      	mov	r3, r0
 8017c28:	73fb      	strb	r3, [r7, #15]
 8017c2a:	460b      	mov	r3, r1
 8017c2c:	73bb      	strb	r3, [r7, #14]
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
    break;
 8017c2e:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 8017c30:	bf00      	nop
 8017c32:	3714      	adds	r7, #20
 8017c34:	46bd      	mov	sp, r7
 8017c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c3a:	4770      	bx	lr

08017c3c <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 8017c3c:	b480      	push	{r7}
 8017c3e:	b085      	sub	sp, #20
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	4603      	mov	r3, r0
 8017c44:	60b9      	str	r1, [r7, #8]
 8017c46:	607a      	str	r2, [r7, #4]
 8017c48:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SNK_EvaluateCapabilities");
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 8017c4a:	bf00      	nop
 8017c4c:	3714      	adds	r7, #20
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c54:	4770      	bx	lr

08017c56 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 8017c56:	b480      	push	{r7}
 8017c58:	b083      	sub	sp, #12
 8017c5a:	af00      	add	r7, sp, #0
 8017c5c:	603a      	str	r2, [r7, #0]
 8017c5e:	461a      	mov	r2, r3
 8017c60:	4603      	mov	r3, r0
 8017c62:	71fb      	strb	r3, [r7, #7]
 8017c64:	460b      	mov	r3, r1
 8017c66:	71bb      	strb	r3, [r7, #6]
 8017c68:	4613      	mov	r3, r2
 8017c6a:	80bb      	strh	r3, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 8017c6c:	bf00      	nop
 8017c6e:	370c      	adds	r7, #12
 8017c70:	46bd      	mov	sp, r7
 8017c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c76:	4770      	bx	lr

08017c78 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b082      	sub	sp, #8
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	4603      	mov	r3, r0
 8017c80:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 8017c82:	79fb      	ldrb	r3, [r7, #7]
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7e8 fb87 	bl	8000398 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 8017c8a:	bf00      	nop
 8017c8c:	3708      	adds	r7, #8
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bd80      	pop	{r7, pc}
	...

08017c94 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 8017c94:	b480      	push	{r7}
 8017c96:	b085      	sub	sp, #20
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	4603      	mov	r3, r0
 8017c9c:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 8017c9e:	230c      	movs	r3, #12
 8017ca0:	73fb      	strb	r3, [r7, #15]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 8017ca2:	79fb      	ldrb	r3, [r7, #7]
 8017ca4:	4a2c      	ldr	r2, [pc, #176]	@ (8017d58 <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 8017ca6:	2158      	movs	r1, #88	@ 0x58
 8017ca8:	fb01 f303 	mul.w	r3, r1, r3
 8017cac:	4413      	add	r3, r2
 8017cae:	781b      	ldrb	r3, [r3, #0]
 8017cb0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8017cb4:	b2db      	uxtb	r3, r3
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d017      	beq.n	8017cea <USBPD_DPM_EvaluateDataRoleSwap+0x56>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 8017cba:	79fb      	ldrb	r3, [r7, #7]
 8017cbc:	4a26      	ldr	r2, [pc, #152]	@ (8017d58 <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 8017cbe:	2158      	movs	r1, #88	@ 0x58
 8017cc0:	fb01 f303 	mul.w	r3, r1, r3
 8017cc4:	4413      	add	r3, r2
 8017cc6:	781b      	ldrb	r3, [r3, #0]
 8017cc8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017ccc:	b2db      	uxtb	r3, r3
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d10e      	bne.n	8017cf0 <USBPD_DPM_EvaluateDataRoleSwap+0x5c>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 8017cd2:	79fb      	ldrb	r3, [r7, #7]
 8017cd4:	4a20      	ldr	r2, [pc, #128]	@ (8017d58 <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 8017cd6:	2158      	movs	r1, #88	@ 0x58
 8017cd8:	fb01 f303 	mul.w	r3, r1, r3
 8017cdc:	4413      	add	r3, r2
 8017cde:	781b      	ldrb	r3, [r3, #0]
 8017ce0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8017ce4:	b2db      	uxtb	r3, r3
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d102      	bne.n	8017cf0 <USBPD_DPM_EvaluateDataRoleSwap+0x5c>
  {
    status = USBPD_NOTSUPPORTED;
 8017cea:	2301      	movs	r3, #1
 8017cec:	73fb      	strb	r3, [r7, #15]
 8017cee:	e02b      	b.n	8017d48 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 8017cf0:	79fb      	ldrb	r3, [r7, #7]
 8017cf2:	4a19      	ldr	r2, [pc, #100]	@ (8017d58 <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 8017cf4:	2158      	movs	r1, #88	@ 0x58
 8017cf6:	fb01 f303 	mul.w	r3, r1, r3
 8017cfa:	4413      	add	r3, r2
 8017cfc:	781b      	ldrb	r3, [r3, #0]
 8017cfe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017d02:	b2db      	uxtb	r3, r3
 8017d04:	2b01      	cmp	r3, #1
 8017d06:	d108      	bne.n	8017d1a <USBPD_DPM_EvaluateDataRoleSwap+0x86>
 8017d08:	79fb      	ldrb	r3, [r7, #7]
 8017d0a:	4a14      	ldr	r2, [pc, #80]	@ (8017d5c <USBPD_DPM_EvaluateDataRoleSwap+0xc8>)
 8017d0c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8017d10:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8017d14:	b2db      	uxtb	r3, r3
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d014      	beq.n	8017d44 <USBPD_DPM_EvaluateDataRoleSwap+0xb0>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 8017d1a:	79fb      	ldrb	r3, [r7, #7]
 8017d1c:	4a0e      	ldr	r2, [pc, #56]	@ (8017d58 <USBPD_DPM_EvaluateDataRoleSwap+0xc4>)
 8017d1e:	2158      	movs	r1, #88	@ 0x58
 8017d20:	fb01 f303 	mul.w	r3, r1, r3
 8017d24:	4413      	add	r3, r2
 8017d26:	781b      	ldrb	r3, [r3, #0]
 8017d28:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8017d2c:	b2db      	uxtb	r3, r3
 8017d2e:	2b01      	cmp	r3, #1
 8017d30:	d10a      	bne.n	8017d48 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
 8017d32:	79fb      	ldrb	r3, [r7, #7]
 8017d34:	4a09      	ldr	r2, [pc, #36]	@ (8017d5c <USBPD_DPM_EvaluateDataRoleSwap+0xc8>)
 8017d36:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8017d3a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8017d3e:	b2db      	uxtb	r3, r3
 8017d40:	2b01      	cmp	r3, #1
 8017d42:	d101      	bne.n	8017d48 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
    {
      status = USBPD_ACCEPT;
 8017d44:	230a      	movs	r3, #10
 8017d46:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8017d48:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	3714      	adds	r7, #20
 8017d4e:	46bd      	mov	sp, r7
 8017d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d54:	4770      	bx	lr
 8017d56:	bf00      	nop
 8017d58:	2000012c 	.word	0x2000012c
 8017d5c:	20000764 	.word	0x20000764

08017d60 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b082      	sub	sp, #8
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	4603      	mov	r3, r0
 8017d68:	460a      	mov	r2, r1
 8017d6a:	71fb      	strb	r3, [r7, #7]
 8017d6c:	4613      	mov	r3, r2
 8017d6e:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 8017d70:	79ba      	ldrb	r2, [r7, #6]
 8017d72:	79fb      	ldrb	r3, [r7, #7]
 8017d74:	4611      	mov	r1, r2
 8017d76:	4618      	mov	r0, r3
 8017d78:	f000 f80a 	bl	8017d90 <USBPD_PWR_IF_SupplyReady>
 8017d7c:	4603      	mov	r3, r0
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	bf0c      	ite	eq
 8017d82:	2301      	moveq	r3, #1
 8017d84:	2300      	movne	r3, #0
 8017d86:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 8017d88:	4618      	mov	r0, r3
 8017d8a:	3708      	adds	r7, #8
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	bd80      	pop	{r7, pc}

08017d90 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b084      	sub	sp, #16
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	4603      	mov	r3, r0
 8017d98:	460a      	mov	r2, r1
 8017d9a:	71fb      	strb	r3, [r7, #7]
 8017d9c:	4613      	mov	r3, r2
 8017d9e:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8017da0:	2302      	movs	r3, #2
 8017da2:	73fb      	strb	r3, [r7, #15]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 8017da4:	79fb      	ldrb	r3, [r7, #7]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d001      	beq.n	8017dae <USBPD_PWR_IF_SupplyReady+0x1e>
  {
    return USBPD_ERROR;
 8017daa:	2302      	movs	r3, #2
 8017dac:	e01c      	b.n	8017de8 <USBPD_PWR_IF_SupplyReady+0x58>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8017dae:	79fb      	ldrb	r3, [r7, #7]
 8017db0:	f107 0208 	add.w	r2, r7, #8
 8017db4:	4611      	mov	r1, r2
 8017db6:	4618      	mov	r0, r3
 8017db8:	f000 f890 	bl	8017edc <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 8017dbc:	79bb      	ldrb	r3, [r7, #6]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d109      	bne.n	8017dd6 <USBPD_PWR_IF_SupplyReady+0x46>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8017dc2:	68bb      	ldr	r3, [r7, #8]
 8017dc4:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8017dc8:	4293      	cmp	r3, r2
 8017dca:	d801      	bhi.n	8017dd0 <USBPD_PWR_IF_SupplyReady+0x40>
 8017dcc:	2300      	movs	r3, #0
 8017dce:	e000      	b.n	8017dd2 <USBPD_PWR_IF_SupplyReady+0x42>
 8017dd0:	2302      	movs	r3, #2
 8017dd2:	73fb      	strb	r3, [r7, #15]
 8017dd4:	e007      	b.n	8017de6 <USBPD_PWR_IF_SupplyReady+0x56>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8017dd6:	68bb      	ldr	r3, [r7, #8]
 8017dd8:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8017ddc:	d901      	bls.n	8017de2 <USBPD_PWR_IF_SupplyReady+0x52>
 8017dde:	2300      	movs	r3, #0
 8017de0:	e000      	b.n	8017de4 <USBPD_PWR_IF_SupplyReady+0x54>
 8017de2:	2302      	movs	r3, #2
 8017de4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8017de6:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 8017de8:	4618      	mov	r0, r3
 8017dea:	3710      	adds	r7, #16
 8017dec:	46bd      	mov	sp, r7
 8017dee:	bd80      	pop	{r7, pc}

08017df0 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 8017df0:	b580      	push	{r7, lr}
 8017df2:	b084      	sub	sp, #16
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	4603      	mov	r3, r0
 8017df8:	460a      	mov	r2, r1
 8017dfa:	71fb      	strb	r3, [r7, #7]
 8017dfc:	4613      	mov	r3, r2
 8017dfe:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 8017e00:	2300      	movs	r3, #0
 8017e02:	73fb      	strb	r3, [r7, #15]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 8017e04:	79fb      	ldrb	r3, [r7, #7]
 8017e06:	4618      	mov	r0, r3
 8017e08:	f7fd fd84 	bl	8015914 <HW_IF_PWR_GetVoltage>
 8017e0c:	4603      	mov	r3, r0
 8017e0e:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 8017e10:	79bb      	ldrb	r3, [r7, #6]
 8017e12:	2b02      	cmp	r3, #2
 8017e14:	d015      	beq.n	8017e42 <USBPD_PWR_IF_GetVBUSStatus+0x52>
 8017e16:	2b02      	cmp	r3, #2
 8017e18:	dc1a      	bgt.n	8017e50 <USBPD_PWR_IF_GetVBUSStatus+0x60>
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d002      	beq.n	8017e24 <USBPD_PWR_IF_GetVBUSStatus+0x34>
 8017e1e:	2b01      	cmp	r3, #1
 8017e20:	d008      	beq.n	8017e34 <USBPD_PWR_IF_GetVBUSStatus+0x44>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 8017e22:	e015      	b.n	8017e50 <USBPD_PWR_IF_GetVBUSStatus+0x60>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8017e24:	68bb      	ldr	r3, [r7, #8]
 8017e26:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8017e2a:	4293      	cmp	r3, r2
 8017e2c:	d812      	bhi.n	8017e54 <USBPD_PWR_IF_GetVBUSStatus+0x64>
 8017e2e:	2301      	movs	r3, #1
 8017e30:	73fb      	strb	r3, [r7, #15]
    break;
 8017e32:	e00f      	b.n	8017e54 <USBPD_PWR_IF_GetVBUSStatus+0x64>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8017e34:	68bb      	ldr	r3, [r7, #8]
 8017e36:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8017e3a:	d30d      	bcc.n	8017e58 <USBPD_PWR_IF_GetVBUSStatus+0x68>
 8017e3c:	2301      	movs	r3, #1
 8017e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8017e40:	e00a      	b.n	8017e58 <USBPD_PWR_IF_GetVBUSStatus+0x68>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8017e42:	68bb      	ldr	r3, [r7, #8]
 8017e44:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8017e48:	d208      	bcs.n	8017e5c <USBPD_PWR_IF_GetVBUSStatus+0x6c>
 8017e4a:	2301      	movs	r3, #1
 8017e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8017e4e:	e005      	b.n	8017e5c <USBPD_PWR_IF_GetVBUSStatus+0x6c>
    break;
 8017e50:	bf00      	nop
 8017e52:	e004      	b.n	8017e5e <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8017e54:	bf00      	nop
 8017e56:	e002      	b.n	8017e5e <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8017e58:	bf00      	nop
 8017e5a:	e000      	b.n	8017e5e <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 8017e5c:	bf00      	nop
  }
  return _status;
 8017e5e:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 8017e60:	4618      	mov	r0, r3
 8017e62:	3710      	adds	r7, #16
 8017e64:	46bd      	mov	sp, r7
 8017e66:	bd80      	pop	{r7, pc}

08017e68 <BSP_USBPD_PWR_Init>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 8017e68:	b480      	push	{r7}
 8017e6a:	b085      	sub	sp, #20
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8017e70:	2300      	movs	r3, #0
 8017e72:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d002      	beq.n	8017e80 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8017e7a:	f06f 0301 	mvn.w	r3, #1
 8017e7e:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8017e80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 8017e82:	4618      	mov	r0, r3
 8017e84:	3714      	adds	r7, #20
 8017e86:	46bd      	mov	sp, r7
 8017e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e8c:	4770      	bx	lr

08017e8e <BSP_USBPD_PWR_VBUSInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 8017e8e:	b480      	push	{r7}
 8017e90:	b085      	sub	sp, #20
 8017e92:	af00      	add	r7, sp, #0
 8017e94:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8017e96:	2300      	movs	r3, #0
 8017e98:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d002      	beq.n	8017ea6 <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8017ea0:	f06f 0301 	mvn.w	r3, #1
 8017ea4:	60fb      	str	r3, [r7, #12]
  else
  {
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 8017ea6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	3714      	adds	r7, #20
 8017eac:	46bd      	mov	sp, r7
 8017eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb2:	4770      	bx	lr

08017eb4 <BSP_USBPD_PWR_VBUSDeInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 8017eb4:	b480      	push	{r7}
 8017eb6:	b085      	sub	sp, #20
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8017ebc:	f06f 030a 	mvn.w	r3, #10
 8017ec0:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d002      	beq.n	8017ece <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8017ec8:	f06f 0301 	mvn.w	r3, #1
 8017ecc:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8017ece:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	3714      	adds	r7, #20
 8017ed4:	46bd      	mov	sp, r7
 8017ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eda:	4770      	bx	lr

08017edc <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 8017edc:	b480      	push	{r7}
 8017ede:	b085      	sub	sp, #20
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
 8017ee4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid       */
  int32_t ret;
  uint32_t val = 0U;
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	60bb      	str	r3, [r7, #8]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d102      	bne.n	8017ef6 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 8017ef0:	683b      	ldr	r3, [r7, #0]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d103      	bne.n	8017efe <BSP_USBPD_PWR_VBUSGetVoltage+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8017ef6:	f06f 0301 	mvn.w	r3, #1
 8017efa:	60fb      	str	r3, [r7, #12]
 8017efc:	e002      	b.n	8017f04 <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8017efe:	f06f 030a 	mvn.w	r3, #10
 8017f02:	60fb      	str	r3, [r7, #12]
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  }
  *pVoltage = val;
 8017f04:	683b      	ldr	r3, [r7, #0]
 8017f06:	68ba      	ldr	r2, [r7, #8]
 8017f08:	601a      	str	r2, [r3, #0]
  return ret;
 8017f0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	3714      	adds	r7, #20
 8017f10:	46bd      	mov	sp, r7
 8017f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f16:	4770      	bx	lr

08017f18 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8017f1c:	2200      	movs	r2, #0
 8017f1e:	4912      	ldr	r1, [pc, #72]	@ (8017f68 <MX_USB_Device_Init+0x50>)
 8017f20:	4812      	ldr	r0, [pc, #72]	@ (8017f6c <MX_USB_Device_Init+0x54>)
 8017f22:	f7fe fb2d 	bl	8016580 <USBD_Init>
 8017f26:	4603      	mov	r3, r0
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d001      	beq.n	8017f30 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8017f2c:	f7ef fa40 	bl	80073b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8017f30:	490f      	ldr	r1, [pc, #60]	@ (8017f70 <MX_USB_Device_Init+0x58>)
 8017f32:	480e      	ldr	r0, [pc, #56]	@ (8017f6c <MX_USB_Device_Init+0x54>)
 8017f34:	f7fe fb54 	bl	80165e0 <USBD_RegisterClass>
 8017f38:	4603      	mov	r3, r0
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d001      	beq.n	8017f42 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8017f3e:	f7ef fa37 	bl	80073b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8017f42:	490c      	ldr	r1, [pc, #48]	@ (8017f74 <MX_USB_Device_Init+0x5c>)
 8017f44:	4809      	ldr	r0, [pc, #36]	@ (8017f6c <MX_USB_Device_Init+0x54>)
 8017f46:	f7fe faa5 	bl	8016494 <USBD_CDC_RegisterInterface>
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d001      	beq.n	8017f54 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8017f50:	f7ef fa2e 	bl	80073b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8017f54:	4805      	ldr	r0, [pc, #20]	@ (8017f6c <MX_USB_Device_Init+0x54>)
 8017f56:	f7fe fb6a 	bl	801662e <USBD_Start>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d001      	beq.n	8017f64 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8017f60:	f7ef fa26 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8017f64:	bf00      	nop
 8017f66:	bd80      	pop	{r7, pc}
 8017f68:	20000198 	.word	0x20000198
 8017f6c:	20000768 	.word	0x20000768
 8017f70:	2000001c 	.word	0x2000001c
 8017f74:	20000184 	.word	0x20000184

08017f78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	4905      	ldr	r1, [pc, #20]	@ (8017f94 <CDC_Init_FS+0x1c>)
 8017f80:	4805      	ldr	r0, [pc, #20]	@ (8017f98 <CDC_Init_FS+0x20>)
 8017f82:	f7fe fa9c 	bl	80164be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017f86:	4905      	ldr	r1, [pc, #20]	@ (8017f9c <CDC_Init_FS+0x24>)
 8017f88:	4803      	ldr	r0, [pc, #12]	@ (8017f98 <CDC_Init_FS+0x20>)
 8017f8a:	f7fe fab6 	bl	80164fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017f8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017f90:	4618      	mov	r0, r3
 8017f92:	bd80      	pop	{r7, pc}
 8017f94:	20001238 	.word	0x20001238
 8017f98:	20000768 	.word	0x20000768
 8017f9c:	20000a38 	.word	0x20000a38

08017fa0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017fa0:	b480      	push	{r7}
 8017fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017fa4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	46bd      	mov	sp, r7
 8017faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fae:	4770      	bx	lr

08017fb0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017fb0:	b480      	push	{r7}
 8017fb2:	b083      	sub	sp, #12
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	6039      	str	r1, [r7, #0]
 8017fba:	71fb      	strb	r3, [r7, #7]
 8017fbc:	4613      	mov	r3, r2
 8017fbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017fc0:	79fb      	ldrb	r3, [r7, #7]
 8017fc2:	2b23      	cmp	r3, #35	@ 0x23
 8017fc4:	d84a      	bhi.n	801805c <CDC_Control_FS+0xac>
 8017fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8017fcc <CDC_Control_FS+0x1c>)
 8017fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017fcc:	0801805d 	.word	0x0801805d
 8017fd0:	0801805d 	.word	0x0801805d
 8017fd4:	0801805d 	.word	0x0801805d
 8017fd8:	0801805d 	.word	0x0801805d
 8017fdc:	0801805d 	.word	0x0801805d
 8017fe0:	0801805d 	.word	0x0801805d
 8017fe4:	0801805d 	.word	0x0801805d
 8017fe8:	0801805d 	.word	0x0801805d
 8017fec:	0801805d 	.word	0x0801805d
 8017ff0:	0801805d 	.word	0x0801805d
 8017ff4:	0801805d 	.word	0x0801805d
 8017ff8:	0801805d 	.word	0x0801805d
 8017ffc:	0801805d 	.word	0x0801805d
 8018000:	0801805d 	.word	0x0801805d
 8018004:	0801805d 	.word	0x0801805d
 8018008:	0801805d 	.word	0x0801805d
 801800c:	0801805d 	.word	0x0801805d
 8018010:	0801805d 	.word	0x0801805d
 8018014:	0801805d 	.word	0x0801805d
 8018018:	0801805d 	.word	0x0801805d
 801801c:	0801805d 	.word	0x0801805d
 8018020:	0801805d 	.word	0x0801805d
 8018024:	0801805d 	.word	0x0801805d
 8018028:	0801805d 	.word	0x0801805d
 801802c:	0801805d 	.word	0x0801805d
 8018030:	0801805d 	.word	0x0801805d
 8018034:	0801805d 	.word	0x0801805d
 8018038:	0801805d 	.word	0x0801805d
 801803c:	0801805d 	.word	0x0801805d
 8018040:	0801805d 	.word	0x0801805d
 8018044:	0801805d 	.word	0x0801805d
 8018048:	0801805d 	.word	0x0801805d
 801804c:	0801805d 	.word	0x0801805d
 8018050:	0801805d 	.word	0x0801805d
 8018054:	0801805d 	.word	0x0801805d
 8018058:	0801805d 	.word	0x0801805d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801805c:	bf00      	nop
  }

  return (USBD_OK);
 801805e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018060:	4618      	mov	r0, r3
 8018062:	370c      	adds	r7, #12
 8018064:	46bd      	mov	sp, r7
 8018066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801806a:	4770      	bx	lr

0801806c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801806c:	b580      	push	{r7, lr}
 801806e:	b082      	sub	sp, #8
 8018070:	af00      	add	r7, sp, #0
 8018072:	6078      	str	r0, [r7, #4]
 8018074:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018076:	6879      	ldr	r1, [r7, #4]
 8018078:	4805      	ldr	r0, [pc, #20]	@ (8018090 <CDC_Receive_FS+0x24>)
 801807a:	f7fe fa3e 	bl	80164fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801807e:	4804      	ldr	r0, [pc, #16]	@ (8018090 <CDC_Receive_FS+0x24>)
 8018080:	f7fe fa54 	bl	801652c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018084:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018086:	4618      	mov	r0, r3
 8018088:	3708      	adds	r7, #8
 801808a:	46bd      	mov	sp, r7
 801808c:	bd80      	pop	{r7, pc}
 801808e:	bf00      	nop
 8018090:	20000768 	.word	0x20000768

08018094 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018094:	b480      	push	{r7}
 8018096:	b087      	sub	sp, #28
 8018098:	af00      	add	r7, sp, #0
 801809a:	60f8      	str	r0, [r7, #12]
 801809c:	60b9      	str	r1, [r7, #8]
 801809e:	4613      	mov	r3, r2
 80180a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80180a2:	2300      	movs	r3, #0
 80180a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80180a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80180aa:	4618      	mov	r0, r3
 80180ac:	371c      	adds	r7, #28
 80180ae:	46bd      	mov	sp, r7
 80180b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b4:	4770      	bx	lr
	...

080180b8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80180b8:	b480      	push	{r7}
 80180ba:	b083      	sub	sp, #12
 80180bc:	af00      	add	r7, sp, #0
 80180be:	4603      	mov	r3, r0
 80180c0:	6039      	str	r1, [r7, #0]
 80180c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80180c4:	683b      	ldr	r3, [r7, #0]
 80180c6:	2212      	movs	r2, #18
 80180c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80180ca:	4b03      	ldr	r3, [pc, #12]	@ (80180d8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80180cc:	4618      	mov	r0, r3
 80180ce:	370c      	adds	r7, #12
 80180d0:	46bd      	mov	sp, r7
 80180d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180d6:	4770      	bx	lr
 80180d8:	200001b8 	.word	0x200001b8

080180dc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80180dc:	b480      	push	{r7}
 80180de:	b083      	sub	sp, #12
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	4603      	mov	r3, r0
 80180e4:	6039      	str	r1, [r7, #0]
 80180e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80180e8:	683b      	ldr	r3, [r7, #0]
 80180ea:	2204      	movs	r2, #4
 80180ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80180ee:	4b03      	ldr	r3, [pc, #12]	@ (80180fc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80180f0:	4618      	mov	r0, r3
 80180f2:	370c      	adds	r7, #12
 80180f4:	46bd      	mov	sp, r7
 80180f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180fa:	4770      	bx	lr
 80180fc:	200001cc 	.word	0x200001cc

08018100 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018100:	b580      	push	{r7, lr}
 8018102:	b082      	sub	sp, #8
 8018104:	af00      	add	r7, sp, #0
 8018106:	4603      	mov	r3, r0
 8018108:	6039      	str	r1, [r7, #0]
 801810a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801810c:	79fb      	ldrb	r3, [r7, #7]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d105      	bne.n	801811e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018112:	683a      	ldr	r2, [r7, #0]
 8018114:	4907      	ldr	r1, [pc, #28]	@ (8018134 <USBD_CDC_ProductStrDescriptor+0x34>)
 8018116:	4808      	ldr	r0, [pc, #32]	@ (8018138 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018118:	f7ff fa71 	bl	80175fe <USBD_GetString>
 801811c:	e004      	b.n	8018128 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801811e:	683a      	ldr	r2, [r7, #0]
 8018120:	4904      	ldr	r1, [pc, #16]	@ (8018134 <USBD_CDC_ProductStrDescriptor+0x34>)
 8018122:	4805      	ldr	r0, [pc, #20]	@ (8018138 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018124:	f7ff fa6b 	bl	80175fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8018128:	4b02      	ldr	r3, [pc, #8]	@ (8018134 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801812a:	4618      	mov	r0, r3
 801812c:	3708      	adds	r7, #8
 801812e:	46bd      	mov	sp, r7
 8018130:	bd80      	pop	{r7, pc}
 8018132:	bf00      	nop
 8018134:	20001a38 	.word	0x20001a38
 8018138:	0801a9d8 	.word	0x0801a9d8

0801813c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801813c:	b580      	push	{r7, lr}
 801813e:	b082      	sub	sp, #8
 8018140:	af00      	add	r7, sp, #0
 8018142:	4603      	mov	r3, r0
 8018144:	6039      	str	r1, [r7, #0]
 8018146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018148:	683a      	ldr	r2, [r7, #0]
 801814a:	4904      	ldr	r1, [pc, #16]	@ (801815c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801814c:	4804      	ldr	r0, [pc, #16]	@ (8018160 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801814e:	f7ff fa56 	bl	80175fe <USBD_GetString>
  return USBD_StrDesc;
 8018152:	4b02      	ldr	r3, [pc, #8]	@ (801815c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8018154:	4618      	mov	r0, r3
 8018156:	3708      	adds	r7, #8
 8018158:	46bd      	mov	sp, r7
 801815a:	bd80      	pop	{r7, pc}
 801815c:	20001a38 	.word	0x20001a38
 8018160:	0801a9f0 	.word	0x0801a9f0

08018164 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018164:	b580      	push	{r7, lr}
 8018166:	b082      	sub	sp, #8
 8018168:	af00      	add	r7, sp, #0
 801816a:	4603      	mov	r3, r0
 801816c:	6039      	str	r1, [r7, #0]
 801816e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018170:	683b      	ldr	r3, [r7, #0]
 8018172:	221a      	movs	r2, #26
 8018174:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018176:	f000 f843 	bl	8018200 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801817a:	4b02      	ldr	r3, [pc, #8]	@ (8018184 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801817c:	4618      	mov	r0, r3
 801817e:	3708      	adds	r7, #8
 8018180:	46bd      	mov	sp, r7
 8018182:	bd80      	pop	{r7, pc}
 8018184:	200001d0 	.word	0x200001d0

08018188 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018188:	b580      	push	{r7, lr}
 801818a:	b082      	sub	sp, #8
 801818c:	af00      	add	r7, sp, #0
 801818e:	4603      	mov	r3, r0
 8018190:	6039      	str	r1, [r7, #0]
 8018192:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018194:	79fb      	ldrb	r3, [r7, #7]
 8018196:	2b00      	cmp	r3, #0
 8018198:	d105      	bne.n	80181a6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801819a:	683a      	ldr	r2, [r7, #0]
 801819c:	4907      	ldr	r1, [pc, #28]	@ (80181bc <USBD_CDC_ConfigStrDescriptor+0x34>)
 801819e:	4808      	ldr	r0, [pc, #32]	@ (80181c0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80181a0:	f7ff fa2d 	bl	80175fe <USBD_GetString>
 80181a4:	e004      	b.n	80181b0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80181a6:	683a      	ldr	r2, [r7, #0]
 80181a8:	4904      	ldr	r1, [pc, #16]	@ (80181bc <USBD_CDC_ConfigStrDescriptor+0x34>)
 80181aa:	4805      	ldr	r0, [pc, #20]	@ (80181c0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80181ac:	f7ff fa27 	bl	80175fe <USBD_GetString>
  }
  return USBD_StrDesc;
 80181b0:	4b02      	ldr	r3, [pc, #8]	@ (80181bc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80181b2:	4618      	mov	r0, r3
 80181b4:	3708      	adds	r7, #8
 80181b6:	46bd      	mov	sp, r7
 80181b8:	bd80      	pop	{r7, pc}
 80181ba:	bf00      	nop
 80181bc:	20001a38 	.word	0x20001a38
 80181c0:	0801aa04 	.word	0x0801aa04

080181c4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b082      	sub	sp, #8
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	4603      	mov	r3, r0
 80181cc:	6039      	str	r1, [r7, #0]
 80181ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80181d0:	79fb      	ldrb	r3, [r7, #7]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d105      	bne.n	80181e2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80181d6:	683a      	ldr	r2, [r7, #0]
 80181d8:	4907      	ldr	r1, [pc, #28]	@ (80181f8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80181da:	4808      	ldr	r0, [pc, #32]	@ (80181fc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80181dc:	f7ff fa0f 	bl	80175fe <USBD_GetString>
 80181e0:	e004      	b.n	80181ec <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80181e2:	683a      	ldr	r2, [r7, #0]
 80181e4:	4904      	ldr	r1, [pc, #16]	@ (80181f8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80181e6:	4805      	ldr	r0, [pc, #20]	@ (80181fc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80181e8:	f7ff fa09 	bl	80175fe <USBD_GetString>
  }
  return USBD_StrDesc;
 80181ec:	4b02      	ldr	r3, [pc, #8]	@ (80181f8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80181ee:	4618      	mov	r0, r3
 80181f0:	3708      	adds	r7, #8
 80181f2:	46bd      	mov	sp, r7
 80181f4:	bd80      	pop	{r7, pc}
 80181f6:	bf00      	nop
 80181f8:	20001a38 	.word	0x20001a38
 80181fc:	0801aa10 	.word	0x0801aa10

08018200 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018200:	b580      	push	{r7, lr}
 8018202:	b084      	sub	sp, #16
 8018204:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018206:	4b0f      	ldr	r3, [pc, #60]	@ (8018244 <Get_SerialNum+0x44>)
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801820c:	4b0e      	ldr	r3, [pc, #56]	@ (8018248 <Get_SerialNum+0x48>)
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018212:	4b0e      	ldr	r3, [pc, #56]	@ (801824c <Get_SerialNum+0x4c>)
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018218:	68fa      	ldr	r2, [r7, #12]
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	4413      	add	r3, r2
 801821e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d009      	beq.n	801823a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018226:	2208      	movs	r2, #8
 8018228:	4909      	ldr	r1, [pc, #36]	@ (8018250 <Get_SerialNum+0x50>)
 801822a:	68f8      	ldr	r0, [r7, #12]
 801822c:	f000 f814 	bl	8018258 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018230:	2204      	movs	r2, #4
 8018232:	4908      	ldr	r1, [pc, #32]	@ (8018254 <Get_SerialNum+0x54>)
 8018234:	68b8      	ldr	r0, [r7, #8]
 8018236:	f000 f80f 	bl	8018258 <IntToUnicode>
  }
}
 801823a:	bf00      	nop
 801823c:	3710      	adds	r7, #16
 801823e:	46bd      	mov	sp, r7
 8018240:	bd80      	pop	{r7, pc}
 8018242:	bf00      	nop
 8018244:	1fff7590 	.word	0x1fff7590
 8018248:	1fff7594 	.word	0x1fff7594
 801824c:	1fff7598 	.word	0x1fff7598
 8018250:	200001d2 	.word	0x200001d2
 8018254:	200001e2 	.word	0x200001e2

08018258 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018258:	b480      	push	{r7}
 801825a:	b087      	sub	sp, #28
 801825c:	af00      	add	r7, sp, #0
 801825e:	60f8      	str	r0, [r7, #12]
 8018260:	60b9      	str	r1, [r7, #8]
 8018262:	4613      	mov	r3, r2
 8018264:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018266:	2300      	movs	r3, #0
 8018268:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801826a:	2300      	movs	r3, #0
 801826c:	75fb      	strb	r3, [r7, #23]
 801826e:	e027      	b.n	80182c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	0f1b      	lsrs	r3, r3, #28
 8018274:	2b09      	cmp	r3, #9
 8018276:	d80b      	bhi.n	8018290 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	0f1b      	lsrs	r3, r3, #28
 801827c:	b2da      	uxtb	r2, r3
 801827e:	7dfb      	ldrb	r3, [r7, #23]
 8018280:	005b      	lsls	r3, r3, #1
 8018282:	4619      	mov	r1, r3
 8018284:	68bb      	ldr	r3, [r7, #8]
 8018286:	440b      	add	r3, r1
 8018288:	3230      	adds	r2, #48	@ 0x30
 801828a:	b2d2      	uxtb	r2, r2
 801828c:	701a      	strb	r2, [r3, #0]
 801828e:	e00a      	b.n	80182a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	0f1b      	lsrs	r3, r3, #28
 8018294:	b2da      	uxtb	r2, r3
 8018296:	7dfb      	ldrb	r3, [r7, #23]
 8018298:	005b      	lsls	r3, r3, #1
 801829a:	4619      	mov	r1, r3
 801829c:	68bb      	ldr	r3, [r7, #8]
 801829e:	440b      	add	r3, r1
 80182a0:	3237      	adds	r2, #55	@ 0x37
 80182a2:	b2d2      	uxtb	r2, r2
 80182a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	011b      	lsls	r3, r3, #4
 80182aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80182ac:	7dfb      	ldrb	r3, [r7, #23]
 80182ae:	005b      	lsls	r3, r3, #1
 80182b0:	3301      	adds	r3, #1
 80182b2:	68ba      	ldr	r2, [r7, #8]
 80182b4:	4413      	add	r3, r2
 80182b6:	2200      	movs	r2, #0
 80182b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80182ba:	7dfb      	ldrb	r3, [r7, #23]
 80182bc:	3301      	adds	r3, #1
 80182be:	75fb      	strb	r3, [r7, #23]
 80182c0:	7dfa      	ldrb	r2, [r7, #23]
 80182c2:	79fb      	ldrb	r3, [r7, #7]
 80182c4:	429a      	cmp	r2, r3
 80182c6:	d3d3      	bcc.n	8018270 <IntToUnicode+0x18>
  }
}
 80182c8:	bf00      	nop
 80182ca:	bf00      	nop
 80182cc:	371c      	adds	r7, #28
 80182ce:	46bd      	mov	sp, r7
 80182d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182d4:	4770      	bx	lr
	...

080182d8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182d8:	b580      	push	{r7, lr}
 80182da:	b098      	sub	sp, #96	@ 0x60
 80182dc:	af00      	add	r7, sp, #0
 80182de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80182e0:	f107 0310 	add.w	r3, r7, #16
 80182e4:	2250      	movs	r2, #80	@ 0x50
 80182e6:	2100      	movs	r1, #0
 80182e8:	4618      	mov	r0, r3
 80182ea:	f000 fbaf 	bl	8018a4c <memset>
  if(pcdHandle->Instance==USB)
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	4a15      	ldr	r2, [pc, #84]	@ (8018348 <HAL_PCD_MspInit+0x70>)
 80182f4:	4293      	cmp	r3, r2
 80182f6:	d122      	bne.n	801833e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80182f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80182fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80182fe:	2300      	movs	r3, #0
 8018300:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8018302:	f107 0310 	add.w	r3, r7, #16
 8018306:	4618      	mov	r0, r3
 8018308:	f7f5 fbc2 	bl	800da90 <HAL_RCCEx_PeriphCLKConfig>
 801830c:	4603      	mov	r3, r0
 801830e:	2b00      	cmp	r3, #0
 8018310:	d001      	beq.n	8018316 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8018312:	f7ef f84d 	bl	80073b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8018316:	4b0d      	ldr	r3, [pc, #52]	@ (801834c <HAL_PCD_MspInit+0x74>)
 8018318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801831a:	4a0c      	ldr	r2, [pc, #48]	@ (801834c <HAL_PCD_MspInit+0x74>)
 801831c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8018320:	6593      	str	r3, [r2, #88]	@ 0x58
 8018322:	4b0a      	ldr	r3, [pc, #40]	@ (801834c <HAL_PCD_MspInit+0x74>)
 8018324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018326:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801832a:	60fb      	str	r3, [r7, #12]
 801832c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801832e:	2200      	movs	r2, #0
 8018330:	2100      	movs	r1, #0
 8018332:	2014      	movs	r0, #20
 8018334:	f7f1 fe33 	bl	8009f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8018338:	2014      	movs	r0, #20
 801833a:	f7f1 fe4a 	bl	8009fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801833e:	bf00      	nop
 8018340:	3760      	adds	r7, #96	@ 0x60
 8018342:	46bd      	mov	sp, r7
 8018344:	bd80      	pop	{r7, pc}
 8018346:	bf00      	nop
 8018348:	40005c00 	.word	0x40005c00
 801834c:	40021000 	.word	0x40021000

08018350 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018350:	b580      	push	{r7, lr}
 8018352:	b082      	sub	sp, #8
 8018354:	af00      	add	r7, sp, #0
 8018356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8018364:	4619      	mov	r1, r3
 8018366:	4610      	mov	r0, r2
 8018368:	f7fe f9ac 	bl	80166c4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801836c:	bf00      	nop
 801836e:	3708      	adds	r7, #8
 8018370:	46bd      	mov	sp, r7
 8018372:	bd80      	pop	{r7, pc}

08018374 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018374:	b580      	push	{r7, lr}
 8018376:	b082      	sub	sp, #8
 8018378:	af00      	add	r7, sp, #0
 801837a:	6078      	str	r0, [r7, #4]
 801837c:	460b      	mov	r3, r1
 801837e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018386:	78fa      	ldrb	r2, [r7, #3]
 8018388:	6879      	ldr	r1, [r7, #4]
 801838a:	4613      	mov	r3, r2
 801838c:	009b      	lsls	r3, r3, #2
 801838e:	4413      	add	r3, r2
 8018390:	00db      	lsls	r3, r3, #3
 8018392:	440b      	add	r3, r1
 8018394:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018398:	681a      	ldr	r2, [r3, #0]
 801839a:	78fb      	ldrb	r3, [r7, #3]
 801839c:	4619      	mov	r1, r3
 801839e:	f7fe f9e6 	bl	801676e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80183a2:	bf00      	nop
 80183a4:	3708      	adds	r7, #8
 80183a6:	46bd      	mov	sp, r7
 80183a8:	bd80      	pop	{r7, pc}

080183aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183aa:	b580      	push	{r7, lr}
 80183ac:	b082      	sub	sp, #8
 80183ae:	af00      	add	r7, sp, #0
 80183b0:	6078      	str	r0, [r7, #4]
 80183b2:	460b      	mov	r3, r1
 80183b4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80183bc:	78fa      	ldrb	r2, [r7, #3]
 80183be:	6879      	ldr	r1, [r7, #4]
 80183c0:	4613      	mov	r3, r2
 80183c2:	009b      	lsls	r3, r3, #2
 80183c4:	4413      	add	r3, r2
 80183c6:	00db      	lsls	r3, r3, #3
 80183c8:	440b      	add	r3, r1
 80183ca:	3324      	adds	r3, #36	@ 0x24
 80183cc:	681a      	ldr	r2, [r3, #0]
 80183ce:	78fb      	ldrb	r3, [r7, #3]
 80183d0:	4619      	mov	r1, r3
 80183d2:	f7fe fa2f 	bl	8016834 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80183d6:	bf00      	nop
 80183d8:	3708      	adds	r7, #8
 80183da:	46bd      	mov	sp, r7
 80183dc:	bd80      	pop	{r7, pc}

080183de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183de:	b580      	push	{r7, lr}
 80183e0:	b082      	sub	sp, #8
 80183e2:	af00      	add	r7, sp, #0
 80183e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80183ec:	4618      	mov	r0, r3
 80183ee:	f7fe fb43 	bl	8016a78 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80183f2:	bf00      	nop
 80183f4:	3708      	adds	r7, #8
 80183f6:	46bd      	mov	sp, r7
 80183f8:	bd80      	pop	{r7, pc}

080183fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183fa:	b580      	push	{r7, lr}
 80183fc:	b084      	sub	sp, #16
 80183fe:	af00      	add	r7, sp, #0
 8018400:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018402:	2301      	movs	r3, #1
 8018404:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	795b      	ldrb	r3, [r3, #5]
 801840a:	2b02      	cmp	r3, #2
 801840c:	d001      	beq.n	8018412 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801840e:	f7ee ffcf 	bl	80073b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018418:	7bfa      	ldrb	r2, [r7, #15]
 801841a:	4611      	mov	r1, r2
 801841c:	4618      	mov	r0, r3
 801841e:	f7fe faed 	bl	80169fc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018428:	4618      	mov	r0, r3
 801842a:	f7fe fa99 	bl	8016960 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801842e:	bf00      	nop
 8018430:	3710      	adds	r7, #16
 8018432:	46bd      	mov	sp, r7
 8018434:	bd80      	pop	{r7, pc}
	...

08018438 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b082      	sub	sp, #8
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018446:	4618      	mov	r0, r3
 8018448:	f7fe fae8 	bl	8016a1c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	7a5b      	ldrb	r3, [r3, #9]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d005      	beq.n	8018460 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018454:	4b04      	ldr	r3, [pc, #16]	@ (8018468 <HAL_PCD_SuspendCallback+0x30>)
 8018456:	691b      	ldr	r3, [r3, #16]
 8018458:	4a03      	ldr	r2, [pc, #12]	@ (8018468 <HAL_PCD_SuspendCallback+0x30>)
 801845a:	f043 0306 	orr.w	r3, r3, #6
 801845e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8018460:	bf00      	nop
 8018462:	3708      	adds	r7, #8
 8018464:	46bd      	mov	sp, r7
 8018466:	bd80      	pop	{r7, pc}
 8018468:	e000ed00 	.word	0xe000ed00

0801846c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b082      	sub	sp, #8
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	7a5b      	ldrb	r3, [r3, #9]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d007      	beq.n	801848c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801847c:	4b08      	ldr	r3, [pc, #32]	@ (80184a0 <HAL_PCD_ResumeCallback+0x34>)
 801847e:	691b      	ldr	r3, [r3, #16]
 8018480:	4a07      	ldr	r2, [pc, #28]	@ (80184a0 <HAL_PCD_ResumeCallback+0x34>)
 8018482:	f023 0306 	bic.w	r3, r3, #6
 8018486:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8018488:	f000 f9f8 	bl	801887c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018492:	4618      	mov	r0, r3
 8018494:	f7fe fad8 	bl	8016a48 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8018498:	bf00      	nop
 801849a:	3708      	adds	r7, #8
 801849c:	46bd      	mov	sp, r7
 801849e:	bd80      	pop	{r7, pc}
 80184a0:	e000ed00 	.word	0xe000ed00

080184a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80184a4:	b580      	push	{r7, lr}
 80184a6:	b082      	sub	sp, #8
 80184a8:	af00      	add	r7, sp, #0
 80184aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80184ac:	4a2b      	ldr	r2, [pc, #172]	@ (801855c <USBD_LL_Init+0xb8>)
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	4a29      	ldr	r2, [pc, #164]	@ (801855c <USBD_LL_Init+0xb8>)
 80184b8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 80184bc:	4b27      	ldr	r3, [pc, #156]	@ (801855c <USBD_LL_Init+0xb8>)
 80184be:	4a28      	ldr	r2, [pc, #160]	@ (8018560 <USBD_LL_Init+0xbc>)
 80184c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80184c2:	4b26      	ldr	r3, [pc, #152]	@ (801855c <USBD_LL_Init+0xb8>)
 80184c4:	2208      	movs	r2, #8
 80184c6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80184c8:	4b24      	ldr	r3, [pc, #144]	@ (801855c <USBD_LL_Init+0xb8>)
 80184ca:	2202      	movs	r2, #2
 80184cc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80184ce:	4b23      	ldr	r3, [pc, #140]	@ (801855c <USBD_LL_Init+0xb8>)
 80184d0:	2202      	movs	r2, #2
 80184d2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80184d4:	4b21      	ldr	r3, [pc, #132]	@ (801855c <USBD_LL_Init+0xb8>)
 80184d6:	2200      	movs	r2, #0
 80184d8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80184da:	4b20      	ldr	r3, [pc, #128]	@ (801855c <USBD_LL_Init+0xb8>)
 80184dc:	2200      	movs	r2, #0
 80184de:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80184e0:	4b1e      	ldr	r3, [pc, #120]	@ (801855c <USBD_LL_Init+0xb8>)
 80184e2:	2200      	movs	r2, #0
 80184e4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80184e6:	4b1d      	ldr	r3, [pc, #116]	@ (801855c <USBD_LL_Init+0xb8>)
 80184e8:	2200      	movs	r2, #0
 80184ea:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80184ec:	481b      	ldr	r0, [pc, #108]	@ (801855c <USBD_LL_Init+0xb8>)
 80184ee:	f7f2 ffba 	bl	800b466 <HAL_PCD_Init>
 80184f2:	4603      	mov	r3, r0
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d001      	beq.n	80184fc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80184f8:	f7ee ff5a 	bl	80073b0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8018502:	2318      	movs	r3, #24
 8018504:	2200      	movs	r2, #0
 8018506:	2100      	movs	r1, #0
 8018508:	f7f4 fc73 	bl	800cdf2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8018512:	2358      	movs	r3, #88	@ 0x58
 8018514:	2200      	movs	r2, #0
 8018516:	2180      	movs	r1, #128	@ 0x80
 8018518:	f7f4 fc6b 	bl	800cdf2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8018522:	23c0      	movs	r3, #192	@ 0xc0
 8018524:	2200      	movs	r2, #0
 8018526:	2181      	movs	r1, #129	@ 0x81
 8018528:	f7f4 fc63 	bl	800cdf2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8018532:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8018536:	2200      	movs	r2, #0
 8018538:	2101      	movs	r1, #1
 801853a:	f7f4 fc5a 	bl	800cdf2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8018544:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018548:	2200      	movs	r2, #0
 801854a:	2182      	movs	r1, #130	@ 0x82
 801854c:	f7f4 fc51 	bl	800cdf2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8018550:	2300      	movs	r3, #0
}
 8018552:	4618      	mov	r0, r3
 8018554:	3708      	adds	r7, #8
 8018556:	46bd      	mov	sp, r7
 8018558:	bd80      	pop	{r7, pc}
 801855a:	bf00      	nop
 801855c:	20001c38 	.word	0x20001c38
 8018560:	40005c00 	.word	0x40005c00

08018564 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018564:	b580      	push	{r7, lr}
 8018566:	b084      	sub	sp, #16
 8018568:	af00      	add	r7, sp, #0
 801856a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801856c:	2300      	movs	r3, #0
 801856e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018570:	2300      	movs	r3, #0
 8018572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801857a:	4618      	mov	r0, r3
 801857c:	f7f3 f841 	bl	800b602 <HAL_PCD_Start>
 8018580:	4603      	mov	r3, r0
 8018582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018584:	7bfb      	ldrb	r3, [r7, #15]
 8018586:	4618      	mov	r0, r3
 8018588:	f000 f97e 	bl	8018888 <USBD_Get_USB_Status>
 801858c:	4603      	mov	r3, r0
 801858e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018590:	7bbb      	ldrb	r3, [r7, #14]
}
 8018592:	4618      	mov	r0, r3
 8018594:	3710      	adds	r7, #16
 8018596:	46bd      	mov	sp, r7
 8018598:	bd80      	pop	{r7, pc}

0801859a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801859a:	b580      	push	{r7, lr}
 801859c:	b084      	sub	sp, #16
 801859e:	af00      	add	r7, sp, #0
 80185a0:	6078      	str	r0, [r7, #4]
 80185a2:	4608      	mov	r0, r1
 80185a4:	4611      	mov	r1, r2
 80185a6:	461a      	mov	r2, r3
 80185a8:	4603      	mov	r3, r0
 80185aa:	70fb      	strb	r3, [r7, #3]
 80185ac:	460b      	mov	r3, r1
 80185ae:	70bb      	strb	r3, [r7, #2]
 80185b0:	4613      	mov	r3, r2
 80185b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185b4:	2300      	movs	r3, #0
 80185b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185b8:	2300      	movs	r3, #0
 80185ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80185c2:	78bb      	ldrb	r3, [r7, #2]
 80185c4:	883a      	ldrh	r2, [r7, #0]
 80185c6:	78f9      	ldrb	r1, [r7, #3]
 80185c8:	f7f3 f988 	bl	800b8dc <HAL_PCD_EP_Open>
 80185cc:	4603      	mov	r3, r0
 80185ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80185d0:	7bfb      	ldrb	r3, [r7, #15]
 80185d2:	4618      	mov	r0, r3
 80185d4:	f000 f958 	bl	8018888 <USBD_Get_USB_Status>
 80185d8:	4603      	mov	r3, r0
 80185da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80185dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80185de:	4618      	mov	r0, r3
 80185e0:	3710      	adds	r7, #16
 80185e2:	46bd      	mov	sp, r7
 80185e4:	bd80      	pop	{r7, pc}

080185e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80185e6:	b580      	push	{r7, lr}
 80185e8:	b084      	sub	sp, #16
 80185ea:	af00      	add	r7, sp, #0
 80185ec:	6078      	str	r0, [r7, #4]
 80185ee:	460b      	mov	r3, r1
 80185f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185f2:	2300      	movs	r3, #0
 80185f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185f6:	2300      	movs	r3, #0
 80185f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8018600:	78fa      	ldrb	r2, [r7, #3]
 8018602:	4611      	mov	r1, r2
 8018604:	4618      	mov	r0, r3
 8018606:	f7f3 f9c6 	bl	800b996 <HAL_PCD_EP_Close>
 801860a:	4603      	mov	r3, r0
 801860c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801860e:	7bfb      	ldrb	r3, [r7, #15]
 8018610:	4618      	mov	r0, r3
 8018612:	f000 f939 	bl	8018888 <USBD_Get_USB_Status>
 8018616:	4603      	mov	r3, r0
 8018618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801861a:	7bbb      	ldrb	r3, [r7, #14]
}
 801861c:	4618      	mov	r0, r3
 801861e:	3710      	adds	r7, #16
 8018620:	46bd      	mov	sp, r7
 8018622:	bd80      	pop	{r7, pc}

08018624 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018624:	b580      	push	{r7, lr}
 8018626:	b084      	sub	sp, #16
 8018628:	af00      	add	r7, sp, #0
 801862a:	6078      	str	r0, [r7, #4]
 801862c:	460b      	mov	r3, r1
 801862e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018630:	2300      	movs	r3, #0
 8018632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018634:	2300      	movs	r3, #0
 8018636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801863e:	78fa      	ldrb	r2, [r7, #3]
 8018640:	4611      	mov	r1, r2
 8018642:	4618      	mov	r0, r3
 8018644:	f7f3 fa6f 	bl	800bb26 <HAL_PCD_EP_SetStall>
 8018648:	4603      	mov	r3, r0
 801864a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801864c:	7bfb      	ldrb	r3, [r7, #15]
 801864e:	4618      	mov	r0, r3
 8018650:	f000 f91a 	bl	8018888 <USBD_Get_USB_Status>
 8018654:	4603      	mov	r3, r0
 8018656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018658:	7bbb      	ldrb	r3, [r7, #14]
}
 801865a:	4618      	mov	r0, r3
 801865c:	3710      	adds	r7, #16
 801865e:	46bd      	mov	sp, r7
 8018660:	bd80      	pop	{r7, pc}

08018662 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018662:	b580      	push	{r7, lr}
 8018664:	b084      	sub	sp, #16
 8018666:	af00      	add	r7, sp, #0
 8018668:	6078      	str	r0, [r7, #4]
 801866a:	460b      	mov	r3, r1
 801866c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801866e:	2300      	movs	r3, #0
 8018670:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018672:	2300      	movs	r3, #0
 8018674:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801867c:	78fa      	ldrb	r2, [r7, #3]
 801867e:	4611      	mov	r1, r2
 8018680:	4618      	mov	r0, r3
 8018682:	f7f3 faa2 	bl	800bbca <HAL_PCD_EP_ClrStall>
 8018686:	4603      	mov	r3, r0
 8018688:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801868a:	7bfb      	ldrb	r3, [r7, #15]
 801868c:	4618      	mov	r0, r3
 801868e:	f000 f8fb 	bl	8018888 <USBD_Get_USB_Status>
 8018692:	4603      	mov	r3, r0
 8018694:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018696:	7bbb      	ldrb	r3, [r7, #14]
}
 8018698:	4618      	mov	r0, r3
 801869a:	3710      	adds	r7, #16
 801869c:	46bd      	mov	sp, r7
 801869e:	bd80      	pop	{r7, pc}

080186a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80186a0:	b480      	push	{r7}
 80186a2:	b085      	sub	sp, #20
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	6078      	str	r0, [r7, #4]
 80186a8:	460b      	mov	r3, r1
 80186aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80186b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80186b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	da0b      	bge.n	80186d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80186bc:	78fb      	ldrb	r3, [r7, #3]
 80186be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80186c2:	68f9      	ldr	r1, [r7, #12]
 80186c4:	4613      	mov	r3, r2
 80186c6:	009b      	lsls	r3, r3, #2
 80186c8:	4413      	add	r3, r2
 80186ca:	00db      	lsls	r3, r3, #3
 80186cc:	440b      	add	r3, r1
 80186ce:	3312      	adds	r3, #18
 80186d0:	781b      	ldrb	r3, [r3, #0]
 80186d2:	e00b      	b.n	80186ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80186d4:	78fb      	ldrb	r3, [r7, #3]
 80186d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80186da:	68f9      	ldr	r1, [r7, #12]
 80186dc:	4613      	mov	r3, r2
 80186de:	009b      	lsls	r3, r3, #2
 80186e0:	4413      	add	r3, r2
 80186e2:	00db      	lsls	r3, r3, #3
 80186e4:	440b      	add	r3, r1
 80186e6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80186ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80186ec:	4618      	mov	r0, r3
 80186ee:	3714      	adds	r7, #20
 80186f0:	46bd      	mov	sp, r7
 80186f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186f6:	4770      	bx	lr

080186f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b084      	sub	sp, #16
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	6078      	str	r0, [r7, #4]
 8018700:	460b      	mov	r3, r1
 8018702:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018704:	2300      	movs	r3, #0
 8018706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018708:	2300      	movs	r3, #0
 801870a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8018712:	78fa      	ldrb	r2, [r7, #3]
 8018714:	4611      	mov	r1, r2
 8018716:	4618      	mov	r0, r3
 8018718:	f7f3 f8bc 	bl	800b894 <HAL_PCD_SetAddress>
 801871c:	4603      	mov	r3, r0
 801871e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018720:	7bfb      	ldrb	r3, [r7, #15]
 8018722:	4618      	mov	r0, r3
 8018724:	f000 f8b0 	bl	8018888 <USBD_Get_USB_Status>
 8018728:	4603      	mov	r3, r0
 801872a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801872c:	7bbb      	ldrb	r3, [r7, #14]
}
 801872e:	4618      	mov	r0, r3
 8018730:	3710      	adds	r7, #16
 8018732:	46bd      	mov	sp, r7
 8018734:	bd80      	pop	{r7, pc}

08018736 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018736:	b580      	push	{r7, lr}
 8018738:	b086      	sub	sp, #24
 801873a:	af00      	add	r7, sp, #0
 801873c:	60f8      	str	r0, [r7, #12]
 801873e:	607a      	str	r2, [r7, #4]
 8018740:	603b      	str	r3, [r7, #0]
 8018742:	460b      	mov	r3, r1
 8018744:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018746:	2300      	movs	r3, #0
 8018748:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801874a:	2300      	movs	r3, #0
 801874c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8018754:	7af9      	ldrb	r1, [r7, #11]
 8018756:	683b      	ldr	r3, [r7, #0]
 8018758:	687a      	ldr	r2, [r7, #4]
 801875a:	f7f3 f9ad 	bl	800bab8 <HAL_PCD_EP_Transmit>
 801875e:	4603      	mov	r3, r0
 8018760:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018762:	7dfb      	ldrb	r3, [r7, #23]
 8018764:	4618      	mov	r0, r3
 8018766:	f000 f88f 	bl	8018888 <USBD_Get_USB_Status>
 801876a:	4603      	mov	r3, r0
 801876c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801876e:	7dbb      	ldrb	r3, [r7, #22]
}
 8018770:	4618      	mov	r0, r3
 8018772:	3718      	adds	r7, #24
 8018774:	46bd      	mov	sp, r7
 8018776:	bd80      	pop	{r7, pc}

08018778 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018778:	b580      	push	{r7, lr}
 801877a:	b086      	sub	sp, #24
 801877c:	af00      	add	r7, sp, #0
 801877e:	60f8      	str	r0, [r7, #12]
 8018780:	607a      	str	r2, [r7, #4]
 8018782:	603b      	str	r3, [r7, #0]
 8018784:	460b      	mov	r3, r1
 8018786:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018788:	2300      	movs	r3, #0
 801878a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801878c:	2300      	movs	r3, #0
 801878e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8018796:	7af9      	ldrb	r1, [r7, #11]
 8018798:	683b      	ldr	r3, [r7, #0]
 801879a:	687a      	ldr	r2, [r7, #4]
 801879c:	f7f3 f943 	bl	800ba26 <HAL_PCD_EP_Receive>
 80187a0:	4603      	mov	r3, r0
 80187a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80187a4:	7dfb      	ldrb	r3, [r7, #23]
 80187a6:	4618      	mov	r0, r3
 80187a8:	f000 f86e 	bl	8018888 <USBD_Get_USB_Status>
 80187ac:	4603      	mov	r3, r0
 80187ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80187b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80187b2:	4618      	mov	r0, r3
 80187b4:	3718      	adds	r7, #24
 80187b6:	46bd      	mov	sp, r7
 80187b8:	bd80      	pop	{r7, pc}

080187ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80187ba:	b580      	push	{r7, lr}
 80187bc:	b082      	sub	sp, #8
 80187be:	af00      	add	r7, sp, #0
 80187c0:	6078      	str	r0, [r7, #4]
 80187c2:	460b      	mov	r3, r1
 80187c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80187cc:	78fa      	ldrb	r2, [r7, #3]
 80187ce:	4611      	mov	r1, r2
 80187d0:	4618      	mov	r0, r3
 80187d2:	f7f3 f959 	bl	800ba88 <HAL_PCD_EP_GetRxCount>
 80187d6:	4603      	mov	r3, r0
}
 80187d8:	4618      	mov	r0, r3
 80187da:	3708      	adds	r7, #8
 80187dc:	46bd      	mov	sp, r7
 80187de:	bd80      	pop	{r7, pc}

080187e0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	b082      	sub	sp, #8
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	6078      	str	r0, [r7, #4]
 80187e8:	460b      	mov	r3, r1
 80187ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80187ec:	78fb      	ldrb	r3, [r7, #3]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d002      	beq.n	80187f8 <HAL_PCDEx_LPM_Callback+0x18>
 80187f2:	2b01      	cmp	r3, #1
 80187f4:	d013      	beq.n	801881e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80187f6:	e023      	b.n	8018840 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	7a5b      	ldrb	r3, [r3, #9]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d007      	beq.n	8018810 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8018800:	f000 f83c 	bl	801887c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018804:	4b10      	ldr	r3, [pc, #64]	@ (8018848 <HAL_PCDEx_LPM_Callback+0x68>)
 8018806:	691b      	ldr	r3, [r3, #16]
 8018808:	4a0f      	ldr	r2, [pc, #60]	@ (8018848 <HAL_PCDEx_LPM_Callback+0x68>)
 801880a:	f023 0306 	bic.w	r3, r3, #6
 801880e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018816:	4618      	mov	r0, r3
 8018818:	f7fe f916 	bl	8016a48 <USBD_LL_Resume>
    break;
 801881c:	e010      	b.n	8018840 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018824:	4618      	mov	r0, r3
 8018826:	f7fe f8f9 	bl	8016a1c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	7a5b      	ldrb	r3, [r3, #9]
 801882e:	2b00      	cmp	r3, #0
 8018830:	d005      	beq.n	801883e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018832:	4b05      	ldr	r3, [pc, #20]	@ (8018848 <HAL_PCDEx_LPM_Callback+0x68>)
 8018834:	691b      	ldr	r3, [r3, #16]
 8018836:	4a04      	ldr	r2, [pc, #16]	@ (8018848 <HAL_PCDEx_LPM_Callback+0x68>)
 8018838:	f043 0306 	orr.w	r3, r3, #6
 801883c:	6113      	str	r3, [r2, #16]
    break;
 801883e:	bf00      	nop
}
 8018840:	bf00      	nop
 8018842:	3708      	adds	r7, #8
 8018844:	46bd      	mov	sp, r7
 8018846:	bd80      	pop	{r7, pc}
 8018848:	e000ed00 	.word	0xe000ed00

0801884c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801884c:	b480      	push	{r7}
 801884e:	b083      	sub	sp, #12
 8018850:	af00      	add	r7, sp, #0
 8018852:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018854:	4b03      	ldr	r3, [pc, #12]	@ (8018864 <USBD_static_malloc+0x18>)
}
 8018856:	4618      	mov	r0, r3
 8018858:	370c      	adds	r7, #12
 801885a:	46bd      	mov	sp, r7
 801885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018860:	4770      	bx	lr
 8018862:	bf00      	nop
 8018864:	20001f14 	.word	0x20001f14

08018868 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018868:	b480      	push	{r7}
 801886a:	b083      	sub	sp, #12
 801886c:	af00      	add	r7, sp, #0
 801886e:	6078      	str	r0, [r7, #4]

}
 8018870:	bf00      	nop
 8018872:	370c      	adds	r7, #12
 8018874:	46bd      	mov	sp, r7
 8018876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801887a:	4770      	bx	lr

0801887c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801887c:	b580      	push	{r7, lr}
 801887e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8018880:	f7ee fd54 	bl	800732c <SystemClock_Config>
}
 8018884:	bf00      	nop
 8018886:	bd80      	pop	{r7, pc}

08018888 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018888:	b480      	push	{r7}
 801888a:	b085      	sub	sp, #20
 801888c:	af00      	add	r7, sp, #0
 801888e:	4603      	mov	r3, r0
 8018890:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018892:	2300      	movs	r3, #0
 8018894:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018896:	79fb      	ldrb	r3, [r7, #7]
 8018898:	2b03      	cmp	r3, #3
 801889a:	d817      	bhi.n	80188cc <USBD_Get_USB_Status+0x44>
 801889c:	a201      	add	r2, pc, #4	@ (adr r2, 80188a4 <USBD_Get_USB_Status+0x1c>)
 801889e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188a2:	bf00      	nop
 80188a4:	080188b5 	.word	0x080188b5
 80188a8:	080188bb 	.word	0x080188bb
 80188ac:	080188c1 	.word	0x080188c1
 80188b0:	080188c7 	.word	0x080188c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80188b4:	2300      	movs	r3, #0
 80188b6:	73fb      	strb	r3, [r7, #15]
    break;
 80188b8:	e00b      	b.n	80188d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80188ba:	2303      	movs	r3, #3
 80188bc:	73fb      	strb	r3, [r7, #15]
    break;
 80188be:	e008      	b.n	80188d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80188c0:	2301      	movs	r3, #1
 80188c2:	73fb      	strb	r3, [r7, #15]
    break;
 80188c4:	e005      	b.n	80188d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80188c6:	2303      	movs	r3, #3
 80188c8:	73fb      	strb	r3, [r7, #15]
    break;
 80188ca:	e002      	b.n	80188d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80188cc:	2303      	movs	r3, #3
 80188ce:	73fb      	strb	r3, [r7, #15]
    break;
 80188d0:	bf00      	nop
  }
  return usb_status;
 80188d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80188d4:	4618      	mov	r0, r3
 80188d6:	3714      	adds	r7, #20
 80188d8:	46bd      	mov	sp, r7
 80188da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188de:	4770      	bx	lr

080188e0 <malloc>:
 80188e0:	4b02      	ldr	r3, [pc, #8]	@ (80188ec <malloc+0xc>)
 80188e2:	4601      	mov	r1, r0
 80188e4:	6818      	ldr	r0, [r3, #0]
 80188e6:	f000 b825 	b.w	8018934 <_malloc_r>
 80188ea:	bf00      	nop
 80188ec:	200001ec 	.word	0x200001ec

080188f0 <sbrk_aligned>:
 80188f0:	b570      	push	{r4, r5, r6, lr}
 80188f2:	4e0f      	ldr	r6, [pc, #60]	@ (8018930 <sbrk_aligned+0x40>)
 80188f4:	460c      	mov	r4, r1
 80188f6:	6831      	ldr	r1, [r6, #0]
 80188f8:	4605      	mov	r5, r0
 80188fa:	b911      	cbnz	r1, 8018902 <sbrk_aligned+0x12>
 80188fc:	f000 f8ae 	bl	8018a5c <_sbrk_r>
 8018900:	6030      	str	r0, [r6, #0]
 8018902:	4621      	mov	r1, r4
 8018904:	4628      	mov	r0, r5
 8018906:	f000 f8a9 	bl	8018a5c <_sbrk_r>
 801890a:	1c43      	adds	r3, r0, #1
 801890c:	d103      	bne.n	8018916 <sbrk_aligned+0x26>
 801890e:	f04f 34ff 	mov.w	r4, #4294967295
 8018912:	4620      	mov	r0, r4
 8018914:	bd70      	pop	{r4, r5, r6, pc}
 8018916:	1cc4      	adds	r4, r0, #3
 8018918:	f024 0403 	bic.w	r4, r4, #3
 801891c:	42a0      	cmp	r0, r4
 801891e:	d0f8      	beq.n	8018912 <sbrk_aligned+0x22>
 8018920:	1a21      	subs	r1, r4, r0
 8018922:	4628      	mov	r0, r5
 8018924:	f000 f89a 	bl	8018a5c <_sbrk_r>
 8018928:	3001      	adds	r0, #1
 801892a:	d1f2      	bne.n	8018912 <sbrk_aligned+0x22>
 801892c:	e7ef      	b.n	801890e <sbrk_aligned+0x1e>
 801892e:	bf00      	nop
 8018930:	20002134 	.word	0x20002134

08018934 <_malloc_r>:
 8018934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018938:	1ccd      	adds	r5, r1, #3
 801893a:	f025 0503 	bic.w	r5, r5, #3
 801893e:	3508      	adds	r5, #8
 8018940:	2d0c      	cmp	r5, #12
 8018942:	bf38      	it	cc
 8018944:	250c      	movcc	r5, #12
 8018946:	2d00      	cmp	r5, #0
 8018948:	4606      	mov	r6, r0
 801894a:	db01      	blt.n	8018950 <_malloc_r+0x1c>
 801894c:	42a9      	cmp	r1, r5
 801894e:	d904      	bls.n	801895a <_malloc_r+0x26>
 8018950:	230c      	movs	r3, #12
 8018952:	6033      	str	r3, [r6, #0]
 8018954:	2000      	movs	r0, #0
 8018956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801895a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018a30 <_malloc_r+0xfc>
 801895e:	f000 f869 	bl	8018a34 <__malloc_lock>
 8018962:	f8d8 3000 	ldr.w	r3, [r8]
 8018966:	461c      	mov	r4, r3
 8018968:	bb44      	cbnz	r4, 80189bc <_malloc_r+0x88>
 801896a:	4629      	mov	r1, r5
 801896c:	4630      	mov	r0, r6
 801896e:	f7ff ffbf 	bl	80188f0 <sbrk_aligned>
 8018972:	1c43      	adds	r3, r0, #1
 8018974:	4604      	mov	r4, r0
 8018976:	d158      	bne.n	8018a2a <_malloc_r+0xf6>
 8018978:	f8d8 4000 	ldr.w	r4, [r8]
 801897c:	4627      	mov	r7, r4
 801897e:	2f00      	cmp	r7, #0
 8018980:	d143      	bne.n	8018a0a <_malloc_r+0xd6>
 8018982:	2c00      	cmp	r4, #0
 8018984:	d04b      	beq.n	8018a1e <_malloc_r+0xea>
 8018986:	6823      	ldr	r3, [r4, #0]
 8018988:	4639      	mov	r1, r7
 801898a:	4630      	mov	r0, r6
 801898c:	eb04 0903 	add.w	r9, r4, r3
 8018990:	f000 f864 	bl	8018a5c <_sbrk_r>
 8018994:	4581      	cmp	r9, r0
 8018996:	d142      	bne.n	8018a1e <_malloc_r+0xea>
 8018998:	6821      	ldr	r1, [r4, #0]
 801899a:	1a6d      	subs	r5, r5, r1
 801899c:	4629      	mov	r1, r5
 801899e:	4630      	mov	r0, r6
 80189a0:	f7ff ffa6 	bl	80188f0 <sbrk_aligned>
 80189a4:	3001      	adds	r0, #1
 80189a6:	d03a      	beq.n	8018a1e <_malloc_r+0xea>
 80189a8:	6823      	ldr	r3, [r4, #0]
 80189aa:	442b      	add	r3, r5
 80189ac:	6023      	str	r3, [r4, #0]
 80189ae:	f8d8 3000 	ldr.w	r3, [r8]
 80189b2:	685a      	ldr	r2, [r3, #4]
 80189b4:	bb62      	cbnz	r2, 8018a10 <_malloc_r+0xdc>
 80189b6:	f8c8 7000 	str.w	r7, [r8]
 80189ba:	e00f      	b.n	80189dc <_malloc_r+0xa8>
 80189bc:	6822      	ldr	r2, [r4, #0]
 80189be:	1b52      	subs	r2, r2, r5
 80189c0:	d420      	bmi.n	8018a04 <_malloc_r+0xd0>
 80189c2:	2a0b      	cmp	r2, #11
 80189c4:	d917      	bls.n	80189f6 <_malloc_r+0xc2>
 80189c6:	1961      	adds	r1, r4, r5
 80189c8:	42a3      	cmp	r3, r4
 80189ca:	6025      	str	r5, [r4, #0]
 80189cc:	bf18      	it	ne
 80189ce:	6059      	strne	r1, [r3, #4]
 80189d0:	6863      	ldr	r3, [r4, #4]
 80189d2:	bf08      	it	eq
 80189d4:	f8c8 1000 	streq.w	r1, [r8]
 80189d8:	5162      	str	r2, [r4, r5]
 80189da:	604b      	str	r3, [r1, #4]
 80189dc:	4630      	mov	r0, r6
 80189de:	f000 f82f 	bl	8018a40 <__malloc_unlock>
 80189e2:	f104 000b 	add.w	r0, r4, #11
 80189e6:	1d23      	adds	r3, r4, #4
 80189e8:	f020 0007 	bic.w	r0, r0, #7
 80189ec:	1ac2      	subs	r2, r0, r3
 80189ee:	bf1c      	itt	ne
 80189f0:	1a1b      	subne	r3, r3, r0
 80189f2:	50a3      	strne	r3, [r4, r2]
 80189f4:	e7af      	b.n	8018956 <_malloc_r+0x22>
 80189f6:	6862      	ldr	r2, [r4, #4]
 80189f8:	42a3      	cmp	r3, r4
 80189fa:	bf0c      	ite	eq
 80189fc:	f8c8 2000 	streq.w	r2, [r8]
 8018a00:	605a      	strne	r2, [r3, #4]
 8018a02:	e7eb      	b.n	80189dc <_malloc_r+0xa8>
 8018a04:	4623      	mov	r3, r4
 8018a06:	6864      	ldr	r4, [r4, #4]
 8018a08:	e7ae      	b.n	8018968 <_malloc_r+0x34>
 8018a0a:	463c      	mov	r4, r7
 8018a0c:	687f      	ldr	r7, [r7, #4]
 8018a0e:	e7b6      	b.n	801897e <_malloc_r+0x4a>
 8018a10:	461a      	mov	r2, r3
 8018a12:	685b      	ldr	r3, [r3, #4]
 8018a14:	42a3      	cmp	r3, r4
 8018a16:	d1fb      	bne.n	8018a10 <_malloc_r+0xdc>
 8018a18:	2300      	movs	r3, #0
 8018a1a:	6053      	str	r3, [r2, #4]
 8018a1c:	e7de      	b.n	80189dc <_malloc_r+0xa8>
 8018a1e:	230c      	movs	r3, #12
 8018a20:	6033      	str	r3, [r6, #0]
 8018a22:	4630      	mov	r0, r6
 8018a24:	f000 f80c 	bl	8018a40 <__malloc_unlock>
 8018a28:	e794      	b.n	8018954 <_malloc_r+0x20>
 8018a2a:	6005      	str	r5, [r0, #0]
 8018a2c:	e7d6      	b.n	80189dc <_malloc_r+0xa8>
 8018a2e:	bf00      	nop
 8018a30:	20002138 	.word	0x20002138

08018a34 <__malloc_lock>:
 8018a34:	4801      	ldr	r0, [pc, #4]	@ (8018a3c <__malloc_lock+0x8>)
 8018a36:	f000 b84b 	b.w	8018ad0 <__retarget_lock_acquire_recursive>
 8018a3a:	bf00      	nop
 8018a3c:	20002278 	.word	0x20002278

08018a40 <__malloc_unlock>:
 8018a40:	4801      	ldr	r0, [pc, #4]	@ (8018a48 <__malloc_unlock+0x8>)
 8018a42:	f000 b846 	b.w	8018ad2 <__retarget_lock_release_recursive>
 8018a46:	bf00      	nop
 8018a48:	20002278 	.word	0x20002278

08018a4c <memset>:
 8018a4c:	4402      	add	r2, r0
 8018a4e:	4603      	mov	r3, r0
 8018a50:	4293      	cmp	r3, r2
 8018a52:	d100      	bne.n	8018a56 <memset+0xa>
 8018a54:	4770      	bx	lr
 8018a56:	f803 1b01 	strb.w	r1, [r3], #1
 8018a5a:	e7f9      	b.n	8018a50 <memset+0x4>

08018a5c <_sbrk_r>:
 8018a5c:	b538      	push	{r3, r4, r5, lr}
 8018a5e:	4d06      	ldr	r5, [pc, #24]	@ (8018a78 <_sbrk_r+0x1c>)
 8018a60:	2300      	movs	r3, #0
 8018a62:	4604      	mov	r4, r0
 8018a64:	4608      	mov	r0, r1
 8018a66:	602b      	str	r3, [r5, #0]
 8018a68:	f7ef f8f2 	bl	8007c50 <_sbrk>
 8018a6c:	1c43      	adds	r3, r0, #1
 8018a6e:	d102      	bne.n	8018a76 <_sbrk_r+0x1a>
 8018a70:	682b      	ldr	r3, [r5, #0]
 8018a72:	b103      	cbz	r3, 8018a76 <_sbrk_r+0x1a>
 8018a74:	6023      	str	r3, [r4, #0]
 8018a76:	bd38      	pop	{r3, r4, r5, pc}
 8018a78:	20002274 	.word	0x20002274

08018a7c <__errno>:
 8018a7c:	4b01      	ldr	r3, [pc, #4]	@ (8018a84 <__errno+0x8>)
 8018a7e:	6818      	ldr	r0, [r3, #0]
 8018a80:	4770      	bx	lr
 8018a82:	bf00      	nop
 8018a84:	200001ec 	.word	0x200001ec

08018a88 <__libc_init_array>:
 8018a88:	b570      	push	{r4, r5, r6, lr}
 8018a8a:	4d0d      	ldr	r5, [pc, #52]	@ (8018ac0 <__libc_init_array+0x38>)
 8018a8c:	4c0d      	ldr	r4, [pc, #52]	@ (8018ac4 <__libc_init_array+0x3c>)
 8018a8e:	1b64      	subs	r4, r4, r5
 8018a90:	10a4      	asrs	r4, r4, #2
 8018a92:	2600      	movs	r6, #0
 8018a94:	42a6      	cmp	r6, r4
 8018a96:	d109      	bne.n	8018aac <__libc_init_array+0x24>
 8018a98:	4d0b      	ldr	r5, [pc, #44]	@ (8018ac8 <__libc_init_array+0x40>)
 8018a9a:	4c0c      	ldr	r4, [pc, #48]	@ (8018acc <__libc_init_array+0x44>)
 8018a9c:	f001 ff8c 	bl	801a9b8 <_init>
 8018aa0:	1b64      	subs	r4, r4, r5
 8018aa2:	10a4      	asrs	r4, r4, #2
 8018aa4:	2600      	movs	r6, #0
 8018aa6:	42a6      	cmp	r6, r4
 8018aa8:	d105      	bne.n	8018ab6 <__libc_init_array+0x2e>
 8018aaa:	bd70      	pop	{r4, r5, r6, pc}
 8018aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ab0:	4798      	blx	r3
 8018ab2:	3601      	adds	r6, #1
 8018ab4:	e7ee      	b.n	8018a94 <__libc_init_array+0xc>
 8018ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8018aba:	4798      	blx	r3
 8018abc:	3601      	adds	r6, #1
 8018abe:	e7f2      	b.n	8018aa6 <__libc_init_array+0x1e>
 8018ac0:	0801ad38 	.word	0x0801ad38
 8018ac4:	0801ad38 	.word	0x0801ad38
 8018ac8:	0801ad38 	.word	0x0801ad38
 8018acc:	0801ad3c 	.word	0x0801ad3c

08018ad0 <__retarget_lock_acquire_recursive>:
 8018ad0:	4770      	bx	lr

08018ad2 <__retarget_lock_release_recursive>:
 8018ad2:	4770      	bx	lr

08018ad4 <__aeabi_memcpy>:
 8018ad4:	f000 b803 	b.w	8018ade <memcpy>

08018ad8 <__aeabi_memclr>:
 8018ad8:	2200      	movs	r2, #0
 8018ada:	f7ec bce2 	b.w	80054a2 <__aeabi_memset>

08018ade <memcpy>:
 8018ade:	440a      	add	r2, r1
 8018ae0:	4291      	cmp	r1, r2
 8018ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8018ae6:	d100      	bne.n	8018aea <memcpy+0xc>
 8018ae8:	4770      	bx	lr
 8018aea:	b510      	push	{r4, lr}
 8018aec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018af4:	4291      	cmp	r1, r2
 8018af6:	d1f9      	bne.n	8018aec <memcpy+0xe>
 8018af8:	bd10      	pop	{r4, pc}
	...

08018afc <pow>:
 8018afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018afe:	ed2d 8b02 	vpush	{d8}
 8018b02:	eeb0 8a40 	vmov.f32	s16, s0
 8018b06:	eef0 8a60 	vmov.f32	s17, s1
 8018b0a:	ec55 4b11 	vmov	r4, r5, d1
 8018b0e:	f000 fa9f 	bl	8019050 <__ieee754_pow>
 8018b12:	4622      	mov	r2, r4
 8018b14:	462b      	mov	r3, r5
 8018b16:	4620      	mov	r0, r4
 8018b18:	4629      	mov	r1, r5
 8018b1a:	ec57 6b10 	vmov	r6, r7, d0
 8018b1e:	f7ed f963 	bl	8005de8 <__aeabi_dcmpun>
 8018b22:	2800      	cmp	r0, #0
 8018b24:	d13b      	bne.n	8018b9e <pow+0xa2>
 8018b26:	ec51 0b18 	vmov	r0, r1, d8
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	f7ed f929 	bl	8005d84 <__aeabi_dcmpeq>
 8018b32:	b1b8      	cbz	r0, 8018b64 <pow+0x68>
 8018b34:	2200      	movs	r2, #0
 8018b36:	2300      	movs	r3, #0
 8018b38:	4620      	mov	r0, r4
 8018b3a:	4629      	mov	r1, r5
 8018b3c:	f7ed f922 	bl	8005d84 <__aeabi_dcmpeq>
 8018b40:	2800      	cmp	r0, #0
 8018b42:	d146      	bne.n	8018bd2 <pow+0xd6>
 8018b44:	ec45 4b10 	vmov	d0, r4, r5
 8018b48:	f000 f8f2 	bl	8018d30 <finite>
 8018b4c:	b338      	cbz	r0, 8018b9e <pow+0xa2>
 8018b4e:	2200      	movs	r2, #0
 8018b50:	2300      	movs	r3, #0
 8018b52:	4620      	mov	r0, r4
 8018b54:	4629      	mov	r1, r5
 8018b56:	f7ed f91f 	bl	8005d98 <__aeabi_dcmplt>
 8018b5a:	b300      	cbz	r0, 8018b9e <pow+0xa2>
 8018b5c:	f7ff ff8e 	bl	8018a7c <__errno>
 8018b60:	2322      	movs	r3, #34	@ 0x22
 8018b62:	e01b      	b.n	8018b9c <pow+0xa0>
 8018b64:	ec47 6b10 	vmov	d0, r6, r7
 8018b68:	f000 f8e2 	bl	8018d30 <finite>
 8018b6c:	b9e0      	cbnz	r0, 8018ba8 <pow+0xac>
 8018b6e:	eeb0 0a48 	vmov.f32	s0, s16
 8018b72:	eef0 0a68 	vmov.f32	s1, s17
 8018b76:	f000 f8db 	bl	8018d30 <finite>
 8018b7a:	b1a8      	cbz	r0, 8018ba8 <pow+0xac>
 8018b7c:	ec45 4b10 	vmov	d0, r4, r5
 8018b80:	f000 f8d6 	bl	8018d30 <finite>
 8018b84:	b180      	cbz	r0, 8018ba8 <pow+0xac>
 8018b86:	4632      	mov	r2, r6
 8018b88:	463b      	mov	r3, r7
 8018b8a:	4630      	mov	r0, r6
 8018b8c:	4639      	mov	r1, r7
 8018b8e:	f7ed f92b 	bl	8005de8 <__aeabi_dcmpun>
 8018b92:	2800      	cmp	r0, #0
 8018b94:	d0e2      	beq.n	8018b5c <pow+0x60>
 8018b96:	f7ff ff71 	bl	8018a7c <__errno>
 8018b9a:	2321      	movs	r3, #33	@ 0x21
 8018b9c:	6003      	str	r3, [r0, #0]
 8018b9e:	ecbd 8b02 	vpop	{d8}
 8018ba2:	ec47 6b10 	vmov	d0, r6, r7
 8018ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ba8:	2200      	movs	r2, #0
 8018baa:	2300      	movs	r3, #0
 8018bac:	4630      	mov	r0, r6
 8018bae:	4639      	mov	r1, r7
 8018bb0:	f7ed f8e8 	bl	8005d84 <__aeabi_dcmpeq>
 8018bb4:	2800      	cmp	r0, #0
 8018bb6:	d0f2      	beq.n	8018b9e <pow+0xa2>
 8018bb8:	eeb0 0a48 	vmov.f32	s0, s16
 8018bbc:	eef0 0a68 	vmov.f32	s1, s17
 8018bc0:	f000 f8b6 	bl	8018d30 <finite>
 8018bc4:	2800      	cmp	r0, #0
 8018bc6:	d0ea      	beq.n	8018b9e <pow+0xa2>
 8018bc8:	ec45 4b10 	vmov	d0, r4, r5
 8018bcc:	f000 f8b0 	bl	8018d30 <finite>
 8018bd0:	e7c3      	b.n	8018b5a <pow+0x5e>
 8018bd2:	4f01      	ldr	r7, [pc, #4]	@ (8018bd8 <pow+0xdc>)
 8018bd4:	2600      	movs	r6, #0
 8018bd6:	e7e2      	b.n	8018b9e <pow+0xa2>
 8018bd8:	3ff00000 	.word	0x3ff00000
 8018bdc:	00000000 	.word	0x00000000

08018be0 <cos>:
 8018be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018be2:	ec53 2b10 	vmov	r2, r3, d0
 8018be6:	4826      	ldr	r0, [pc, #152]	@ (8018c80 <cos+0xa0>)
 8018be8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8018bec:	4281      	cmp	r1, r0
 8018bee:	d806      	bhi.n	8018bfe <cos+0x1e>
 8018bf0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8018c78 <cos+0x98>
 8018bf4:	b005      	add	sp, #20
 8018bf6:	f85d eb04 	ldr.w	lr, [sp], #4
 8018bfa:	f000 b8a5 	b.w	8018d48 <__kernel_cos>
 8018bfe:	4821      	ldr	r0, [pc, #132]	@ (8018c84 <cos+0xa4>)
 8018c00:	4281      	cmp	r1, r0
 8018c02:	d908      	bls.n	8018c16 <cos+0x36>
 8018c04:	4610      	mov	r0, r2
 8018c06:	4619      	mov	r1, r3
 8018c08:	f7ec fc9c 	bl	8005544 <__aeabi_dsub>
 8018c0c:	ec41 0b10 	vmov	d0, r0, r1
 8018c10:	b005      	add	sp, #20
 8018c12:	f85d fb04 	ldr.w	pc, [sp], #4
 8018c16:	4668      	mov	r0, sp
 8018c18:	f000 ff5e 	bl	8019ad8 <__ieee754_rem_pio2>
 8018c1c:	f000 0003 	and.w	r0, r0, #3
 8018c20:	2801      	cmp	r0, #1
 8018c22:	d00b      	beq.n	8018c3c <cos+0x5c>
 8018c24:	2802      	cmp	r0, #2
 8018c26:	d015      	beq.n	8018c54 <cos+0x74>
 8018c28:	b9d8      	cbnz	r0, 8018c62 <cos+0x82>
 8018c2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018c2e:	ed9d 0b00 	vldr	d0, [sp]
 8018c32:	f000 f889 	bl	8018d48 <__kernel_cos>
 8018c36:	ec51 0b10 	vmov	r0, r1, d0
 8018c3a:	e7e7      	b.n	8018c0c <cos+0x2c>
 8018c3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018c40:	ed9d 0b00 	vldr	d0, [sp]
 8018c44:	f000 f948 	bl	8018ed8 <__kernel_sin>
 8018c48:	ec53 2b10 	vmov	r2, r3, d0
 8018c4c:	4610      	mov	r0, r2
 8018c4e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8018c52:	e7db      	b.n	8018c0c <cos+0x2c>
 8018c54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018c58:	ed9d 0b00 	vldr	d0, [sp]
 8018c5c:	f000 f874 	bl	8018d48 <__kernel_cos>
 8018c60:	e7f2      	b.n	8018c48 <cos+0x68>
 8018c62:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018c66:	ed9d 0b00 	vldr	d0, [sp]
 8018c6a:	2001      	movs	r0, #1
 8018c6c:	f000 f934 	bl	8018ed8 <__kernel_sin>
 8018c70:	e7e1      	b.n	8018c36 <cos+0x56>
 8018c72:	bf00      	nop
 8018c74:	f3af 8000 	nop.w
	...
 8018c80:	3fe921fb 	.word	0x3fe921fb
 8018c84:	7fefffff 	.word	0x7fefffff

08018c88 <sin>:
 8018c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018c8a:	ec53 2b10 	vmov	r2, r3, d0
 8018c8e:	4826      	ldr	r0, [pc, #152]	@ (8018d28 <sin+0xa0>)
 8018c90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8018c94:	4281      	cmp	r1, r0
 8018c96:	d807      	bhi.n	8018ca8 <sin+0x20>
 8018c98:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8018d20 <sin+0x98>
 8018c9c:	2000      	movs	r0, #0
 8018c9e:	b005      	add	sp, #20
 8018ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8018ca4:	f000 b918 	b.w	8018ed8 <__kernel_sin>
 8018ca8:	4820      	ldr	r0, [pc, #128]	@ (8018d2c <sin+0xa4>)
 8018caa:	4281      	cmp	r1, r0
 8018cac:	d908      	bls.n	8018cc0 <sin+0x38>
 8018cae:	4610      	mov	r0, r2
 8018cb0:	4619      	mov	r1, r3
 8018cb2:	f7ec fc47 	bl	8005544 <__aeabi_dsub>
 8018cb6:	ec41 0b10 	vmov	d0, r0, r1
 8018cba:	b005      	add	sp, #20
 8018cbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8018cc0:	4668      	mov	r0, sp
 8018cc2:	f000 ff09 	bl	8019ad8 <__ieee754_rem_pio2>
 8018cc6:	f000 0003 	and.w	r0, r0, #3
 8018cca:	2801      	cmp	r0, #1
 8018ccc:	d00c      	beq.n	8018ce8 <sin+0x60>
 8018cce:	2802      	cmp	r0, #2
 8018cd0:	d011      	beq.n	8018cf6 <sin+0x6e>
 8018cd2:	b9e8      	cbnz	r0, 8018d10 <sin+0x88>
 8018cd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018cd8:	ed9d 0b00 	vldr	d0, [sp]
 8018cdc:	2001      	movs	r0, #1
 8018cde:	f000 f8fb 	bl	8018ed8 <__kernel_sin>
 8018ce2:	ec51 0b10 	vmov	r0, r1, d0
 8018ce6:	e7e6      	b.n	8018cb6 <sin+0x2e>
 8018ce8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018cec:	ed9d 0b00 	vldr	d0, [sp]
 8018cf0:	f000 f82a 	bl	8018d48 <__kernel_cos>
 8018cf4:	e7f5      	b.n	8018ce2 <sin+0x5a>
 8018cf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018cfa:	ed9d 0b00 	vldr	d0, [sp]
 8018cfe:	2001      	movs	r0, #1
 8018d00:	f000 f8ea 	bl	8018ed8 <__kernel_sin>
 8018d04:	ec53 2b10 	vmov	r2, r3, d0
 8018d08:	4610      	mov	r0, r2
 8018d0a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8018d0e:	e7d2      	b.n	8018cb6 <sin+0x2e>
 8018d10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018d14:	ed9d 0b00 	vldr	d0, [sp]
 8018d18:	f000 f816 	bl	8018d48 <__kernel_cos>
 8018d1c:	e7f2      	b.n	8018d04 <sin+0x7c>
 8018d1e:	bf00      	nop
	...
 8018d28:	3fe921fb 	.word	0x3fe921fb
 8018d2c:	7fefffff 	.word	0x7fefffff

08018d30 <finite>:
 8018d30:	b082      	sub	sp, #8
 8018d32:	ed8d 0b00 	vstr	d0, [sp]
 8018d36:	9801      	ldr	r0, [sp, #4]
 8018d38:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8018d3c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8018d40:	0fc0      	lsrs	r0, r0, #31
 8018d42:	b002      	add	sp, #8
 8018d44:	4770      	bx	lr
	...

08018d48 <__kernel_cos>:
 8018d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d4c:	ec57 6b10 	vmov	r6, r7, d0
 8018d50:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8018d54:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8018d58:	ed8d 1b00 	vstr	d1, [sp]
 8018d5c:	d206      	bcs.n	8018d6c <__kernel_cos+0x24>
 8018d5e:	4630      	mov	r0, r6
 8018d60:	4639      	mov	r1, r7
 8018d62:	f7ed f857 	bl	8005e14 <__aeabi_d2iz>
 8018d66:	2800      	cmp	r0, #0
 8018d68:	f000 8088 	beq.w	8018e7c <__kernel_cos+0x134>
 8018d6c:	4632      	mov	r2, r6
 8018d6e:	463b      	mov	r3, r7
 8018d70:	4630      	mov	r0, r6
 8018d72:	4639      	mov	r1, r7
 8018d74:	f7ec fd9e 	bl	80058b4 <__aeabi_dmul>
 8018d78:	4b51      	ldr	r3, [pc, #324]	@ (8018ec0 <__kernel_cos+0x178>)
 8018d7a:	2200      	movs	r2, #0
 8018d7c:	4604      	mov	r4, r0
 8018d7e:	460d      	mov	r5, r1
 8018d80:	f7ec fd98 	bl	80058b4 <__aeabi_dmul>
 8018d84:	a340      	add	r3, pc, #256	@ (adr r3, 8018e88 <__kernel_cos+0x140>)
 8018d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d8a:	4682      	mov	sl, r0
 8018d8c:	468b      	mov	fp, r1
 8018d8e:	4620      	mov	r0, r4
 8018d90:	4629      	mov	r1, r5
 8018d92:	f7ec fd8f 	bl	80058b4 <__aeabi_dmul>
 8018d96:	a33e      	add	r3, pc, #248	@ (adr r3, 8018e90 <__kernel_cos+0x148>)
 8018d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d9c:	f7ec fbd4 	bl	8005548 <__adddf3>
 8018da0:	4622      	mov	r2, r4
 8018da2:	462b      	mov	r3, r5
 8018da4:	f7ec fd86 	bl	80058b4 <__aeabi_dmul>
 8018da8:	a33b      	add	r3, pc, #236	@ (adr r3, 8018e98 <__kernel_cos+0x150>)
 8018daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dae:	f7ec fbc9 	bl	8005544 <__aeabi_dsub>
 8018db2:	4622      	mov	r2, r4
 8018db4:	462b      	mov	r3, r5
 8018db6:	f7ec fd7d 	bl	80058b4 <__aeabi_dmul>
 8018dba:	a339      	add	r3, pc, #228	@ (adr r3, 8018ea0 <__kernel_cos+0x158>)
 8018dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dc0:	f7ec fbc2 	bl	8005548 <__adddf3>
 8018dc4:	4622      	mov	r2, r4
 8018dc6:	462b      	mov	r3, r5
 8018dc8:	f7ec fd74 	bl	80058b4 <__aeabi_dmul>
 8018dcc:	a336      	add	r3, pc, #216	@ (adr r3, 8018ea8 <__kernel_cos+0x160>)
 8018dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dd2:	f7ec fbb7 	bl	8005544 <__aeabi_dsub>
 8018dd6:	4622      	mov	r2, r4
 8018dd8:	462b      	mov	r3, r5
 8018dda:	f7ec fd6b 	bl	80058b4 <__aeabi_dmul>
 8018dde:	a334      	add	r3, pc, #208	@ (adr r3, 8018eb0 <__kernel_cos+0x168>)
 8018de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018de4:	f7ec fbb0 	bl	8005548 <__adddf3>
 8018de8:	4622      	mov	r2, r4
 8018dea:	462b      	mov	r3, r5
 8018dec:	f7ec fd62 	bl	80058b4 <__aeabi_dmul>
 8018df0:	4622      	mov	r2, r4
 8018df2:	462b      	mov	r3, r5
 8018df4:	f7ec fd5e 	bl	80058b4 <__aeabi_dmul>
 8018df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018dfc:	4604      	mov	r4, r0
 8018dfe:	460d      	mov	r5, r1
 8018e00:	4630      	mov	r0, r6
 8018e02:	4639      	mov	r1, r7
 8018e04:	f7ec fd56 	bl	80058b4 <__aeabi_dmul>
 8018e08:	460b      	mov	r3, r1
 8018e0a:	4602      	mov	r2, r0
 8018e0c:	4629      	mov	r1, r5
 8018e0e:	4620      	mov	r0, r4
 8018e10:	f7ec fb98 	bl	8005544 <__aeabi_dsub>
 8018e14:	4b2b      	ldr	r3, [pc, #172]	@ (8018ec4 <__kernel_cos+0x17c>)
 8018e16:	4598      	cmp	r8, r3
 8018e18:	4606      	mov	r6, r0
 8018e1a:	460f      	mov	r7, r1
 8018e1c:	d810      	bhi.n	8018e40 <__kernel_cos+0xf8>
 8018e1e:	4602      	mov	r2, r0
 8018e20:	460b      	mov	r3, r1
 8018e22:	4650      	mov	r0, sl
 8018e24:	4659      	mov	r1, fp
 8018e26:	f7ec fb8d 	bl	8005544 <__aeabi_dsub>
 8018e2a:	460b      	mov	r3, r1
 8018e2c:	4926      	ldr	r1, [pc, #152]	@ (8018ec8 <__kernel_cos+0x180>)
 8018e2e:	4602      	mov	r2, r0
 8018e30:	2000      	movs	r0, #0
 8018e32:	f7ec fb87 	bl	8005544 <__aeabi_dsub>
 8018e36:	ec41 0b10 	vmov	d0, r0, r1
 8018e3a:	b003      	add	sp, #12
 8018e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e40:	4b22      	ldr	r3, [pc, #136]	@ (8018ecc <__kernel_cos+0x184>)
 8018e42:	4921      	ldr	r1, [pc, #132]	@ (8018ec8 <__kernel_cos+0x180>)
 8018e44:	4598      	cmp	r8, r3
 8018e46:	bf8c      	ite	hi
 8018e48:	4d21      	ldrhi	r5, [pc, #132]	@ (8018ed0 <__kernel_cos+0x188>)
 8018e4a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8018e4e:	2400      	movs	r4, #0
 8018e50:	4622      	mov	r2, r4
 8018e52:	462b      	mov	r3, r5
 8018e54:	2000      	movs	r0, #0
 8018e56:	f7ec fb75 	bl	8005544 <__aeabi_dsub>
 8018e5a:	4622      	mov	r2, r4
 8018e5c:	4680      	mov	r8, r0
 8018e5e:	4689      	mov	r9, r1
 8018e60:	462b      	mov	r3, r5
 8018e62:	4650      	mov	r0, sl
 8018e64:	4659      	mov	r1, fp
 8018e66:	f7ec fb6d 	bl	8005544 <__aeabi_dsub>
 8018e6a:	4632      	mov	r2, r6
 8018e6c:	463b      	mov	r3, r7
 8018e6e:	f7ec fb69 	bl	8005544 <__aeabi_dsub>
 8018e72:	4602      	mov	r2, r0
 8018e74:	460b      	mov	r3, r1
 8018e76:	4640      	mov	r0, r8
 8018e78:	4649      	mov	r1, r9
 8018e7a:	e7da      	b.n	8018e32 <__kernel_cos+0xea>
 8018e7c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8018eb8 <__kernel_cos+0x170>
 8018e80:	e7db      	b.n	8018e3a <__kernel_cos+0xf2>
 8018e82:	bf00      	nop
 8018e84:	f3af 8000 	nop.w
 8018e88:	be8838d4 	.word	0xbe8838d4
 8018e8c:	bda8fae9 	.word	0xbda8fae9
 8018e90:	bdb4b1c4 	.word	0xbdb4b1c4
 8018e94:	3e21ee9e 	.word	0x3e21ee9e
 8018e98:	809c52ad 	.word	0x809c52ad
 8018e9c:	3e927e4f 	.word	0x3e927e4f
 8018ea0:	19cb1590 	.word	0x19cb1590
 8018ea4:	3efa01a0 	.word	0x3efa01a0
 8018ea8:	16c15177 	.word	0x16c15177
 8018eac:	3f56c16c 	.word	0x3f56c16c
 8018eb0:	5555554c 	.word	0x5555554c
 8018eb4:	3fa55555 	.word	0x3fa55555
 8018eb8:	00000000 	.word	0x00000000
 8018ebc:	3ff00000 	.word	0x3ff00000
 8018ec0:	3fe00000 	.word	0x3fe00000
 8018ec4:	3fd33332 	.word	0x3fd33332
 8018ec8:	3ff00000 	.word	0x3ff00000
 8018ecc:	3fe90000 	.word	0x3fe90000
 8018ed0:	3fd20000 	.word	0x3fd20000
 8018ed4:	00000000 	.word	0x00000000

08018ed8 <__kernel_sin>:
 8018ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018edc:	ec55 4b10 	vmov	r4, r5, d0
 8018ee0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8018ee4:	b085      	sub	sp, #20
 8018ee6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8018eea:	ed8d 1b02 	vstr	d1, [sp, #8]
 8018eee:	4680      	mov	r8, r0
 8018ef0:	d205      	bcs.n	8018efe <__kernel_sin+0x26>
 8018ef2:	4620      	mov	r0, r4
 8018ef4:	4629      	mov	r1, r5
 8018ef6:	f7ec ff8d 	bl	8005e14 <__aeabi_d2iz>
 8018efa:	2800      	cmp	r0, #0
 8018efc:	d052      	beq.n	8018fa4 <__kernel_sin+0xcc>
 8018efe:	4622      	mov	r2, r4
 8018f00:	462b      	mov	r3, r5
 8018f02:	4620      	mov	r0, r4
 8018f04:	4629      	mov	r1, r5
 8018f06:	f7ec fcd5 	bl	80058b4 <__aeabi_dmul>
 8018f0a:	4682      	mov	sl, r0
 8018f0c:	468b      	mov	fp, r1
 8018f0e:	4602      	mov	r2, r0
 8018f10:	460b      	mov	r3, r1
 8018f12:	4620      	mov	r0, r4
 8018f14:	4629      	mov	r1, r5
 8018f16:	f7ec fccd 	bl	80058b4 <__aeabi_dmul>
 8018f1a:	a342      	add	r3, pc, #264	@ (adr r3, 8019024 <__kernel_sin+0x14c>)
 8018f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f20:	e9cd 0100 	strd	r0, r1, [sp]
 8018f24:	4650      	mov	r0, sl
 8018f26:	4659      	mov	r1, fp
 8018f28:	f7ec fcc4 	bl	80058b4 <__aeabi_dmul>
 8018f2c:	a33f      	add	r3, pc, #252	@ (adr r3, 801902c <__kernel_sin+0x154>)
 8018f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f32:	f7ec fb07 	bl	8005544 <__aeabi_dsub>
 8018f36:	4652      	mov	r2, sl
 8018f38:	465b      	mov	r3, fp
 8018f3a:	f7ec fcbb 	bl	80058b4 <__aeabi_dmul>
 8018f3e:	a33d      	add	r3, pc, #244	@ (adr r3, 8019034 <__kernel_sin+0x15c>)
 8018f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f44:	f7ec fb00 	bl	8005548 <__adddf3>
 8018f48:	4652      	mov	r2, sl
 8018f4a:	465b      	mov	r3, fp
 8018f4c:	f7ec fcb2 	bl	80058b4 <__aeabi_dmul>
 8018f50:	a33a      	add	r3, pc, #232	@ (adr r3, 801903c <__kernel_sin+0x164>)
 8018f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f56:	f7ec faf5 	bl	8005544 <__aeabi_dsub>
 8018f5a:	4652      	mov	r2, sl
 8018f5c:	465b      	mov	r3, fp
 8018f5e:	f7ec fca9 	bl	80058b4 <__aeabi_dmul>
 8018f62:	a338      	add	r3, pc, #224	@ (adr r3, 8019044 <__kernel_sin+0x16c>)
 8018f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f68:	f7ec faee 	bl	8005548 <__adddf3>
 8018f6c:	4606      	mov	r6, r0
 8018f6e:	460f      	mov	r7, r1
 8018f70:	f1b8 0f00 	cmp.w	r8, #0
 8018f74:	d11b      	bne.n	8018fae <__kernel_sin+0xd6>
 8018f76:	4602      	mov	r2, r0
 8018f78:	460b      	mov	r3, r1
 8018f7a:	4650      	mov	r0, sl
 8018f7c:	4659      	mov	r1, fp
 8018f7e:	f7ec fc99 	bl	80058b4 <__aeabi_dmul>
 8018f82:	a325      	add	r3, pc, #148	@ (adr r3, 8019018 <__kernel_sin+0x140>)
 8018f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f88:	f7ec fadc 	bl	8005544 <__aeabi_dsub>
 8018f8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018f90:	f7ec fc90 	bl	80058b4 <__aeabi_dmul>
 8018f94:	4602      	mov	r2, r0
 8018f96:	460b      	mov	r3, r1
 8018f98:	4620      	mov	r0, r4
 8018f9a:	4629      	mov	r1, r5
 8018f9c:	f7ec fad4 	bl	8005548 <__adddf3>
 8018fa0:	4604      	mov	r4, r0
 8018fa2:	460d      	mov	r5, r1
 8018fa4:	ec45 4b10 	vmov	d0, r4, r5
 8018fa8:	b005      	add	sp, #20
 8018faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8019020 <__kernel_sin+0x148>)
 8018fb4:	2200      	movs	r2, #0
 8018fb6:	f7ec fc7d 	bl	80058b4 <__aeabi_dmul>
 8018fba:	4632      	mov	r2, r6
 8018fbc:	4680      	mov	r8, r0
 8018fbe:	4689      	mov	r9, r1
 8018fc0:	463b      	mov	r3, r7
 8018fc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018fc6:	f7ec fc75 	bl	80058b4 <__aeabi_dmul>
 8018fca:	4602      	mov	r2, r0
 8018fcc:	460b      	mov	r3, r1
 8018fce:	4640      	mov	r0, r8
 8018fd0:	4649      	mov	r1, r9
 8018fd2:	f7ec fab7 	bl	8005544 <__aeabi_dsub>
 8018fd6:	4652      	mov	r2, sl
 8018fd8:	465b      	mov	r3, fp
 8018fda:	f7ec fc6b 	bl	80058b4 <__aeabi_dmul>
 8018fde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018fe2:	f7ec faaf 	bl	8005544 <__aeabi_dsub>
 8018fe6:	a30c      	add	r3, pc, #48	@ (adr r3, 8019018 <__kernel_sin+0x140>)
 8018fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fec:	4606      	mov	r6, r0
 8018fee:	460f      	mov	r7, r1
 8018ff0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018ff4:	f7ec fc5e 	bl	80058b4 <__aeabi_dmul>
 8018ff8:	4602      	mov	r2, r0
 8018ffa:	460b      	mov	r3, r1
 8018ffc:	4630      	mov	r0, r6
 8018ffe:	4639      	mov	r1, r7
 8019000:	f7ec faa2 	bl	8005548 <__adddf3>
 8019004:	4602      	mov	r2, r0
 8019006:	460b      	mov	r3, r1
 8019008:	4620      	mov	r0, r4
 801900a:	4629      	mov	r1, r5
 801900c:	f7ec fa9a 	bl	8005544 <__aeabi_dsub>
 8019010:	e7c6      	b.n	8018fa0 <__kernel_sin+0xc8>
 8019012:	bf00      	nop
 8019014:	f3af 8000 	nop.w
 8019018:	55555549 	.word	0x55555549
 801901c:	3fc55555 	.word	0x3fc55555
 8019020:	3fe00000 	.word	0x3fe00000
 8019024:	5acfd57c 	.word	0x5acfd57c
 8019028:	3de5d93a 	.word	0x3de5d93a
 801902c:	8a2b9ceb 	.word	0x8a2b9ceb
 8019030:	3e5ae5e6 	.word	0x3e5ae5e6
 8019034:	57b1fe7d 	.word	0x57b1fe7d
 8019038:	3ec71de3 	.word	0x3ec71de3
 801903c:	19c161d5 	.word	0x19c161d5
 8019040:	3f2a01a0 	.word	0x3f2a01a0
 8019044:	1110f8a6 	.word	0x1110f8a6
 8019048:	3f811111 	.word	0x3f811111
 801904c:	00000000 	.word	0x00000000

08019050 <__ieee754_pow>:
 8019050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019054:	b091      	sub	sp, #68	@ 0x44
 8019056:	ed8d 1b00 	vstr	d1, [sp]
 801905a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801905e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8019062:	ea5a 0001 	orrs.w	r0, sl, r1
 8019066:	ec57 6b10 	vmov	r6, r7, d0
 801906a:	d113      	bne.n	8019094 <__ieee754_pow+0x44>
 801906c:	19b3      	adds	r3, r6, r6
 801906e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8019072:	4152      	adcs	r2, r2
 8019074:	4298      	cmp	r0, r3
 8019076:	4b98      	ldr	r3, [pc, #608]	@ (80192d8 <__ieee754_pow+0x288>)
 8019078:	4193      	sbcs	r3, r2
 801907a:	f080 84ea 	bcs.w	8019a52 <__ieee754_pow+0xa02>
 801907e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019082:	4630      	mov	r0, r6
 8019084:	4639      	mov	r1, r7
 8019086:	f7ec fa5f 	bl	8005548 <__adddf3>
 801908a:	ec41 0b10 	vmov	d0, r0, r1
 801908e:	b011      	add	sp, #68	@ 0x44
 8019090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019094:	4a91      	ldr	r2, [pc, #580]	@ (80192dc <__ieee754_pow+0x28c>)
 8019096:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801909a:	4590      	cmp	r8, r2
 801909c:	463d      	mov	r5, r7
 801909e:	4633      	mov	r3, r6
 80190a0:	d806      	bhi.n	80190b0 <__ieee754_pow+0x60>
 80190a2:	d101      	bne.n	80190a8 <__ieee754_pow+0x58>
 80190a4:	2e00      	cmp	r6, #0
 80190a6:	d1ea      	bne.n	801907e <__ieee754_pow+0x2e>
 80190a8:	4592      	cmp	sl, r2
 80190aa:	d801      	bhi.n	80190b0 <__ieee754_pow+0x60>
 80190ac:	d10e      	bne.n	80190cc <__ieee754_pow+0x7c>
 80190ae:	b169      	cbz	r1, 80190cc <__ieee754_pow+0x7c>
 80190b0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80190b4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80190b8:	431d      	orrs	r5, r3
 80190ba:	d1e0      	bne.n	801907e <__ieee754_pow+0x2e>
 80190bc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80190c0:	18db      	adds	r3, r3, r3
 80190c2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80190c6:	4152      	adcs	r2, r2
 80190c8:	429d      	cmp	r5, r3
 80190ca:	e7d4      	b.n	8019076 <__ieee754_pow+0x26>
 80190cc:	2d00      	cmp	r5, #0
 80190ce:	46c3      	mov	fp, r8
 80190d0:	da3a      	bge.n	8019148 <__ieee754_pow+0xf8>
 80190d2:	4a83      	ldr	r2, [pc, #524]	@ (80192e0 <__ieee754_pow+0x290>)
 80190d4:	4592      	cmp	sl, r2
 80190d6:	d84d      	bhi.n	8019174 <__ieee754_pow+0x124>
 80190d8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80190dc:	4592      	cmp	sl, r2
 80190de:	f240 84c7 	bls.w	8019a70 <__ieee754_pow+0xa20>
 80190e2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80190e6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80190ea:	2a14      	cmp	r2, #20
 80190ec:	dd0f      	ble.n	801910e <__ieee754_pow+0xbe>
 80190ee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80190f2:	fa21 f402 	lsr.w	r4, r1, r2
 80190f6:	fa04 f202 	lsl.w	r2, r4, r2
 80190fa:	428a      	cmp	r2, r1
 80190fc:	f040 84b8 	bne.w	8019a70 <__ieee754_pow+0xa20>
 8019100:	f004 0401 	and.w	r4, r4, #1
 8019104:	f1c4 0402 	rsb	r4, r4, #2
 8019108:	2900      	cmp	r1, #0
 801910a:	d158      	bne.n	80191be <__ieee754_pow+0x16e>
 801910c:	e00e      	b.n	801912c <__ieee754_pow+0xdc>
 801910e:	2900      	cmp	r1, #0
 8019110:	d154      	bne.n	80191bc <__ieee754_pow+0x16c>
 8019112:	f1c2 0214 	rsb	r2, r2, #20
 8019116:	fa4a f402 	asr.w	r4, sl, r2
 801911a:	fa04 f202 	lsl.w	r2, r4, r2
 801911e:	4552      	cmp	r2, sl
 8019120:	f040 84a3 	bne.w	8019a6a <__ieee754_pow+0xa1a>
 8019124:	f004 0401 	and.w	r4, r4, #1
 8019128:	f1c4 0402 	rsb	r4, r4, #2
 801912c:	4a6d      	ldr	r2, [pc, #436]	@ (80192e4 <__ieee754_pow+0x294>)
 801912e:	4592      	cmp	sl, r2
 8019130:	d12e      	bne.n	8019190 <__ieee754_pow+0x140>
 8019132:	f1b9 0f00 	cmp.w	r9, #0
 8019136:	f280 8494 	bge.w	8019a62 <__ieee754_pow+0xa12>
 801913a:	496a      	ldr	r1, [pc, #424]	@ (80192e4 <__ieee754_pow+0x294>)
 801913c:	4632      	mov	r2, r6
 801913e:	463b      	mov	r3, r7
 8019140:	2000      	movs	r0, #0
 8019142:	f7ec fce1 	bl	8005b08 <__aeabi_ddiv>
 8019146:	e7a0      	b.n	801908a <__ieee754_pow+0x3a>
 8019148:	2400      	movs	r4, #0
 801914a:	bbc1      	cbnz	r1, 80191be <__ieee754_pow+0x16e>
 801914c:	4a63      	ldr	r2, [pc, #396]	@ (80192dc <__ieee754_pow+0x28c>)
 801914e:	4592      	cmp	sl, r2
 8019150:	d1ec      	bne.n	801912c <__ieee754_pow+0xdc>
 8019152:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8019156:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801915a:	431a      	orrs	r2, r3
 801915c:	f000 8479 	beq.w	8019a52 <__ieee754_pow+0xa02>
 8019160:	4b61      	ldr	r3, [pc, #388]	@ (80192e8 <__ieee754_pow+0x298>)
 8019162:	4598      	cmp	r8, r3
 8019164:	d908      	bls.n	8019178 <__ieee754_pow+0x128>
 8019166:	f1b9 0f00 	cmp.w	r9, #0
 801916a:	f2c0 8476 	blt.w	8019a5a <__ieee754_pow+0xa0a>
 801916e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019172:	e78a      	b.n	801908a <__ieee754_pow+0x3a>
 8019174:	2402      	movs	r4, #2
 8019176:	e7e8      	b.n	801914a <__ieee754_pow+0xfa>
 8019178:	f1b9 0f00 	cmp.w	r9, #0
 801917c:	f04f 0000 	mov.w	r0, #0
 8019180:	f04f 0100 	mov.w	r1, #0
 8019184:	da81      	bge.n	801908a <__ieee754_pow+0x3a>
 8019186:	e9dd 0300 	ldrd	r0, r3, [sp]
 801918a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801918e:	e77c      	b.n	801908a <__ieee754_pow+0x3a>
 8019190:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8019194:	d106      	bne.n	80191a4 <__ieee754_pow+0x154>
 8019196:	4632      	mov	r2, r6
 8019198:	463b      	mov	r3, r7
 801919a:	4630      	mov	r0, r6
 801919c:	4639      	mov	r1, r7
 801919e:	f7ec fb89 	bl	80058b4 <__aeabi_dmul>
 80191a2:	e772      	b.n	801908a <__ieee754_pow+0x3a>
 80191a4:	4a51      	ldr	r2, [pc, #324]	@ (80192ec <__ieee754_pow+0x29c>)
 80191a6:	4591      	cmp	r9, r2
 80191a8:	d109      	bne.n	80191be <__ieee754_pow+0x16e>
 80191aa:	2d00      	cmp	r5, #0
 80191ac:	db07      	blt.n	80191be <__ieee754_pow+0x16e>
 80191ae:	ec47 6b10 	vmov	d0, r6, r7
 80191b2:	b011      	add	sp, #68	@ 0x44
 80191b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191b8:	f000 bf4e 	b.w	801a058 <__ieee754_sqrt>
 80191bc:	2400      	movs	r4, #0
 80191be:	ec47 6b10 	vmov	d0, r6, r7
 80191c2:	9302      	str	r3, [sp, #8]
 80191c4:	f000 fe84 	bl	8019ed0 <fabs>
 80191c8:	9b02      	ldr	r3, [sp, #8]
 80191ca:	ec51 0b10 	vmov	r0, r1, d0
 80191ce:	bb53      	cbnz	r3, 8019226 <__ieee754_pow+0x1d6>
 80191d0:	4b44      	ldr	r3, [pc, #272]	@ (80192e4 <__ieee754_pow+0x294>)
 80191d2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80191d6:	429a      	cmp	r2, r3
 80191d8:	d002      	beq.n	80191e0 <__ieee754_pow+0x190>
 80191da:	f1b8 0f00 	cmp.w	r8, #0
 80191de:	d122      	bne.n	8019226 <__ieee754_pow+0x1d6>
 80191e0:	f1b9 0f00 	cmp.w	r9, #0
 80191e4:	da05      	bge.n	80191f2 <__ieee754_pow+0x1a2>
 80191e6:	4602      	mov	r2, r0
 80191e8:	460b      	mov	r3, r1
 80191ea:	2000      	movs	r0, #0
 80191ec:	493d      	ldr	r1, [pc, #244]	@ (80192e4 <__ieee754_pow+0x294>)
 80191ee:	f7ec fc8b 	bl	8005b08 <__aeabi_ddiv>
 80191f2:	2d00      	cmp	r5, #0
 80191f4:	f6bf af49 	bge.w	801908a <__ieee754_pow+0x3a>
 80191f8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80191fc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8019200:	ea58 0804 	orrs.w	r8, r8, r4
 8019204:	d108      	bne.n	8019218 <__ieee754_pow+0x1c8>
 8019206:	4602      	mov	r2, r0
 8019208:	460b      	mov	r3, r1
 801920a:	4610      	mov	r0, r2
 801920c:	4619      	mov	r1, r3
 801920e:	f7ec f999 	bl	8005544 <__aeabi_dsub>
 8019212:	4602      	mov	r2, r0
 8019214:	460b      	mov	r3, r1
 8019216:	e794      	b.n	8019142 <__ieee754_pow+0xf2>
 8019218:	2c01      	cmp	r4, #1
 801921a:	f47f af36 	bne.w	801908a <__ieee754_pow+0x3a>
 801921e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019222:	4619      	mov	r1, r3
 8019224:	e731      	b.n	801908a <__ieee754_pow+0x3a>
 8019226:	0feb      	lsrs	r3, r5, #31
 8019228:	3b01      	subs	r3, #1
 801922a:	ea53 0204 	orrs.w	r2, r3, r4
 801922e:	d102      	bne.n	8019236 <__ieee754_pow+0x1e6>
 8019230:	4632      	mov	r2, r6
 8019232:	463b      	mov	r3, r7
 8019234:	e7e9      	b.n	801920a <__ieee754_pow+0x1ba>
 8019236:	3c01      	subs	r4, #1
 8019238:	431c      	orrs	r4, r3
 801923a:	d016      	beq.n	801926a <__ieee754_pow+0x21a>
 801923c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80192c8 <__ieee754_pow+0x278>
 8019240:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8019244:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019248:	f240 8112 	bls.w	8019470 <__ieee754_pow+0x420>
 801924c:	4b28      	ldr	r3, [pc, #160]	@ (80192f0 <__ieee754_pow+0x2a0>)
 801924e:	459a      	cmp	sl, r3
 8019250:	4b25      	ldr	r3, [pc, #148]	@ (80192e8 <__ieee754_pow+0x298>)
 8019252:	d916      	bls.n	8019282 <__ieee754_pow+0x232>
 8019254:	4598      	cmp	r8, r3
 8019256:	d80b      	bhi.n	8019270 <__ieee754_pow+0x220>
 8019258:	f1b9 0f00 	cmp.w	r9, #0
 801925c:	da0b      	bge.n	8019276 <__ieee754_pow+0x226>
 801925e:	2000      	movs	r0, #0
 8019260:	b011      	add	sp, #68	@ 0x44
 8019262:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019266:	f000 beef 	b.w	801a048 <__math_oflow>
 801926a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80192d0 <__ieee754_pow+0x280>
 801926e:	e7e7      	b.n	8019240 <__ieee754_pow+0x1f0>
 8019270:	f1b9 0f00 	cmp.w	r9, #0
 8019274:	dcf3      	bgt.n	801925e <__ieee754_pow+0x20e>
 8019276:	2000      	movs	r0, #0
 8019278:	b011      	add	sp, #68	@ 0x44
 801927a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801927e:	f000 bedb 	b.w	801a038 <__math_uflow>
 8019282:	4598      	cmp	r8, r3
 8019284:	d20c      	bcs.n	80192a0 <__ieee754_pow+0x250>
 8019286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801928a:	2200      	movs	r2, #0
 801928c:	2300      	movs	r3, #0
 801928e:	f7ec fd83 	bl	8005d98 <__aeabi_dcmplt>
 8019292:	3800      	subs	r0, #0
 8019294:	bf18      	it	ne
 8019296:	2001      	movne	r0, #1
 8019298:	f1b9 0f00 	cmp.w	r9, #0
 801929c:	daec      	bge.n	8019278 <__ieee754_pow+0x228>
 801929e:	e7df      	b.n	8019260 <__ieee754_pow+0x210>
 80192a0:	4b10      	ldr	r3, [pc, #64]	@ (80192e4 <__ieee754_pow+0x294>)
 80192a2:	4598      	cmp	r8, r3
 80192a4:	f04f 0200 	mov.w	r2, #0
 80192a8:	d924      	bls.n	80192f4 <__ieee754_pow+0x2a4>
 80192aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80192ae:	2300      	movs	r3, #0
 80192b0:	f7ec fd72 	bl	8005d98 <__aeabi_dcmplt>
 80192b4:	3800      	subs	r0, #0
 80192b6:	bf18      	it	ne
 80192b8:	2001      	movne	r0, #1
 80192ba:	f1b9 0f00 	cmp.w	r9, #0
 80192be:	dccf      	bgt.n	8019260 <__ieee754_pow+0x210>
 80192c0:	e7da      	b.n	8019278 <__ieee754_pow+0x228>
 80192c2:	bf00      	nop
 80192c4:	f3af 8000 	nop.w
 80192c8:	00000000 	.word	0x00000000
 80192cc:	3ff00000 	.word	0x3ff00000
 80192d0:	00000000 	.word	0x00000000
 80192d4:	bff00000 	.word	0xbff00000
 80192d8:	fff00000 	.word	0xfff00000
 80192dc:	7ff00000 	.word	0x7ff00000
 80192e0:	433fffff 	.word	0x433fffff
 80192e4:	3ff00000 	.word	0x3ff00000
 80192e8:	3fefffff 	.word	0x3fefffff
 80192ec:	3fe00000 	.word	0x3fe00000
 80192f0:	43f00000 	.word	0x43f00000
 80192f4:	4b5a      	ldr	r3, [pc, #360]	@ (8019460 <__ieee754_pow+0x410>)
 80192f6:	f7ec f925 	bl	8005544 <__aeabi_dsub>
 80192fa:	a351      	add	r3, pc, #324	@ (adr r3, 8019440 <__ieee754_pow+0x3f0>)
 80192fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019300:	4604      	mov	r4, r0
 8019302:	460d      	mov	r5, r1
 8019304:	f7ec fad6 	bl	80058b4 <__aeabi_dmul>
 8019308:	a34f      	add	r3, pc, #316	@ (adr r3, 8019448 <__ieee754_pow+0x3f8>)
 801930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801930e:	4606      	mov	r6, r0
 8019310:	460f      	mov	r7, r1
 8019312:	4620      	mov	r0, r4
 8019314:	4629      	mov	r1, r5
 8019316:	f7ec facd 	bl	80058b4 <__aeabi_dmul>
 801931a:	4b52      	ldr	r3, [pc, #328]	@ (8019464 <__ieee754_pow+0x414>)
 801931c:	4682      	mov	sl, r0
 801931e:	468b      	mov	fp, r1
 8019320:	2200      	movs	r2, #0
 8019322:	4620      	mov	r0, r4
 8019324:	4629      	mov	r1, r5
 8019326:	f7ec fac5 	bl	80058b4 <__aeabi_dmul>
 801932a:	4602      	mov	r2, r0
 801932c:	460b      	mov	r3, r1
 801932e:	a148      	add	r1, pc, #288	@ (adr r1, 8019450 <__ieee754_pow+0x400>)
 8019330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019334:	f7ec f906 	bl	8005544 <__aeabi_dsub>
 8019338:	4622      	mov	r2, r4
 801933a:	462b      	mov	r3, r5
 801933c:	f7ec faba 	bl	80058b4 <__aeabi_dmul>
 8019340:	4602      	mov	r2, r0
 8019342:	460b      	mov	r3, r1
 8019344:	2000      	movs	r0, #0
 8019346:	4948      	ldr	r1, [pc, #288]	@ (8019468 <__ieee754_pow+0x418>)
 8019348:	f7ec f8fc 	bl	8005544 <__aeabi_dsub>
 801934c:	4622      	mov	r2, r4
 801934e:	4680      	mov	r8, r0
 8019350:	4689      	mov	r9, r1
 8019352:	462b      	mov	r3, r5
 8019354:	4620      	mov	r0, r4
 8019356:	4629      	mov	r1, r5
 8019358:	f7ec faac 	bl	80058b4 <__aeabi_dmul>
 801935c:	4602      	mov	r2, r0
 801935e:	460b      	mov	r3, r1
 8019360:	4640      	mov	r0, r8
 8019362:	4649      	mov	r1, r9
 8019364:	f7ec faa6 	bl	80058b4 <__aeabi_dmul>
 8019368:	a33b      	add	r3, pc, #236	@ (adr r3, 8019458 <__ieee754_pow+0x408>)
 801936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801936e:	f7ec faa1 	bl	80058b4 <__aeabi_dmul>
 8019372:	4602      	mov	r2, r0
 8019374:	460b      	mov	r3, r1
 8019376:	4650      	mov	r0, sl
 8019378:	4659      	mov	r1, fp
 801937a:	f7ec f8e3 	bl	8005544 <__aeabi_dsub>
 801937e:	4602      	mov	r2, r0
 8019380:	460b      	mov	r3, r1
 8019382:	4680      	mov	r8, r0
 8019384:	4689      	mov	r9, r1
 8019386:	4630      	mov	r0, r6
 8019388:	4639      	mov	r1, r7
 801938a:	f7ec f8dd 	bl	8005548 <__adddf3>
 801938e:	2400      	movs	r4, #0
 8019390:	4632      	mov	r2, r6
 8019392:	463b      	mov	r3, r7
 8019394:	4620      	mov	r0, r4
 8019396:	460d      	mov	r5, r1
 8019398:	f7ec f8d4 	bl	8005544 <__aeabi_dsub>
 801939c:	4602      	mov	r2, r0
 801939e:	460b      	mov	r3, r1
 80193a0:	4640      	mov	r0, r8
 80193a2:	4649      	mov	r1, r9
 80193a4:	f7ec f8ce 	bl	8005544 <__aeabi_dsub>
 80193a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80193ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80193b0:	2300      	movs	r3, #0
 80193b2:	9304      	str	r3, [sp, #16]
 80193b4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80193b8:	4606      	mov	r6, r0
 80193ba:	460f      	mov	r7, r1
 80193bc:	4652      	mov	r2, sl
 80193be:	465b      	mov	r3, fp
 80193c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80193c4:	f7ec f8be 	bl	8005544 <__aeabi_dsub>
 80193c8:	4622      	mov	r2, r4
 80193ca:	462b      	mov	r3, r5
 80193cc:	f7ec fa72 	bl	80058b4 <__aeabi_dmul>
 80193d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80193d4:	4680      	mov	r8, r0
 80193d6:	4689      	mov	r9, r1
 80193d8:	4630      	mov	r0, r6
 80193da:	4639      	mov	r1, r7
 80193dc:	f7ec fa6a 	bl	80058b4 <__aeabi_dmul>
 80193e0:	4602      	mov	r2, r0
 80193e2:	460b      	mov	r3, r1
 80193e4:	4640      	mov	r0, r8
 80193e6:	4649      	mov	r1, r9
 80193e8:	f7ec f8ae 	bl	8005548 <__adddf3>
 80193ec:	4652      	mov	r2, sl
 80193ee:	465b      	mov	r3, fp
 80193f0:	4606      	mov	r6, r0
 80193f2:	460f      	mov	r7, r1
 80193f4:	4620      	mov	r0, r4
 80193f6:	4629      	mov	r1, r5
 80193f8:	f7ec fa5c 	bl	80058b4 <__aeabi_dmul>
 80193fc:	460b      	mov	r3, r1
 80193fe:	4602      	mov	r2, r0
 8019400:	4680      	mov	r8, r0
 8019402:	4689      	mov	r9, r1
 8019404:	4630      	mov	r0, r6
 8019406:	4639      	mov	r1, r7
 8019408:	f7ec f89e 	bl	8005548 <__adddf3>
 801940c:	4b17      	ldr	r3, [pc, #92]	@ (801946c <__ieee754_pow+0x41c>)
 801940e:	4299      	cmp	r1, r3
 8019410:	4604      	mov	r4, r0
 8019412:	460d      	mov	r5, r1
 8019414:	468a      	mov	sl, r1
 8019416:	468b      	mov	fp, r1
 8019418:	f340 82ef 	ble.w	80199fa <__ieee754_pow+0x9aa>
 801941c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8019420:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8019424:	4303      	orrs	r3, r0
 8019426:	f000 81e8 	beq.w	80197fa <__ieee754_pow+0x7aa>
 801942a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801942e:	2200      	movs	r2, #0
 8019430:	2300      	movs	r3, #0
 8019432:	f7ec fcb1 	bl	8005d98 <__aeabi_dcmplt>
 8019436:	3800      	subs	r0, #0
 8019438:	bf18      	it	ne
 801943a:	2001      	movne	r0, #1
 801943c:	e710      	b.n	8019260 <__ieee754_pow+0x210>
 801943e:	bf00      	nop
 8019440:	60000000 	.word	0x60000000
 8019444:	3ff71547 	.word	0x3ff71547
 8019448:	f85ddf44 	.word	0xf85ddf44
 801944c:	3e54ae0b 	.word	0x3e54ae0b
 8019450:	55555555 	.word	0x55555555
 8019454:	3fd55555 	.word	0x3fd55555
 8019458:	652b82fe 	.word	0x652b82fe
 801945c:	3ff71547 	.word	0x3ff71547
 8019460:	3ff00000 	.word	0x3ff00000
 8019464:	3fd00000 	.word	0x3fd00000
 8019468:	3fe00000 	.word	0x3fe00000
 801946c:	408fffff 	.word	0x408fffff
 8019470:	4bd5      	ldr	r3, [pc, #852]	@ (80197c8 <__ieee754_pow+0x778>)
 8019472:	402b      	ands	r3, r5
 8019474:	2200      	movs	r2, #0
 8019476:	b92b      	cbnz	r3, 8019484 <__ieee754_pow+0x434>
 8019478:	4bd4      	ldr	r3, [pc, #848]	@ (80197cc <__ieee754_pow+0x77c>)
 801947a:	f7ec fa1b 	bl	80058b4 <__aeabi_dmul>
 801947e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8019482:	468b      	mov	fp, r1
 8019484:	ea4f 532b 	mov.w	r3, fp, asr #20
 8019488:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801948c:	4413      	add	r3, r2
 801948e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019490:	4bcf      	ldr	r3, [pc, #828]	@ (80197d0 <__ieee754_pow+0x780>)
 8019492:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8019496:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801949a:	459b      	cmp	fp, r3
 801949c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80194a0:	dd08      	ble.n	80194b4 <__ieee754_pow+0x464>
 80194a2:	4bcc      	ldr	r3, [pc, #816]	@ (80197d4 <__ieee754_pow+0x784>)
 80194a4:	459b      	cmp	fp, r3
 80194a6:	f340 81a5 	ble.w	80197f4 <__ieee754_pow+0x7a4>
 80194aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80194ac:	3301      	adds	r3, #1
 80194ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80194b0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80194b4:	f04f 0a00 	mov.w	sl, #0
 80194b8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80194bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80194be:	4bc6      	ldr	r3, [pc, #792]	@ (80197d8 <__ieee754_pow+0x788>)
 80194c0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80194c4:	ed93 7b00 	vldr	d7, [r3]
 80194c8:	4629      	mov	r1, r5
 80194ca:	ec53 2b17 	vmov	r2, r3, d7
 80194ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80194d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80194d6:	f7ec f835 	bl	8005544 <__aeabi_dsub>
 80194da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80194de:	4606      	mov	r6, r0
 80194e0:	460f      	mov	r7, r1
 80194e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80194e6:	f7ec f82f 	bl	8005548 <__adddf3>
 80194ea:	4602      	mov	r2, r0
 80194ec:	460b      	mov	r3, r1
 80194ee:	2000      	movs	r0, #0
 80194f0:	49ba      	ldr	r1, [pc, #744]	@ (80197dc <__ieee754_pow+0x78c>)
 80194f2:	f7ec fb09 	bl	8005b08 <__aeabi_ddiv>
 80194f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80194fa:	4602      	mov	r2, r0
 80194fc:	460b      	mov	r3, r1
 80194fe:	4630      	mov	r0, r6
 8019500:	4639      	mov	r1, r7
 8019502:	f7ec f9d7 	bl	80058b4 <__aeabi_dmul>
 8019506:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801950a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801950e:	106d      	asrs	r5, r5, #1
 8019510:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8019514:	f04f 0b00 	mov.w	fp, #0
 8019518:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801951c:	4661      	mov	r1, ip
 801951e:	2200      	movs	r2, #0
 8019520:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8019524:	4658      	mov	r0, fp
 8019526:	46e1      	mov	r9, ip
 8019528:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801952c:	4614      	mov	r4, r2
 801952e:	461d      	mov	r5, r3
 8019530:	f7ec f9c0 	bl	80058b4 <__aeabi_dmul>
 8019534:	4602      	mov	r2, r0
 8019536:	460b      	mov	r3, r1
 8019538:	4630      	mov	r0, r6
 801953a:	4639      	mov	r1, r7
 801953c:	f7ec f802 	bl	8005544 <__aeabi_dsub>
 8019540:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019544:	4606      	mov	r6, r0
 8019546:	460f      	mov	r7, r1
 8019548:	4620      	mov	r0, r4
 801954a:	4629      	mov	r1, r5
 801954c:	f7eb fffa 	bl	8005544 <__aeabi_dsub>
 8019550:	4602      	mov	r2, r0
 8019552:	460b      	mov	r3, r1
 8019554:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019558:	f7eb fff4 	bl	8005544 <__aeabi_dsub>
 801955c:	465a      	mov	r2, fp
 801955e:	464b      	mov	r3, r9
 8019560:	f7ec f9a8 	bl	80058b4 <__aeabi_dmul>
 8019564:	4602      	mov	r2, r0
 8019566:	460b      	mov	r3, r1
 8019568:	4630      	mov	r0, r6
 801956a:	4639      	mov	r1, r7
 801956c:	f7eb ffea 	bl	8005544 <__aeabi_dsub>
 8019570:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8019574:	f7ec f99e 	bl	80058b4 <__aeabi_dmul>
 8019578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801957c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019580:	4610      	mov	r0, r2
 8019582:	4619      	mov	r1, r3
 8019584:	f7ec f996 	bl	80058b4 <__aeabi_dmul>
 8019588:	a37d      	add	r3, pc, #500	@ (adr r3, 8019780 <__ieee754_pow+0x730>)
 801958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801958e:	4604      	mov	r4, r0
 8019590:	460d      	mov	r5, r1
 8019592:	f7ec f98f 	bl	80058b4 <__aeabi_dmul>
 8019596:	a37c      	add	r3, pc, #496	@ (adr r3, 8019788 <__ieee754_pow+0x738>)
 8019598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801959c:	f7eb ffd4 	bl	8005548 <__adddf3>
 80195a0:	4622      	mov	r2, r4
 80195a2:	462b      	mov	r3, r5
 80195a4:	f7ec f986 	bl	80058b4 <__aeabi_dmul>
 80195a8:	a379      	add	r3, pc, #484	@ (adr r3, 8019790 <__ieee754_pow+0x740>)
 80195aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195ae:	f7eb ffcb 	bl	8005548 <__adddf3>
 80195b2:	4622      	mov	r2, r4
 80195b4:	462b      	mov	r3, r5
 80195b6:	f7ec f97d 	bl	80058b4 <__aeabi_dmul>
 80195ba:	a377      	add	r3, pc, #476	@ (adr r3, 8019798 <__ieee754_pow+0x748>)
 80195bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195c0:	f7eb ffc2 	bl	8005548 <__adddf3>
 80195c4:	4622      	mov	r2, r4
 80195c6:	462b      	mov	r3, r5
 80195c8:	f7ec f974 	bl	80058b4 <__aeabi_dmul>
 80195cc:	a374      	add	r3, pc, #464	@ (adr r3, 80197a0 <__ieee754_pow+0x750>)
 80195ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195d2:	f7eb ffb9 	bl	8005548 <__adddf3>
 80195d6:	4622      	mov	r2, r4
 80195d8:	462b      	mov	r3, r5
 80195da:	f7ec f96b 	bl	80058b4 <__aeabi_dmul>
 80195de:	a372      	add	r3, pc, #456	@ (adr r3, 80197a8 <__ieee754_pow+0x758>)
 80195e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195e4:	f7eb ffb0 	bl	8005548 <__adddf3>
 80195e8:	4622      	mov	r2, r4
 80195ea:	4606      	mov	r6, r0
 80195ec:	460f      	mov	r7, r1
 80195ee:	462b      	mov	r3, r5
 80195f0:	4620      	mov	r0, r4
 80195f2:	4629      	mov	r1, r5
 80195f4:	f7ec f95e 	bl	80058b4 <__aeabi_dmul>
 80195f8:	4602      	mov	r2, r0
 80195fa:	460b      	mov	r3, r1
 80195fc:	4630      	mov	r0, r6
 80195fe:	4639      	mov	r1, r7
 8019600:	f7ec f958 	bl	80058b4 <__aeabi_dmul>
 8019604:	465a      	mov	r2, fp
 8019606:	4604      	mov	r4, r0
 8019608:	460d      	mov	r5, r1
 801960a:	464b      	mov	r3, r9
 801960c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019610:	f7eb ff9a 	bl	8005548 <__adddf3>
 8019614:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019618:	f7ec f94c 	bl	80058b4 <__aeabi_dmul>
 801961c:	4622      	mov	r2, r4
 801961e:	462b      	mov	r3, r5
 8019620:	f7eb ff92 	bl	8005548 <__adddf3>
 8019624:	465a      	mov	r2, fp
 8019626:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801962a:	464b      	mov	r3, r9
 801962c:	4658      	mov	r0, fp
 801962e:	4649      	mov	r1, r9
 8019630:	f7ec f940 	bl	80058b4 <__aeabi_dmul>
 8019634:	4b6a      	ldr	r3, [pc, #424]	@ (80197e0 <__ieee754_pow+0x790>)
 8019636:	2200      	movs	r2, #0
 8019638:	4606      	mov	r6, r0
 801963a:	460f      	mov	r7, r1
 801963c:	f7eb ff84 	bl	8005548 <__adddf3>
 8019640:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019644:	f7eb ff80 	bl	8005548 <__adddf3>
 8019648:	46d8      	mov	r8, fp
 801964a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801964e:	460d      	mov	r5, r1
 8019650:	465a      	mov	r2, fp
 8019652:	460b      	mov	r3, r1
 8019654:	4640      	mov	r0, r8
 8019656:	4649      	mov	r1, r9
 8019658:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801965c:	f7ec f92a 	bl	80058b4 <__aeabi_dmul>
 8019660:	465c      	mov	r4, fp
 8019662:	4680      	mov	r8, r0
 8019664:	4689      	mov	r9, r1
 8019666:	4b5e      	ldr	r3, [pc, #376]	@ (80197e0 <__ieee754_pow+0x790>)
 8019668:	2200      	movs	r2, #0
 801966a:	4620      	mov	r0, r4
 801966c:	4629      	mov	r1, r5
 801966e:	f7eb ff69 	bl	8005544 <__aeabi_dsub>
 8019672:	4632      	mov	r2, r6
 8019674:	463b      	mov	r3, r7
 8019676:	f7eb ff65 	bl	8005544 <__aeabi_dsub>
 801967a:	4602      	mov	r2, r0
 801967c:	460b      	mov	r3, r1
 801967e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019682:	f7eb ff5f 	bl	8005544 <__aeabi_dsub>
 8019686:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801968a:	f7ec f913 	bl	80058b4 <__aeabi_dmul>
 801968e:	4622      	mov	r2, r4
 8019690:	4606      	mov	r6, r0
 8019692:	460f      	mov	r7, r1
 8019694:	462b      	mov	r3, r5
 8019696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801969a:	f7ec f90b 	bl	80058b4 <__aeabi_dmul>
 801969e:	4602      	mov	r2, r0
 80196a0:	460b      	mov	r3, r1
 80196a2:	4630      	mov	r0, r6
 80196a4:	4639      	mov	r1, r7
 80196a6:	f7eb ff4f 	bl	8005548 <__adddf3>
 80196aa:	4606      	mov	r6, r0
 80196ac:	460f      	mov	r7, r1
 80196ae:	4602      	mov	r2, r0
 80196b0:	460b      	mov	r3, r1
 80196b2:	4640      	mov	r0, r8
 80196b4:	4649      	mov	r1, r9
 80196b6:	f7eb ff47 	bl	8005548 <__adddf3>
 80196ba:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80196be:	a33c      	add	r3, pc, #240	@ (adr r3, 80197b0 <__ieee754_pow+0x760>)
 80196c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196c4:	4658      	mov	r0, fp
 80196c6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80196ca:	460d      	mov	r5, r1
 80196cc:	f7ec f8f2 	bl	80058b4 <__aeabi_dmul>
 80196d0:	465c      	mov	r4, fp
 80196d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80196d6:	4642      	mov	r2, r8
 80196d8:	464b      	mov	r3, r9
 80196da:	4620      	mov	r0, r4
 80196dc:	4629      	mov	r1, r5
 80196de:	f7eb ff31 	bl	8005544 <__aeabi_dsub>
 80196e2:	4602      	mov	r2, r0
 80196e4:	460b      	mov	r3, r1
 80196e6:	4630      	mov	r0, r6
 80196e8:	4639      	mov	r1, r7
 80196ea:	f7eb ff2b 	bl	8005544 <__aeabi_dsub>
 80196ee:	a332      	add	r3, pc, #200	@ (adr r3, 80197b8 <__ieee754_pow+0x768>)
 80196f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196f4:	f7ec f8de 	bl	80058b4 <__aeabi_dmul>
 80196f8:	a331      	add	r3, pc, #196	@ (adr r3, 80197c0 <__ieee754_pow+0x770>)
 80196fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196fe:	4606      	mov	r6, r0
 8019700:	460f      	mov	r7, r1
 8019702:	4620      	mov	r0, r4
 8019704:	4629      	mov	r1, r5
 8019706:	f7ec f8d5 	bl	80058b4 <__aeabi_dmul>
 801970a:	4602      	mov	r2, r0
 801970c:	460b      	mov	r3, r1
 801970e:	4630      	mov	r0, r6
 8019710:	4639      	mov	r1, r7
 8019712:	f7eb ff19 	bl	8005548 <__adddf3>
 8019716:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019718:	4b32      	ldr	r3, [pc, #200]	@ (80197e4 <__ieee754_pow+0x794>)
 801971a:	4413      	add	r3, r2
 801971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019720:	f7eb ff12 	bl	8005548 <__adddf3>
 8019724:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019728:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801972a:	f7ec f859 	bl	80057e0 <__aeabi_i2d>
 801972e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019730:	4b2d      	ldr	r3, [pc, #180]	@ (80197e8 <__ieee754_pow+0x798>)
 8019732:	4413      	add	r3, r2
 8019734:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019738:	4606      	mov	r6, r0
 801973a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801973e:	460f      	mov	r7, r1
 8019740:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019744:	f7eb ff00 	bl	8005548 <__adddf3>
 8019748:	4642      	mov	r2, r8
 801974a:	464b      	mov	r3, r9
 801974c:	f7eb fefc 	bl	8005548 <__adddf3>
 8019750:	4632      	mov	r2, r6
 8019752:	463b      	mov	r3, r7
 8019754:	f7eb fef8 	bl	8005548 <__adddf3>
 8019758:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801975c:	4632      	mov	r2, r6
 801975e:	463b      	mov	r3, r7
 8019760:	4658      	mov	r0, fp
 8019762:	460d      	mov	r5, r1
 8019764:	f7eb feee 	bl	8005544 <__aeabi_dsub>
 8019768:	4642      	mov	r2, r8
 801976a:	464b      	mov	r3, r9
 801976c:	f7eb feea 	bl	8005544 <__aeabi_dsub>
 8019770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019774:	f7eb fee6 	bl	8005544 <__aeabi_dsub>
 8019778:	465c      	mov	r4, fp
 801977a:	4602      	mov	r2, r0
 801977c:	e036      	b.n	80197ec <__ieee754_pow+0x79c>
 801977e:	bf00      	nop
 8019780:	4a454eef 	.word	0x4a454eef
 8019784:	3fca7e28 	.word	0x3fca7e28
 8019788:	93c9db65 	.word	0x93c9db65
 801978c:	3fcd864a 	.word	0x3fcd864a
 8019790:	a91d4101 	.word	0xa91d4101
 8019794:	3fd17460 	.word	0x3fd17460
 8019798:	518f264d 	.word	0x518f264d
 801979c:	3fd55555 	.word	0x3fd55555
 80197a0:	db6fabff 	.word	0xdb6fabff
 80197a4:	3fdb6db6 	.word	0x3fdb6db6
 80197a8:	33333303 	.word	0x33333303
 80197ac:	3fe33333 	.word	0x3fe33333
 80197b0:	e0000000 	.word	0xe0000000
 80197b4:	3feec709 	.word	0x3feec709
 80197b8:	dc3a03fd 	.word	0xdc3a03fd
 80197bc:	3feec709 	.word	0x3feec709
 80197c0:	145b01f5 	.word	0x145b01f5
 80197c4:	be3e2fe0 	.word	0xbe3e2fe0
 80197c8:	7ff00000 	.word	0x7ff00000
 80197cc:	43400000 	.word	0x43400000
 80197d0:	0003988e 	.word	0x0003988e
 80197d4:	000bb679 	.word	0x000bb679
 80197d8:	0801ab48 	.word	0x0801ab48
 80197dc:	3ff00000 	.word	0x3ff00000
 80197e0:	40080000 	.word	0x40080000
 80197e4:	0801ab28 	.word	0x0801ab28
 80197e8:	0801ab38 	.word	0x0801ab38
 80197ec:	460b      	mov	r3, r1
 80197ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80197f2:	e5d7      	b.n	80193a4 <__ieee754_pow+0x354>
 80197f4:	f04f 0a01 	mov.w	sl, #1
 80197f8:	e65e      	b.n	80194b8 <__ieee754_pow+0x468>
 80197fa:	a3b4      	add	r3, pc, #720	@ (adr r3, 8019acc <__ieee754_pow+0xa7c>)
 80197fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019800:	4630      	mov	r0, r6
 8019802:	4639      	mov	r1, r7
 8019804:	f7eb fea0 	bl	8005548 <__adddf3>
 8019808:	4642      	mov	r2, r8
 801980a:	e9cd 0100 	strd	r0, r1, [sp]
 801980e:	464b      	mov	r3, r9
 8019810:	4620      	mov	r0, r4
 8019812:	4629      	mov	r1, r5
 8019814:	f7eb fe96 	bl	8005544 <__aeabi_dsub>
 8019818:	4602      	mov	r2, r0
 801981a:	460b      	mov	r3, r1
 801981c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019820:	f7ec fad8 	bl	8005dd4 <__aeabi_dcmpgt>
 8019824:	2800      	cmp	r0, #0
 8019826:	f47f ae00 	bne.w	801942a <__ieee754_pow+0x3da>
 801982a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801982e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8019832:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8019836:	fa43 fa0a 	asr.w	sl, r3, sl
 801983a:	44da      	add	sl, fp
 801983c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8019840:	489d      	ldr	r0, [pc, #628]	@ (8019ab8 <__ieee754_pow+0xa68>)
 8019842:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8019846:	4108      	asrs	r0, r1
 8019848:	ea00 030a 	and.w	r3, r0, sl
 801984c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8019850:	f1c1 0114 	rsb	r1, r1, #20
 8019854:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8019858:	fa4a fa01 	asr.w	sl, sl, r1
 801985c:	f1bb 0f00 	cmp.w	fp, #0
 8019860:	4640      	mov	r0, r8
 8019862:	4649      	mov	r1, r9
 8019864:	f04f 0200 	mov.w	r2, #0
 8019868:	bfb8      	it	lt
 801986a:	f1ca 0a00 	rsblt	sl, sl, #0
 801986e:	f7eb fe69 	bl	8005544 <__aeabi_dsub>
 8019872:	4680      	mov	r8, r0
 8019874:	4689      	mov	r9, r1
 8019876:	4632      	mov	r2, r6
 8019878:	463b      	mov	r3, r7
 801987a:	4640      	mov	r0, r8
 801987c:	4649      	mov	r1, r9
 801987e:	f7eb fe63 	bl	8005548 <__adddf3>
 8019882:	2400      	movs	r4, #0
 8019884:	a37c      	add	r3, pc, #496	@ (adr r3, 8019a78 <__ieee754_pow+0xa28>)
 8019886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801988a:	4620      	mov	r0, r4
 801988c:	460d      	mov	r5, r1
 801988e:	f7ec f811 	bl	80058b4 <__aeabi_dmul>
 8019892:	4642      	mov	r2, r8
 8019894:	e9cd 0100 	strd	r0, r1, [sp]
 8019898:	464b      	mov	r3, r9
 801989a:	4620      	mov	r0, r4
 801989c:	4629      	mov	r1, r5
 801989e:	f7eb fe51 	bl	8005544 <__aeabi_dsub>
 80198a2:	4602      	mov	r2, r0
 80198a4:	460b      	mov	r3, r1
 80198a6:	4630      	mov	r0, r6
 80198a8:	4639      	mov	r1, r7
 80198aa:	f7eb fe4b 	bl	8005544 <__aeabi_dsub>
 80198ae:	a374      	add	r3, pc, #464	@ (adr r3, 8019a80 <__ieee754_pow+0xa30>)
 80198b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198b4:	f7eb fffe 	bl	80058b4 <__aeabi_dmul>
 80198b8:	a373      	add	r3, pc, #460	@ (adr r3, 8019a88 <__ieee754_pow+0xa38>)
 80198ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198be:	4680      	mov	r8, r0
 80198c0:	4689      	mov	r9, r1
 80198c2:	4620      	mov	r0, r4
 80198c4:	4629      	mov	r1, r5
 80198c6:	f7eb fff5 	bl	80058b4 <__aeabi_dmul>
 80198ca:	4602      	mov	r2, r0
 80198cc:	460b      	mov	r3, r1
 80198ce:	4640      	mov	r0, r8
 80198d0:	4649      	mov	r1, r9
 80198d2:	f7eb fe39 	bl	8005548 <__adddf3>
 80198d6:	4604      	mov	r4, r0
 80198d8:	460d      	mov	r5, r1
 80198da:	4602      	mov	r2, r0
 80198dc:	460b      	mov	r3, r1
 80198de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80198e2:	f7eb fe31 	bl	8005548 <__adddf3>
 80198e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80198ea:	4680      	mov	r8, r0
 80198ec:	4689      	mov	r9, r1
 80198ee:	f7eb fe29 	bl	8005544 <__aeabi_dsub>
 80198f2:	4602      	mov	r2, r0
 80198f4:	460b      	mov	r3, r1
 80198f6:	4620      	mov	r0, r4
 80198f8:	4629      	mov	r1, r5
 80198fa:	f7eb fe23 	bl	8005544 <__aeabi_dsub>
 80198fe:	4642      	mov	r2, r8
 8019900:	4606      	mov	r6, r0
 8019902:	460f      	mov	r7, r1
 8019904:	464b      	mov	r3, r9
 8019906:	4640      	mov	r0, r8
 8019908:	4649      	mov	r1, r9
 801990a:	f7eb ffd3 	bl	80058b4 <__aeabi_dmul>
 801990e:	a360      	add	r3, pc, #384	@ (adr r3, 8019a90 <__ieee754_pow+0xa40>)
 8019910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019914:	4604      	mov	r4, r0
 8019916:	460d      	mov	r5, r1
 8019918:	f7eb ffcc 	bl	80058b4 <__aeabi_dmul>
 801991c:	a35e      	add	r3, pc, #376	@ (adr r3, 8019a98 <__ieee754_pow+0xa48>)
 801991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019922:	f7eb fe0f 	bl	8005544 <__aeabi_dsub>
 8019926:	4622      	mov	r2, r4
 8019928:	462b      	mov	r3, r5
 801992a:	f7eb ffc3 	bl	80058b4 <__aeabi_dmul>
 801992e:	a35c      	add	r3, pc, #368	@ (adr r3, 8019aa0 <__ieee754_pow+0xa50>)
 8019930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019934:	f7eb fe08 	bl	8005548 <__adddf3>
 8019938:	4622      	mov	r2, r4
 801993a:	462b      	mov	r3, r5
 801993c:	f7eb ffba 	bl	80058b4 <__aeabi_dmul>
 8019940:	a359      	add	r3, pc, #356	@ (adr r3, 8019aa8 <__ieee754_pow+0xa58>)
 8019942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019946:	f7eb fdfd 	bl	8005544 <__aeabi_dsub>
 801994a:	4622      	mov	r2, r4
 801994c:	462b      	mov	r3, r5
 801994e:	f7eb ffb1 	bl	80058b4 <__aeabi_dmul>
 8019952:	a357      	add	r3, pc, #348	@ (adr r3, 8019ab0 <__ieee754_pow+0xa60>)
 8019954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019958:	f7eb fdf6 	bl	8005548 <__adddf3>
 801995c:	4622      	mov	r2, r4
 801995e:	462b      	mov	r3, r5
 8019960:	f7eb ffa8 	bl	80058b4 <__aeabi_dmul>
 8019964:	4602      	mov	r2, r0
 8019966:	460b      	mov	r3, r1
 8019968:	4640      	mov	r0, r8
 801996a:	4649      	mov	r1, r9
 801996c:	f7eb fdea 	bl	8005544 <__aeabi_dsub>
 8019970:	4604      	mov	r4, r0
 8019972:	460d      	mov	r5, r1
 8019974:	4602      	mov	r2, r0
 8019976:	460b      	mov	r3, r1
 8019978:	4640      	mov	r0, r8
 801997a:	4649      	mov	r1, r9
 801997c:	f7eb ff9a 	bl	80058b4 <__aeabi_dmul>
 8019980:	2200      	movs	r2, #0
 8019982:	e9cd 0100 	strd	r0, r1, [sp]
 8019986:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801998a:	4620      	mov	r0, r4
 801998c:	4629      	mov	r1, r5
 801998e:	f7eb fdd9 	bl	8005544 <__aeabi_dsub>
 8019992:	4602      	mov	r2, r0
 8019994:	460b      	mov	r3, r1
 8019996:	e9dd 0100 	ldrd	r0, r1, [sp]
 801999a:	f7ec f8b5 	bl	8005b08 <__aeabi_ddiv>
 801999e:	4632      	mov	r2, r6
 80199a0:	4604      	mov	r4, r0
 80199a2:	460d      	mov	r5, r1
 80199a4:	463b      	mov	r3, r7
 80199a6:	4640      	mov	r0, r8
 80199a8:	4649      	mov	r1, r9
 80199aa:	f7eb ff83 	bl	80058b4 <__aeabi_dmul>
 80199ae:	4632      	mov	r2, r6
 80199b0:	463b      	mov	r3, r7
 80199b2:	f7eb fdc9 	bl	8005548 <__adddf3>
 80199b6:	4602      	mov	r2, r0
 80199b8:	460b      	mov	r3, r1
 80199ba:	4620      	mov	r0, r4
 80199bc:	4629      	mov	r1, r5
 80199be:	f7eb fdc1 	bl	8005544 <__aeabi_dsub>
 80199c2:	4642      	mov	r2, r8
 80199c4:	464b      	mov	r3, r9
 80199c6:	f7eb fdbd 	bl	8005544 <__aeabi_dsub>
 80199ca:	460b      	mov	r3, r1
 80199cc:	4602      	mov	r2, r0
 80199ce:	493b      	ldr	r1, [pc, #236]	@ (8019abc <__ieee754_pow+0xa6c>)
 80199d0:	2000      	movs	r0, #0
 80199d2:	f7eb fdb7 	bl	8005544 <__aeabi_dsub>
 80199d6:	ec41 0b10 	vmov	d0, r0, r1
 80199da:	ee10 3a90 	vmov	r3, s1
 80199de:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80199e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80199e6:	da30      	bge.n	8019a4a <__ieee754_pow+0x9fa>
 80199e8:	4650      	mov	r0, sl
 80199ea:	f000 fa79 	bl	8019ee0 <scalbn>
 80199ee:	ec51 0b10 	vmov	r0, r1, d0
 80199f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80199f6:	f7ff bbd2 	b.w	801919e <__ieee754_pow+0x14e>
 80199fa:	4c31      	ldr	r4, [pc, #196]	@ (8019ac0 <__ieee754_pow+0xa70>)
 80199fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8019a00:	42a3      	cmp	r3, r4
 8019a02:	d91a      	bls.n	8019a3a <__ieee754_pow+0x9ea>
 8019a04:	4b2f      	ldr	r3, [pc, #188]	@ (8019ac4 <__ieee754_pow+0xa74>)
 8019a06:	440b      	add	r3, r1
 8019a08:	4303      	orrs	r3, r0
 8019a0a:	d009      	beq.n	8019a20 <__ieee754_pow+0x9d0>
 8019a0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019a10:	2200      	movs	r2, #0
 8019a12:	2300      	movs	r3, #0
 8019a14:	f7ec f9c0 	bl	8005d98 <__aeabi_dcmplt>
 8019a18:	3800      	subs	r0, #0
 8019a1a:	bf18      	it	ne
 8019a1c:	2001      	movne	r0, #1
 8019a1e:	e42b      	b.n	8019278 <__ieee754_pow+0x228>
 8019a20:	4642      	mov	r2, r8
 8019a22:	464b      	mov	r3, r9
 8019a24:	f7eb fd8e 	bl	8005544 <__aeabi_dsub>
 8019a28:	4632      	mov	r2, r6
 8019a2a:	463b      	mov	r3, r7
 8019a2c:	f7ec f9c8 	bl	8005dc0 <__aeabi_dcmpge>
 8019a30:	2800      	cmp	r0, #0
 8019a32:	d1eb      	bne.n	8019a0c <__ieee754_pow+0x9bc>
 8019a34:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8019ad4 <__ieee754_pow+0xa84>
 8019a38:	e6f7      	b.n	801982a <__ieee754_pow+0x7da>
 8019a3a:	469a      	mov	sl, r3
 8019a3c:	4b22      	ldr	r3, [pc, #136]	@ (8019ac8 <__ieee754_pow+0xa78>)
 8019a3e:	459a      	cmp	sl, r3
 8019a40:	f63f aef3 	bhi.w	801982a <__ieee754_pow+0x7da>
 8019a44:	f8dd a010 	ldr.w	sl, [sp, #16]
 8019a48:	e715      	b.n	8019876 <__ieee754_pow+0x826>
 8019a4a:	ec51 0b10 	vmov	r0, r1, d0
 8019a4e:	4619      	mov	r1, r3
 8019a50:	e7cf      	b.n	80199f2 <__ieee754_pow+0x9a2>
 8019a52:	491a      	ldr	r1, [pc, #104]	@ (8019abc <__ieee754_pow+0xa6c>)
 8019a54:	2000      	movs	r0, #0
 8019a56:	f7ff bb18 	b.w	801908a <__ieee754_pow+0x3a>
 8019a5a:	2000      	movs	r0, #0
 8019a5c:	2100      	movs	r1, #0
 8019a5e:	f7ff bb14 	b.w	801908a <__ieee754_pow+0x3a>
 8019a62:	4630      	mov	r0, r6
 8019a64:	4639      	mov	r1, r7
 8019a66:	f7ff bb10 	b.w	801908a <__ieee754_pow+0x3a>
 8019a6a:	460c      	mov	r4, r1
 8019a6c:	f7ff bb5e 	b.w	801912c <__ieee754_pow+0xdc>
 8019a70:	2400      	movs	r4, #0
 8019a72:	f7ff bb49 	b.w	8019108 <__ieee754_pow+0xb8>
 8019a76:	bf00      	nop
 8019a78:	00000000 	.word	0x00000000
 8019a7c:	3fe62e43 	.word	0x3fe62e43
 8019a80:	fefa39ef 	.word	0xfefa39ef
 8019a84:	3fe62e42 	.word	0x3fe62e42
 8019a88:	0ca86c39 	.word	0x0ca86c39
 8019a8c:	be205c61 	.word	0xbe205c61
 8019a90:	72bea4d0 	.word	0x72bea4d0
 8019a94:	3e663769 	.word	0x3e663769
 8019a98:	c5d26bf1 	.word	0xc5d26bf1
 8019a9c:	3ebbbd41 	.word	0x3ebbbd41
 8019aa0:	af25de2c 	.word	0xaf25de2c
 8019aa4:	3f11566a 	.word	0x3f11566a
 8019aa8:	16bebd93 	.word	0x16bebd93
 8019aac:	3f66c16c 	.word	0x3f66c16c
 8019ab0:	5555553e 	.word	0x5555553e
 8019ab4:	3fc55555 	.word	0x3fc55555
 8019ab8:	fff00000 	.word	0xfff00000
 8019abc:	3ff00000 	.word	0x3ff00000
 8019ac0:	4090cbff 	.word	0x4090cbff
 8019ac4:	3f6f3400 	.word	0x3f6f3400
 8019ac8:	3fe00000 	.word	0x3fe00000
 8019acc:	652b82fe 	.word	0x652b82fe
 8019ad0:	3c971547 	.word	0x3c971547
 8019ad4:	4090cc00 	.word	0x4090cc00

08019ad8 <__ieee754_rem_pio2>:
 8019ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019adc:	ec57 6b10 	vmov	r6, r7, d0
 8019ae0:	4bc5      	ldr	r3, [pc, #788]	@ (8019df8 <__ieee754_rem_pio2+0x320>)
 8019ae2:	b08d      	sub	sp, #52	@ 0x34
 8019ae4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8019ae8:	4598      	cmp	r8, r3
 8019aea:	4604      	mov	r4, r0
 8019aec:	9704      	str	r7, [sp, #16]
 8019aee:	d807      	bhi.n	8019b00 <__ieee754_rem_pio2+0x28>
 8019af0:	2200      	movs	r2, #0
 8019af2:	2300      	movs	r3, #0
 8019af4:	ed80 0b00 	vstr	d0, [r0]
 8019af8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019afc:	2500      	movs	r5, #0
 8019afe:	e028      	b.n	8019b52 <__ieee754_rem_pio2+0x7a>
 8019b00:	4bbe      	ldr	r3, [pc, #760]	@ (8019dfc <__ieee754_rem_pio2+0x324>)
 8019b02:	4598      	cmp	r8, r3
 8019b04:	d878      	bhi.n	8019bf8 <__ieee754_rem_pio2+0x120>
 8019b06:	9b04      	ldr	r3, [sp, #16]
 8019b08:	4dbd      	ldr	r5, [pc, #756]	@ (8019e00 <__ieee754_rem_pio2+0x328>)
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	4630      	mov	r0, r6
 8019b0e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8019dc0 <__ieee754_rem_pio2+0x2e8>)
 8019b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b14:	4639      	mov	r1, r7
 8019b16:	dd38      	ble.n	8019b8a <__ieee754_rem_pio2+0xb2>
 8019b18:	f7eb fd14 	bl	8005544 <__aeabi_dsub>
 8019b1c:	45a8      	cmp	r8, r5
 8019b1e:	4606      	mov	r6, r0
 8019b20:	460f      	mov	r7, r1
 8019b22:	d01a      	beq.n	8019b5a <__ieee754_rem_pio2+0x82>
 8019b24:	a3a8      	add	r3, pc, #672	@ (adr r3, 8019dc8 <__ieee754_rem_pio2+0x2f0>)
 8019b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b2a:	f7eb fd0b 	bl	8005544 <__aeabi_dsub>
 8019b2e:	4602      	mov	r2, r0
 8019b30:	460b      	mov	r3, r1
 8019b32:	4680      	mov	r8, r0
 8019b34:	4689      	mov	r9, r1
 8019b36:	4630      	mov	r0, r6
 8019b38:	4639      	mov	r1, r7
 8019b3a:	f7eb fd03 	bl	8005544 <__aeabi_dsub>
 8019b3e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8019dc8 <__ieee754_rem_pio2+0x2f0>)
 8019b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b44:	f7eb fcfe 	bl	8005544 <__aeabi_dsub>
 8019b48:	e9c4 8900 	strd	r8, r9, [r4]
 8019b4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019b50:	2501      	movs	r5, #1
 8019b52:	4628      	mov	r0, r5
 8019b54:	b00d      	add	sp, #52	@ 0x34
 8019b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b5a:	a39d      	add	r3, pc, #628	@ (adr r3, 8019dd0 <__ieee754_rem_pio2+0x2f8>)
 8019b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b60:	f7eb fcf0 	bl	8005544 <__aeabi_dsub>
 8019b64:	a39c      	add	r3, pc, #624	@ (adr r3, 8019dd8 <__ieee754_rem_pio2+0x300>)
 8019b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b6a:	4606      	mov	r6, r0
 8019b6c:	460f      	mov	r7, r1
 8019b6e:	f7eb fce9 	bl	8005544 <__aeabi_dsub>
 8019b72:	4602      	mov	r2, r0
 8019b74:	460b      	mov	r3, r1
 8019b76:	4680      	mov	r8, r0
 8019b78:	4689      	mov	r9, r1
 8019b7a:	4630      	mov	r0, r6
 8019b7c:	4639      	mov	r1, r7
 8019b7e:	f7eb fce1 	bl	8005544 <__aeabi_dsub>
 8019b82:	a395      	add	r3, pc, #596	@ (adr r3, 8019dd8 <__ieee754_rem_pio2+0x300>)
 8019b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b88:	e7dc      	b.n	8019b44 <__ieee754_rem_pio2+0x6c>
 8019b8a:	f7eb fcdd 	bl	8005548 <__adddf3>
 8019b8e:	45a8      	cmp	r8, r5
 8019b90:	4606      	mov	r6, r0
 8019b92:	460f      	mov	r7, r1
 8019b94:	d018      	beq.n	8019bc8 <__ieee754_rem_pio2+0xf0>
 8019b96:	a38c      	add	r3, pc, #560	@ (adr r3, 8019dc8 <__ieee754_rem_pio2+0x2f0>)
 8019b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b9c:	f7eb fcd4 	bl	8005548 <__adddf3>
 8019ba0:	4602      	mov	r2, r0
 8019ba2:	460b      	mov	r3, r1
 8019ba4:	4680      	mov	r8, r0
 8019ba6:	4689      	mov	r9, r1
 8019ba8:	4630      	mov	r0, r6
 8019baa:	4639      	mov	r1, r7
 8019bac:	f7eb fcca 	bl	8005544 <__aeabi_dsub>
 8019bb0:	a385      	add	r3, pc, #532	@ (adr r3, 8019dc8 <__ieee754_rem_pio2+0x2f0>)
 8019bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bb6:	f7eb fcc7 	bl	8005548 <__adddf3>
 8019bba:	f04f 35ff 	mov.w	r5, #4294967295
 8019bbe:	e9c4 8900 	strd	r8, r9, [r4]
 8019bc2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019bc6:	e7c4      	b.n	8019b52 <__ieee754_rem_pio2+0x7a>
 8019bc8:	a381      	add	r3, pc, #516	@ (adr r3, 8019dd0 <__ieee754_rem_pio2+0x2f8>)
 8019bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bce:	f7eb fcbb 	bl	8005548 <__adddf3>
 8019bd2:	a381      	add	r3, pc, #516	@ (adr r3, 8019dd8 <__ieee754_rem_pio2+0x300>)
 8019bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bd8:	4606      	mov	r6, r0
 8019bda:	460f      	mov	r7, r1
 8019bdc:	f7eb fcb4 	bl	8005548 <__adddf3>
 8019be0:	4602      	mov	r2, r0
 8019be2:	460b      	mov	r3, r1
 8019be4:	4680      	mov	r8, r0
 8019be6:	4689      	mov	r9, r1
 8019be8:	4630      	mov	r0, r6
 8019bea:	4639      	mov	r1, r7
 8019bec:	f7eb fcaa 	bl	8005544 <__aeabi_dsub>
 8019bf0:	a379      	add	r3, pc, #484	@ (adr r3, 8019dd8 <__ieee754_rem_pio2+0x300>)
 8019bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bf6:	e7de      	b.n	8019bb6 <__ieee754_rem_pio2+0xde>
 8019bf8:	4b82      	ldr	r3, [pc, #520]	@ (8019e04 <__ieee754_rem_pio2+0x32c>)
 8019bfa:	4598      	cmp	r8, r3
 8019bfc:	f200 80d1 	bhi.w	8019da2 <__ieee754_rem_pio2+0x2ca>
 8019c00:	f000 f966 	bl	8019ed0 <fabs>
 8019c04:	ec57 6b10 	vmov	r6, r7, d0
 8019c08:	a375      	add	r3, pc, #468	@ (adr r3, 8019de0 <__ieee754_rem_pio2+0x308>)
 8019c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c0e:	4630      	mov	r0, r6
 8019c10:	4639      	mov	r1, r7
 8019c12:	f7eb fe4f 	bl	80058b4 <__aeabi_dmul>
 8019c16:	4b7c      	ldr	r3, [pc, #496]	@ (8019e08 <__ieee754_rem_pio2+0x330>)
 8019c18:	2200      	movs	r2, #0
 8019c1a:	f7eb fc95 	bl	8005548 <__adddf3>
 8019c1e:	f7ec f8f9 	bl	8005e14 <__aeabi_d2iz>
 8019c22:	4605      	mov	r5, r0
 8019c24:	f7eb fddc 	bl	80057e0 <__aeabi_i2d>
 8019c28:	4602      	mov	r2, r0
 8019c2a:	460b      	mov	r3, r1
 8019c2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019c30:	a363      	add	r3, pc, #396	@ (adr r3, 8019dc0 <__ieee754_rem_pio2+0x2e8>)
 8019c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c36:	f7eb fe3d 	bl	80058b4 <__aeabi_dmul>
 8019c3a:	4602      	mov	r2, r0
 8019c3c:	460b      	mov	r3, r1
 8019c3e:	4630      	mov	r0, r6
 8019c40:	4639      	mov	r1, r7
 8019c42:	f7eb fc7f 	bl	8005544 <__aeabi_dsub>
 8019c46:	a360      	add	r3, pc, #384	@ (adr r3, 8019dc8 <__ieee754_rem_pio2+0x2f0>)
 8019c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c4c:	4682      	mov	sl, r0
 8019c4e:	468b      	mov	fp, r1
 8019c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019c54:	f7eb fe2e 	bl	80058b4 <__aeabi_dmul>
 8019c58:	2d1f      	cmp	r5, #31
 8019c5a:	4606      	mov	r6, r0
 8019c5c:	460f      	mov	r7, r1
 8019c5e:	dc0c      	bgt.n	8019c7a <__ieee754_rem_pio2+0x1a2>
 8019c60:	4b6a      	ldr	r3, [pc, #424]	@ (8019e0c <__ieee754_rem_pio2+0x334>)
 8019c62:	1e6a      	subs	r2, r5, #1
 8019c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019c68:	4543      	cmp	r3, r8
 8019c6a:	d006      	beq.n	8019c7a <__ieee754_rem_pio2+0x1a2>
 8019c6c:	4632      	mov	r2, r6
 8019c6e:	463b      	mov	r3, r7
 8019c70:	4650      	mov	r0, sl
 8019c72:	4659      	mov	r1, fp
 8019c74:	f7eb fc66 	bl	8005544 <__aeabi_dsub>
 8019c78:	e00e      	b.n	8019c98 <__ieee754_rem_pio2+0x1c0>
 8019c7a:	463b      	mov	r3, r7
 8019c7c:	4632      	mov	r2, r6
 8019c7e:	4650      	mov	r0, sl
 8019c80:	4659      	mov	r1, fp
 8019c82:	f7eb fc5f 	bl	8005544 <__aeabi_dsub>
 8019c86:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019c8a:	9305      	str	r3, [sp, #20]
 8019c8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019c90:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8019c94:	2b10      	cmp	r3, #16
 8019c96:	dc02      	bgt.n	8019c9e <__ieee754_rem_pio2+0x1c6>
 8019c98:	e9c4 0100 	strd	r0, r1, [r4]
 8019c9c:	e039      	b.n	8019d12 <__ieee754_rem_pio2+0x23a>
 8019c9e:	a34c      	add	r3, pc, #304	@ (adr r3, 8019dd0 <__ieee754_rem_pio2+0x2f8>)
 8019ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ca8:	f7eb fe04 	bl	80058b4 <__aeabi_dmul>
 8019cac:	4606      	mov	r6, r0
 8019cae:	460f      	mov	r7, r1
 8019cb0:	4602      	mov	r2, r0
 8019cb2:	460b      	mov	r3, r1
 8019cb4:	4650      	mov	r0, sl
 8019cb6:	4659      	mov	r1, fp
 8019cb8:	f7eb fc44 	bl	8005544 <__aeabi_dsub>
 8019cbc:	4602      	mov	r2, r0
 8019cbe:	460b      	mov	r3, r1
 8019cc0:	4680      	mov	r8, r0
 8019cc2:	4689      	mov	r9, r1
 8019cc4:	4650      	mov	r0, sl
 8019cc6:	4659      	mov	r1, fp
 8019cc8:	f7eb fc3c 	bl	8005544 <__aeabi_dsub>
 8019ccc:	4632      	mov	r2, r6
 8019cce:	463b      	mov	r3, r7
 8019cd0:	f7eb fc38 	bl	8005544 <__aeabi_dsub>
 8019cd4:	a340      	add	r3, pc, #256	@ (adr r3, 8019dd8 <__ieee754_rem_pio2+0x300>)
 8019cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cda:	4606      	mov	r6, r0
 8019cdc:	460f      	mov	r7, r1
 8019cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ce2:	f7eb fde7 	bl	80058b4 <__aeabi_dmul>
 8019ce6:	4632      	mov	r2, r6
 8019ce8:	463b      	mov	r3, r7
 8019cea:	f7eb fc2b 	bl	8005544 <__aeabi_dsub>
 8019cee:	4602      	mov	r2, r0
 8019cf0:	460b      	mov	r3, r1
 8019cf2:	4606      	mov	r6, r0
 8019cf4:	460f      	mov	r7, r1
 8019cf6:	4640      	mov	r0, r8
 8019cf8:	4649      	mov	r1, r9
 8019cfa:	f7eb fc23 	bl	8005544 <__aeabi_dsub>
 8019cfe:	9a05      	ldr	r2, [sp, #20]
 8019d00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019d04:	1ad3      	subs	r3, r2, r3
 8019d06:	2b31      	cmp	r3, #49	@ 0x31
 8019d08:	dc20      	bgt.n	8019d4c <__ieee754_rem_pio2+0x274>
 8019d0a:	e9c4 0100 	strd	r0, r1, [r4]
 8019d0e:	46c2      	mov	sl, r8
 8019d10:	46cb      	mov	fp, r9
 8019d12:	e9d4 8900 	ldrd	r8, r9, [r4]
 8019d16:	4650      	mov	r0, sl
 8019d18:	4642      	mov	r2, r8
 8019d1a:	464b      	mov	r3, r9
 8019d1c:	4659      	mov	r1, fp
 8019d1e:	f7eb fc11 	bl	8005544 <__aeabi_dsub>
 8019d22:	463b      	mov	r3, r7
 8019d24:	4632      	mov	r2, r6
 8019d26:	f7eb fc0d 	bl	8005544 <__aeabi_dsub>
 8019d2a:	9b04      	ldr	r3, [sp, #16]
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019d32:	f6bf af0e 	bge.w	8019b52 <__ieee754_rem_pio2+0x7a>
 8019d36:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8019d3a:	6063      	str	r3, [r4, #4]
 8019d3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019d40:	f8c4 8000 	str.w	r8, [r4]
 8019d44:	60a0      	str	r0, [r4, #8]
 8019d46:	60e3      	str	r3, [r4, #12]
 8019d48:	426d      	negs	r5, r5
 8019d4a:	e702      	b.n	8019b52 <__ieee754_rem_pio2+0x7a>
 8019d4c:	a326      	add	r3, pc, #152	@ (adr r3, 8019de8 <__ieee754_rem_pio2+0x310>)
 8019d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019d56:	f7eb fdad 	bl	80058b4 <__aeabi_dmul>
 8019d5a:	4606      	mov	r6, r0
 8019d5c:	460f      	mov	r7, r1
 8019d5e:	4602      	mov	r2, r0
 8019d60:	460b      	mov	r3, r1
 8019d62:	4640      	mov	r0, r8
 8019d64:	4649      	mov	r1, r9
 8019d66:	f7eb fbed 	bl	8005544 <__aeabi_dsub>
 8019d6a:	4602      	mov	r2, r0
 8019d6c:	460b      	mov	r3, r1
 8019d6e:	4682      	mov	sl, r0
 8019d70:	468b      	mov	fp, r1
 8019d72:	4640      	mov	r0, r8
 8019d74:	4649      	mov	r1, r9
 8019d76:	f7eb fbe5 	bl	8005544 <__aeabi_dsub>
 8019d7a:	4632      	mov	r2, r6
 8019d7c:	463b      	mov	r3, r7
 8019d7e:	f7eb fbe1 	bl	8005544 <__aeabi_dsub>
 8019d82:	a31b      	add	r3, pc, #108	@ (adr r3, 8019df0 <__ieee754_rem_pio2+0x318>)
 8019d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d88:	4606      	mov	r6, r0
 8019d8a:	460f      	mov	r7, r1
 8019d8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019d90:	f7eb fd90 	bl	80058b4 <__aeabi_dmul>
 8019d94:	4632      	mov	r2, r6
 8019d96:	463b      	mov	r3, r7
 8019d98:	f7eb fbd4 	bl	8005544 <__aeabi_dsub>
 8019d9c:	4606      	mov	r6, r0
 8019d9e:	460f      	mov	r7, r1
 8019da0:	e764      	b.n	8019c6c <__ieee754_rem_pio2+0x194>
 8019da2:	4b1b      	ldr	r3, [pc, #108]	@ (8019e10 <__ieee754_rem_pio2+0x338>)
 8019da4:	4598      	cmp	r8, r3
 8019da6:	d935      	bls.n	8019e14 <__ieee754_rem_pio2+0x33c>
 8019da8:	4632      	mov	r2, r6
 8019daa:	463b      	mov	r3, r7
 8019dac:	4630      	mov	r0, r6
 8019dae:	4639      	mov	r1, r7
 8019db0:	f7eb fbc8 	bl	8005544 <__aeabi_dsub>
 8019db4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019db8:	e9c4 0100 	strd	r0, r1, [r4]
 8019dbc:	e69e      	b.n	8019afc <__ieee754_rem_pio2+0x24>
 8019dbe:	bf00      	nop
 8019dc0:	54400000 	.word	0x54400000
 8019dc4:	3ff921fb 	.word	0x3ff921fb
 8019dc8:	1a626331 	.word	0x1a626331
 8019dcc:	3dd0b461 	.word	0x3dd0b461
 8019dd0:	1a600000 	.word	0x1a600000
 8019dd4:	3dd0b461 	.word	0x3dd0b461
 8019dd8:	2e037073 	.word	0x2e037073
 8019ddc:	3ba3198a 	.word	0x3ba3198a
 8019de0:	6dc9c883 	.word	0x6dc9c883
 8019de4:	3fe45f30 	.word	0x3fe45f30
 8019de8:	2e000000 	.word	0x2e000000
 8019dec:	3ba3198a 	.word	0x3ba3198a
 8019df0:	252049c1 	.word	0x252049c1
 8019df4:	397b839a 	.word	0x397b839a
 8019df8:	3fe921fb 	.word	0x3fe921fb
 8019dfc:	4002d97b 	.word	0x4002d97b
 8019e00:	3ff921fb 	.word	0x3ff921fb
 8019e04:	413921fb 	.word	0x413921fb
 8019e08:	3fe00000 	.word	0x3fe00000
 8019e0c:	0801ab58 	.word	0x0801ab58
 8019e10:	7fefffff 	.word	0x7fefffff
 8019e14:	ea4f 5528 	mov.w	r5, r8, asr #20
 8019e18:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8019e1c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8019e20:	4630      	mov	r0, r6
 8019e22:	460f      	mov	r7, r1
 8019e24:	f7eb fff6 	bl	8005e14 <__aeabi_d2iz>
 8019e28:	f7eb fcda 	bl	80057e0 <__aeabi_i2d>
 8019e2c:	4602      	mov	r2, r0
 8019e2e:	460b      	mov	r3, r1
 8019e30:	4630      	mov	r0, r6
 8019e32:	4639      	mov	r1, r7
 8019e34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019e38:	f7eb fb84 	bl	8005544 <__aeabi_dsub>
 8019e3c:	4b22      	ldr	r3, [pc, #136]	@ (8019ec8 <__ieee754_rem_pio2+0x3f0>)
 8019e3e:	2200      	movs	r2, #0
 8019e40:	f7eb fd38 	bl	80058b4 <__aeabi_dmul>
 8019e44:	460f      	mov	r7, r1
 8019e46:	4606      	mov	r6, r0
 8019e48:	f7eb ffe4 	bl	8005e14 <__aeabi_d2iz>
 8019e4c:	f7eb fcc8 	bl	80057e0 <__aeabi_i2d>
 8019e50:	4602      	mov	r2, r0
 8019e52:	460b      	mov	r3, r1
 8019e54:	4630      	mov	r0, r6
 8019e56:	4639      	mov	r1, r7
 8019e58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019e5c:	f7eb fb72 	bl	8005544 <__aeabi_dsub>
 8019e60:	4b19      	ldr	r3, [pc, #100]	@ (8019ec8 <__ieee754_rem_pio2+0x3f0>)
 8019e62:	2200      	movs	r2, #0
 8019e64:	f7eb fd26 	bl	80058b4 <__aeabi_dmul>
 8019e68:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8019e6c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8019e70:	f04f 0803 	mov.w	r8, #3
 8019e74:	2600      	movs	r6, #0
 8019e76:	2700      	movs	r7, #0
 8019e78:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8019e7c:	4632      	mov	r2, r6
 8019e7e:	463b      	mov	r3, r7
 8019e80:	46c2      	mov	sl, r8
 8019e82:	f108 38ff 	add.w	r8, r8, #4294967295
 8019e86:	f7eb ff7d 	bl	8005d84 <__aeabi_dcmpeq>
 8019e8a:	2800      	cmp	r0, #0
 8019e8c:	d1f4      	bne.n	8019e78 <__ieee754_rem_pio2+0x3a0>
 8019e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8019ecc <__ieee754_rem_pio2+0x3f4>)
 8019e90:	9301      	str	r3, [sp, #4]
 8019e92:	2302      	movs	r3, #2
 8019e94:	9300      	str	r3, [sp, #0]
 8019e96:	462a      	mov	r2, r5
 8019e98:	4653      	mov	r3, sl
 8019e9a:	4621      	mov	r1, r4
 8019e9c:	a806      	add	r0, sp, #24
 8019e9e:	f000 f9b7 	bl	801a210 <__kernel_rem_pio2>
 8019ea2:	9b04      	ldr	r3, [sp, #16]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	4605      	mov	r5, r0
 8019ea8:	f6bf ae53 	bge.w	8019b52 <__ieee754_rem_pio2+0x7a>
 8019eac:	e9d4 2100 	ldrd	r2, r1, [r4]
 8019eb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019eb4:	e9c4 2300 	strd	r2, r3, [r4]
 8019eb8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8019ebc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019ec0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8019ec4:	e740      	b.n	8019d48 <__ieee754_rem_pio2+0x270>
 8019ec6:	bf00      	nop
 8019ec8:	41700000 	.word	0x41700000
 8019ecc:	0801abd8 	.word	0x0801abd8

08019ed0 <fabs>:
 8019ed0:	ec51 0b10 	vmov	r0, r1, d0
 8019ed4:	4602      	mov	r2, r0
 8019ed6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8019eda:	ec43 2b10 	vmov	d0, r2, r3
 8019ede:	4770      	bx	lr

08019ee0 <scalbn>:
 8019ee0:	b570      	push	{r4, r5, r6, lr}
 8019ee2:	ec55 4b10 	vmov	r4, r5, d0
 8019ee6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8019eea:	4606      	mov	r6, r0
 8019eec:	462b      	mov	r3, r5
 8019eee:	b991      	cbnz	r1, 8019f16 <scalbn+0x36>
 8019ef0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8019ef4:	4323      	orrs	r3, r4
 8019ef6:	d03d      	beq.n	8019f74 <scalbn+0x94>
 8019ef8:	4b35      	ldr	r3, [pc, #212]	@ (8019fd0 <scalbn+0xf0>)
 8019efa:	4620      	mov	r0, r4
 8019efc:	4629      	mov	r1, r5
 8019efe:	2200      	movs	r2, #0
 8019f00:	f7eb fcd8 	bl	80058b4 <__aeabi_dmul>
 8019f04:	4b33      	ldr	r3, [pc, #204]	@ (8019fd4 <scalbn+0xf4>)
 8019f06:	429e      	cmp	r6, r3
 8019f08:	4604      	mov	r4, r0
 8019f0a:	460d      	mov	r5, r1
 8019f0c:	da0f      	bge.n	8019f2e <scalbn+0x4e>
 8019f0e:	a328      	add	r3, pc, #160	@ (adr r3, 8019fb0 <scalbn+0xd0>)
 8019f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f14:	e01e      	b.n	8019f54 <scalbn+0x74>
 8019f16:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8019f1a:	4291      	cmp	r1, r2
 8019f1c:	d10b      	bne.n	8019f36 <scalbn+0x56>
 8019f1e:	4622      	mov	r2, r4
 8019f20:	4620      	mov	r0, r4
 8019f22:	4629      	mov	r1, r5
 8019f24:	f7eb fb10 	bl	8005548 <__adddf3>
 8019f28:	4604      	mov	r4, r0
 8019f2a:	460d      	mov	r5, r1
 8019f2c:	e022      	b.n	8019f74 <scalbn+0x94>
 8019f2e:	460b      	mov	r3, r1
 8019f30:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8019f34:	3936      	subs	r1, #54	@ 0x36
 8019f36:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8019f3a:	4296      	cmp	r6, r2
 8019f3c:	dd0d      	ble.n	8019f5a <scalbn+0x7a>
 8019f3e:	2d00      	cmp	r5, #0
 8019f40:	a11d      	add	r1, pc, #116	@ (adr r1, 8019fb8 <scalbn+0xd8>)
 8019f42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f46:	da02      	bge.n	8019f4e <scalbn+0x6e>
 8019f48:	a11d      	add	r1, pc, #116	@ (adr r1, 8019fc0 <scalbn+0xe0>)
 8019f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f4e:	a31a      	add	r3, pc, #104	@ (adr r3, 8019fb8 <scalbn+0xd8>)
 8019f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f54:	f7eb fcae 	bl	80058b4 <__aeabi_dmul>
 8019f58:	e7e6      	b.n	8019f28 <scalbn+0x48>
 8019f5a:	1872      	adds	r2, r6, r1
 8019f5c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8019f60:	428a      	cmp	r2, r1
 8019f62:	dcec      	bgt.n	8019f3e <scalbn+0x5e>
 8019f64:	2a00      	cmp	r2, #0
 8019f66:	dd08      	ble.n	8019f7a <scalbn+0x9a>
 8019f68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019f6c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8019f70:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019f74:	ec45 4b10 	vmov	d0, r4, r5
 8019f78:	bd70      	pop	{r4, r5, r6, pc}
 8019f7a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8019f7e:	da08      	bge.n	8019f92 <scalbn+0xb2>
 8019f80:	2d00      	cmp	r5, #0
 8019f82:	a10b      	add	r1, pc, #44	@ (adr r1, 8019fb0 <scalbn+0xd0>)
 8019f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f88:	dac1      	bge.n	8019f0e <scalbn+0x2e>
 8019f8a:	a10f      	add	r1, pc, #60	@ (adr r1, 8019fc8 <scalbn+0xe8>)
 8019f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f90:	e7bd      	b.n	8019f0e <scalbn+0x2e>
 8019f92:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019f96:	3236      	adds	r2, #54	@ 0x36
 8019f98:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8019f9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019fa0:	4620      	mov	r0, r4
 8019fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8019fd8 <scalbn+0xf8>)
 8019fa4:	4629      	mov	r1, r5
 8019fa6:	2200      	movs	r2, #0
 8019fa8:	e7d4      	b.n	8019f54 <scalbn+0x74>
 8019faa:	bf00      	nop
 8019fac:	f3af 8000 	nop.w
 8019fb0:	c2f8f359 	.word	0xc2f8f359
 8019fb4:	01a56e1f 	.word	0x01a56e1f
 8019fb8:	8800759c 	.word	0x8800759c
 8019fbc:	7e37e43c 	.word	0x7e37e43c
 8019fc0:	8800759c 	.word	0x8800759c
 8019fc4:	fe37e43c 	.word	0xfe37e43c
 8019fc8:	c2f8f359 	.word	0xc2f8f359
 8019fcc:	81a56e1f 	.word	0x81a56e1f
 8019fd0:	43500000 	.word	0x43500000
 8019fd4:	ffff3cb0 	.word	0xffff3cb0
 8019fd8:	3c900000 	.word	0x3c900000

08019fdc <with_errno>:
 8019fdc:	b510      	push	{r4, lr}
 8019fde:	ed2d 8b02 	vpush	{d8}
 8019fe2:	eeb0 8a40 	vmov.f32	s16, s0
 8019fe6:	eef0 8a60 	vmov.f32	s17, s1
 8019fea:	4604      	mov	r4, r0
 8019fec:	f7fe fd46 	bl	8018a7c <__errno>
 8019ff0:	eeb0 0a48 	vmov.f32	s0, s16
 8019ff4:	eef0 0a68 	vmov.f32	s1, s17
 8019ff8:	ecbd 8b02 	vpop	{d8}
 8019ffc:	6004      	str	r4, [r0, #0]
 8019ffe:	bd10      	pop	{r4, pc}

0801a000 <xflow>:
 801a000:	4603      	mov	r3, r0
 801a002:	b507      	push	{r0, r1, r2, lr}
 801a004:	ec51 0b10 	vmov	r0, r1, d0
 801a008:	b183      	cbz	r3, 801a02c <xflow+0x2c>
 801a00a:	4602      	mov	r2, r0
 801a00c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a010:	e9cd 2300 	strd	r2, r3, [sp]
 801a014:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a018:	f7eb fc4c 	bl	80058b4 <__aeabi_dmul>
 801a01c:	ec41 0b10 	vmov	d0, r0, r1
 801a020:	2022      	movs	r0, #34	@ 0x22
 801a022:	b003      	add	sp, #12
 801a024:	f85d eb04 	ldr.w	lr, [sp], #4
 801a028:	f7ff bfd8 	b.w	8019fdc <with_errno>
 801a02c:	4602      	mov	r2, r0
 801a02e:	460b      	mov	r3, r1
 801a030:	e7ee      	b.n	801a010 <xflow+0x10>
 801a032:	0000      	movs	r0, r0
 801a034:	0000      	movs	r0, r0
	...

0801a038 <__math_uflow>:
 801a038:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801a040 <__math_uflow+0x8>
 801a03c:	f7ff bfe0 	b.w	801a000 <xflow>
 801a040:	00000000 	.word	0x00000000
 801a044:	10000000 	.word	0x10000000

0801a048 <__math_oflow>:
 801a048:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801a050 <__math_oflow+0x8>
 801a04c:	f7ff bfd8 	b.w	801a000 <xflow>
 801a050:	00000000 	.word	0x00000000
 801a054:	70000000 	.word	0x70000000

0801a058 <__ieee754_sqrt>:
 801a058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a05c:	4a68      	ldr	r2, [pc, #416]	@ (801a200 <__ieee754_sqrt+0x1a8>)
 801a05e:	ec55 4b10 	vmov	r4, r5, d0
 801a062:	43aa      	bics	r2, r5
 801a064:	462b      	mov	r3, r5
 801a066:	4621      	mov	r1, r4
 801a068:	d110      	bne.n	801a08c <__ieee754_sqrt+0x34>
 801a06a:	4622      	mov	r2, r4
 801a06c:	4620      	mov	r0, r4
 801a06e:	4629      	mov	r1, r5
 801a070:	f7eb fc20 	bl	80058b4 <__aeabi_dmul>
 801a074:	4602      	mov	r2, r0
 801a076:	460b      	mov	r3, r1
 801a078:	4620      	mov	r0, r4
 801a07a:	4629      	mov	r1, r5
 801a07c:	f7eb fa64 	bl	8005548 <__adddf3>
 801a080:	4604      	mov	r4, r0
 801a082:	460d      	mov	r5, r1
 801a084:	ec45 4b10 	vmov	d0, r4, r5
 801a088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a08c:	2d00      	cmp	r5, #0
 801a08e:	dc0e      	bgt.n	801a0ae <__ieee754_sqrt+0x56>
 801a090:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801a094:	4322      	orrs	r2, r4
 801a096:	d0f5      	beq.n	801a084 <__ieee754_sqrt+0x2c>
 801a098:	b19d      	cbz	r5, 801a0c2 <__ieee754_sqrt+0x6a>
 801a09a:	4622      	mov	r2, r4
 801a09c:	4620      	mov	r0, r4
 801a09e:	4629      	mov	r1, r5
 801a0a0:	f7eb fa50 	bl	8005544 <__aeabi_dsub>
 801a0a4:	4602      	mov	r2, r0
 801a0a6:	460b      	mov	r3, r1
 801a0a8:	f7eb fd2e 	bl	8005b08 <__aeabi_ddiv>
 801a0ac:	e7e8      	b.n	801a080 <__ieee754_sqrt+0x28>
 801a0ae:	152a      	asrs	r2, r5, #20
 801a0b0:	d115      	bne.n	801a0de <__ieee754_sqrt+0x86>
 801a0b2:	2000      	movs	r0, #0
 801a0b4:	e009      	b.n	801a0ca <__ieee754_sqrt+0x72>
 801a0b6:	0acb      	lsrs	r3, r1, #11
 801a0b8:	3a15      	subs	r2, #21
 801a0ba:	0549      	lsls	r1, r1, #21
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d0fa      	beq.n	801a0b6 <__ieee754_sqrt+0x5e>
 801a0c0:	e7f7      	b.n	801a0b2 <__ieee754_sqrt+0x5a>
 801a0c2:	462a      	mov	r2, r5
 801a0c4:	e7fa      	b.n	801a0bc <__ieee754_sqrt+0x64>
 801a0c6:	005b      	lsls	r3, r3, #1
 801a0c8:	3001      	adds	r0, #1
 801a0ca:	02dc      	lsls	r4, r3, #11
 801a0cc:	d5fb      	bpl.n	801a0c6 <__ieee754_sqrt+0x6e>
 801a0ce:	1e44      	subs	r4, r0, #1
 801a0d0:	1b12      	subs	r2, r2, r4
 801a0d2:	f1c0 0420 	rsb	r4, r0, #32
 801a0d6:	fa21 f404 	lsr.w	r4, r1, r4
 801a0da:	4323      	orrs	r3, r4
 801a0dc:	4081      	lsls	r1, r0
 801a0de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a0e2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801a0e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a0ea:	07d2      	lsls	r2, r2, #31
 801a0ec:	bf5c      	itt	pl
 801a0ee:	005b      	lslpl	r3, r3, #1
 801a0f0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801a0f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a0f8:	bf58      	it	pl
 801a0fa:	0049      	lslpl	r1, r1, #1
 801a0fc:	2600      	movs	r6, #0
 801a0fe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801a102:	106d      	asrs	r5, r5, #1
 801a104:	0049      	lsls	r1, r1, #1
 801a106:	2016      	movs	r0, #22
 801a108:	4632      	mov	r2, r6
 801a10a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801a10e:	1917      	adds	r7, r2, r4
 801a110:	429f      	cmp	r7, r3
 801a112:	bfde      	ittt	le
 801a114:	193a      	addle	r2, r7, r4
 801a116:	1bdb      	suble	r3, r3, r7
 801a118:	1936      	addle	r6, r6, r4
 801a11a:	0fcf      	lsrs	r7, r1, #31
 801a11c:	3801      	subs	r0, #1
 801a11e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801a122:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a126:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a12a:	d1f0      	bne.n	801a10e <__ieee754_sqrt+0xb6>
 801a12c:	4604      	mov	r4, r0
 801a12e:	2720      	movs	r7, #32
 801a130:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801a134:	429a      	cmp	r2, r3
 801a136:	eb00 0e0c 	add.w	lr, r0, ip
 801a13a:	db02      	blt.n	801a142 <__ieee754_sqrt+0xea>
 801a13c:	d113      	bne.n	801a166 <__ieee754_sqrt+0x10e>
 801a13e:	458e      	cmp	lr, r1
 801a140:	d811      	bhi.n	801a166 <__ieee754_sqrt+0x10e>
 801a142:	f1be 0f00 	cmp.w	lr, #0
 801a146:	eb0e 000c 	add.w	r0, lr, ip
 801a14a:	da42      	bge.n	801a1d2 <__ieee754_sqrt+0x17a>
 801a14c:	2800      	cmp	r0, #0
 801a14e:	db40      	blt.n	801a1d2 <__ieee754_sqrt+0x17a>
 801a150:	f102 0801 	add.w	r8, r2, #1
 801a154:	1a9b      	subs	r3, r3, r2
 801a156:	458e      	cmp	lr, r1
 801a158:	bf88      	it	hi
 801a15a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801a15e:	eba1 010e 	sub.w	r1, r1, lr
 801a162:	4464      	add	r4, ip
 801a164:	4642      	mov	r2, r8
 801a166:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801a16a:	3f01      	subs	r7, #1
 801a16c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801a170:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a174:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801a178:	d1dc      	bne.n	801a134 <__ieee754_sqrt+0xdc>
 801a17a:	4319      	orrs	r1, r3
 801a17c:	d01b      	beq.n	801a1b6 <__ieee754_sqrt+0x15e>
 801a17e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801a204 <__ieee754_sqrt+0x1ac>
 801a182:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801a208 <__ieee754_sqrt+0x1b0>
 801a186:	e9da 0100 	ldrd	r0, r1, [sl]
 801a18a:	e9db 2300 	ldrd	r2, r3, [fp]
 801a18e:	f7eb f9d9 	bl	8005544 <__aeabi_dsub>
 801a192:	e9da 8900 	ldrd	r8, r9, [sl]
 801a196:	4602      	mov	r2, r0
 801a198:	460b      	mov	r3, r1
 801a19a:	4640      	mov	r0, r8
 801a19c:	4649      	mov	r1, r9
 801a19e:	f7eb fe05 	bl	8005dac <__aeabi_dcmple>
 801a1a2:	b140      	cbz	r0, 801a1b6 <__ieee754_sqrt+0x15e>
 801a1a4:	f1b4 3fff 	cmp.w	r4, #4294967295
 801a1a8:	e9da 0100 	ldrd	r0, r1, [sl]
 801a1ac:	e9db 2300 	ldrd	r2, r3, [fp]
 801a1b0:	d111      	bne.n	801a1d6 <__ieee754_sqrt+0x17e>
 801a1b2:	3601      	adds	r6, #1
 801a1b4:	463c      	mov	r4, r7
 801a1b6:	1072      	asrs	r2, r6, #1
 801a1b8:	0863      	lsrs	r3, r4, #1
 801a1ba:	07f1      	lsls	r1, r6, #31
 801a1bc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801a1c0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801a1c4:	bf48      	it	mi
 801a1c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801a1ca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801a1ce:	4618      	mov	r0, r3
 801a1d0:	e756      	b.n	801a080 <__ieee754_sqrt+0x28>
 801a1d2:	4690      	mov	r8, r2
 801a1d4:	e7be      	b.n	801a154 <__ieee754_sqrt+0xfc>
 801a1d6:	f7eb f9b7 	bl	8005548 <__adddf3>
 801a1da:	e9da 8900 	ldrd	r8, r9, [sl]
 801a1de:	4602      	mov	r2, r0
 801a1e0:	460b      	mov	r3, r1
 801a1e2:	4640      	mov	r0, r8
 801a1e4:	4649      	mov	r1, r9
 801a1e6:	f7eb fdd7 	bl	8005d98 <__aeabi_dcmplt>
 801a1ea:	b120      	cbz	r0, 801a1f6 <__ieee754_sqrt+0x19e>
 801a1ec:	1ca0      	adds	r0, r4, #2
 801a1ee:	bf08      	it	eq
 801a1f0:	3601      	addeq	r6, #1
 801a1f2:	3402      	adds	r4, #2
 801a1f4:	e7df      	b.n	801a1b6 <__ieee754_sqrt+0x15e>
 801a1f6:	1c63      	adds	r3, r4, #1
 801a1f8:	f023 0401 	bic.w	r4, r3, #1
 801a1fc:	e7db      	b.n	801a1b6 <__ieee754_sqrt+0x15e>
 801a1fe:	bf00      	nop
 801a200:	7ff00000 	.word	0x7ff00000
 801a204:	20000248 	.word	0x20000248
 801a208:	20000240 	.word	0x20000240
 801a20c:	00000000 	.word	0x00000000

0801a210 <__kernel_rem_pio2>:
 801a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a214:	ed2d 8b02 	vpush	{d8}
 801a218:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801a21c:	f112 0f14 	cmn.w	r2, #20
 801a220:	9306      	str	r3, [sp, #24]
 801a222:	9104      	str	r1, [sp, #16]
 801a224:	4bbe      	ldr	r3, [pc, #760]	@ (801a520 <__kernel_rem_pio2+0x310>)
 801a226:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801a228:	9008      	str	r0, [sp, #32]
 801a22a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a22e:	9300      	str	r3, [sp, #0]
 801a230:	9b06      	ldr	r3, [sp, #24]
 801a232:	f103 33ff 	add.w	r3, r3, #4294967295
 801a236:	bfa8      	it	ge
 801a238:	1ed4      	subge	r4, r2, #3
 801a23a:	9305      	str	r3, [sp, #20]
 801a23c:	bfb2      	itee	lt
 801a23e:	2400      	movlt	r4, #0
 801a240:	2318      	movge	r3, #24
 801a242:	fb94 f4f3 	sdivge	r4, r4, r3
 801a246:	f06f 0317 	mvn.w	r3, #23
 801a24a:	fb04 3303 	mla	r3, r4, r3, r3
 801a24e:	eb03 0b02 	add.w	fp, r3, r2
 801a252:	9b00      	ldr	r3, [sp, #0]
 801a254:	9a05      	ldr	r2, [sp, #20]
 801a256:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801a510 <__kernel_rem_pio2+0x300>
 801a25a:	eb03 0802 	add.w	r8, r3, r2
 801a25e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801a260:	1aa7      	subs	r7, r4, r2
 801a262:	ae20      	add	r6, sp, #128	@ 0x80
 801a264:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a268:	2500      	movs	r5, #0
 801a26a:	4545      	cmp	r5, r8
 801a26c:	dd13      	ble.n	801a296 <__kernel_rem_pio2+0x86>
 801a26e:	9b06      	ldr	r3, [sp, #24]
 801a270:	aa20      	add	r2, sp, #128	@ 0x80
 801a272:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801a276:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801a27a:	f04f 0800 	mov.w	r8, #0
 801a27e:	9b00      	ldr	r3, [sp, #0]
 801a280:	4598      	cmp	r8, r3
 801a282:	dc31      	bgt.n	801a2e8 <__kernel_rem_pio2+0xd8>
 801a284:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801a510 <__kernel_rem_pio2+0x300>
 801a288:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a28c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a290:	462f      	mov	r7, r5
 801a292:	2600      	movs	r6, #0
 801a294:	e01b      	b.n	801a2ce <__kernel_rem_pio2+0xbe>
 801a296:	42ef      	cmn	r7, r5
 801a298:	d407      	bmi.n	801a2aa <__kernel_rem_pio2+0x9a>
 801a29a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a29e:	f7eb fa9f 	bl	80057e0 <__aeabi_i2d>
 801a2a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a2a6:	3501      	adds	r5, #1
 801a2a8:	e7df      	b.n	801a26a <__kernel_rem_pio2+0x5a>
 801a2aa:	ec51 0b18 	vmov	r0, r1, d8
 801a2ae:	e7f8      	b.n	801a2a2 <__kernel_rem_pio2+0x92>
 801a2b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a2b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801a2b8:	f7eb fafc 	bl	80058b4 <__aeabi_dmul>
 801a2bc:	4602      	mov	r2, r0
 801a2be:	460b      	mov	r3, r1
 801a2c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a2c4:	f7eb f940 	bl	8005548 <__adddf3>
 801a2c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a2cc:	3601      	adds	r6, #1
 801a2ce:	9b05      	ldr	r3, [sp, #20]
 801a2d0:	429e      	cmp	r6, r3
 801a2d2:	f1a7 0708 	sub.w	r7, r7, #8
 801a2d6:	ddeb      	ble.n	801a2b0 <__kernel_rem_pio2+0xa0>
 801a2d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a2dc:	f108 0801 	add.w	r8, r8, #1
 801a2e0:	ecaa 7b02 	vstmia	sl!, {d7}
 801a2e4:	3508      	adds	r5, #8
 801a2e6:	e7ca      	b.n	801a27e <__kernel_rem_pio2+0x6e>
 801a2e8:	9b00      	ldr	r3, [sp, #0]
 801a2ea:	f8dd 8000 	ldr.w	r8, [sp]
 801a2ee:	aa0c      	add	r2, sp, #48	@ 0x30
 801a2f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a2f4:	930a      	str	r3, [sp, #40]	@ 0x28
 801a2f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801a2f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a2fc:	9309      	str	r3, [sp, #36]	@ 0x24
 801a2fe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801a302:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a304:	ab98      	add	r3, sp, #608	@ 0x260
 801a306:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a30a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801a30e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a312:	ac0c      	add	r4, sp, #48	@ 0x30
 801a314:	ab70      	add	r3, sp, #448	@ 0x1c0
 801a316:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801a31a:	46a1      	mov	r9, r4
 801a31c:	46c2      	mov	sl, r8
 801a31e:	f1ba 0f00 	cmp.w	sl, #0
 801a322:	f1a5 0508 	sub.w	r5, r5, #8
 801a326:	dc77      	bgt.n	801a418 <__kernel_rem_pio2+0x208>
 801a328:	4658      	mov	r0, fp
 801a32a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801a32e:	f7ff fdd7 	bl	8019ee0 <scalbn>
 801a332:	ec57 6b10 	vmov	r6, r7, d0
 801a336:	2200      	movs	r2, #0
 801a338:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801a33c:	4630      	mov	r0, r6
 801a33e:	4639      	mov	r1, r7
 801a340:	f7eb fab8 	bl	80058b4 <__aeabi_dmul>
 801a344:	ec41 0b10 	vmov	d0, r0, r1
 801a348:	f000 faba 	bl	801a8c0 <floor>
 801a34c:	4b75      	ldr	r3, [pc, #468]	@ (801a524 <__kernel_rem_pio2+0x314>)
 801a34e:	ec51 0b10 	vmov	r0, r1, d0
 801a352:	2200      	movs	r2, #0
 801a354:	f7eb faae 	bl	80058b4 <__aeabi_dmul>
 801a358:	4602      	mov	r2, r0
 801a35a:	460b      	mov	r3, r1
 801a35c:	4630      	mov	r0, r6
 801a35e:	4639      	mov	r1, r7
 801a360:	f7eb f8f0 	bl	8005544 <__aeabi_dsub>
 801a364:	460f      	mov	r7, r1
 801a366:	4606      	mov	r6, r0
 801a368:	f7eb fd54 	bl	8005e14 <__aeabi_d2iz>
 801a36c:	9002      	str	r0, [sp, #8]
 801a36e:	f7eb fa37 	bl	80057e0 <__aeabi_i2d>
 801a372:	4602      	mov	r2, r0
 801a374:	460b      	mov	r3, r1
 801a376:	4630      	mov	r0, r6
 801a378:	4639      	mov	r1, r7
 801a37a:	f7eb f8e3 	bl	8005544 <__aeabi_dsub>
 801a37e:	f1bb 0f00 	cmp.w	fp, #0
 801a382:	4606      	mov	r6, r0
 801a384:	460f      	mov	r7, r1
 801a386:	dd6c      	ble.n	801a462 <__kernel_rem_pio2+0x252>
 801a388:	f108 31ff 	add.w	r1, r8, #4294967295
 801a38c:	ab0c      	add	r3, sp, #48	@ 0x30
 801a38e:	9d02      	ldr	r5, [sp, #8]
 801a390:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a394:	f1cb 0018 	rsb	r0, fp, #24
 801a398:	fa43 f200 	asr.w	r2, r3, r0
 801a39c:	4415      	add	r5, r2
 801a39e:	4082      	lsls	r2, r0
 801a3a0:	1a9b      	subs	r3, r3, r2
 801a3a2:	aa0c      	add	r2, sp, #48	@ 0x30
 801a3a4:	9502      	str	r5, [sp, #8]
 801a3a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a3aa:	f1cb 0217 	rsb	r2, fp, #23
 801a3ae:	fa43 f902 	asr.w	r9, r3, r2
 801a3b2:	f1b9 0f00 	cmp.w	r9, #0
 801a3b6:	dd64      	ble.n	801a482 <__kernel_rem_pio2+0x272>
 801a3b8:	9b02      	ldr	r3, [sp, #8]
 801a3ba:	2200      	movs	r2, #0
 801a3bc:	3301      	adds	r3, #1
 801a3be:	9302      	str	r3, [sp, #8]
 801a3c0:	4615      	mov	r5, r2
 801a3c2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801a3c6:	4590      	cmp	r8, r2
 801a3c8:	f300 80b8 	bgt.w	801a53c <__kernel_rem_pio2+0x32c>
 801a3cc:	f1bb 0f00 	cmp.w	fp, #0
 801a3d0:	dd07      	ble.n	801a3e2 <__kernel_rem_pio2+0x1d2>
 801a3d2:	f1bb 0f01 	cmp.w	fp, #1
 801a3d6:	f000 80bf 	beq.w	801a558 <__kernel_rem_pio2+0x348>
 801a3da:	f1bb 0f02 	cmp.w	fp, #2
 801a3de:	f000 80c6 	beq.w	801a56e <__kernel_rem_pio2+0x35e>
 801a3e2:	f1b9 0f02 	cmp.w	r9, #2
 801a3e6:	d14c      	bne.n	801a482 <__kernel_rem_pio2+0x272>
 801a3e8:	4632      	mov	r2, r6
 801a3ea:	463b      	mov	r3, r7
 801a3ec:	494e      	ldr	r1, [pc, #312]	@ (801a528 <__kernel_rem_pio2+0x318>)
 801a3ee:	2000      	movs	r0, #0
 801a3f0:	f7eb f8a8 	bl	8005544 <__aeabi_dsub>
 801a3f4:	4606      	mov	r6, r0
 801a3f6:	460f      	mov	r7, r1
 801a3f8:	2d00      	cmp	r5, #0
 801a3fa:	d042      	beq.n	801a482 <__kernel_rem_pio2+0x272>
 801a3fc:	4658      	mov	r0, fp
 801a3fe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801a518 <__kernel_rem_pio2+0x308>
 801a402:	f7ff fd6d 	bl	8019ee0 <scalbn>
 801a406:	4630      	mov	r0, r6
 801a408:	4639      	mov	r1, r7
 801a40a:	ec53 2b10 	vmov	r2, r3, d0
 801a40e:	f7eb f899 	bl	8005544 <__aeabi_dsub>
 801a412:	4606      	mov	r6, r0
 801a414:	460f      	mov	r7, r1
 801a416:	e034      	b.n	801a482 <__kernel_rem_pio2+0x272>
 801a418:	4b44      	ldr	r3, [pc, #272]	@ (801a52c <__kernel_rem_pio2+0x31c>)
 801a41a:	2200      	movs	r2, #0
 801a41c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a420:	f7eb fa48 	bl	80058b4 <__aeabi_dmul>
 801a424:	f7eb fcf6 	bl	8005e14 <__aeabi_d2iz>
 801a428:	f7eb f9da 	bl	80057e0 <__aeabi_i2d>
 801a42c:	4b40      	ldr	r3, [pc, #256]	@ (801a530 <__kernel_rem_pio2+0x320>)
 801a42e:	2200      	movs	r2, #0
 801a430:	4606      	mov	r6, r0
 801a432:	460f      	mov	r7, r1
 801a434:	f7eb fa3e 	bl	80058b4 <__aeabi_dmul>
 801a438:	4602      	mov	r2, r0
 801a43a:	460b      	mov	r3, r1
 801a43c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a440:	f7eb f880 	bl	8005544 <__aeabi_dsub>
 801a444:	f7eb fce6 	bl	8005e14 <__aeabi_d2iz>
 801a448:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a44c:	f849 0b04 	str.w	r0, [r9], #4
 801a450:	4639      	mov	r1, r7
 801a452:	4630      	mov	r0, r6
 801a454:	f7eb f878 	bl	8005548 <__adddf3>
 801a458:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a45c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a460:	e75d      	b.n	801a31e <__kernel_rem_pio2+0x10e>
 801a462:	d107      	bne.n	801a474 <__kernel_rem_pio2+0x264>
 801a464:	f108 33ff 	add.w	r3, r8, #4294967295
 801a468:	aa0c      	add	r2, sp, #48	@ 0x30
 801a46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a46e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801a472:	e79e      	b.n	801a3b2 <__kernel_rem_pio2+0x1a2>
 801a474:	4b2f      	ldr	r3, [pc, #188]	@ (801a534 <__kernel_rem_pio2+0x324>)
 801a476:	2200      	movs	r2, #0
 801a478:	f7eb fca2 	bl	8005dc0 <__aeabi_dcmpge>
 801a47c:	2800      	cmp	r0, #0
 801a47e:	d143      	bne.n	801a508 <__kernel_rem_pio2+0x2f8>
 801a480:	4681      	mov	r9, r0
 801a482:	2200      	movs	r2, #0
 801a484:	2300      	movs	r3, #0
 801a486:	4630      	mov	r0, r6
 801a488:	4639      	mov	r1, r7
 801a48a:	f7eb fc7b 	bl	8005d84 <__aeabi_dcmpeq>
 801a48e:	2800      	cmp	r0, #0
 801a490:	f000 80bf 	beq.w	801a612 <__kernel_rem_pio2+0x402>
 801a494:	f108 33ff 	add.w	r3, r8, #4294967295
 801a498:	2200      	movs	r2, #0
 801a49a:	9900      	ldr	r1, [sp, #0]
 801a49c:	428b      	cmp	r3, r1
 801a49e:	da6e      	bge.n	801a57e <__kernel_rem_pio2+0x36e>
 801a4a0:	2a00      	cmp	r2, #0
 801a4a2:	f000 8089 	beq.w	801a5b8 <__kernel_rem_pio2+0x3a8>
 801a4a6:	f108 38ff 	add.w	r8, r8, #4294967295
 801a4aa:	ab0c      	add	r3, sp, #48	@ 0x30
 801a4ac:	f1ab 0b18 	sub.w	fp, fp, #24
 801a4b0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d0f6      	beq.n	801a4a6 <__kernel_rem_pio2+0x296>
 801a4b8:	4658      	mov	r0, fp
 801a4ba:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801a518 <__kernel_rem_pio2+0x308>
 801a4be:	f7ff fd0f 	bl	8019ee0 <scalbn>
 801a4c2:	f108 0301 	add.w	r3, r8, #1
 801a4c6:	00da      	lsls	r2, r3, #3
 801a4c8:	9205      	str	r2, [sp, #20]
 801a4ca:	ec55 4b10 	vmov	r4, r5, d0
 801a4ce:	aa70      	add	r2, sp, #448	@ 0x1c0
 801a4d0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801a52c <__kernel_rem_pio2+0x31c>
 801a4d4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801a4d8:	4646      	mov	r6, r8
 801a4da:	f04f 0a00 	mov.w	sl, #0
 801a4de:	2e00      	cmp	r6, #0
 801a4e0:	f280 80cf 	bge.w	801a682 <__kernel_rem_pio2+0x472>
 801a4e4:	4644      	mov	r4, r8
 801a4e6:	2c00      	cmp	r4, #0
 801a4e8:	f2c0 80fd 	blt.w	801a6e6 <__kernel_rem_pio2+0x4d6>
 801a4ec:	4b12      	ldr	r3, [pc, #72]	@ (801a538 <__kernel_rem_pio2+0x328>)
 801a4ee:	461f      	mov	r7, r3
 801a4f0:	ab70      	add	r3, sp, #448	@ 0x1c0
 801a4f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a4f6:	9306      	str	r3, [sp, #24]
 801a4f8:	f04f 0a00 	mov.w	sl, #0
 801a4fc:	f04f 0b00 	mov.w	fp, #0
 801a500:	2600      	movs	r6, #0
 801a502:	eba8 0504 	sub.w	r5, r8, r4
 801a506:	e0e2      	b.n	801a6ce <__kernel_rem_pio2+0x4be>
 801a508:	f04f 0902 	mov.w	r9, #2
 801a50c:	e754      	b.n	801a3b8 <__kernel_rem_pio2+0x1a8>
 801a50e:	bf00      	nop
	...
 801a51c:	3ff00000 	.word	0x3ff00000
 801a520:	0801ad20 	.word	0x0801ad20
 801a524:	40200000 	.word	0x40200000
 801a528:	3ff00000 	.word	0x3ff00000
 801a52c:	3e700000 	.word	0x3e700000
 801a530:	41700000 	.word	0x41700000
 801a534:	3fe00000 	.word	0x3fe00000
 801a538:	0801ace0 	.word	0x0801ace0
 801a53c:	f854 3b04 	ldr.w	r3, [r4], #4
 801a540:	b945      	cbnz	r5, 801a554 <__kernel_rem_pio2+0x344>
 801a542:	b123      	cbz	r3, 801a54e <__kernel_rem_pio2+0x33e>
 801a544:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801a548:	f844 3c04 	str.w	r3, [r4, #-4]
 801a54c:	2301      	movs	r3, #1
 801a54e:	3201      	adds	r2, #1
 801a550:	461d      	mov	r5, r3
 801a552:	e738      	b.n	801a3c6 <__kernel_rem_pio2+0x1b6>
 801a554:	1acb      	subs	r3, r1, r3
 801a556:	e7f7      	b.n	801a548 <__kernel_rem_pio2+0x338>
 801a558:	f108 32ff 	add.w	r2, r8, #4294967295
 801a55c:	ab0c      	add	r3, sp, #48	@ 0x30
 801a55e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a562:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a566:	a90c      	add	r1, sp, #48	@ 0x30
 801a568:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a56c:	e739      	b.n	801a3e2 <__kernel_rem_pio2+0x1d2>
 801a56e:	f108 32ff 	add.w	r2, r8, #4294967295
 801a572:	ab0c      	add	r3, sp, #48	@ 0x30
 801a574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a578:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a57c:	e7f3      	b.n	801a566 <__kernel_rem_pio2+0x356>
 801a57e:	a90c      	add	r1, sp, #48	@ 0x30
 801a580:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a584:	3b01      	subs	r3, #1
 801a586:	430a      	orrs	r2, r1
 801a588:	e787      	b.n	801a49a <__kernel_rem_pio2+0x28a>
 801a58a:	3401      	adds	r4, #1
 801a58c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a590:	2a00      	cmp	r2, #0
 801a592:	d0fa      	beq.n	801a58a <__kernel_rem_pio2+0x37a>
 801a594:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a596:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801a59a:	eb0d 0503 	add.w	r5, sp, r3
 801a59e:	9b06      	ldr	r3, [sp, #24]
 801a5a0:	aa20      	add	r2, sp, #128	@ 0x80
 801a5a2:	4443      	add	r3, r8
 801a5a4:	f108 0701 	add.w	r7, r8, #1
 801a5a8:	3d98      	subs	r5, #152	@ 0x98
 801a5aa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801a5ae:	4444      	add	r4, r8
 801a5b0:	42bc      	cmp	r4, r7
 801a5b2:	da04      	bge.n	801a5be <__kernel_rem_pio2+0x3ae>
 801a5b4:	46a0      	mov	r8, r4
 801a5b6:	e6a2      	b.n	801a2fe <__kernel_rem_pio2+0xee>
 801a5b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a5ba:	2401      	movs	r4, #1
 801a5bc:	e7e6      	b.n	801a58c <__kernel_rem_pio2+0x37c>
 801a5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a5c0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801a5c4:	f7eb f90c 	bl	80057e0 <__aeabi_i2d>
 801a5c8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801a890 <__kernel_rem_pio2+0x680>
 801a5cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a5d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a5d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a5d8:	46b2      	mov	sl, r6
 801a5da:	f04f 0800 	mov.w	r8, #0
 801a5de:	9b05      	ldr	r3, [sp, #20]
 801a5e0:	4598      	cmp	r8, r3
 801a5e2:	dd05      	ble.n	801a5f0 <__kernel_rem_pio2+0x3e0>
 801a5e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a5e8:	3701      	adds	r7, #1
 801a5ea:	eca5 7b02 	vstmia	r5!, {d7}
 801a5ee:	e7df      	b.n	801a5b0 <__kernel_rem_pio2+0x3a0>
 801a5f0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801a5f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801a5f8:	f7eb f95c 	bl	80058b4 <__aeabi_dmul>
 801a5fc:	4602      	mov	r2, r0
 801a5fe:	460b      	mov	r3, r1
 801a600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a604:	f7ea ffa0 	bl	8005548 <__adddf3>
 801a608:	f108 0801 	add.w	r8, r8, #1
 801a60c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a610:	e7e5      	b.n	801a5de <__kernel_rem_pio2+0x3ce>
 801a612:	f1cb 0000 	rsb	r0, fp, #0
 801a616:	ec47 6b10 	vmov	d0, r6, r7
 801a61a:	f7ff fc61 	bl	8019ee0 <scalbn>
 801a61e:	ec55 4b10 	vmov	r4, r5, d0
 801a622:	4b9d      	ldr	r3, [pc, #628]	@ (801a898 <__kernel_rem_pio2+0x688>)
 801a624:	2200      	movs	r2, #0
 801a626:	4620      	mov	r0, r4
 801a628:	4629      	mov	r1, r5
 801a62a:	f7eb fbc9 	bl	8005dc0 <__aeabi_dcmpge>
 801a62e:	b300      	cbz	r0, 801a672 <__kernel_rem_pio2+0x462>
 801a630:	4b9a      	ldr	r3, [pc, #616]	@ (801a89c <__kernel_rem_pio2+0x68c>)
 801a632:	2200      	movs	r2, #0
 801a634:	4620      	mov	r0, r4
 801a636:	4629      	mov	r1, r5
 801a638:	f7eb f93c 	bl	80058b4 <__aeabi_dmul>
 801a63c:	f7eb fbea 	bl	8005e14 <__aeabi_d2iz>
 801a640:	4606      	mov	r6, r0
 801a642:	f7eb f8cd 	bl	80057e0 <__aeabi_i2d>
 801a646:	4b94      	ldr	r3, [pc, #592]	@ (801a898 <__kernel_rem_pio2+0x688>)
 801a648:	2200      	movs	r2, #0
 801a64a:	f7eb f933 	bl	80058b4 <__aeabi_dmul>
 801a64e:	460b      	mov	r3, r1
 801a650:	4602      	mov	r2, r0
 801a652:	4629      	mov	r1, r5
 801a654:	4620      	mov	r0, r4
 801a656:	f7ea ff75 	bl	8005544 <__aeabi_dsub>
 801a65a:	f7eb fbdb 	bl	8005e14 <__aeabi_d2iz>
 801a65e:	ab0c      	add	r3, sp, #48	@ 0x30
 801a660:	f10b 0b18 	add.w	fp, fp, #24
 801a664:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801a668:	f108 0801 	add.w	r8, r8, #1
 801a66c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801a670:	e722      	b.n	801a4b8 <__kernel_rem_pio2+0x2a8>
 801a672:	4620      	mov	r0, r4
 801a674:	4629      	mov	r1, r5
 801a676:	f7eb fbcd 	bl	8005e14 <__aeabi_d2iz>
 801a67a:	ab0c      	add	r3, sp, #48	@ 0x30
 801a67c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801a680:	e71a      	b.n	801a4b8 <__kernel_rem_pio2+0x2a8>
 801a682:	ab0c      	add	r3, sp, #48	@ 0x30
 801a684:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a688:	f7eb f8aa 	bl	80057e0 <__aeabi_i2d>
 801a68c:	4622      	mov	r2, r4
 801a68e:	462b      	mov	r3, r5
 801a690:	f7eb f910 	bl	80058b4 <__aeabi_dmul>
 801a694:	4652      	mov	r2, sl
 801a696:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801a69a:	465b      	mov	r3, fp
 801a69c:	4620      	mov	r0, r4
 801a69e:	4629      	mov	r1, r5
 801a6a0:	f7eb f908 	bl	80058b4 <__aeabi_dmul>
 801a6a4:	3e01      	subs	r6, #1
 801a6a6:	4604      	mov	r4, r0
 801a6a8:	460d      	mov	r5, r1
 801a6aa:	e718      	b.n	801a4de <__kernel_rem_pio2+0x2ce>
 801a6ac:	9906      	ldr	r1, [sp, #24]
 801a6ae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801a6b2:	9106      	str	r1, [sp, #24]
 801a6b4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801a6b8:	f7eb f8fc 	bl	80058b4 <__aeabi_dmul>
 801a6bc:	4602      	mov	r2, r0
 801a6be:	460b      	mov	r3, r1
 801a6c0:	4650      	mov	r0, sl
 801a6c2:	4659      	mov	r1, fp
 801a6c4:	f7ea ff40 	bl	8005548 <__adddf3>
 801a6c8:	3601      	adds	r6, #1
 801a6ca:	4682      	mov	sl, r0
 801a6cc:	468b      	mov	fp, r1
 801a6ce:	9b00      	ldr	r3, [sp, #0]
 801a6d0:	429e      	cmp	r6, r3
 801a6d2:	dc01      	bgt.n	801a6d8 <__kernel_rem_pio2+0x4c8>
 801a6d4:	42b5      	cmp	r5, r6
 801a6d6:	dae9      	bge.n	801a6ac <__kernel_rem_pio2+0x49c>
 801a6d8:	ab48      	add	r3, sp, #288	@ 0x120
 801a6da:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801a6de:	e9c5 ab00 	strd	sl, fp, [r5]
 801a6e2:	3c01      	subs	r4, #1
 801a6e4:	e6ff      	b.n	801a4e6 <__kernel_rem_pio2+0x2d6>
 801a6e6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801a6e8:	2b02      	cmp	r3, #2
 801a6ea:	dc0b      	bgt.n	801a704 <__kernel_rem_pio2+0x4f4>
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	dc39      	bgt.n	801a764 <__kernel_rem_pio2+0x554>
 801a6f0:	d05d      	beq.n	801a7ae <__kernel_rem_pio2+0x59e>
 801a6f2:	9b02      	ldr	r3, [sp, #8]
 801a6f4:	f003 0007 	and.w	r0, r3, #7
 801a6f8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801a6fc:	ecbd 8b02 	vpop	{d8}
 801a700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a704:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801a706:	2b03      	cmp	r3, #3
 801a708:	d1f3      	bne.n	801a6f2 <__kernel_rem_pio2+0x4e2>
 801a70a:	9b05      	ldr	r3, [sp, #20]
 801a70c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801a710:	eb0d 0403 	add.w	r4, sp, r3
 801a714:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801a718:	4625      	mov	r5, r4
 801a71a:	46c2      	mov	sl, r8
 801a71c:	f1ba 0f00 	cmp.w	sl, #0
 801a720:	f1a5 0508 	sub.w	r5, r5, #8
 801a724:	dc6b      	bgt.n	801a7fe <__kernel_rem_pio2+0x5ee>
 801a726:	4645      	mov	r5, r8
 801a728:	2d01      	cmp	r5, #1
 801a72a:	f1a4 0408 	sub.w	r4, r4, #8
 801a72e:	f300 8087 	bgt.w	801a840 <__kernel_rem_pio2+0x630>
 801a732:	9c05      	ldr	r4, [sp, #20]
 801a734:	ab48      	add	r3, sp, #288	@ 0x120
 801a736:	441c      	add	r4, r3
 801a738:	2000      	movs	r0, #0
 801a73a:	2100      	movs	r1, #0
 801a73c:	f1b8 0f01 	cmp.w	r8, #1
 801a740:	f300 809c 	bgt.w	801a87c <__kernel_rem_pio2+0x66c>
 801a744:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801a748:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801a74c:	f1b9 0f00 	cmp.w	r9, #0
 801a750:	f040 80a6 	bne.w	801a8a0 <__kernel_rem_pio2+0x690>
 801a754:	9b04      	ldr	r3, [sp, #16]
 801a756:	e9c3 7800 	strd	r7, r8, [r3]
 801a75a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801a75e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a762:	e7c6      	b.n	801a6f2 <__kernel_rem_pio2+0x4e2>
 801a764:	9d05      	ldr	r5, [sp, #20]
 801a766:	ab48      	add	r3, sp, #288	@ 0x120
 801a768:	441d      	add	r5, r3
 801a76a:	4644      	mov	r4, r8
 801a76c:	2000      	movs	r0, #0
 801a76e:	2100      	movs	r1, #0
 801a770:	2c00      	cmp	r4, #0
 801a772:	da35      	bge.n	801a7e0 <__kernel_rem_pio2+0x5d0>
 801a774:	f1b9 0f00 	cmp.w	r9, #0
 801a778:	d038      	beq.n	801a7ec <__kernel_rem_pio2+0x5dc>
 801a77a:	4602      	mov	r2, r0
 801a77c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a780:	9c04      	ldr	r4, [sp, #16]
 801a782:	e9c4 2300 	strd	r2, r3, [r4]
 801a786:	4602      	mov	r2, r0
 801a788:	460b      	mov	r3, r1
 801a78a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801a78e:	f7ea fed9 	bl	8005544 <__aeabi_dsub>
 801a792:	ad4a      	add	r5, sp, #296	@ 0x128
 801a794:	2401      	movs	r4, #1
 801a796:	45a0      	cmp	r8, r4
 801a798:	da2b      	bge.n	801a7f2 <__kernel_rem_pio2+0x5e2>
 801a79a:	f1b9 0f00 	cmp.w	r9, #0
 801a79e:	d002      	beq.n	801a7a6 <__kernel_rem_pio2+0x596>
 801a7a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a7a4:	4619      	mov	r1, r3
 801a7a6:	9b04      	ldr	r3, [sp, #16]
 801a7a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a7ac:	e7a1      	b.n	801a6f2 <__kernel_rem_pio2+0x4e2>
 801a7ae:	9c05      	ldr	r4, [sp, #20]
 801a7b0:	ab48      	add	r3, sp, #288	@ 0x120
 801a7b2:	441c      	add	r4, r3
 801a7b4:	2000      	movs	r0, #0
 801a7b6:	2100      	movs	r1, #0
 801a7b8:	f1b8 0f00 	cmp.w	r8, #0
 801a7bc:	da09      	bge.n	801a7d2 <__kernel_rem_pio2+0x5c2>
 801a7be:	f1b9 0f00 	cmp.w	r9, #0
 801a7c2:	d002      	beq.n	801a7ca <__kernel_rem_pio2+0x5ba>
 801a7c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a7c8:	4619      	mov	r1, r3
 801a7ca:	9b04      	ldr	r3, [sp, #16]
 801a7cc:	e9c3 0100 	strd	r0, r1, [r3]
 801a7d0:	e78f      	b.n	801a6f2 <__kernel_rem_pio2+0x4e2>
 801a7d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a7d6:	f7ea feb7 	bl	8005548 <__adddf3>
 801a7da:	f108 38ff 	add.w	r8, r8, #4294967295
 801a7de:	e7eb      	b.n	801a7b8 <__kernel_rem_pio2+0x5a8>
 801a7e0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801a7e4:	f7ea feb0 	bl	8005548 <__adddf3>
 801a7e8:	3c01      	subs	r4, #1
 801a7ea:	e7c1      	b.n	801a770 <__kernel_rem_pio2+0x560>
 801a7ec:	4602      	mov	r2, r0
 801a7ee:	460b      	mov	r3, r1
 801a7f0:	e7c6      	b.n	801a780 <__kernel_rem_pio2+0x570>
 801a7f2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801a7f6:	f7ea fea7 	bl	8005548 <__adddf3>
 801a7fa:	3401      	adds	r4, #1
 801a7fc:	e7cb      	b.n	801a796 <__kernel_rem_pio2+0x586>
 801a7fe:	ed95 7b00 	vldr	d7, [r5]
 801a802:	ed8d 7b00 	vstr	d7, [sp]
 801a806:	ed95 7b02 	vldr	d7, [r5, #8]
 801a80a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a80e:	ec53 2b17 	vmov	r2, r3, d7
 801a812:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a816:	f7ea fe97 	bl	8005548 <__adddf3>
 801a81a:	4602      	mov	r2, r0
 801a81c:	460b      	mov	r3, r1
 801a81e:	4606      	mov	r6, r0
 801a820:	460f      	mov	r7, r1
 801a822:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a826:	f7ea fe8d 	bl	8005544 <__aeabi_dsub>
 801a82a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a82e:	f7ea fe8b 	bl	8005548 <__adddf3>
 801a832:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a836:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801a83a:	e9c5 6700 	strd	r6, r7, [r5]
 801a83e:	e76d      	b.n	801a71c <__kernel_rem_pio2+0x50c>
 801a840:	ed94 7b00 	vldr	d7, [r4]
 801a844:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801a848:	ec51 0b17 	vmov	r0, r1, d7
 801a84c:	4652      	mov	r2, sl
 801a84e:	465b      	mov	r3, fp
 801a850:	ed8d 7b00 	vstr	d7, [sp]
 801a854:	f7ea fe78 	bl	8005548 <__adddf3>
 801a858:	4602      	mov	r2, r0
 801a85a:	460b      	mov	r3, r1
 801a85c:	4606      	mov	r6, r0
 801a85e:	460f      	mov	r7, r1
 801a860:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a864:	f7ea fe6e 	bl	8005544 <__aeabi_dsub>
 801a868:	4652      	mov	r2, sl
 801a86a:	465b      	mov	r3, fp
 801a86c:	f7ea fe6c 	bl	8005548 <__adddf3>
 801a870:	3d01      	subs	r5, #1
 801a872:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a876:	e9c4 6700 	strd	r6, r7, [r4]
 801a87a:	e755      	b.n	801a728 <__kernel_rem_pio2+0x518>
 801a87c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a880:	f7ea fe62 	bl	8005548 <__adddf3>
 801a884:	f108 38ff 	add.w	r8, r8, #4294967295
 801a888:	e758      	b.n	801a73c <__kernel_rem_pio2+0x52c>
 801a88a:	bf00      	nop
 801a88c:	f3af 8000 	nop.w
	...
 801a898:	41700000 	.word	0x41700000
 801a89c:	3e700000 	.word	0x3e700000
 801a8a0:	9b04      	ldr	r3, [sp, #16]
 801a8a2:	9a04      	ldr	r2, [sp, #16]
 801a8a4:	601f      	str	r7, [r3, #0]
 801a8a6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801a8aa:	605c      	str	r4, [r3, #4]
 801a8ac:	609d      	str	r5, [r3, #8]
 801a8ae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801a8b2:	60d3      	str	r3, [r2, #12]
 801a8b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a8b8:	6110      	str	r0, [r2, #16]
 801a8ba:	6153      	str	r3, [r2, #20]
 801a8bc:	e719      	b.n	801a6f2 <__kernel_rem_pio2+0x4e2>
 801a8be:	bf00      	nop

0801a8c0 <floor>:
 801a8c0:	ec51 0b10 	vmov	r0, r1, d0
 801a8c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8cc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801a8d0:	2e13      	cmp	r6, #19
 801a8d2:	460c      	mov	r4, r1
 801a8d4:	4605      	mov	r5, r0
 801a8d6:	4680      	mov	r8, r0
 801a8d8:	dc34      	bgt.n	801a944 <floor+0x84>
 801a8da:	2e00      	cmp	r6, #0
 801a8dc:	da17      	bge.n	801a90e <floor+0x4e>
 801a8de:	a332      	add	r3, pc, #200	@ (adr r3, 801a9a8 <floor+0xe8>)
 801a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8e4:	f7ea fe30 	bl	8005548 <__adddf3>
 801a8e8:	2200      	movs	r2, #0
 801a8ea:	2300      	movs	r3, #0
 801a8ec:	f7eb fa72 	bl	8005dd4 <__aeabi_dcmpgt>
 801a8f0:	b150      	cbz	r0, 801a908 <floor+0x48>
 801a8f2:	2c00      	cmp	r4, #0
 801a8f4:	da55      	bge.n	801a9a2 <floor+0xe2>
 801a8f6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801a8fa:	432c      	orrs	r4, r5
 801a8fc:	2500      	movs	r5, #0
 801a8fe:	42ac      	cmp	r4, r5
 801a900:	4c2b      	ldr	r4, [pc, #172]	@ (801a9b0 <floor+0xf0>)
 801a902:	bf08      	it	eq
 801a904:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801a908:	4621      	mov	r1, r4
 801a90a:	4628      	mov	r0, r5
 801a90c:	e023      	b.n	801a956 <floor+0x96>
 801a90e:	4f29      	ldr	r7, [pc, #164]	@ (801a9b4 <floor+0xf4>)
 801a910:	4137      	asrs	r7, r6
 801a912:	ea01 0307 	and.w	r3, r1, r7
 801a916:	4303      	orrs	r3, r0
 801a918:	d01d      	beq.n	801a956 <floor+0x96>
 801a91a:	a323      	add	r3, pc, #140	@ (adr r3, 801a9a8 <floor+0xe8>)
 801a91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a920:	f7ea fe12 	bl	8005548 <__adddf3>
 801a924:	2200      	movs	r2, #0
 801a926:	2300      	movs	r3, #0
 801a928:	f7eb fa54 	bl	8005dd4 <__aeabi_dcmpgt>
 801a92c:	2800      	cmp	r0, #0
 801a92e:	d0eb      	beq.n	801a908 <floor+0x48>
 801a930:	2c00      	cmp	r4, #0
 801a932:	bfbe      	ittt	lt
 801a934:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801a938:	4133      	asrlt	r3, r6
 801a93a:	18e4      	addlt	r4, r4, r3
 801a93c:	ea24 0407 	bic.w	r4, r4, r7
 801a940:	2500      	movs	r5, #0
 801a942:	e7e1      	b.n	801a908 <floor+0x48>
 801a944:	2e33      	cmp	r6, #51	@ 0x33
 801a946:	dd0a      	ble.n	801a95e <floor+0x9e>
 801a948:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801a94c:	d103      	bne.n	801a956 <floor+0x96>
 801a94e:	4602      	mov	r2, r0
 801a950:	460b      	mov	r3, r1
 801a952:	f7ea fdf9 	bl	8005548 <__adddf3>
 801a956:	ec41 0b10 	vmov	d0, r0, r1
 801a95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a95e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801a962:	f04f 37ff 	mov.w	r7, #4294967295
 801a966:	40df      	lsrs	r7, r3
 801a968:	4207      	tst	r7, r0
 801a96a:	d0f4      	beq.n	801a956 <floor+0x96>
 801a96c:	a30e      	add	r3, pc, #56	@ (adr r3, 801a9a8 <floor+0xe8>)
 801a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a972:	f7ea fde9 	bl	8005548 <__adddf3>
 801a976:	2200      	movs	r2, #0
 801a978:	2300      	movs	r3, #0
 801a97a:	f7eb fa2b 	bl	8005dd4 <__aeabi_dcmpgt>
 801a97e:	2800      	cmp	r0, #0
 801a980:	d0c2      	beq.n	801a908 <floor+0x48>
 801a982:	2c00      	cmp	r4, #0
 801a984:	da0a      	bge.n	801a99c <floor+0xdc>
 801a986:	2e14      	cmp	r6, #20
 801a988:	d101      	bne.n	801a98e <floor+0xce>
 801a98a:	3401      	adds	r4, #1
 801a98c:	e006      	b.n	801a99c <floor+0xdc>
 801a98e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801a992:	2301      	movs	r3, #1
 801a994:	40b3      	lsls	r3, r6
 801a996:	441d      	add	r5, r3
 801a998:	4545      	cmp	r5, r8
 801a99a:	d3f6      	bcc.n	801a98a <floor+0xca>
 801a99c:	ea25 0507 	bic.w	r5, r5, r7
 801a9a0:	e7b2      	b.n	801a908 <floor+0x48>
 801a9a2:	2500      	movs	r5, #0
 801a9a4:	462c      	mov	r4, r5
 801a9a6:	e7af      	b.n	801a908 <floor+0x48>
 801a9a8:	8800759c 	.word	0x8800759c
 801a9ac:	7e37e43c 	.word	0x7e37e43c
 801a9b0:	bff00000 	.word	0xbff00000
 801a9b4:	000fffff 	.word	0x000fffff

0801a9b8 <_init>:
 801a9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9ba:	bf00      	nop
 801a9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a9be:	bc08      	pop	{r3}
 801a9c0:	469e      	mov	lr, r3
 801a9c2:	4770      	bx	lr

0801a9c4 <_fini>:
 801a9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9c6:	bf00      	nop
 801a9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a9ca:	bc08      	pop	{r3}
 801a9cc:	469e      	mov	lr, r3
 801a9ce:	4770      	bx	lr
